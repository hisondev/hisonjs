{"version":3,"file":"hisonjs.bundle.js","mappings":"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","sources":["webpack://hisonjs/webpack/universalModuleDefinition","webpack://hisonjs/webpack/bootstrap","webpack://hisonjs/./src/index.ts","webpack://hisonjs/webpack/runtime/define property getters","webpack://hisonjs/webpack/runtime/hasOwnProperty shorthand","webpack://hisonjs/./src/hisonjs.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hisonjs\"] = factory();\n\telse\n\t\troot[\"hisonjs\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","/**\r\n * The `Hison` object serves as the central interface for the `hisondev` solution, \r\n * providing a comprehensive set of tools for handling configuration, security, \r\n * data manipulation, and communication.\r\n *\r\n * The `Hison` object is designed to streamline development by offering:\r\n * - **Configuration Management**: Modify settings dynamically using setter methods.\r\n * - **Security Features**: Control access, enforce restrictions, and prevent unauthorized modifications.\r\n * - **Utility Functions**: Validate and process data using `hison.utils`.\r\n * - **Data Handling**: Utilize structured models for data storage and transformation.\r\n * - **Communication Support**: Simplify API requests with promise-based networking.\r\n *\r\n * ### Core Modules\r\n *\r\n * The `Hison` solution consists of the following primary components:\r\n *\r\n * - **hison.utils**: Provides various utility functions for data validation, formatting, and conversion.\r\n * - **hison.shield**: Implements security measures, including access control and developer tool restrictions.\r\n * - **hison.data**: Offers structured storage and transformation via `DataWrapper` and `DataModel`.\r\n * - **hison.link**: Enables promise-based communication and API request handling.\r\n *\r\n * ---\r\n * ### Object Creation and Encapsulation\r\n * - The `Hison` object is instantiated via the `createHison()` function, encapsulating its implementation within a closure.\r\n * - This design pattern ensures that internal states remain private while exposing necessary functionalities.\r\n * - The returned object includes a set of methods that allow developers to interact with `Hison` safely and efficiently.\r\n *\r\n * ---\r\n * ### Customization and Configuration\r\n *\r\n * `Hison` provides setter methods to modify `CustomOption` properties, allowing developers to configure behavior dynamically.\r\n *\r\n * ### Example: Updating Date and Time Formats\r\n * ```typescript\r\n * hison.setDateFormat(\"MM/dd/yyyy\");\r\n * hison.setTimeFormat(\"HH:mm:ss\");\r\n * hison.setDatetimeFormat(\"MM/dd/yyyy HH:mm\");\r\n * ```\r\n *\r\n * ### Example: Adjusting Character Encoding Byte Sizes\r\n * ```typescript\r\n * hison.setCharByteLess2047(3);\r\n * hison.setCharByteLess65535(4);\r\n * hison.setCharByteGreater65535(5);\r\n * ```\r\n *\r\n * These configurations ensure compatibility with different project requirements, encoding formats, and locale settings.\r\n *\r\n * ---\r\n * ### Security Features\r\n *\r\n * The `hison.shield` module provides multiple layers of security, including:\r\n * - **Object Freezing** (`setIsFreeze(true)`) to prevent modifications.\r\n * - **Access Control by URL** (`setShieldURL(url)`) to restrict unauthorized entry.\r\n * - **IP-Based Access Restrictions** (`setExposeIpList(ipList)`) for controlled access.\r\n * - **Developer Tool Blocking** (`setIsPossibleOpenDevTool(false)`) to prevent debugging exploits.\r\n *\r\n * Example:\r\n * ```typescript\r\n * hison.setIsFreeze(true);\r\n * hison.setShieldURL(\"https://secure.example.com\");\r\n * hison.setExposeIpList([\"192.168.1.1\", \"10.0.0.2\"]);\r\n * ```\r\n *\r\n * ---\r\n * ### Utility Functions (`hison.utils`)\r\n *\r\n * The `utils` module offers a variety of helper functions for validation, formatting, and data manipulation:\r\n *\r\n * ### String Validation & Manipulation\r\n * ```typescript\r\n * hison.utils.isAlpha(\"HelloWorld\"); // true\r\n * hison.utils.getLpad(\"123\", \"0\", 5); // \"00123\"\r\n * ```\r\n *\r\n * ### Number Formatting & Rounding\r\n * ```typescript\r\n * hison.utils.getRound(12.3456, 2); // 12.35\r\n * hison.utils.getNumberFormat(1234.5678, \"#,###.00\"); // \"1,234.57\"\r\n * ```\r\n *\r\n * ### Date Processing\r\n * ```typescript\r\n * hison.utils.getDateWithFormat(\"2025-02-05\", \"MMMM dd, yyyy\"); // \"February 5, 2025\"\r\n * ```\r\n *\r\n * ---\r\n * ### Data Handling (`hison.data`)\r\n *\r\n * The `data` module provides structured storage via `DataWrapper` and `DataModel`:\r\n *\r\n * ```typescript\r\n * const wrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\r\n * console.log(wrapper.getString(\"name\")); // \"Alice\"\r\n *\r\n * const model = new hison.data.DataModel([\r\n *     { id: 1, name: \"Alice\" },\r\n *     { id: 2, name: \"Bob\" }\r\n * ]);\r\n * console.log(model.getValue(0, \"name\")); // \"Alice\"\r\n * ```\r\n *\r\n * ---\r\n * ### API Communication (`hison.link`)\r\n *\r\n * The `link` module simplifies API interactions with promise-based requests:\r\n *\r\n * ```typescript\r\n * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\r\n * apiPost.call(new hison.data.DataWrapper({ username: \"Alice\" })).then(response => {\r\n *     console.log(response.data);\r\n * });\r\n * ```\r\n *\r\n * The `hison.link` module also supports caching and WebSocket integration.\r\n *\r\n * ---\r\n * ### Summary\r\n *\r\n * The `Hison` object provides a robust and flexible framework for managing configurations, security, utilities, structured data, and communication.\r\n * It is designed to improve development efficiency while offering customization and security controls.\r\n */\r\nexport interface Hison {\r\n    //====================================================================================\r\n    //option utils\r\n    //====================================================================================\r\n    /**\r\n     * Sets the default format for displaying dates.\r\n     *\r\n     * This method updates the `dateFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting date values.\r\n     *\r\n     * - The new format will be applied globally to all date-related operations.\r\n     * - Default value: `'yyyy-MM-dd'`\r\n     * - Example output after setting format: `'02/04/2025'` (for `'MM/dd/yyyy'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`dateFormat`**: Defines the default date format.\r\n     *   - Default: `'yyyy-MM-dd'`\r\n     *   - Example output: `'2025-02-04'`\r\n     *\r\n     * @param str The new date format string.\r\n     */\r\n    setDateFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying time.\r\n     *\r\n     * This method updates the `timeFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting time values.\r\n     *\r\n     * - The new format will be applied globally to all time-related operations.\r\n     * - Default value: `'hh:mm:ss'`\r\n     * - Example output after setting format: `'14:30'` (for `'HH:mm'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`timeFormat`**: Defines the default time format.\r\n     *   - Default: `'hh:mm:ss'`\r\n     *   - Example output: `'14:30:15'`\r\n     *\r\n     * @param str The new time format string.\r\n     */\r\n    setTimeFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying date and time.\r\n     *\r\n     * This method updates the `datetimeFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting datetime values.\r\n     *\r\n     * - The new format will be applied globally to all datetime-related operations.\r\n     * - Default value: `'yyyy-MM-dd hh:mm:ss'`\r\n     * - Example output after setting format: `'02/04/2025 14:30'` (for `'MM/dd/yyyy HH:mm'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`datetimeFormat`**: Defines the default date-time format.\r\n     *   - Default: `'yyyy-MM-dd hh:mm:ss'`\r\n     *   - Example output: `'2025-02-04 14:30:15'`\r\n     *\r\n     * @param str The new datetime format string.\r\n     */\r\n    setDatetimeFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying the year.\r\n     *\r\n     * This method updates the `yearFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting year values.\r\n     *\r\n     * - The new format will be applied globally to all year-related operations.\r\n     * - Default value: `'yyyy'`\r\n     * - Example output after setting format: `'25'` (for `'yy'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`yearFormat`**: Defines the default year format.\r\n     *   - Default: `'yyyy'`\r\n     *   - Example output: `'2025'`\r\n     *\r\n     * @param str The new year format string.\r\n     */\r\n    setYearFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying the month.\r\n     *\r\n     * This method updates the `monthFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting month values.\r\n     *\r\n     * - The new format will be applied globally to all month-related operations.\r\n     * - Default value: `'M'`\r\n     * - Example output after setting format: `'02'` (for `'MM'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`monthFormat`**: Defines the default month format.\r\n     *   - Default: `'M'`\r\n     *   - Example output: `'2'` (for February)\r\n     *\r\n     * @param str The new month format string.\r\n     */\r\n    setMonthFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying the full month name.\r\n     *\r\n     * This method updates the `monthNameFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting month names.\r\n     *\r\n     * - The new format will be applied globally to all month-related operations.\r\n     * - Default value: `'MMMM'`\r\n     * - Example output after setting format: `'Feb'` (for `'MMM'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`monthNameFormat`**: Defines the default full month name format.\r\n     *   - Default: `'MMMM'`\r\n     *   - Example output: `'February'`\r\n     *\r\n     * @param str The new full month name format string.\r\n     */\r\n    setMonthNameFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying year and month.\r\n     *\r\n     * This method updates the `yearMonthFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting year-month values.\r\n     *\r\n     * - The new format will be applied globally to all year-month-related operations.\r\n     * - Default value: `'yyyy-MM'`\r\n     * - Example output after setting format: `'02/2025'` (for `'MM/yyyy'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`yearMonthFormat`**: Defines the default year and month format.\r\n     *   - Default: `'yyyy-MM'`\r\n     *   - Example output: `'2025-02'`\r\n     *\r\n     * @param str The new year-month format string.\r\n     */\r\n    setYearMonthFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying the day of the month.\r\n     *\r\n     * This method updates the `dayFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting day values.\r\n     *\r\n     * - The new format will be applied globally to all day-related operations.\r\n     * - Default value: `'d'`\r\n     * - Example output after setting format: `'04'` (for `'dd'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`dayFormat`**: Defines the default day format.\r\n     *   - Default: `'d'`\r\n     *   - Example output: `'4'` (for the 4th day of the month)\r\n     *\r\n     * @param str The new day format string.\r\n     */\r\n    setDayFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying the day of the week.\r\n     *\r\n     * This method updates the `dayOfWeekFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting day-of-week values.\r\n     *\r\n     * - The new format will be applied globally to all day-of-week-related operations.\r\n     * - Default value: `'d'`\r\n     * - Example output after setting format: `'Wed'` (for `'EEE'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`dayOfWeekFormat`**: Defines the default day-of-week format.\r\n     *   - Default: `'d'`\r\n     *   - Example output: `'3'` (where 3 represents Wednesday depending on locale settings)\r\n     *\r\n     * @param str The new day-of-week format string.\r\n     */\r\n    setDayOfWeekFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying the hour.\r\n     *\r\n     * This method updates the `hourFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting hour values.\r\n     *\r\n     * - The new format will be applied globally to all hour-related operations.\r\n     * - Default value: `'h'`\r\n     * - Example output after setting format: `'14'` (for `'HH'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`hourFormat`**: Defines the default hour format.\r\n     *   - Default: `'h'`\r\n     *   - Example output: `'2'` (for 2 AM or 2 PM, depending on the time format setting)\r\n     *\r\n     * @param str The new hour format string.\r\n     */\r\n    setHourFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying the hour and minute.\r\n     *\r\n     * This method updates the `hourMinuteFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting time values.\r\n     *\r\n     * - The new format will be applied globally to all hour-minute-related operations.\r\n     * - Default value: `'hh:mm'`\r\n     * - Example output after setting format: `'14:30'` (for `'HH:mm'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`hourMinuteFormat`**: Defines the default hour-minute format.\r\n     *   - Default: `'hh:mm'`\r\n     *   - Example output: `'02:30'` (for 2:30 AM or PM, depending on the time format setting)\r\n     *\r\n     * @param str The new hour-minute format string.\r\n     */\r\n    setHourMinuteFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying the minute.\r\n     *\r\n     * This method updates the `minuteFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting minute values.\r\n     *\r\n     * - The new format will be applied globally to all minute-related operations.\r\n     * - Default value: `'m'`\r\n     * - Example output after setting format: `'05'` (for `'mm'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`minuteFormat`**: Defines the default minute format.\r\n     *   - Default: `'m'`\r\n     *   - Example output: `'5'` (for the 5th minute of the hour)\r\n     *\r\n     * @param str The new minute format string.\r\n     */\r\n    setMinuteFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying the second.\r\n     *\r\n     * This method updates the `secondFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for parsing and formatting second values.\r\n     *\r\n     * - The new format will be applied globally to all second-related operations.\r\n     * - Default value: `'s'`\r\n     * - Example output after setting format: `'09'` (for `'ss'`)\r\n     *\r\n     * ### Related Property\r\n     * - **`secondFormat`**: Defines the default second format.\r\n     *   - Default: `'s'`\r\n     *   - Example output: `'45'` (for the 45th second of the minute)\r\n     *\r\n     * @param str The new second format string.\r\n     */\r\n    setSecondFormat(str: string): void;\r\n    /**\r\n     * Sets the default format for displaying numbers.\r\n     *\r\n     * This method updates the `numberFormat` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution for formatting numeric values.\r\n     *\r\n     * - The new format will be applied globally to all number-related operations.\r\n     * - Default value: `\"#,##0.##\"`\r\n     * - Example output after setting format: `\"1.234,56\"` (for `\"#.###,##\"` in European style)\r\n     *\r\n     * ### Related Property\r\n     * - **`numberFormat`**: Defines the default number format.\r\n     *   - Default: `\"#,##0.##\"`\r\n     *   - Example output: `\"1,234.56\"` (for the number `1234.56`)\r\n     *\r\n     * @param str The new number format string.\r\n     */\r\n    setNumberFormat(str: string): void;\r\n    /**\r\n     * Sets the byte size for characters with a char code less than or equal to `0x7FF`.\r\n     *\r\n     * This method updates the `LESSOREQ_0X7FF_BYTE` property in `customOption`, \r\n     * which determines the number of bytes required to encode characters in this range.\r\n     *\r\n     * - The new value will be applied globally to all character encoding operations.\r\n     * - Default value: `2`\r\n     * - Example usage: `setCharByteLess2047(3);` (Changes encoding size to 3 bytes)\r\n     *\r\n     * ### Related Property\r\n     * - **`LESSOREQ_0X7FF_BYTE`**: Defines the byte size for `charCode <= 0x7FF`.\r\n     *   - Default: `2`\r\n     *   - Represents characters with `charCode <= 0x7FF`\r\n     *\r\n     * @param num The new byte size for characters in this range.\r\n     */\r\n    setCharByteLess2047(num: number): void;\r\n    /**\r\n     * Sets the byte size for characters with a char code less than or equal to `0xFFFF`.\r\n     *\r\n     * This method updates the `LESSOREQ_0XFFFF_BYTE` property in `customOption`, \r\n     * which determines the number of bytes required to encode characters in this range.\r\n     *\r\n     * - The new value will be applied globally to all character encoding operations.\r\n     * - Default value: `3`\r\n     * - Example usage: `setCharByteLess65535(4);` (Changes encoding size to 4 bytes)\r\n     *\r\n     * ### Related Property\r\n     * - **`LESSOREQ_0XFFFF_BYTE`**: Defines the byte size for `charCode <= 0xFFFF`.\r\n     *   - Default: `3`\r\n     *   - Represents characters with `charCode <= 0xFFFF`\r\n     *\r\n     * @param num The new byte size for characters in this range.\r\n     */\r\n    setCharByteLess65535(num: number): void;\r\n    /**\r\n     * Sets the byte size for characters with a char code greater than `0xFFFF`.\r\n     *\r\n     * This method updates the `GREATER_0XFFFF_BYTE` property in `customOption`, \r\n     * which determines the number of bytes required to encode characters in this range.\r\n     *\r\n     * - The new value will be applied globally to all character encoding operations.\r\n     * - Default value: `4`\r\n     * - Example usage: `setCharByteGreater65535(5);` (Changes encoding size to 5 bytes)\r\n     *\r\n     * ### Related Property\r\n     * - **`GREATER_0XFFFF_BYTE`**: Defines the byte size for `charCode > 0xFFFF`.\r\n     *   - Default: `4`\r\n     *   - Represents characters with `charCode > 0xFFFF`\r\n     *\r\n     * @param num The new byte size for characters in this range.\r\n     */\r\n    setCharByteGreater65535(num: number): void;\r\n    /**\r\n     * Returns the currently set default date format.\r\n     *\r\n     * This method retrieves the value of `dateFormat` from `customOption`.\r\n     *\r\n     * @returns The current date format string.\r\n     */\r\n    getDateFormat(): string;\r\n    /**\r\n     * Returns the currently set default time format.\r\n     *\r\n     * This method retrieves the value of `timeFormat` from `customOption`.\r\n     *\r\n     * @returns The current time format string.\r\n     */\r\n    getTimeFormat(): string;\r\n    /**\r\n     * Returns the currently set default datetime format.\r\n     *\r\n     * This method retrieves the value of `datetimeFormat` from `customOption`.\r\n     *\r\n     * @returns The current datetime format string.\r\n     */\r\n    getDatetimeFormat(): string;\r\n    /**\r\n     * Returns the currently set default year format.\r\n     *\r\n     * This method retrieves the value of `yearFormat` from `customOption`.\r\n     *\r\n     * @returns The current year format string.\r\n     */\r\n    getYearFormat(): string;\r\n    /**\r\n     * Returns the currently set default month format.\r\n     *\r\n     * This method retrieves the value of `monthFormat` from `customOption`.\r\n     *\r\n     * @returns The current month format format string.\r\n     */\r\n    getMonthFormat(): string;\r\n    /**\r\n     * Returns the currently set default month name format.\r\n     *\r\n     * This method retrieves the value of `monthNameFormat` from `customOption`.\r\n     *\r\n     * @returns The current month name format string.\r\n     */\r\n    getMonthNameFormat(): string;\r\n    /**\r\n     * Returns the currently set default year month format.\r\n     *\r\n     * This method retrieves the value of `yearMonthFormat` from `customOption`.\r\n     *\r\n     * @returns The current year month format string.\r\n     */\r\n    getYearMonthFormat(): string;\r\n    /**\r\n     * Returns the currently set default day format.\r\n     *\r\n     * This method retrieves the value of `dayFormat` from `customOption`.\r\n     *\r\n     * @returns The current day format string.\r\n     */\r\n    getDayFormat(): string;\r\n    /**\r\n     * Returns the currently set default day of week format.\r\n     *\r\n     * This method retrieves the value of `dayOfWeekFormat` from `customOption`.\r\n     *\r\n     * @returns The current day of week format string.\r\n     */\r\n    getDayOfWeekFormat(): string;\r\n    /**\r\n     * Returns the currently set default hour format.\r\n     *\r\n     * This method retrieves the value of `hourFormat` from `customOption`.\r\n     *\r\n     * @returns The current hour format string.\r\n     */\r\n    getHourFormat(): string;\r\n    /**\r\n     * Returns the currently set default hour minute format.\r\n     *\r\n     * This method retrieves the value of `hourMinuteFormat` from `customOption`.\r\n     *\r\n     * @returns The current hour minute format string.\r\n     */\r\n    getHourMinuteFormat(): string;\r\n    /**\r\n     * Returns the currently set default mibute format.\r\n     *\r\n     * This method retrieves the value of `minuteFormat` from `customOption`.\r\n     *\r\n     * @returns The current mibute format string.\r\n     */\r\n    getMinuteFormat(): string;\r\n    /**\r\n     * Returns the currently set default second format.\r\n     *\r\n     * This method retrieves the value of `secondFormat` from `customOption`.\r\n     *\r\n     * @returns The current second format string.\r\n     */\r\n    getSecondFormat(): string;\r\n    /**\r\n     * Returns the currently set default number format.\r\n     *\r\n     * This method retrieves the value of `numberFormat` from `customOption`.\r\n     *\r\n     * @returns The current number format string.\r\n     */\r\n    getNumberFormat(): string;\r\n    /**\r\n    * Returns the currently set byte size for characters with a char code less than or equal to `0x7FF`.\r\n    *\r\n    * This method retrieves the value of `LESSOREQ_0X7FF_BYTE` from `customOption`.\r\n    *\r\n    * @returns The byte size for `charCode <= 0x7FF`.\r\n    */\r\n    getCharByteLess2047(): number;\r\n    /**\r\n    * Returns the currently set byte size for characters with a char code less than or equal to `0xFFFF`.\r\n    *\r\n    * This method retrieves the value of `LESSOREQ_0XFFFF_BYTE` from `customOption`.\r\n    *\r\n    * @returns The byte size for `charCode <= 0xFFFF`.\r\n    */\r\n    getCharByteLess65535(): number;\r\n    /**\r\n     * Returns the currently set byte size for characters with a char code greater than `0xFFFF`.\r\n     *\r\n     * This method retrieves the value of `GREATER_0XFFFF_BYTE` from `customOption`.\r\n     *\r\n     * @returns The byte size for `charCode > 0xFFFF`.\r\n     */\r\n    getCharByteGreater65535(): number;\r\n\r\n    //====================================================================================\r\n    //option shield\r\n    //====================================================================================\r\n    /**\r\n     * Sets the security service URL used to enforce access restrictions.\r\n     *\r\n     * This method updates the `shieldURL` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution to validate access to the system.\r\n     *\r\n     * - If set, the system verifies whether the current location matches the specified URL.\r\n     * - If the URL does not match, access may be restricted.\r\n     * - Default value: `\"\"` (empty string, meaning no restriction)\r\n     * - Example usage: `setShieldURL(\"https://secure.example.com\");`\r\n     *\r\n     * ### Related Property\r\n     * - **`shieldURL`**: Defines the security enforcement URL.\r\n     *   - Default: `\"\"`\r\n     *   - Used in `shield.excute(hison: Hison)` to validate URL access.\r\n     *\r\n     * @param str The new security service URL.\r\n     */\r\n    setShieldURL(str: string): void;\r\n    /**\r\n     * Sets the list of IP addresses that are allowed to bypass security restrictions.\r\n     *\r\n     * This method updates the `exposeIpList` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution to define a whitelist of trusted IPs.\r\n     *\r\n     * - Only IPs in this list will be granted access when security restrictions are enabled.\r\n     * - Default value: `[\"0:0:0:0:0:0:0:1\"]` (allows localhost)\r\n     * - Example usage: `setExposeIpList([\"192.168.1.1\", \"203.0.113.45\"]);`\r\n     *\r\n     * ### Related Property\r\n     * - **`exposeIpList`**: Defines the list of allowed IP addresses.\r\n     *   - Default: `[\"0:0:0:0:0:0:0:1\"]`\r\n     *   - Used in `shield.excute(hison: Hison)` to verify access permissions.\r\n     *\r\n     * @param arr An array of IP addresses to be added to the whitelist.\r\n     */\r\n    setExposeIpList(arr: string[]): void;\r\n    /**\r\n     * Sets whether the `Hison` instance should be frozen to prevent modifications.\r\n     *\r\n     * This method updates the `isFreeze` property in `customOption`, \r\n     * which determines whether the `Hison` object and its properties should be deeply frozen.\r\n     *\r\n     * - If `true`, `Object.freeze()` is applied to prevent modifications.\r\n     * - Default value: `true`\r\n     * - Example usage: `setIsFreeze(false);` (Allows modifications to the `Hison` instance)\r\n     *\r\n     * ### Related Property\r\n     * - **`isFreeze`**: Determines if the `Hison` object should be frozen.\r\n     *   - Default: `true`\r\n     *   - Used in `shield.excute(hison: Hison)`, where `deepFreeze(hison)` is applied.\r\n     *\r\n     * @param bool A boolean indicating whether the `Hison` instance should be frozen.\r\n     */\r\n    setIsFreeze(bool: boolean): void;\r\n    /**\r\n     * Sets whether the browser's back navigation is allowed.\r\n     *\r\n     * This method updates the `isPossibleGoBack` property in `customOption`, \r\n     * which determines if users can navigate back in their browser history.\r\n     *\r\n     * - If `false`, a mechanism is implemented to prevent the user from navigating back.\r\n     * - Default value: `false`\r\n     * - Example usage: `setIsPossibleGoBack(true);` (Allows back navigation)\r\n     *\r\n     * ### Related Property\r\n     * - **`isPossibleGoBack`**: Determines if browser back navigation is allowed.\r\n     *   - Default: `false`\r\n     *     to disable the back button.\r\n     *\r\n     * @param bool A boolean indicating whether back navigation is allowed.\r\n     */\r\n    setIsPossibleGoBack(bool: boolean): void;\r\n    /**\r\n     * Sets whether developer tools can be opened.\r\n     *\r\n     * This method updates the `isPossibleOpenDevTool` property in `customOption`, \r\n     * which determines if browser developer tools should be restricted.\r\n     *\r\n     * - If `false`, an event listener is added to detect developer mode access \r\n     *   (e.g., F12 key, browser dev tools, resizing).\r\n     * - Default value: `false`\r\n     * - Example usage: `setIsPossibleOpenDevTool(true);` (Allows developer tools to be opened)\r\n     *\r\n     * ### Related Property\r\n     * - **`isPossibleOpenDevTool`**: Determines if developer tools can be opened.\r\n     *   - Default: `false`\r\n     *\r\n     * @param bool A boolean indicating whether developer tools can be opened.\r\n     */\r\n    setIsPossibleOpenDevTool(bool: boolean): void;\r\n    /**\r\n     * Returns the currently set security service URL.\r\n     *\r\n     * This method retrieves the value of `shieldURL` from `customOption`.\r\n     *\r\n     * @returns The current security service URL.\r\n     */\r\n    getShieldURL(): string;\r\n    /**\r\n     * Returns the list of IP addresses allowed to bypass security restrictions.\r\n     *\r\n     * This method retrieves the value of `exposeIpList` from `customOption`.\r\n     *\r\n     * @returns An array of allowed IP addresses.\r\n     */\r\n    getExposeIpList(): string[];\r\n    /**\r\n     * Returns whether the `Hison` instance is frozen to prevent modifications.\r\n     *\r\n     * This method retrieves the value of `isFreeze` from `customOption`.\r\n     *\r\n     * @returns `true` if the `Hison` instance is frozen, otherwise `false`.\r\n     */\r\n    getIsFreeze(): boolean;\r\n    /**\r\n     * Returns whether browser back navigation is allowed.\r\n     *\r\n     * This method retrieves the value of `isPossibleGoBack` from `customOption`.\r\n     *\r\n     * @returns `true` if back navigation is allowed, otherwise `false`.\r\n     */\r\n    getIsPossibleGoBack(): boolean;\r\n    /**\r\n     * Returns whether developer tools can be opened.\r\n     *\r\n     * This method retrieves the value of `isPossibleOpenDevTool` from `customOption`.\r\n     *\r\n     * @returns `true` if developer tools can be opened, otherwise `false`.\r\n     */\r\n    getIsPossibleOpenDevTool(): boolean;\r\n    \r\n    //====================================================================================\r\n    //option data\r\n    //====================================================================================\r\n    /**\r\n     * Sets the function used to convert special values before they are inserted into the `DataModel`.\r\n     *\r\n     * This method updates the `convertValue` property in `customOption`, \r\n     * allowing developers to define a custom transformation for specific objects like `Date` \r\n     * before they are stored in a `DataModel`. By default, values are inserted as-is.\r\n     *\r\n     * - The new function will be applied globally to all `DataModel` insertions.\r\n     * - Default behavior: Returns the input value unchanged.\r\n     * - Example use case: Formatting `Date` objects before storage.\r\n     *\r\n     * ### Related Property\r\n     * - **`convertValue`**: Defines a function for transforming special values.\r\n     *   - Default: Returns the value unchanged.\r\n     *   - Used in `DataModel._deepCopy()` to handle non-plain objects.\r\n     *\r\n     * ### Example Usage:\r\n     * ```typescript\r\n     * setConvertValue(function(value) {\r\n     *     if (value instanceof Date) {\r\n     *         let year = value.getFullYear();\r\n     *         let month = ('0' + (value.getMonth() + 1)).slice(-2);\r\n     *         let day = ('0' + value.getDate()).slice(-2);\r\n     *         let hour = ('0' + value.getHours()).slice(-2);\r\n     *         let minute = ('0' + value.getMinutes()).slice(-2);\r\n     *         let second = ('0' + value.getSeconds()).slice(-2);\r\n     *         return `${year}-${month}-${day} ${hour}:${minute}:${second}`;\r\n     *     }\r\n     *     return value;\r\n     * });\r\n     * ```\r\n     *\r\n     * ### Notes:\r\n     * 1. Special values not processed by `convertValue` are stored in the `DataModel` as references.\r\n     *    Changes to the original object will also reflect in the `DataModel`.\r\n     * 2. Ensure the function returns the original value for all cases not explicitly handled.\r\n     *    This prevents unexpected `undefined` values in the `DataModel`.\r\n     *\r\n     * @param func The function used to transform values before they are stored in `DataModel`.\r\n     */\r\n    setConvertValue(func: ConvertValue): void;\r\n\r\n    //====================================================================================\r\n    //option link\r\n    //====================================================================================\r\n    /**\r\n     * Sets the default protocol for API communication.\r\n     *\r\n     * This method updates the `protocol` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution to construct request URLs.\r\n     *\r\n     * - The new protocol will be applied globally to all API requests.\r\n     * - Default value: `'http://'`\r\n     * - Example usage: `setProtocol(\"https://\");` (Switches API communication to HTTPS)\r\n     *\r\n     * ### Related Property\r\n     * - **`protocol`**: Defines the default protocol for API requests.\r\n     *   - Default: `'http://'`\r\n     *   - Used in `ApiLink` to construct full request URLs.\r\n     *\r\n     * @param str The new protocol string (e.g., `'http://'` or `'https://'`).\r\n     */\r\n    setProtocol(str: string): void;\r\n    /**\r\n     * Sets the default domain for API requests.\r\n     *\r\n     * This method updates the `domain` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution to construct request URLs.\r\n     *\r\n     * - The new domain will be applied globally to all API requests.\r\n     * - Default value: `'localhost:8080'`\r\n     * - Example usage: `setDomain(\"api.example.com\");` (Changes the API domain to `api.example.com`)\r\n     *\r\n     * ### Related Property\r\n     * - **`domain`**: Defines the default domain for API requests.\r\n     *   - Default: `'localhost:8080'`\r\n     *   - Used in `ApiLink` to construct full request URLs.\r\n     *\r\n     * @param str The new domain string (e.g., `'api.example.com'` or `'192.168.1.100:3000'`).\r\n     */\r\n    setDomain(str: string): void;\r\n    /**\r\n     * Sets the default controller path for API requests.\r\n     *\r\n     * This method updates the `controllerPath` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution to construct request URLs.\r\n     *\r\n     * - The new controller path will be applied globally to all API requests.\r\n     * - Default value: `'/hison-api-link'`\r\n     * - Example usage: `setControllerPath(\"/api/v1\");` (Changes the API path to `/api/v1`)\r\n     *\r\n     * ### Related Property\r\n     * - **`controllerPath`**: Defines the default API controller path.\r\n     *   - Default: `'/hison-api-link'`\r\n     *   - Used in `ApiLink` to construct full request URLs.\r\n     *\r\n     * @param str The new controller path string (e.g., `'/api'`).\r\n     */\r\n    setControllerPath(str: string): void;\r\n    /**\r\n     * Sets the default timeout duration for API requests.\r\n     *\r\n     * This method updates the `timeout` property in `customOption`, \r\n     * which determines the maximum time (in milliseconds) an API request can take before being aborted.\r\n     *\r\n     * - The new timeout will be applied globally to all API requests.\r\n     * - Default value: `10000` (10 seconds)\r\n     * - Example usage: `setTimeout(5000);` (Sets the timeout to 5 seconds)\r\n     *\r\n     * ### Related Property\r\n     * - **`timeout`**: Defines the request timeout duration in milliseconds.\r\n     *   - Default: `10000`\r\n     *\r\n     * @param num The new timeout duration in milliseconds.\r\n     */\r\n    setTimeout(num: number): void;\r\n    /**\r\n     * Sets the default protocol for WebSocket communication.\r\n     *\r\n     * This method updates the `webSocketProtocol` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution to establish WebSocket connections.\r\n     *\r\n     * - The new protocol will be applied globally to all WebSocket connections.\r\n     * - Default value: `'ws://'`\r\n     * - Example usage: `setWebSocketProtocol(\"wss://\");` (Switches WebSocket communication to a secure protocol)\r\n     *\r\n     * ### Related Property\r\n     * - **`webSocketProtocol`**: Defines the default protocol for WebSocket connections.\r\n     *   - Default: `'ws://'`\r\n     *   - Used in `ApiLink` when initializing WebSocket communication.\r\n     *\r\n     * @param str The new WebSocket protocol string (e.g., `'ws://'` or `'wss://'`).\r\n     */\r\n    setWebSocketProtocol(str: string): void;\r\n    /**\r\n     * Sets the default WebSocket endpoint for real-time communication.\r\n     *\r\n     * This method updates the `webSocketEndPoint` property in `customOption`, \r\n     * which is used throughout the `hisondev` solution to establish WebSocket connections.\r\n     *\r\n     * - The new endpoint will be applied globally to all WebSocket connections.\r\n     * - Default value: `'/hison-websocket-endpoint'`\r\n     * - Example usage: `setWebSocketEndPoint(\"/ws/data-stream\");` (Changes the WebSocket endpoint)\r\n     *\r\n     * ### Related Property\r\n     * - **`webSocketEndPoint`**: Defines the default WebSocket endpoint for API communication.\r\n     *   - Default: `'/hison-websocket-endpoint'`\r\n     *   - Used in `ApiLink` when establishing WebSocket connections.\r\n     *\r\n     * @param str The new WebSocket endpoint string (e.g., `'/ws/data-stream'` or `'/ws/notifications'`).\r\n     */\r\n    setWebSocketEndPoint(str: string): void;\r\n    /**\r\n     * Sets the caching limit for stored API responses.\r\n     *\r\n     * This method updates the `cachingLimit` property in `customOption`, \r\n     * which determines the maximum number of cached API responses before older ones are removed.\r\n     *\r\n     * - The new caching limit will be applied globally to all API request caching.\r\n     * - Default value: `10`\r\n     * - Example usage: `setCachingLimit(20);` (Increases the caching limit to 20 responses)\r\n     *\r\n     * ### Related Property\r\n     * - **`cachingLimit`**: Defines the maximum number of cached API responses.\r\n     *   - Default: `10`\r\n     *\r\n     * @param num The new caching limit.\r\n     */\r\n    setCachingLimit(num: number): void;\r\n    /**\r\n     * Returns the currently set default protocol for API communication.\r\n     *\r\n     * This method retrieves the value of `protocol` from `customOption`.\r\n     *\r\n     * @returns The current protocol string (e.g., `'http://'` or `'https://'`).\r\n     */\r\n    getProtocol(): string;\r\n    /**\r\n     * Returns the currently set default domain for API requests.\r\n     *\r\n     * This method retrieves the value of `domain` from `customOption`.\r\n     *\r\n     * @returns The current domain string.\r\n     */\r\n    getDomain(): string;\r\n    /**\r\n     * Returns the currently set default controller path for API requests.\r\n     *\r\n     * This method retrieves the value of `controllerPath` from `customOption`.\r\n     *\r\n     * @returns The current controller path string.\r\n     */\r\n    getControllerPath(): string;\r\n    /**\r\n     * Returns the currently set timeout duration for API requests.\r\n     *\r\n     * This method retrieves the value of `timeout` from `customOption`.\r\n     *\r\n     * @returns The current timeout duration in milliseconds.\r\n     */\r\n    getTimeout(): number;\r\n    /**\r\n     * Returns the currently set default protocol for WebSocket communication.\r\n     *\r\n     * This method retrieves the value of `webSocketProtocol` from `customOption`.\r\n     *\r\n     * @returns The current WebSocket protocol string (e.g., `'ws://'` or `'wss://'`).\r\n     */\r\n    getWebSocketProtocol(): string;\r\n    /**\r\n     * Returns the currently set default WebSocket endpoint.\r\n     *\r\n     * This method retrieves the value of `webSocketEndPoint` from `customOption`.\r\n     *\r\n     * @returns The current WebSocket endpoint string.\r\n     */\r\n    getWebSocketEndPoint(): string;\r\n    /**\r\n     * Returns the currently set caching limit for stored API responses.\r\n     *\r\n     * This method retrieves the value of `cachingLimit` from `customOption`.\r\n     *\r\n     * @returns The maximum number of cached API responses.\r\n     */\r\n    getCachingLimit(): number;\r\n    /**\r\n     * Sets the hook function that executes before making a `GET` request.\r\n     *\r\n     * This method updates the `beforeGetRequst` property in `customOption`, \r\n     * allowing developers to intercept or modify `GET` requests before they are sent.\r\n     *\r\n     * - If the function returns `false`, the request will be canceled.\r\n     * - The new function will be applied globally to all `GET` requests.\r\n     * - Default behavior: Returns `true`, allowing the request to proceed.\r\n     *\r\n     * ### Related Property\r\n     * - **`beforeGetRequst`**: A hook function executed before a `GET` request.\r\n     *   - Default: Returns `true`\r\n     *   - Used in `ApiGet.call()` to determine if a request should proceed.\r\n     *\r\n     * ### Example Usage:\r\n     * ```typescript\r\n     * setBeforeGetRequst((resourcePath, options) => {\r\n     *     console.log(\"GET request intercepted:\", resourcePath);\r\n     *     return resourcePath.startsWith(\"/secure/\") ? false : true;\r\n     * });\r\n     * ```\r\n     *\r\n     * @param func A function to execute before a `GET` request. Returning `false` cancels the request.\r\n     */\r\n    setBeforeGetRequst(func: BeforeGetRequst): void;\r\n    /**\r\n     * Sets the hook function that executes before making a `POST` request.\r\n     *\r\n     * This method updates the `beforePostRequst` property in `customOption`, \r\n     * allowing developers to intercept or modify `POST` requests before they are sent.\r\n     *\r\n     * - If the function returns `false`, the request will be canceled.\r\n     * - The new function will be applied globally to all `POST` requests.\r\n     * - Default behavior: Returns `true`, allowing the request to proceed.\r\n     *\r\n     * ### Related Property\r\n     * - **`beforePostRequst`**: A hook function executed before a `POST` request.\r\n     *   - Default: Returns `true`\r\n     *   - Used in `ApiPost.call()` to determine if a request should proceed.\r\n     *\r\n     * ### Example Usage:\r\n     * ```typescript\r\n     * setBeforePostRequst((requestDw, options) => {\r\n     *     console.log(\"POST request intercepted:\", requestDw);\r\n     *     return requestDw.hasOwnProperty(\"secureData\") ? false : true;\r\n     * });\r\n     * ```\r\n     *\r\n     * @param func A function to execute before a `POST` request. Returning `false` cancels the request.\r\n     */\r\n    setBeforePostRequst(func: BeforePostRequst): void;\r\n    /**\r\n     * Sets the hook function that executes before making a `PUT` request.\r\n     *\r\n     * This method updates the `beforePutRequst` property in `customOption`, \r\n     * allowing developers to intercept or modify `PUT` requests before they are sent.\r\n     *\r\n     * - If the function returns `false`, the request will be canceled.\r\n     * - The new function will be applied globally to all `PUT` requests.\r\n     * - Default behavior: Returns `true`, allowing the request to proceed.\r\n     *\r\n     * ### Related Property\r\n     * - **`beforePutRequst`**: A hook function executed before a `PUT` request.\r\n     *   - Default: Returns `true`\r\n     *   - Used in `ApiPut.call()` to determine if a request should proceed.\r\n     *\r\n     * ### Example Usage:\r\n     * ```typescript\r\n     * setBeforePutRequst((requestDw, options) => {\r\n     *     console.log(\"PUT request intercepted:\", requestDw);\r\n     *     return requestDw.hasOwnProperty(\"readOnly\") ? false : true;\r\n     * });\r\n     * ```\r\n     *\r\n     * @param func A function to execute before a `PUT` request. Returning `false` cancels the request.\r\n     */\r\n    setBeforePutRequst(func: BeforePutRequst): void;\r\n    /**\r\n     * Sets the hook function that executes before making a `PATCH` request.\r\n     *\r\n     * This method updates the `beforePatchRequst` property in `customOption`, \r\n     * allowing developers to intercept or modify `PATCH` requests before they are sent.\r\n     *\r\n     * - If the function returns `false`, the request will be canceled.\r\n     * - The new function will be applied globally to all `PATCH` requests.\r\n     * - Default behavior: Returns `true`, allowing the request to proceed.\r\n     *\r\n     * ### Related Property\r\n     * - **`beforePatchRequst`**: A hook function executed before a `PATCH` request.\r\n     *   - Default: Returns `true`\r\n     *   - Used in `ApiPatch.call()` to determine if a request should proceed.\r\n     *\r\n     * ### Example Usage:\r\n     * ```typescript\r\n     * setBeforePatchRequst((requestDw, options) => {\r\n     *     console.log(\"PATCH request intercepted:\", requestDw);\r\n     *     return requestDw.hasOwnProperty(\"lockedField\") ? false : true;\r\n     * });\r\n     * ```\r\n     *\r\n     * @param func A function to execute before a `PATCH` request. Returning `false` cancels the request.\r\n     */\r\n    setBeforePatchRequst(func: BeforePatchRequst): void;\r\n    /**\r\n     * Sets the hook function that executes before making a `DELETE` request.\r\n     *\r\n     * This method updates the `beforeDeleteRequst` property in `customOption`, \r\n     * allowing developers to intercept or modify `DELETE` requests before they are sent.\r\n     *\r\n     * - If the function returns `false`, the request will be canceled.\r\n     * - The new function will be applied globally to all `DELETE` requests.\r\n     * - Default behavior: Returns `true`, allowing the request to proceed.\r\n     *\r\n     * ### Related Property\r\n     * - **`beforeDeleteRequst`**: A hook function executed before a `DELETE` request.\r\n     *   - Default: Returns `true`\r\n     *   - Used in `ApiDelete.call()` to determine if a request should proceed.\r\n     *\r\n     * ### Example Usage:\r\n     * ```typescript\r\n     * setBeforeDeleteRequst((requestDw, options) => {\r\n     *     console.log(\"DELETE request intercepted:\", requestDw);\r\n     *     return requestDw.hasOwnProperty(\"protected\") ? false : true;\r\n     * });\r\n     * ```\r\n     *\r\n     * @param func A function to execute before a `DELETE` request. Returning `false` cancels the request.\r\n     */\r\n    setBeforeDeleteRequst(func: BeforeDeleteRequst): void;\r\n    /**\r\n     * Sets the function that intercepts and processes API responses before returning them to the caller.\r\n     *\r\n     * This method updates the `interceptApiResult` property in `customOption`, \r\n     * allowing developers to handle API responses globally before they are processed.\r\n     *\r\n     * - If the function returns `false`, the response will be ignored.\r\n     * - The new function will be applied globally to all API responses.\r\n     * - Default behavior: Returns `true`, allowing the response to be processed normally.\r\n     *\r\n     * ### Related Property\r\n     * - **`interceptApiResult`**: A hook function executed after receiving an API response.\r\n     *   - Default: Returns `true`\r\n     *   - Used in `ApiLink._request()` to determine if the response should be processed.\r\n     *\r\n     * ### Example Usage:\r\n     * ```typescript\r\n     * setInterceptApiResult((result, response) => {\r\n     *     console.log(\"API response intercepted:\", result);\r\n     *     return response.status === 200 ? true : false;\r\n     * });\r\n     * ```\r\n     *\r\n     * @param func A function to execute after receiving an API response. Returning `false` cancels further processing.\r\n     */\r\n    setInterceptApiResult(func: InterceptApiResult): void;\r\n    /**\r\n     * Sets the function that intercepts and processes API errors before returning them to the caller.\r\n     *\r\n     * This method updates the `interceptApiError` property in `customOption`, \r\n     * allowing developers to handle API errors globally before they are processed.\r\n     *\r\n     * - If the function returns `false`, the error will be ignored.\r\n     * - The new function will be applied globally to all API error responses.\r\n     * - Default behavior: Returns `true`, allowing the error to be processed normally.\r\n     *\r\n     * ### Related Property\r\n     * - **`interceptApiError`**: A hook function executed when an API request encounters an error.\r\n     *   - Default: Returns `true`\r\n     *   - Used in `ApiLink._request()` to determine if the error should be processed.\r\n     *\r\n     * ### Example Usage:\r\n     * ```typescript\r\n     * setInterceptApiError((error) => {\r\n     *     console.error(\"API error intercepted:\", error);\r\n     *     return error.message.includes(\"timeout\") ? false : true;\r\n     * });\r\n     * ```\r\n     *\r\n     * @param func A function to execute when an API error occurs. Returning `false` cancels further error handling.\r\n     */\r\n    setInterceptApiError(func: InterceptApiError): void;\r\n\r\n    //====================================================================================\r\n    //utils\r\n    //====================================================================================\r\n    /**\r\n     * Provides a collection of utility functions for validation, formatting, and data manipulation within `Hison`.\r\n     *\r\n     * The `utils` module includes a wide range of helper functions designed to simplify working with strings, numbers,\r\n     * dates, and structured data. Additionally, it integrates with `CustomOption`, allowing developers to customize\r\n     * key configurations such as date formats, numeric precision, and byte encoding rules.\r\n     *\r\n     * ---\r\n     * ### Core Features & Functionality\r\n     *\r\n     * ### 1. **Configurable Utility Behaviors**\r\n     * - Many utility functions reference properties in `CustomOption`, which can be modified using `Hison`'s `set` methods.\r\n     * - Example: `getCutByteLength()` uses `customOption.GREATER_0XFFFF_BYTE`, which can be adjusted via:\r\n     *   ```typescript\r\n     *   hison.setCharByteGreater65535(5);\r\n     *   ```\r\n     * - This approach ensures adaptability to different encoding formats (e.g., UTF-8, UTF-16, UTF-32).\r\n     *\r\n     * ### 2. **String Validation & Manipulation**\r\n     * - **Character Type Checks**: `isAlpha()`, `isNumber()`, `isEmail()`, `isURL()` validate string content.\r\n     * - **String Formatting**: `getLpad()`, `getRpad()`, `getReplaceAll()` enable flexible formatting.\r\n     * - **Encoding & Decoding**: Supports `Base64` operations with `getEncodeBase64()` and `getDecodeBase64()`.\r\n     *\r\n     * ### 3. **Numeric Operations**\r\n     * - **Rounding & Truncation**: Functions like `getCeil()`, `getFloor()`, `getRound()`, and `getTrunc()` offer fine-grained control.\r\n     * - **Number Formatting**: `getNumberFormat()` applies formatting rules, which can be adjusted using:\r\n     *   ```typescript\r\n     *   hison.setNumberFormat(\"#,###.00\");\r\n     *   ```\r\n     * - **Type Conversion**: `getToNumber()`, `getToFloat()`, `getToInteger()` ensure safe and predictable data transformation.\r\n     *\r\n     * ### 4. **Date & Time Processing**\r\n     * - **Parsing & Formatting**: Converts date/time strings to structured objects (`getDateObject()`, `getTimeObject()`).\r\n     * - **Date Arithmetic**: Supports adding and subtracting time values (`addDate()`, `getDateDiff()`).\r\n     * - **System Date/Time Retrieval**: Methods like `getSysDate()`, `getSysYear()`, and `getSysDayOfWeek()` return system values.\r\n     * - **Customizable Formats**: Date and time formats are configurable via:\r\n     *   ```typescript\r\n     *   hison.setDateFormat(\"MM/dd/yyyy\");\r\n     *   hison.setTimeFormat(\"HH:mm:ss\");\r\n     *   ```\r\n     *\r\n     * ### 5. **Data Structure Handling**\r\n     * - **Object & Array Validation**: `isArray()`, `isObject()`, and `deepCopyObject()` facilitate structured data manipulation.\r\n     * - **File Operations**: Extract metadata with `getFileExtension()` and `getFileName()`.\r\n     *\r\n     * ---\r\n     * ### Integration with `CustomOption`\r\n     * Many methods in `hison.utils` utilize configurable properties from `CustomOption.utils`. These properties can be modified\r\n     * using `Hison`'s setter methods to accommodate different project requirements.\r\n     *\r\n     * ### Example: Modifying Byte Length for Encoding\r\n     * - The default encoding size for characters is determined by:\r\n     *   - `LESSOREQ_0X7FF_BYTE` (default: `2`)\r\n     *   - `LESSOREQ_0XFFFF_BYTE` (default: `3`)\r\n     *   - `GREATER_0XFFFF_BYTE` (default: `4`)\r\n     * - These values impact functions like `getByteLength()` and `getCutByteLength()`.\r\n     * - Developers can modify these settings as follows:\r\n     *   ```typescript\r\n     *   hison.setCharByteLess2047(3);\r\n     *   hison.setCharByteLess65535(4);\r\n     *   hison.setCharByteGreater65535(5);\r\n     *   ```\r\n     *\r\n     * ---\r\n     * ### Related Utility Methods\r\n     * - `hison.utils.isAlpha(str: string): boolean` → Checks if a string contains only alphabetic characters.\r\n     * - `hison.utils.getDateWithFormat(datetime: DateTimeObject | string, format: string): string` → Formats a date.\r\n     * - `hison.utils.getByteLength(str: string): number` → Computes byte length using configurable encoding settings.\r\n     * - `hison.utils.getRound(num: number, precision: number): number` → Rounds a number to a specified precision.\r\n     *\r\n     * @example\r\n     * // Validate a string\r\n     * hison.utils.isNumber(\"12345\"); // true\r\n     *\r\n     * // Format a date using a custom format\r\n     * hison.setDateFormat(\"MM/dd/yyyy\");\r\n     * hison.utils.getDateWithFormat(\"2025-02-05\", \"MM/dd/yyyy\"); // \"02/05/2025\"\r\n     *\r\n     * // Change default encoding settings\r\n     * hison.setCharByteGreater65535(5);\r\n     * console.log(hison.utils.getByteLength(\"𐍈\")); // Uses updated byte length\r\n     */\r\n    utils: {\r\n        /**\r\n         * Checks if the given string contains only alphabetic characters (A-Z, a-z).\r\n         *\r\n         * - Returns `true` if the string consists solely of alphabetic characters.\r\n         * - Returns `false` if the string contains numbers, symbols, or is empty.\r\n         *\r\n         * @param str The string to be checked.\r\n         * @returns `true` if the string contains only alphabetic characters, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isAlpha(\"Hello\"); // true\r\n         * isAlpha(\"Hello123\"); // false\r\n         * isAlpha(\"!@#\"); // false\r\n         */\r\n        isAlpha(str: string): boolean\r\n        /**\r\n         * Checks if the given string contains only alphabetic characters (A-Z, a-z) and numbers (0-9).\r\n         *\r\n         * - Returns `true` if the string consists solely of alphabetic characters and/or numbers.\r\n         * - Returns `false` if the string contains symbols or is empty.\r\n         *\r\n         * @param str The string to be checked.\r\n         * @returns `true` if the string contains only alphabetic characters and numbers, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isAlphaNumber(\"Hello123\"); // true\r\n         * isAlphaNumber(\"Hello!\"); // false\r\n         * isAlphaNumber(\"123\"); // true\r\n         */\r\n        isAlphaNumber(str: string): boolean\r\n        /**\r\n         * Checks if the given string contains only numeric characters (0-9).\r\n         *\r\n         * - Returns `true` if the string consists solely of numbers.\r\n         * - Returns `false` if the string contains letters, symbols, or is empty.\r\n         *\r\n         * @param str The string to be checked.\r\n         * @returns `true` if the string contains only numeric characters, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isNumber(\"123456\"); // true\r\n         * isNumber(\"123a\"); // false\r\n         * isNumber(\"!@#\"); // false\r\n         */\r\n        isNumber(str: string): boolean\r\n        /**\r\n         * Checks if the given string contains only numeric characters (0-9) and symbols.\r\n         *\r\n         * - Returns `true` if the string consists solely of numbers and/or symbols.\r\n         * - Returns `false` if the string contains alphabetic characters or is empty.\r\n         *\r\n         * @param str The string to be checked.\r\n         * @returns `true` if the string contains only numeric characters and symbols, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isNumberSymbols(\"123!@#\"); // true\r\n         * isNumberSymbols(\"123ABC\"); // false\r\n         * isNumberSymbols(\"!@#$%^\"); // true\r\n         */\r\n        isNumberSymbols(str: string): boolean\r\n        /**\r\n         * Checks if the given string contains any symbols.\r\n         *\r\n         * - Returns `true` if the string contains at least one symbol.\r\n         * - Returns `false` if the string has only alphanumeric characters or is empty.\r\n         *\r\n         * @param str The string to be checked.\r\n         * @returns `true` if the string contains symbols, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isIncludeSymbols(\"Hello!\"); // true\r\n         * isIncludeSymbols(\"123\"); // false\r\n         * isIncludeSymbols(\"password@123\"); // true\r\n         */\r\n        isIncludeSymbols(str: string): boolean\r\n        /**\r\n         * Checks if the given string contains only lowercase alphabetic characters (a-z).\r\n         *\r\n         * - Returns `true` if the string consists solely of lowercase letters.\r\n         * - Returns `false` if the string contains uppercase letters, numbers, symbols, or is empty.\r\n         *\r\n         * @param str The string to be checked.\r\n         * @returns `true` if the string contains only lowercase alphabetic characters, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isLowerAlpha(\"hello\"); // true\r\n         * isLowerAlpha(\"Hello\"); // false\r\n         * isLowerAlpha(\"hello123\"); // false\r\n         */\r\n        isLowerAlpha(str: string): boolean\r\n        /**\r\n         * Checks if the given string contains only lowercase alphabetic characters (a-z) and numbers (0-9).\r\n         *\r\n         * - Returns `true` if the string consists solely of lowercase letters and/or numbers.\r\n         * - Returns `false` if the string contains uppercase letters, symbols, or is empty.\r\n         *\r\n         * @param str The string to be checked.\r\n         * @returns `true` if the string contains only lowercase letters and numbers, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isLowerAlphaAndNumber(\"hello123\"); // true\r\n         * isLowerAlphaAndNumber(\"Hello123\"); // false\r\n         * isLowerAlphaAndNumber(\"hello!\"); // false\r\n         */\r\n        isLowerAlphaAndNumber(str: string): boolean\r\n        /**\r\n         * Checks if the given string contains only uppercase alphabetic characters (A-Z).\r\n         *\r\n         * - Returns `true` if the string consists solely of uppercase letters.\r\n         * - Returns `false` if the string contains lowercase letters, numbers, symbols, or is empty.\r\n         *\r\n         * @param str The string to be checked.\r\n         * @returns `true` if the string contains only uppercase alphabetic characters, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isUpperAlpha(\"HELLO\"); // true\r\n         * isUpperAlpha(\"Hello\"); // false\r\n         * isUpperAlpha(\"HELLO123\"); // false\r\n         */\r\n        isUpperAlpha(str: string): boolean\r\n        /**\r\n         * Checks if the given string contains only uppercase alphabetic characters (A-Z) and numbers (0-9).\r\n         *\r\n         * - Returns `true` if the string consists solely of uppercase letters and/or numbers.\r\n         * - Returns `false` if the string contains lowercase letters, symbols, or is empty.\r\n         *\r\n         * @param str The string to be checked.\r\n         * @returns `true` if the string contains only uppercase letters and numbers, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isUpperAlphaNumber(\"HELLO123\"); // true\r\n         * isUpperAlphaNumber(\"Hello123\"); // false\r\n         * isUpperAlphaNumber(\"HELLO!\"); // false\r\n         */\r\n        isUpperAlphaNumber(str: string): boolean\r\n        /**\r\n         * Checks if the given value is a numeric value.\r\n         *\r\n         * - Returns `true` if the value is a finite number.\r\n         * - Returns `false` if the value is `NaN`, `Infinity`, or not a number.\r\n         *\r\n         * @param num The value to be checked.\r\n         * @returns `true` if the value is numeric, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isNumeric(123); // true\r\n         * isNumeric(\"123\"); // true\r\n         * isNumeric(\"abc\"); // false\r\n         * isNumeric(Infinity); // false\r\n         * isNumeric(NaN); // false\r\n         */\r\n        isNumeric(num: any): boolean;\r\n        /**\r\n         * Checks if the given value is an integer.\r\n         *\r\n         * - Returns `true` if the value is a finite integer.\r\n         * - Returns `false` if the value is a decimal, `NaN`, `Infinity`, or not a number.\r\n         *\r\n         * @param num The value to be checked.\r\n         * @returns `true` if the value is an integer, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isInteger(10); // true\r\n         * isInteger(\"10\"); // true\r\n         * isInteger(10.5); // false\r\n         * isInteger(\"abc\"); // false\r\n         * isInteger(Infinity); // false\r\n         */\r\n        isInteger(num: any): boolean;\r\n        /**\r\n         * Checks if the given value is a positive integer.\r\n         *\r\n         * - Returns `true` if the value is a finite integer greater than zero.\r\n         * - Returns `false` if the value is zero, a negative number, a decimal, `NaN`, `Infinity`, or not a number.\r\n         *\r\n         * @param num The value to be checked.\r\n         * @returns `true` if the value is a positive integer, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isPositiveInteger(10); // true\r\n         * isPositiveInteger(\"10\"); // true\r\n         * isPositiveInteger(0); // false\r\n         * isPositiveInteger(-5); // false\r\n         * isPositiveInteger(10.5); // false\r\n         */\r\n        isPositiveInteger(num: any): boolean;\r\n        /**\r\n         * Checks if the given value is a negative integer.\r\n         *\r\n         * - Returns `true` if the value is a finite integer less than zero.\r\n         * - Returns `false` if the value is zero, a positive number, a decimal, `NaN`, `Infinity`, or not a number.\r\n         *\r\n         * @param num The value to be checked.\r\n         * @returns `true` if the value is a negative integer, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isNegativeInteger(-10); // true\r\n         * isNegativeInteger(\"-10\"); // true\r\n         * isNegativeInteger(0); // false\r\n         * isNegativeInteger(5); // false\r\n         * isNegativeInteger(-10.5); // false\r\n         */\r\n        isNegativeInteger(num: any): boolean;\r\n        /**\r\n         * Checks if the given value is an array.\r\n         *\r\n         * - Returns `true` if the value is an array.\r\n         * - Returns `false` if the value is `null`, `undefined`, an object, or any other data type.\r\n         *\r\n         * @param arr The value to be checked.\r\n         * @returns `true` if the value is an array, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isArray([1, 2, 3]); // true\r\n         * isArray(\"Hello\"); // false\r\n         * isArray({ key: \"value\" }); // false\r\n         * isArray(null); // false\r\n         */\r\n        isArray(arr: any): boolean;\r\n        /**\r\n         * Checks if the given value is a plain object.\r\n         *\r\n         * - Returns `true` if the value is a non-null object and not an array.\r\n         * - Returns `false` if the value is `null`, an array, or any other data type.\r\n         *\r\n         * @param obj The value to be checked.\r\n         * @returns `true` if the value is a plain object, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isObject({ key: \"value\" }); // true\r\n         * isObject([1, 2, 3]); // false\r\n         * isObject(null); // false\r\n         * isObject(\"Hello\"); // false\r\n         */\r\n        isObject(obj: any): boolean;\r\n        /**\r\n         * Checks if the given value is a valid date.\r\n         *\r\n         * - Accepts a `DateObject` or a string representation of a date.\r\n         * - Returns `true` if the date is valid based on its year, month, and day.\r\n         * - Returns `false` if the date is improperly formatted or does not exist.\r\n         *\r\n         * @param date The value to be checked (as a `DateObject` or string).\r\n         * @returns `true` if the value is a valid date, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isDate(\"2024-02-29\"); // true (valid leap year date)\r\n         * isDate(\"2023-02-29\"); // false (February 29 does not exist in 2023)\r\n         * isDate({ y: 2023, M: 12, d: 31 }); // true\r\n         * isDate(\"invalid-date\"); // false\r\n         */\r\n        isDate(date: DateObject | string): boolean;\r\n        /**\r\n         * Checks if the given value is a valid time.\r\n         *\r\n         * - Accepts a `TimeObject` or a string representation of a time.\r\n         * - Returns `true` if the time consists of valid hours, minutes, and seconds.\r\n         * - Returns `false` if any part of the time is invalid or improperly formatted.\r\n         *\r\n         * @param time The value to be checked (as a `TimeObject` or string).\r\n         * @returns `true` if the value is a valid time, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isTime(\"14:30:59\"); // true\r\n         * isTime({ h: 23, m: 59, s: 59 }); // true\r\n         * isTime(\"25:00:00\"); // false (invalid hour)\r\n         * isTime(\"12:60:00\"); // false (invalid minute)\r\n         * isTime(\"12:30:61\"); // false (invalid second)\r\n         */\r\n        isTime(time: TimeObject | string): boolean;\r\n        /**\r\n         * Checks if the given value is a valid datetime.\r\n         *\r\n         * - Accepts a `DateTimeObject` or a string representation of a datetime.\r\n         * - Returns `true` if both the date and time components are valid.\r\n         * - Returns `false` if either the date or time is invalid or improperly formatted.\r\n         *\r\n         * @param datetime The value to be checked (as a `DateTimeObject` or string).\r\n         * @returns `true` if the value is a valid datetime, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isDatetime(\"2024-02-29 14:30:59\"); // true\r\n         * isDatetime({ y: 2023, M: 12, d: 31, h: 23, m: 59, s: 59 }); // true\r\n         * isDatetime(\"2023-02-29 12:00:00\"); // false (invalid date)\r\n         * isDatetime(\"2024-02-28 25:00:00\"); // false (invalid time)\r\n         */\r\n        isDatetime(datetime: DateTimeObject | string): boolean;\r\n        /**\r\n         * Checks if the given string is a valid email address.\r\n         *\r\n         * - Returns `true` if the string follows the standard email format.\r\n         * - Returns `false` if the string does not match the email pattern.\r\n         *\r\n         * @param str The string to be checked.\r\n         * @returns `true` if the string is a valid email address, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isEmail(\"user@example.com\"); // true\r\n         * isEmail(\"user.name@domain.co\"); // true\r\n         * isEmail(\"user@domain\"); // false (missing top-level domain)\r\n         * isEmail(\"invalid-email\"); // false\r\n         */\r\n        isEmail(str: string): boolean;\r\n        /**\r\n         * Checks if the given string is a valid URL.\r\n         *\r\n         * - Returns `true` if the string follows the standard URL format.\r\n         * - Returns `false` if the string does not match the URL pattern.\r\n         *\r\n         * @param urlStr The string to be checked.\r\n         * @returns `true` if the string is a valid URL, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isURL(\"https://example.com\"); // true\r\n         * isURL(\"ftp://files.server.com\"); // true\r\n         * isURL(\"www.example.com\"); // false (missing protocol)\r\n         * isURL(\"invalid-url\"); // false\r\n         */\r\n        isURL(urlStr: string): boolean;\r\n        /**\r\n         * Checks if the given string matches the specified mask pattern.\r\n         *\r\n         * - A mask defines expected character types at each position:\r\n         *   - `'A'` expects an uppercase letter (A-Z).\r\n         *   - `'a'` expects a lowercase letter (a-z).\r\n         *   - `'9'` expects a numeric digit (0-9).\r\n         *   - Any other character in the mask must match exactly.\r\n         * - Returns `true` if the string fully matches the mask pattern.\r\n         * - Returns `false` if the string does not match the mask or has a different length.\r\n         *\r\n         * @param str The string to be validated.\r\n         * @param mask The mask pattern defining expected character types.\r\n         * @returns `true` if the string matches the mask pattern, otherwise `false`.\r\n         *\r\n         * @example\r\n         * isValidMask(\"ABC123\", \"AAA999\"); // true\r\n         * isValidMask(\"abc123\", \"AAA999\"); // false (lowercase letters don't match uppercase mask)\r\n         * isValidMask(\"abc-123\", \"aaa-999\"); // true\r\n         * isValidMask(\"abcd123\", \"aaa-999\"); // false (length mismatch)\r\n         */\r\n        isValidMask(str: string, mask: string): boolean;\r\n        /**\r\n         * Extracts and returns the year, month, and day from a given date.\r\n         *\r\n         * - If the input is a `Date` object, it extracts the year, month, and day.\r\n         * - If the input is a string, it attempts to parse it in formats:\r\n         *   - `\"YYYY-MM-DD\"`\r\n         *   - `\"YYYY/MM/DD\"`\r\n         *   - `\"YYYYMMDD\"`\r\n         * - If parsing fails, it returns an object with `null` values.\r\n         *\r\n         * @param date A `Date` object or a date string in a supported format.\r\n         * @returns An object containing the year (`y`), month (`M`), and day (`d`).\r\n         *\r\n         * @example\r\n         * getDateObject(\"2024-02-05\"); // { y: 2024, M: 2, d: 5 }\r\n         * getDateObject(\"20240205\"); // { y: 2024, M: 2, d: 5 }\r\n         * getDateObject(new Date(2024, 1, 5)); // { y: 2024, M: 2, d: 5 }\r\n         * getDateObject(\"invalid\"); // { y: null, M: null, d: null }\r\n         */\r\n        getDateObject(dateStr: Date | string): DateObject;\r\n        /**\r\n         * Extracts and returns the hours, minutes, and seconds from a given time.\r\n         *\r\n         * - If the input is a `Date` object, it extracts the hour, minute, and second.\r\n         * - If the input is a string, it attempts to parse it in formats:\r\n         *   - `\"HH:MM:SS\"`\r\n         *   - `\"HHMMSS\"`\r\n         * - If the input is a datetime string (`\"YYYY-MM-DD HH:MM:SS\"`), it extracts only the time part.\r\n         * - If parsing fails, it returns an object with `null` values.\r\n         *\r\n         * @param time A `Date` object or a time string in a supported format.\r\n         * @returns An object containing the hours (`h`), minutes (`m`), and seconds (`s`).\r\n         *\r\n         * @example\r\n         * getTimeObject(\"14:30:45\"); // { h: 14, m: 30, s: 45 }\r\n         * getTimeObject(\"143045\"); // { h: 14, m: 30, s: 45 }\r\n         * getTimeObject(\"2024-02-05 14:30:45\"); // { h: 14, m: 30, s: 45 }\r\n         * getTimeObject(new Date(2024, 1, 5, 14, 30, 45)); // { h: 14, m: 30, s: 45 }\r\n         * getTimeObject(\"invalid\"); // { h: null, m: null, s: null }\r\n         */\r\n        getTimeObject(str: Date | string): TimeObject;\r\n        /**\r\n         * Extracts and returns the year, month, day, hours, minutes, and seconds from a given datetime.\r\n         *\r\n         * - If the input is a `Date` object, it extracts all date and time components.\r\n         * - If the input is a string, it attempts to parse it in formats:\r\n         *   - `\"YYYY-MM-DD HH:MM:SS\"`\r\n         *   - `\"YYYY/MM/DD HH:MM:SS\"`\r\n         *   - `\"YYYYMMDDHHMMSS\"`\r\n         * - If the input is a date-only string (`\"YYYY-MM-DD\"`), the time defaults to `00:00:00`.\r\n         * - If parsing fails, it returns `null`.\r\n         *\r\n         * @param datetime A `Date` object or a datetime string in a supported format.\r\n         * @returns An object containing the year (`y`), month (`M`), day (`d`), hours (`h`), minutes (`m`), and seconds (`s`), or `null` if parsing fails.\r\n         *\r\n         * @example\r\n         * getDatetimeObject(\"2024-02-05 14:30:45\"); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\r\n         * getDatetimeObject(\"20240205143045\"); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\r\n         * getDatetimeObject(\"2024-02-05\"); // { y: 2024, M: 2, d: 5, h: 0, m: 0, s: 0 }\r\n         * getDatetimeObject(new Date(2024, 1, 5, 14, 30, 45)); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\r\n         * getDatetimeObject(\"invalid\"); // null\r\n         */\r\n        getDatetimeObject(datetime: Date | string): DateTimeObject | null;\r\n        /**\r\n         * Adds a specified amount of time to a given date or datetime.\r\n         *\r\n         * - Accepts a `DateTimeObject`, `DateObject`, or a date string.\r\n         * - Supports adding years (`'y'`), months (`'M'`), days (`'d'`), hours (`'h'`), minutes (`'m'`), and seconds (`'s'`).\r\n         * - If `addType` is omitted or invalid, it defaults to adding days.\r\n         * - If `format` is provided, returns a formatted string; otherwise, returns a `DateTimeObject`.\r\n         *\r\n         * @param datetime The original datetime as an object or string.\r\n         * @param addValue The amount to add (positive or negative).\r\n         * @param addType The unit of time to add (`'y'`, `'M'`, `'d'`, `'h'`, `'m'`, `'s'`).\r\n         * @param format Optional format string for the output. default : 'yyyy-MM-dd' or 'yyyy-MM-dd hh:mm:ss'\r\n         * @returns The updated datetime as an object or formatted string.\r\n         *\r\n         * @example\r\n         * addDate(\"2024-02-05\", 1, \"d\"); // { y: 2024, M: 2, d: 6 }\r\n         * addDate(\"2024-02-05\", -1, \"M\"); // { y: 2024, M: 1, d: 5 }\r\n         * addDate(\"2024-02-05 14:30:00\", 2, \"h\"); // { y: 2024, M: 2, d: 5, h: 16, m: 30, s: 0 }\r\n         * addDate(\"2024-02-05\", 1, \"d\", \"yyyy-MM-dd\"); // \"2024-02-06\"\r\n         */\r\n        addDate(datetime: DateTimeObject | string, addValue: string | number, addType?: string, format?: string): DateTimeObject | string;\r\n        /**\r\n         * Calculates the difference between two dates or datetimes.\r\n         *\r\n         * - Accepts `DateTimeObject`, `DateObject`, or a string representation of a date or datetime.\r\n         * - If `diffType` is specified, it returns the difference in the given unit:\r\n         *   - `'y'`: Years\r\n         *   - `'M'`: Months\r\n         *   - `'d'`: Days\r\n         *   - `'h'`: Hours\r\n         *   - `'m'`: Minutes\r\n         *   - `'s'`: Seconds\r\n         * - If `diffType` is omitted or invalid, it defaults to calculating the difference in days.\r\n         *\r\n         * @param datetime1 The first date or datetime.\r\n         * @param datetime2 The second date or datetime.\r\n         * @param diffType The unit of difference (`'y'`, `'M'`, `'d'`, `'h'`, `'m'`, `'s'`).\r\n         * @returns The difference between the two dates in the specified unit.\r\n         *\r\n         * @example\r\n         * getDateDiff(\"2024-02-01\", \"2024-03-01\", \"M\"); // 1\r\n         * getDateDiff(\"2024-02-01\", \"2025-02-01\", \"y\"); // 1\r\n         * getDateDiff(\"2024-02-01\", \"2024-02-10\", \"d\"); // 9\r\n         * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 16:30:00\", \"h\"); // 2\r\n         * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 14:45:00\", \"m\"); // 45\r\n         * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 14:00:30\", \"s\"); // 30\r\n         */\r\n        getDateDiff(datetime1: DateTimeObject | string, datetime2: DateTimeObject | string, diffType?: string): number;\r\n        /**\r\n         * Returns the full or abbreviated name of a given month.\r\n         *\r\n         * - Accepts a month number (`1-12`) or a string representation of a number.\r\n         * - If `isFullName` is `true`, it returns the full month name (e.g., `\"January\"`).\r\n         * - If `isFullName` is `false`, it returns the abbreviated month name (e.g., `\"Jan\"`).\r\n         * - Throws an error if the input month is outside the valid range (`1-12`).\r\n         *\r\n         * @param month The month as a number (`1-12`) or a string representing a number.\r\n         * @param isFullName Determines whether to return the full name (`true`) or the abbreviated name (`false`) (default: `true`).\r\n         * @returns The full or abbreviated month name.\r\n         *\r\n         * @throws Error if the month is not between `1` and `12`.\r\n         *\r\n         * @example\r\n         * getMonthName(2); // \"February\"\r\n         * getMonthName(\"3\", false); // \"Mar\"\r\n         * getMonthName(12, true); // \"December\"\r\n         * getMonthName(0); // Throws error: \"Month must be between 1 and 12\"\r\n         */\r\n        getMonthName(month: number | string, isFullName?: boolean): string;\r\n        /**\r\n         * Formats a given date or datetime according to the specified format.\r\n         *\r\n         * - Accepts a `DateTimeObject`, `DateObject`, or a string representation of a date/datetime.\r\n         * - If no format is provided, it defaults to `CustomOption.dateFormat` for dates \r\n         *   and `CustomOption.datetimeFormat` for datetimes.\r\n         * - Supports various formats such as:\r\n         *   - `'yyyy-MM-dd'` → `\"2025-02-05\"`\r\n         *   - `'yyyy/MM/dd hh:mm:ss'` → `\"2025/02/05 14:30:45\"`\r\n         *   - `'MMMM dd, yyyy'` → `\"February 5, 2025\"`\r\n         * - Throws an error if the input date is invalid.\r\n         *\r\n         * @param datetime The date or datetime to format.\r\n         * @param format The desired output format (optional). Default: `'yyyy-MM-dd'` or `'yyyy-MM-dd hh:mm:ss'`\r\n         * @returns The formatted date/time as a string.\r\n         *\r\n         * @throws Error if the provided date is invalid.\r\n         *\r\n         * @example\r\n         * getDateWithFormat(\"2025-02-05\", \"yyyy/MM/dd\"); // \"2025/02/05\"\r\n         * getDateWithFormat(\"2025-02-05 14:30:45\", \"MMMM dd, yyyy\"); // \"February 5, 2025\"\r\n         * getDateWithFormat({ y: 2025, M: 2, d: 5 }, \"MM-dd-yyyy\"); // \"02-05-2025\"\r\n         */\r\n        getDateWithFormat(datetime: DateTimeObject | DateObject | string, format?: string): string;\r\n        /**\r\n         * Returns the day of the week for a given date.\r\n         *\r\n         * - Accepts a `DateObject` or a string representation of a date.\r\n         * - Uses `CustomOption.dayOfWeekFormat` as the default format.\r\n         * - Supports different formats for output:\r\n         *   - `'d'` → Numeric day of the week (`0-6`, where `0 = Sunday`).\r\n         *   - `'dy'` → Abbreviated English name (`\"Sun\", \"Mon\", ..., \"Sat\"`).\r\n         *   - `'day'` → Full English name (`\"Sunday\", \"Monday\", ..., \"Saturday\"`).\r\n         *   - `'kdy'` → Abbreviated Korean name (`\"일\", \"월\", ..., \"토\"`).\r\n         *   - `'kday'` → Full Korean name (`\"일요일\", \"월요일\", ..., \"토요일\"`).\r\n         * - Throws an error if the input date is invalid.\r\n         *\r\n         * @param date The date to evaluate.\r\n         * @param dayType The format of the output (optional). Default: `'d'`\r\n         * @returns The day of the week in the specified format.\r\n         *\r\n         * @throws Error if the provided date is invalid.\r\n         *\r\n         * @example\r\n         * getDayOfWeek(\"2025-02-05\", \"d\"); // \"3\" (Wednesday)\r\n         * getDayOfWeek(\"2025-02-05\", \"dy\"); // \"Wed\"\r\n         * getDayOfWeek(\"2025-02-05\", \"day\"); // \"Wednesday\"\r\n         * getDayOfWeek(\"2025-02-05\", \"kdy\"); // \"수\"\r\n         * getDayOfWeek(\"2025-02-05\", \"kday\"); // \"수요일\"\r\n         */\r\n        getDayOfWeek(date: DateObject | string, dayType?: string): string;\r\n        /**\r\n         * Returns the last day of the month for a given date.\r\n         *\r\n         * - Accepts a `DateObject` or a string representation of a date.\r\n         * - If the input is a `DateObject`, it uses the month and year from the object.\r\n         * - If the input is a string, it assumes the first day of the given month unless a full date is provided.\r\n         * - Determines the last day of the specified month by computing the last day of the next month minus one.\r\n         * - Throws an error if the input date is invalid.\r\n         *\r\n         * @param date The date or month to evaluate.\r\n         * @returns The last day of the month as a number.\r\n         *\r\n         * @throws Error if the provided date is invalid.\r\n         *\r\n         * @example\r\n         * getLastDay(\"2025-02\"); // 28 (for February 2025)\r\n         * getLastDay(\"2024-02\"); // 29 (leap year February)\r\n         * getLastDay({ y: 2025, M: 5, d: 15 }); // 31 (May has 31 days)\r\n         * getLastDay(\"2025-07-10\"); // 31 (July has 31 days)\r\n         */\r\n        getLastDay(date: DateObject | string): number;\r\n        /**\r\n         * Returns the current system year in the specified format.\r\n         *\r\n         * - Uses `CustomOption.yearFormat` as the default format.\r\n         * - Supports the following formats:\r\n         *   - `'yyyy'` → Full year (`\"2025\"`)\r\n         *   - `'yy'` → Last two digits of the year (`\"25\"`)\r\n         * - If an unsupported format is provided, it defaults to `'yyyy'`.\r\n         *\r\n         * @param format The desired output format (optional). Default: `'yyyy'`\r\n         * @returns The current year as a string in the specified format.\r\n         *\r\n         * @example\r\n         * getSysYear(); // \"2025\" (default format)\r\n         * getSysYear(\"yyyy\"); // \"2025\"\r\n         * getSysYear(\"yy\"); // \"25\"\r\n         */\r\n        getSysYear(format?: string): string;\r\n        /**\r\n         * Returns the current system month in the specified format.\r\n         *\r\n         * - Uses `CustomOption.monthFormat` as the default format.\r\n         * - Supports the following formats:\r\n         *   - `'M'` → Numeric month without leading zero (`\"2\"` for February).\r\n         *   - `'MM'` → Numeric month with leading zero (`\"02\"` for February).\r\n         *   - `'MMMM'` → Full month name (`\"February\"`).\r\n         *   - `'MMM'` → Abbreviated month name (`\"Feb\"`).\r\n         * - If an unsupported format is provided, it defaults to `'M'`.\r\n         *\r\n         * @param format The desired output format (optional). Default: `'M'`\r\n         * @returns The current month as a string in the specified format.\r\n         *\r\n         * @example\r\n         * getSysMonth(); // \"2\" (default format for February)\r\n         * getSysMonth(\"MM\"); // \"02\"\r\n         * getSysMonth(\"MMMM\"); // \"February\"\r\n         * getSysMonth(\"MMM\"); // \"Feb\"\r\n         */\r\n        getSysMonth(format?: string): string;\r\n        /**\r\n         * Returns the current system year and month in the specified format.\r\n         *\r\n         * - Uses `CustomOption.yearMonthFormat` as the default format.\r\n         * - Delegates formatting to `getDateWithFormat()` using the first day of the current month.\r\n         * - Common formats include:\r\n         *   - `'yyyy-MM'` → `\"2025-02\"`\r\n         *   - `'yyyy/MM'` → `\"2025/02\"`\r\n         *   - `'MMMM yyyy'` → `\"February 2025\"`\r\n         *   - `'MMM yyyy'` → `\"Feb 2025\"`\r\n         *\r\n         * @param format The desired output format (optional). Default: `'yyyy-MM'`\r\n         * @returns The current year and month as a formatted string.\r\n         *\r\n         * @example\r\n         * getSysYearMonth(); // \"2025-02\" (default format for February 2025)\r\n         * getSysYearMonth(\"yyyy/MM\"); // \"2025/02\"\r\n         * getSysYearMonth(\"MMMM yyyy\"); // \"February 2025\"\r\n         * getSysYearMonth(\"MMM yyyy\"); // \"Feb 2025\"\r\n         */\r\n        getSysYearMonth(format?: string): string;\r\n        /**\r\n         * Returns the current system day of the month in the specified format.\r\n         *\r\n         * - Uses `CustomOption.dayFormat` as the default format.\r\n         * - Supports the following formats:\r\n         *   - `'d'` → Day without leading zero (`\"5\"` for the 5th day of the month).\r\n         *   - `'dd'` → Day with leading zero (`\"05\"` for the 5th day of the month).\r\n         * - If an unsupported format is provided, it defaults to `'d'`.\r\n         *\r\n         * @param format The desired output format (optional). Default: `'d'`\r\n         * @returns The current day of the month as a string in the specified format.\r\n         *\r\n         * @example\r\n         * getSysDay(); // \"5\" (default format for the 5th day)\r\n         * getSysDay(\"dd\"); // \"05\"\r\n         */\r\n        getSysDay(format?: string): string;\r\n        /**\r\n         * Returns the current system day of the week in the specified format.\r\n         *\r\n         * - Uses `CustomOption.dayOfWeekFormat` as the default format.\r\n         * - Delegates formatting to `getDayOfWeek()`, which supports:\r\n         *   - `'d'` → Numeric day of the week (`0-6`, where `0 = Sunday`).\r\n         *   - `'dy'` → Abbreviated English name (`\"Sun\", \"Mon\", ..., \"Sat\"`).\r\n         *   - `'day'` → Full English name (`\"Sunday\", \"Monday\", ..., \"Saturday\"`).\r\n         *   - `'kdy'` → Abbreviated Korean name (`\"일\", \"월\", ..., \"토\"`).\r\n         *   - `'kday'` → Full Korean name (`\"일요일\", \"월요일\", ..., \"토요일\"`).\r\n         *\r\n         * @param format The desired output format (optional). Default: `'d'`\r\n         * @returns The current day of the week in the specified format.\r\n         *\r\n         * @example\r\n         * getSysDayOfWeek(); // \"3\" (default format, Wednesday)\r\n         * getSysDayOfWeek(\"dy\"); // \"Wed\"\r\n         * getSysDayOfWeek(\"day\"); // \"Wednesday\"\r\n         * getSysDayOfWeek(\"kdy\"); // \"수\"\r\n         * getSysDayOfWeek(\"kday\"); // \"수요일\"\r\n         */\r\n        getSysDayOfWeek(dayType?: string): string;\r\n        /**\r\n         * Returns the current system hour in the specified format.\r\n         *\r\n         * - Uses `CustomOption.hourFormat` as the default format.\r\n         * - Supports the following formats:\r\n         *   - `'h'` → Hour without leading zero (`\"5\"` for 5 AM/PM).\r\n         *   - `'hh'` → Hour with leading zero (`\"05\"` for 5 AM/PM).\r\n         * - If an unsupported format is provided, it defaults to `'h'`.\r\n         *\r\n         * @param format The desired output format (optional). Default: `'h'`\r\n         * @returns The current hour as a string in the specified format.\r\n         *\r\n         * @example\r\n         * getSysHour(); // \"5\" (default format)\r\n         * getSysHour(\"hh\"); // \"05\"\r\n         */\r\n        getSysHour(format?: string): string;\r\n        /**\r\n         * Returns the current system hour and minute in the specified format.\r\n         *\r\n         * - Uses `CustomOption.hourMinuteFormat` as the default format.\r\n         * - Supports the following formats:\r\n         *   - `'hhmm'` → Compact format without separators (`\"1430\"` for 2:30 PM).\r\n         *   - `'hh:mm'` → Standard format with a colon separator (`\"14:30\"` for 2:30 PM).\r\n         * - If an unsupported format is provided, it defaults to `'hh:mm'`.\r\n         *\r\n         * @param format The desired output format (optional). Default: `'hh:mm'`\r\n         * @returns The current hour and minute as a string in the specified format.\r\n         *\r\n         * @example\r\n         * getSysHourMinute(); // \"14:30\" (default format)\r\n         * getSysHourMinute(\"hhmm\"); // \"1430\"\r\n         */\r\n        getSysHourMinute(format?: string): string;\r\n        /**\r\n         * Returns the current system minute in the specified format.\r\n         *\r\n         * - Uses `CustomOption.minuteFormat` as the default format.\r\n         * - Supports the following formats:\r\n         *   - `'m'` → Minute without leading zero (`\"5\"` for the 5th minute).\r\n         *   - `'mm'` → Minute with leading zero (`\"05\"` for the 5th minute).\r\n         * - If an unsupported format is provided, it defaults to `'m'`.\r\n         *\r\n         * @param format The desired output format (optional). Default: `'m'`\r\n         * @returns The current minute as a string in the specified format.\r\n         *\r\n         * @example\r\n         * getSysMinute(); // \"5\" (default format)\r\n         * getSysMinute(\"mm\"); // \"05\"\r\n         */\r\n        getSysMinute(format?: string): string;\r\n        /**\r\n         * Returns the current system second in the specified format.\r\n         *\r\n         * - Uses `CustomOption.secondFormat` as the default format.\r\n         * - Supports the following formats:\r\n         *   - `'s'` → Second without leading zero (`\"5\"` for the 5th second).\r\n         *   - `'ss'` → Second with leading zero (`\"05\"` for the 5th second).\r\n         * - If an unsupported format is provided, it defaults to `'s'`.\r\n         *\r\n         * @param format The desired output format (optional). Default: `'s'`\r\n         * @returns The current second as a string in the specified format.\r\n         *\r\n         * @example\r\n         * getSysSecond(); // \"5\" (default format)\r\n         * getSysSecond(\"ss\"); // \"05\"\r\n         */\r\n        getSysSecond(format?: string): string;\r\n        /**\r\n         * Returns the current system time in the specified format.\r\n         *\r\n         * - Uses `CustomOption.timeFormat` as the default format.\r\n         * - Supports the following formats:\r\n         *   - `'hhmmss'` → Compact format without separators (`\"143015\"` for 2:30:15 PM).\r\n         *   - `'hh:mm:ss'` → Standard format with colons (`\"14:30:15\"` for 2:30:15 PM).\r\n         * - If an unsupported format is provided, it defaults to `'hh:mm:ss'`.\r\n         *\r\n         * @param format The desired output format (optional). Default: `'hh:mm:ss'`\r\n         * @returns The current time as a string in the specified format.\r\n         *\r\n         * @example\r\n         * getSysTime(); // \"14:30:15\" (default format)\r\n         * getSysTime(\"hhmmss\"); // \"143015\"\r\n         */\r\n        getSysTime(format?: string): string;\r\n        /**\r\n         * Returns the current system date and time in the specified format.\r\n         *\r\n         * - Uses `CustomOption.datetimeFormat` as the default format.\r\n         * - Delegates formatting to `getDateWithFormat()`, which supports various formats, including:\r\n         *   - `'yyyy-MM-dd hh:mm:ss'` → `\"2025-02-05 14:30:15\"`\r\n         *   - `'yyyy/MM/dd'` → `\"2025/02/05\"`\r\n         *   - `'MMMM dd, yyyy'` → `\"February 5, 2025\"`\r\n         * - If no format is specified, it defaults to the full datetime format.\r\n         *\r\n         * @param format The desired output format (optional). Default: `'yyyy-MM-dd hh:mm:ss'`\r\n         * @returns The current date and time as a formatted string.\r\n         *\r\n         * @example\r\n         * getSysDate(); // \"2025-02-05 14:30:15\" (default format)\r\n         * getSysDate(\"yyyy/MM/dd\"); // \"2025/02/05\"\r\n         * getSysDate(\"MMMM dd, yyyy\"); // \"February 5, 2025\"\r\n         */\r\n        getSysDate(format?: string): string;\r\n        /**\r\n         * Rounds a number up to the nearest integer or specified decimal place.\r\n         *\r\n         * - If `precision` is `0`, it rounds up to the nearest whole number.\r\n         * - If `precision` is greater than `0`, it rounds up to the specified number of decimal places.\r\n         * - If `precision` is less than `0`, it rounds up to the nearest multiple of `10^precision`.\r\n         *\r\n         * @param num The number to be rounded up.\r\n         * @param precision The number of decimal places to retain (default: `0`).\r\n         * @returns The rounded-up number.\r\n         *\r\n         * @example\r\n         * getCeil(12.34); // 13\r\n         * getCeil(12.34, 1); // 12.4\r\n         * getCeil(12.34, 2); // 12.34\r\n         * getCeil(1250, -2); // 1300\r\n         */\r\n        getCeil(num: number, precision?: number): number;\r\n        /**\r\n         * Rounds a number down to the nearest integer or specified decimal place.\r\n         *\r\n         * - If `precision` is `0`, it rounds down to the nearest whole number.\r\n         * - If `precision` is greater than `0`, it rounds down to the specified number of decimal places.\r\n         * - If `precision` is less than `0`, it rounds down to the nearest multiple of `10^precision`.\r\n         *\r\n         * @param num The number to be rounded down.\r\n         * @param precision The number of decimal places to retain (default: `0`).\r\n         * @returns The rounded-down number.\r\n         *\r\n         * @example\r\n         * getFloor(12.89); // 12\r\n         * getFloor(12.89, 1); // 12.8\r\n         * getFloor(12.89, 2); // 12.89\r\n         * getFloor(1299, -2); // 1200\r\n         */\r\n        getFloor(num: number, precision?: number): number;\r\n        /**\r\n         * Rounds a number to the nearest integer or specified decimal place.\r\n         *\r\n         * - If `precision` is `0`, it rounds to the nearest whole number.\r\n         * - If `precision` is greater than `0`, it rounds to the specified number of decimal places.\r\n         * - If `precision` is less than `0`, it rounds to the nearest multiple of `10^precision`.\r\n         *\r\n         * @param num The number to be rounded.\r\n         * @param precision The number of decimal places to retain (default: `0`).\r\n         * @returns The rounded number.\r\n         *\r\n         * @example\r\n         * getRound(12.49); // 12\r\n         * getRound(12.5); // 13\r\n         * getRound(12.345, 2); // 12.35\r\n         * getRound(1250, -2); // 1300\r\n         */\r\n        getRound(num: number, precision?: number): number;\r\n        /**\r\n         * Truncates a number to the specified decimal place without rounding.\r\n         *\r\n         * - If `precision` is `0`, it removes the decimal part, keeping only the integer.\r\n         * - If `precision` is greater than `0`, it truncates the number at the specified decimal places.\r\n         * - If `precision` is less than `0`, it truncates to the nearest multiple of `10^precision`.\r\n         *\r\n         * @param num The number to be truncated.\r\n         * @param precision The number of decimal places to retain (default: `0`).\r\n         * @returns The truncated number.\r\n         *\r\n         * @example\r\n         * getTrunc(12.89); // 12\r\n         * getTrunc(12.89, 1); // 12.8\r\n         * getTrunc(12.89, 2); // 12.89\r\n         * getTrunc(1299, -2); // 1200\r\n         */\r\n        getTrunc(num: number, precision?: number): number;\r\n        /**\r\n         * Calculates the byte length of a given string based on character encoding.\r\n         *\r\n         * - Uses UTF-8 encoding rules to determine the byte size of each character.\r\n         * - Character byte sizes are determined as follows:\r\n         *   - `charCode <= 0x7F` → 1 byte (ASCII characters).\r\n         *   - `charCode <= 0x7FF` → `CustomOption.LESSOREQ_0X7FF_BYTE` bytes. Default: 2\r\n         *   - `charCode <= 0xFFFF` → `CustomOption.LESSOREQ_0XFFFF_BYTE` bytes. Default: 3\r\n         *   - `charCode > 0xFFFF` → `CustomOption.GREATER_0XFFFF_BYTE` bytes. Default: 4\r\n         *\r\n         * @param str The input string.\r\n         * @returns The total byte length of the string.\r\n         *\r\n         * @example\r\n         * getByteLength(\"Hello\"); // 5 (each ASCII character is 1 byte)\r\n         * getByteLength(\"안녕하세요\"); // 15 (each Korean character is 3 bytes)\r\n         * getByteLength(\"𐍈\"); // 4 (UTF-16 surrogate pair)\r\n         */\r\n        getByteLength(str: string): number;\r\n        /**\r\n         * Truncates a string to fit within a specified byte length.\r\n         *\r\n         * - Uses UTF-8 encoding rules to calculate byte size.\r\n         * - Truncates the string at the point where the total byte length exceeds `cutByte`.\r\n         * - Character byte sizes are determined as follows:\r\n         *   - `charCode <= 0x7F` → 1 byte (ASCII characters).\r\n         *   - `charCode <= 0x7FF` → `CustomOption.LESSOREQ_0X7FF_BYTE` bytes.\r\n         *   - `charCode <= 0xFFFF` → `CustomOption.LESSOREQ_0XFFFF_BYTE` bytes.\r\n         *   - `charCode > 0xFFFF` → `CustomOption.GREATER_0XFFFF_BYTE` bytes.\r\n         *\r\n         * @param str The input string to be truncated.\r\n         * @param cutByte The maximum allowed byte length.\r\n         * @returns The truncated string that fits within the given byte length.\r\n         *\r\n         * @example\r\n         * getCutByteLength(\"Hello, World!\", 5); // \"Hello\"\r\n         * getCutByteLength(\"안녕하세요\", 6); // \"안녕\" (each Korean character is 3 bytes)\r\n         * getCutByteLength(\"𐍈𐍈𐍈\", 4); // \"𐍈\" (each surrogate pair character is 4 bytes)\r\n         */\r\n        getCutByteLength(str: string, cutByte: number): string;\r\n        /**\r\n         * Adjusts a string to fit a specified length by evenly distributing spaces between characters.\r\n         *\r\n         * - If the string's length is already greater than or equal to `length`, it is returned as is.\r\n         * - Spaces are distributed as evenly as possible between characters to reach the desired length.\r\n         * - If the spacing is not evenly divisible, extra spaces are added starting from the left.\r\n         *\r\n         * @param str The input string.\r\n         * @param length The target total length of the formatted string.\r\n         * @returns A string with evenly distributed spaces to match the specified length.\r\n         *\r\n         * @example\r\n         * getStringLenForm(\"Hi\", 5); // \"H  i\"\r\n         * getStringLenForm(\"Hello\", 10); // \"H  e  l  l  o\"\r\n         * getStringLenForm(\"A\", 3); // \"A  \"\r\n         */\r\n        getStringLenForm(str: string, length: number): string;\r\n        /**\r\n         * Left-pads a string with a specified padding string until it reaches the desired length.\r\n         *\r\n         * - If the original string's length is already greater than or equal to `length`, it is returned as is.\r\n         * - The `padStr` is repeated as needed to fill the remaining space.\r\n         * - If `padStr` does not evenly divide into the required padding length, it may be truncated.\r\n         *\r\n         * @param str The original string.\r\n         * @param padStr The string used for padding.\r\n         * @param length The desired total length of the padded string.\r\n         * @returns The left-padded string.\r\n         *\r\n         * @example\r\n         * getLpad(\"123\", \"0\", 5); // \"00123\"\r\n         * getLpad(\"abc\", \"-\", 6); // \"---abc\"\r\n         * getLpad(\"test\", \"XY\", 10); // \"XYXYXYtest\"\r\n         */\r\n        getLpad(str: string, padStr: string, length: number): string;\r\n        /**\r\n         * Right-pads a string with a specified padding string until it reaches the desired length.\r\n         *\r\n         * - If the original string's length is already greater than or equal to `length`, it is truncated to fit.\r\n         * - The `padStr` is repeated as needed to fill the remaining space.\r\n         * - If `padStr` does not evenly divide into the required padding length, it may be truncated.\r\n         *\r\n         * @param str The original string.\r\n         * @param padStr The string used for padding.\r\n         * @param length The desired total length of the padded string.\r\n         * @returns The right-padded string.\r\n         *\r\n         * @example\r\n         * getRpad(\"123\", \"0\", 5); // \"12300\"\r\n         * getRpad(\"abc\", \"-\", 6); // \"abc---\"\r\n         * getRpad(\"test\", \"XY\", 10); // \"testXYXYXY\"\r\n         */\r\n        getRpad(str: string, padStr: string, length: number): string;\r\n        /**\r\n         * Removes leading and trailing whitespace from a string.\r\n         *\r\n         * - Converts the input to a string if it is not already.\r\n         * - Uses JavaScript's built-in `trim()` method to remove whitespace.\r\n         *\r\n         * @param str The input string.\r\n         * @returns The trimmed string without leading or trailing spaces.\r\n         *\r\n         * @example\r\n         * getTrim(\"  Hello World  \"); // \"Hello World\"\r\n         * getTrim(\"\\tTest String\\n\"); // \"Test String\"\r\n         * getTrim(\"   \"); // \"\" (empty string)\r\n         */\r\n        getTrim(str: string): string;\r\n        /**\r\n         * Replaces all occurrences of a target substring within a string with a specified replacement.\r\n         *\r\n         * - Converts all inputs to strings before processing.\r\n         * - Uses `split()` and `join()` to replace all instances of `targetStr` with `replaceStr`.\r\n         * - If `replaceStr` is not provided, occurrences of `targetStr` are removed.\r\n         *\r\n         * @param str The original string.\r\n         * @param targetStr The substring to be replaced.\r\n         * @param replaceStr The string to replace occurrences of `targetStr` (default: `''`).\r\n         * @returns A new string with all occurrences of `targetStr` replaced.\r\n         *\r\n         * @example\r\n         * getReplaceAll(\"hello world\", \"o\", \"O\"); // \"hellO wOrld\"\r\n         * getReplaceAll(\"banana\", \"a\", \"\"); // \"bnn\"\r\n         * getReplaceAll(\"2025-02-05\", \"-\", \"/\"); // \"2025/02/05\"\r\n         */\r\n        getReplaceAll(str: string, targetStr: string, replaceStr?: string): string;\r\n        /**\r\n         * Formats a number according to a specified format pattern.\r\n         *\r\n         * - Uses `CustomOption.numberFormat` as the default format if none is provided.\r\n         * - Supports various number formatting patterns, including:\r\n         *   - `\"#,###\"` → `\"1,234\"` (comma-separated thousands).\r\n         *   - `\"#,##0\"` → `\"1,234\"` (ensures at least one digit).\r\n         *   - `\".##\"` → `\"0.1\"` (no grouping).\r\n         *   - `\".00\"` → `\"0.10\"` (ensures at least one digit).\r\n         * - Supports decimal formatting and percentage notation (`\"%\"`).\r\n         * - Throws an error if the input is not a valid number or if the format is invalid.\r\n         *\r\n         * @param value The number to format.\r\n         * @param format The desired format pattern (optional). Default: `'#,##0.##'`\r\n         * @returns The formatted number as a string.\r\n         *\r\n         * @throws Error if the input value is not numeric or the format is invalid.\r\n         *\r\n         * @example\r\n         * getNumberFormat(1234); // \"1,234\" (default format)\r\n         * getNumberFormat(1234.5678, \"#,###.00\"); // \"1,234.56\"\r\n         * getNumberFormat(0.25, \"#,##0%\"); // \"25%\" (percentage conversion)\r\n         * getNumberFormat(-1234, \"#,###\"); // \"-1,234\"\r\n         */\r\n        getNumberFormat(value: number, format?: string): string;\r\n        /**\r\n         * Removes all non-numeric characters from a string, leaving only digits.\r\n         *\r\n         * - Converts the input to a string if it is not already.\r\n         * - Uses a regular expression to remove any character that is not a digit (`0-9`).\r\n         *\r\n         * @param str The input string.\r\n         * @returns A new string containing only numeric characters.\r\n         *\r\n         * @example\r\n         * getRemoveExceptNumbers(\"abc123def456\"); // \"123456\"\r\n         * getRemoveExceptNumbers(\"Phone: (555) 123-4567\"); // \"5551234567\"\r\n         * getRemoveExceptNumbers(\"No numbers here!\"); // \"\"\r\n         */\r\n        getRemoveExceptNumbers(str: string): string;\r\n        /**\r\n         * Removes all numeric characters from a string, leaving only non-numeric characters.\r\n         *\r\n         * - Converts the input to a string if it is not already.\r\n         * - Uses a regular expression to remove any digit (`0-9`).\r\n         *\r\n         * @param str The input string.\r\n         * @returns A new string containing only non-numeric characters.\r\n         *\r\n         * @example\r\n         * getRemoveNumbers(\"abc123def456\"); // \"abcdef\"\r\n         * getRemoveNumbers(\"Phone: (555) 123-4567\"); // \"Phone: () -\"\r\n         * getRemoveNumbers(\"123456\"); // \"\" (all numbers removed)\r\n         */\r\n        getRemoveNumbers(str: string): string;\r\n        /**\r\n         * Reverses the characters in a given string.\r\n         *\r\n         * - Converts the input to a string if it is not already.\r\n         * - Splits the string into an array of characters, reverses the order, and joins them back.\r\n         *\r\n         * @param str The input string.\r\n         * @returns The reversed string.\r\n         *\r\n         * @example\r\n         * getReverse(\"hello\"); // \"olleh\"\r\n         * getReverse(\"12345\"); // \"54321\"\r\n         * getReverse(\"A B C\"); // \"C B A\"\r\n         */\r\n        getReverse(str: string): string;\r\n        /**\r\n         * Converts the given value to a boolean.\r\n         *\r\n         * - Numeric values: `0` is `false`, any other number is `true`.\r\n         * - Boolean values: Returned as is.\r\n         * - String values: Returns `true` if the string matches predefined truthy values (`\"true\"`, `\"yes\"`, `\"checked\"`, etc.).\r\n         * - Other types: Returns `false`.\r\n         *\r\n         * @param value The value to be converted.\r\n         * @returns `true` if the value represents a truthy value, otherwise `false`.\r\n         *\r\n         * @example\r\n         * getToBoolean(1); // true\r\n         * getToBoolean(0); // false\r\n         * getToBoolean(\"yes\"); // true\r\n         * getToBoolean(\"false\"); // false\r\n         * getToBoolean(true); // true\r\n         * getToBoolean(null); // false\r\n         */\r\n        getToBoolean(value: any): boolean;\r\n        /**\r\n         * Converts the given value to a number.\r\n         *\r\n         * - If the value is numeric, it is returned as a number.\r\n         * - If the value is not a valid number, `impossibleValue` is returned instead.\r\n         *\r\n         * @param value The value to be converted.\r\n         * @param impossibleValue The fallback value if conversion fails (default: `0`).\r\n         * @returns The numeric representation of the value, or `impossibleValue` if conversion fails.\r\n         *\r\n         * @example\r\n         * getToNumber(\"123\"); // 123\r\n         * getToNumber(\"12.34\"); // 12.34\r\n         * getToNumber(\"abc\", -1); // -1 (fallback value)\r\n         * getToNumber(null, 100); // 100 (fallback value)\r\n         */\r\n        getToNumber(value: any, impossibleValue?: number): number;\r\n        /**\r\n         * Converts the given value to a floating-point number.\r\n         *\r\n         * - If the value is numeric, it is converted to a float and returned.\r\n         * - If the value is not a valid number, `impossibleValue` is returned instead.\r\n         *\r\n         * @param value The value to be converted.\r\n         * @param impossibleValue The fallback value if conversion fails (default: `0`).\r\n         * @returns The floating-point representation of the value, or `impossibleValue` if conversion fails.\r\n         *\r\n         * @example\r\n         * getToFloat(\"123.45\"); // 123.45\r\n         * getToFloat(42); // 42\r\n         * getToFloat(\"abc\", -1); // -1 (fallback value)\r\n         * getToFloat(null, 100.5); // 100.5 (fallback value)\r\n         */\r\n        getToFloat(value: any, impossibleValue?: number): number;\r\n        /**\r\n         * Converts the given value to an integer.\r\n         *\r\n         * - If the value is numeric, it is converted to an integer using `Math.trunc()`.\r\n         * - If the value is not a valid number, `impossibleValue` is returned instead.\r\n         *\r\n         * @param value The value to be converted.\r\n         * @param impossibleValue The fallback value if conversion fails (default: `0`).\r\n         * @returns The integer representation of the value, or `impossibleValue` if conversion fails.\r\n         *\r\n         * @example\r\n         * getToInteger(\"123.45\"); // 123\r\n         * getToInteger(42.9); // 42\r\n         * getToInteger(\"abc\", -1); // -1 (fallback value)\r\n         * getToInteger(null, 100); // 100 (fallback value)\r\n         */\r\n        getToInteger(value: any, impossibleValue?: number): number;\r\n        /**\r\n         * Converts the given value to a string.\r\n         *\r\n         * - If the value is already a string, it is returned as is.\r\n         * - If the value is a number, boolean, or bigint, it is converted to a string.\r\n         * - If the value is a symbol, its description is returned.\r\n         * - If the value is `null`, `undefined`, or an unsupported type, `impossibleValue` is returned.\r\n         *\r\n         * @param str The value to be converted.\r\n         * @param impossibleValue The fallback value if conversion fails (default: `\"\"`).\r\n         * @returns The string representation of the value, or `impossibleValue` if conversion fails.\r\n         *\r\n         * @example\r\n         * getToString(123); // \"123\"\r\n         * getToString(true); // \"true\"\r\n         * getToString(Symbol(\"test\")); // \"test\"\r\n         * getToString(null, \"N/A\"); // \"N/A\" (fallback value)\r\n         */\r\n        getToString(str: any, impossibleValue?: string): string;\r\n        /**\r\n         * Returns a default value if the given value is `null` or `undefined`.\r\n         *\r\n         * - If `val` is `null` or `undefined`, `defaultValue` is returned.\r\n         * - Otherwise, `val` is returned as is.\r\n         *\r\n         * @param val The value to check.\r\n         * @param defaultValue The default value to return if `val` is `null` or `undefined`.\r\n         * @returns The original value if not `null` or `undefined`, otherwise the `defaultValue`.\r\n         *\r\n         * @example\r\n         * nvl(null, \"default\"); // \"default\"\r\n         * nvl(undefined, 100); // 100\r\n         * nvl(\"Hello\", \"default\"); // \"Hello\"\r\n         * nvl(0, \"fallback\"); // 0 (not null or undefined, so returned as is)\r\n         */\r\n        nvl(val: any, defaultValue: any): any;\r\n        /**\r\n         * Extracts the file extension from a given filename or file path.\r\n         *\r\n         * - Converts the input to a string if it is not already.\r\n         * - Splits the string by `.` and returns the last segment as the file extension.\r\n         * - If no extension is found, an empty string is returned.\r\n         *\r\n         * @param str The filename or file path.\r\n         * @returns The file extension as a string, or an empty string if no extension exists.\r\n         *\r\n         * @example\r\n         * getFileExtension(\"document.txt\"); // \"txt\"\r\n         * getFileExtension(\"archive.tar.gz\"); // \"gz\"\r\n         * getFileExtension(\"/path/to/file\"); // \"\" (no extension)\r\n         */\r\n        getFileExtension(str: string): string;\r\n        /**\r\n         * Extracts the filename (without extension) from a given file path or filename.\r\n         *\r\n         * - Converts the input to a string if it is not already.\r\n         * - Extracts the last part of the path after the last `/` (or full filename if no path exists).\r\n         * - Removes the file extension by cutting the string at the last `.` if present.\r\n         *\r\n         * @param str The full file path or filename.\r\n         * @returns The filename without the extension.\r\n         *\r\n         * @example\r\n         * getFileName(\"/path/to/document.txt\"); // \"document\"\r\n         * getFileName(\"archive.tar.gz\"); // \"archive.tar\"\r\n         * getFileName(\"file_without_extension\"); // \"file_without_extension\"\r\n         */\r\n        getFileName(str: string): string;\r\n        /**\r\n         * Decodes a Base64-encoded string into a human-readable format.\r\n         *\r\n         * - Converts the input to a string if it is not already.\r\n         * - Uses `atob()` to decode the Base64 string.\r\n         * - Decodes percent-encoded UTF-8 characters to properly restore special characters.\r\n         *\r\n         * @param str The Base64-encoded string.\r\n         * @returns The decoded string.\r\n         *\r\n         * @example\r\n         * getDecodeBase64(\"SGVsbG8gd29ybGQh\"); // \"Hello world!\"\r\n         * getDecodeBase64(\"44GT44KT44Gr44Gh44Gv\"); // \"こんにちは\" (Japanese \"Hello\")\r\n         */\r\n        getDecodeBase64(str: string): string;\r\n        /**\r\n         * Encodes a string into Base64 format.\r\n         *\r\n         * - Converts the input to a string if it is not already.\r\n         * - Uses `encodeURIComponent()` to properly handle special characters.\r\n         * - Encodes the string to Base64 using `btoa()`.\r\n         *\r\n         * @param str The input string to be encoded.\r\n         * @returns The Base64-encoded string.\r\n         *\r\n         * @example\r\n         * getEncodeBase64(\"Hello world!\"); // \"SGVsbG8gd29ybGQh\"\r\n         * getEncodeBase64(\"こんにちは\"); // \"44GT44KT44Gr44Gh44Gv\" (Japanese \"Hello\")\r\n         */\r\n        getEncodeBase64(str: string): string;\r\n        /**\r\n         * Creates a deep copy of an object or array, preserving nested structures.\r\n         *\r\n         * - Handles `Object` and `Array` types recursively.\r\n         * - Supports cloning custom objects implementing `getIsDataWrapper()` or `getIsDataModel()`.\r\n         * - Prevents infinite loops by tracking previously copied references.\r\n         * - If the object is `null` or not an object, it is returned as is.\r\n         *\r\n         * @param object The object or array to be deep copied.\r\n         * @param visited An optional array to track visited references and prevent circular references.\r\n         * @returns A deep copy of the input object or array.\r\n         *\r\n         * @example\r\n         * const obj = { a: 1, b: { c: 2 } };\r\n         * const copy = deepCopyObject(obj);\r\n         * copy.b.c = 3;\r\n         * console.log(obj.b.c); // 2 (original object remains unchanged)\r\n         *\r\n         * const arr = [1, [2, 3]];\r\n         * const arrCopy = deepCopyObject(arr);\r\n         * arrCopy[1][0] = 99;\r\n         * console.log(arr[1][0]); // 2 (original array remains unchanged)\r\n         */\r\n        deepCopyObject(object: any, visited?: { source: any, copy: any }[]): any;\r\n    }\r\n    \r\n    //====================================================================================\r\n    //shield\r\n    //====================================================================================\r\n    /**\r\n     * Enforces security policies on the given `Hison` instance, including access restrictions and object immutability.\r\n     *\r\n     * This function applies multiple layers of security to protect the `Hison` instance and enforce security policies:\r\n     * - **Object Freezing**: Prevents modification of the `Hison` object.\r\n     * - **Access Control by URL and IP**: Restricts access based on predefined security settings.\r\n     * - **Developer Tool Restrictions**: Detects and prevents unauthorized debugging or tampering.\r\n     * - **Back Navigation Prevention**: Blocks browser back navigation if enabled.\r\n     *\r\n     * @param hison The `Hison` object to secure and optionally freeze.\r\n     *\r\n     * @throws Error If `hison` is not provided.\r\n     * @throws Error If `hison` is not an instance of `Hison`.\r\n     *\r\n     * @remarks\r\n     * This function enhances security by enforcing strict runtime protections. It utilizes configuration settings from\r\n     * `customOption.shield` to determine the applied security policies.\r\n     *\r\n     * ---\r\n     * ### Security Features & Execution Flow\r\n     *\r\n     * ### 1. **Validation of `hison` Parameter**\r\n     * - If `hison` is not provided, an error is thrown:  \r\n     *   `\"Invalid argument: 'hison' is required.\"`\r\n     * - Ensures that the input is a valid `Hison` instance before executing security functions.\r\n     * - If `hison.constructor !== Hison`, an error is thrown:  \r\n     *   `\"Invalid argument: 'hison' must be an instance of Hison.\"`\r\n     *\r\n     * ### 2. **Object Freezing (`isFreeze`)**\r\n     * - If `customOption.isFreeze` is `true`, the `Hison` object is **deeply frozen**.\r\n     * - Uses the `deepFreeze()` function to recursively apply `Object.freeze()`, preventing modifications.\r\n     *\r\n     * ### 3. **Access Control by URL (`shieldURL`)**\r\n     * - If `customOption.shieldURL` is set:\r\n     *   - Ensures the current URL matches `shieldURL`.\r\n     *   - If the URL does not match, execution stops immediately.\r\n     *\r\n     * ### 4. **IP-Based Access Control (`exposeIpList`)**\r\n     * - If the request is **not from `localhost`**, it performs IP verification:\r\n     *   - Fetches the user's IP from `/ajax/getIp`.\r\n     *   - Compares the retrieved IP against `customOption.exposeIpList`.\r\n     *   - If the IP is **not** in the list, additional restrictions are applied:\r\n     *     - **Back Navigation is Blocked** if `isPossibleGoBack` is `false`.\r\n     *     - **Developer Tools are Restricted** if `isPossibleOpenDevTool` is `false`.\r\n     *\r\n     * ### 5. **Back Navigation Prevention (`isPossibleGoBack`)**\r\n     * - If `customOption.isPossibleGoBack` is `false`:\r\n     *   - Overrides the browser's back button functionality using `history.pushState()`.\r\n     *   - Registers an event listener to **prevent back navigation**.\r\n     *\r\n     * ### 6. **Developer Tool Restrictions (`isPossibleOpenDevTool`)**\r\n     * - If `customOption.isPossibleOpenDevTool` is `false`:\r\n     *   - Blocks `F12` keypress to prevent opening developer tools.\r\n     *   - Uses `debugger` trick and event listeners (`resize`, `mousemove`, `focus`, `blur`) to detect dev tools.\r\n     *   - Displays a warning message and prevents further execution if dev tools are detected.\r\n     *\r\n     * ---\r\n     * ### Related Methods\r\n     * - `hison.setShieldURL(url: string)` → Sets the URL restriction for access control.\r\n     * - `hison.setExposeIpList(ipList: string[])` → Defines a whitelist of allowed IP addresses.\r\n     * - `hison.setIsFreeze(state: boolean)` → Enables or disables object freezing.\r\n     * - `hison.setIsPossibleGoBack(state: boolean)` → Enables or disables back navigation prevention.\r\n     * - `hison.setIsPossibleOpenDevTool(state: boolean)` → Enables or disables developer tool restrictions.\r\n     *\r\n     * @example\r\n     * // Execute security features for the Hison instance\r\n     * shield.excute(hison);\r\n     */\r\n    shield: {\r\n        /**\r\n         * Checks if the object is Hison.\r\n         */\r\n        isHison: boolean;\r\n        /**\r\n         * Executes the specified functionality for the given `Hison` object with additional security measures.\r\n         * This function applies deep freezing, IP-based shielding, and developer mode restrictions based on the provided options.\r\n         *\r\n         * @param {Hison} hison - The main object to be processed and optionally frozen for immutability.\r\n         *\r\n         * @remarks\r\n         * This function incorporates multiple layers of security, including:\r\n         * - Freezing objects to prevent tampering.\r\n         * - Blocking unauthorized access based on the user's IP.\r\n         * - Preventing the use of browser developer tools.\r\n         *\r\n         * ### Related:\r\n         * - hison.setShieldURL\r\n         * - hison.setExposeIpList\r\n         * - hison.setIsFreeze\r\n         * - hison.setIsPossibleGoBack\r\n         * - hison.setIsPossibleOpenDevTool\r\n         *\r\n         * #### Logic Breakdown:\r\n         * 1. **Object Freezing**:\r\n         *    - If `option.shield.isFreeze` is enabled, the `hison` object is deeply frozen using the `deepFreeze` function.\r\n         *    - Prevents runtime modification of the object or its nested properties.\r\n         *\r\n         * 2. **Access Control by URL and IP**:\r\n         *    - If not on `localhost`:\r\n         *        - Ensures the current URL matches `option.shield.shieldURL`.\r\n         *        - Fetches the user's IP via `/ajax/getIp`.\r\n         *        - Verifies the IP against `option.shield.exposeIpList`.\r\n         *        - If the IP is not allowed:\r\n         *            - Prevents navigating back using the browser's back button.\r\n         *            - Restricts developer tool access.\r\n         *\r\n         * 3. **Developer Tool Restrictions**:\r\n         *    - Blocks `F12` key to prevent opening developer tools.\r\n         *    - Detects and alerts when developer tools are opened using browser resizing, focus, or mouse events.\r\n         *    - Displays a warning message and halts further actions if developer tools are detected.\r\n         */\r\n        excute(hison: Hison): void;\r\n    };\r\n    \r\n    //====================================================================================\r\n    //data\r\n    //====================================================================================\r\n    /**\r\n     * The `hison.data` module provides core data management structures within the `hisondev` ecosystem.\r\n     * It includes:\r\n     *\r\n     * - **`DataWrapper`**: A key-value based data storage container.\r\n     * - **`DataModel`**: A structured table-like data model for handling tabular data.\r\n     *\r\n     * These components enable **efficient data storage, retrieval, validation, and transformation** \r\n     * while maintaining type safety and structural consistency.\r\n     *\r\n     * ### Core Features\r\n     *\r\n     * ### **1. Structured Data Management**\r\n     * - `DataWrapper` provides **key-value storage**, allowing easy organization of structured data.\r\n     * - `DataModel` offers **tabular data management**, ensuring **column consistency** across rows.\r\n     *\r\n     * ### **2. Data Transformation & Validation**\r\n     * - Supports **custom conversion logic** through `hison.setConvertValue()`, allowing pre-insertion transformations.\r\n     * - Allows setting a **`DataModelValidator`** to validate column values.\r\n     * - Supports **`DataModelFormatter`** for automatic column formatting.\r\n     *\r\n     * ### **3. Deep Copy & Serialization**\r\n     * - Ensures **data immutability** using **deep cloning** (`clone()`).\r\n     * - Supports **JSON serialization** for structured data transfer (`getSerialized()`).\r\n     *\r\n     * ### **4. Integration Between `DataWrapper` and `DataModel`**\r\n     * - `DataWrapper` can **store and retrieve** `DataModel` instances seamlessly.\r\n     * - Allows flexible conversion between **key-value storage** and **structured table data**.\r\n     *\r\n     * ### Example Usage\r\n     *\r\n     * ### **Using `DataWrapper` for Key-Value Storage**\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper({ username: \"Alice\", age: 30 });\r\n     * console.log(dataWrapper.getString(\"username\")); // Output: \"Alice\"\r\n     * ```\r\n     *\r\n     * ### **Using `DataModel` for Tabular Data**\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 }\r\n     * ]);\r\n     *\r\n     * // Formatting and validation\r\n     * dataModel.setColumnSameFormat(\"age\", (value) => `${value} years old`);\r\n     * dataModel.isValidValue(\"age\", value => typeof value === \"number\");\r\n     * ```\r\n     *\r\n     * ### **Storing `DataModel` Inside `DataWrapper`**\r\n     * ```typescript\r\n     * const usersData = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * const dataWrapper = new hison.data.DataWrapper();\r\n     * dataWrapper.putDataModel(\"users\", usersData);\r\n     * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\r\n     * ```\r\n     *\r\n     * ### Related Functions\r\n     * - **`hison.setConvertValue(func)`**: \r\n     *   - Allows defining a **custom value transformation function** for `DataModel`.\r\n     *   - Useful for formatting **Date objects** or handling special types before insertion.\r\n     *   - Example:\r\n     *   ```typescript\r\n     *   hison.setConvertValue((value) => value instanceof Date ? value.toISOString() : value);\r\n     *   ```\r\n     */\r\n    data: {\r\n        /**\r\n         * The `DataWrapper` class provides a flexible key-value storage container\r\n         * within the `hisondev` solution. It allows storing various data types,\r\n         * including string value and `DataModel` instances.\r\n         *\r\n         * ### Core Features:\r\n         * - **Key-Value Storage:**\r\n         *   - Supports dynamic insertion and retrieval of key-value pairs.\r\n         *   - Ensures that keys are always strings.\r\n         * - **Integration with `DataModel`:**\r\n         *   - Allows storing `DataModel` instances under specific keys.\r\n         *   - Provides methods to retrieve `DataModel` instances safely.\r\n         * - **Serialization & Cloning:**\r\n         *   - Supports deep cloning of stored data.\r\n         *   - Provides JSON serialization for structured data handling.\r\n         * - **Validation & Type Safety:**\r\n         *   - Ensures type safety for values stored in `DataWrapper`.\r\n         *   - Throws errors when attempting to insert invalid types.\r\n         *\r\n         * ### Data Integrity & Deep Copying:\r\n         * - Uses `hison.utils.deepCopyObject()` to ensure stored objects are immutable.\r\n         * - Prevents unintended modifications by returning cloned values.\r\n         *\r\n         * ### Example Usage:\r\n         * ```typescript\r\n         * // Creating a DataWrapper with key-value pairs\r\n         * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\r\n         * console.log(dataWrapper.getString(\"name\")); // Output: \"Alice\"\r\n         *\r\n         * // Storing a DataModel instance\r\n         * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n         * dataWrapper.putDataModel(\"users\", dataModel);\r\n         * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\r\n         *\r\n         * // Serializing the DataWrapper to JSON\r\n         * console.log(dataWrapper.getSerialized());\r\n         * ```\r\n         */\r\n        DataWrapper: new <T>(keyOrObject?: Record<string, InterfaceDataModel<T> | string> | string, value?: InterfaceDataModel<T> | string) => InterfaceDataWrapper;\r\n        /**\r\n         * The `InterfaceDataModel<T>` interface defines the structure for managing tabular data within the `hisondev` solution.\r\n         * It is designed to store, manipulate, and retrieve data efficiently while ensuring type consistency and validation.\r\n         *\r\n         * ### Generic Type `<T>`\r\n         * - `T` represents the shape of each row in the `DataModel`.\r\n         * - By specifying `T`, developers can enforce type safety for row values.\r\n         * - If no type is provided, `T` defaults to `Record<string, any>`, allowing dynamic structures.\r\n         * \r\n         * ### Core Features:\r\n         * - **Column and Row Management:**\r\n         *   - Supports dynamic addition and removal of columns and rows.\r\n         *   - Ensures column consistency when inserting data.\r\n         * - **Validation and Formatting:**\r\n         *   - Allows setting a `DataModelValidator` to check column values.\r\n         *   - Supports `DataModelFormatter` to format column values uniformly.\r\n         * - **Filtering and Searching:**\r\n         *   - Provides methods to filter rows based on conditions (`filterRows()`, `searchRows()`).\r\n         *   - Allows searching rows and modifying data accordingly (`searchAndModify()`).\r\n         * - **Sorting and Structuring:**\r\n         *   - Supports ascending, descending, and reverse sorting on both columns and rows.\r\n         * - **Serialization and Cloning:**\r\n         *   - Enables deep copying of the entire `DataModel<T>`.\r\n         *   - Provides `getSerialized()` to retrieve a JSON string of the model.\r\n         * - **Integration with `DataWrapper`**\r\n         *   - `DataWrapper` is an instance for storing `DataModel<T>`.\r\n         *\r\n         * ### Data Consistency and Validation:\r\n         * - Uses `_deepCopy()` to ensure stored objects are immutable.\r\n         * - Prevents invalid data types using `_getValidRowValue()`.\r\n         * - Ensures uniform column data types to maintain consistency.\r\n         *\r\n         * ### Example Usage:\r\n         * ```typescript\r\n         * interface User {\r\n         *     id: number;\r\n         *     name: string;\r\n         *     age: number;\r\n         * }\r\n         * \r\n         * // Creating a DataModel with a defined type\r\n         * const dataModel: InterfaceDataModel<User> = new hison.data.DataModel<User>([\r\n         *     { id: 1, name: \"Alice\", age: 25 },\r\n         *     { id: 2, name: \"Bob\", age: 30 }\r\n         * ]);\r\n         * \r\n         * // Add a new column (TypeScript enforces type constraints)\r\n         * dataModel.addColumn(\"gender\");\r\n         * \r\n         * // Set a default value for a column\r\n         * dataModel.setColumnSameValue(\"gender\", \"Unknown\");\r\n         * \r\n         * // Apply a formatting function to the age column\r\n         * dataModel.setColumnSameFormat(\"age\", (value) => `${value} years old`);\r\n         * \r\n         * // Get filtered rows where age is greater than 25\r\n         * const filtered = dataModel.filterRows(row => row.age > 25);\r\n         * console.log(filtered);\r\n         * ```\r\n         *\r\n         * ### Related Functions:\r\n         * - `hison.setConvertValue()`: Sets the conversion logic for special values before insertion.\r\n         */\r\n        DataModel: new <T extends Record<string, any> = Record<string, any>>(data?: T[] | T) => InterfaceDataModel<T>;\r\n    };\r\n\r\n    //====================================================================================\r\n    //link\r\n    //====================================================================================\r\n    /**\r\n     * The `hison.link` object provides core communication modules for interacting with the hisondev platform.\r\n     * It serves as a central hub for API requests, caching, and WebSocket communication.\r\n     *\r\n     * ### Key Components\r\n     * - **`CachingModule`**: Manages API response caching using an LRU (Least Recently Used) strategy.\r\n     * - **`ApiGet`, `ApiPost`, `ApiPut`, `ApiPatch`, `ApiDelete`**: Handle REST API calls by encapsulating request logic.\r\n     * - **`ApiGetUrl`, `ApiPostUrl`, `ApiPutUrl`, `ApiPatchUrl`, `ApiDeleteUrl`**: Similar to the above, but allow direct URL-based requests.\r\n     *\r\n     * These components simplify API integration and provide caching and event-driven request handling.\r\n     *\r\n     * ### How It Works\r\n     * - **API requests are wrapped in `DataWrapper` instances**, which store key-value data.\r\n     * - **The `cmd` property in `DataWrapper` determines the service path**, directing the request to the appropriate business logic on the server.\r\n     * - **`CachingModule` enables response caching**, reducing redundant network calls for frequently accessed resources.\r\n     * - **`EventEmitter` allows developers to listen for request events**, such as completion, errors, or specific triggers.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * // Creating an API request\r\n     * const requestData = new hison.data.DataWrapper();\r\n     * requestData.putString(\"username\", \"Alice\");\r\n     * \r\n     * // Sending a POST request\r\n     * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\r\n     * apiPost.call(requestData).then(response => {\r\n     *     console.log(response.data); // Response from the server\r\n     * });\r\n     *\r\n     * // Handling request events\r\n     * apiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n     *     console.log(\"Request completed!\", data);\r\n     * });\r\n     *\r\n     * // Using caching for a GET request\r\n     * const cachingModule = new hison.link.CachingModule(20); // Set cache limit to 20\r\n     * const apiGet = new hison.link.ApiGet(\"/users\", cachingModule);\r\n     * apiGet.call().then(response => {\r\n     *     console.log(response.data);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### Internal Structure\r\n     * - **Uses `ApiLink` for handling network requests**.\r\n     * - **Utilizes `EventEmitter` for event-driven communication**.\r\n     * - **Supports WebSocket integration via `CachingModule`**.\r\n     * - **Compatible with `CustomOption` for flexible configuration**.\r\n     */\r\n    link: {\r\n        /**\r\n         * **`CachingModule` - A module for API response caching and real-time WebSocket updates.**\r\n         *\r\n         * The `CachingModule` provides a caching mechanism for API responses using an **LRU (Least Recently Used) strategy** \r\n         * while integrating **WebSocket communication** for real-time data updates.\r\n         *\r\n         * ### **Key Features**\r\n         * - **LRU Cache for API Responses**: Stores API responses with a configurable limit, reducing redundant network requests.\r\n         * - **WebSocket Support**: Maintains a persistent WebSocket connection for real-time data updates.\r\n         * - **Cache Management Methods**: Supports cache operations (`get`, `put`, `remove`, `clear`, etc.).\r\n         * - **Event-Driven Communication**: Allows event listeners (`onopen`, `onmessage`, `onclose`, `onerror`) for WebSocket handling.\r\n         * - **Flexible Configuration**: Uses `CustomOption` settings for cache limits and WebSocket parameters.\r\n         * - **Validation Methods**: Ensures proper data types for cache keys and event listeners.\r\n         *\r\n         * ### **How It Works**\r\n         * - **API responses are stored in an LRUCache instance**, avoiding redundant network calls.\r\n         * - **When a WebSocket connection is established**, data updates can be received in real-time.\r\n         * - **Cache data can be accessed and managed using `get`, `put`, `remove`, and `clear` methods.**\r\n         * - **WebSocket event handlers can be set up for real-time notifications.**\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Create a CachingModule instance with a cache limit of 20\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * \r\n         * // Store API response in the cache\r\n         * cachingModule.put(\"users\", fetch(\"/api/users\").then(response => response.json()));\r\n         * \r\n         * // Retrieve cached data\r\n         * cachingModule.get(\"users\").then(data => console.log(data));\r\n         * \r\n         * // Register WebSocket event handlers\r\n         * cachingModule.onopen = () => console.log(\"WebSocket Connected\");\r\n         * cachingModule.onmessage = event => console.log(\"New Message:\", event.data);\r\n         * ```\r\n         *\r\n         * ### **Internal Structure**\r\n         * - **Uses `LRUCache`** to manage cached responses with a defined limit.\r\n         * - **Maintains a WebSocket connection** to receive real-time data updates.\r\n         * - **Supports configurable options via `CustomOption`**, such as WebSocket endpoint and cache size.\r\n         * - **Provides utility methods** for cache validation, data retrieval, and event handling.\r\n         *\r\n         * ### **Related Components**\r\n         * - **`LRUCache`**: Handles the caching logic for API responses.\r\n         * - **`WebSocket`**: Establishes a real-time connection for live data updates.\r\n         * - **`CustomOption`**: Provides configurable options for WebSocket and cache settings.\r\n         * - **`ApiLink`**: Uses this module to fetch and store API responses efficiently.\r\n         *\r\n         * ### **Return Value**\r\n         * - This module **returns an instance of `CachingModule`**, which allows cache operations and WebSocket event management.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Reducing unnecessary API calls** by storing frequently accessed responses.\r\n         * - **Receiving real-time updates** from the server without polling.\r\n         * - **Efficiently managing API response data** in web applications.\r\n         * - **Supporting offline or low-latency scenarios** by using cached responses.\r\n         */\r\n        CachingModule: new (cachingLimit?: number) => InterfaceCachingModule;\r\n        /**\r\n         * **`ApiGet` - A class for handling HTTP GET requests within the `hison.link` module.**\r\n         *\r\n         * The `ApiGet` class is responsible for sending HTTP GET requests to a specified API resource. \r\n         * It integrates with `ApiLink` to handle request execution, event emissions, and optional response caching.\r\n         *\r\n         * ### **Key Features**\r\n         * - **Executes HTTP GET requests** using `ApiLink`.\r\n         * - **Supports response caching** via an optional `CachingModule`.\r\n         * - **Emits request lifecycle events** using `EventEmitter`.\r\n         * - **Allows setting event listeners** for request completion, errors, and other key events.\r\n         *\r\n         * ### **How It Works**\r\n         * - When instantiated, `ApiGet` stores the API resource path and an optional `CachingModule` instance.\r\n         * - The `call()` method triggers a GET request to the specified resource path.\r\n         * - If caching is enabled, previously stored responses may be returned instead of making a new request.\r\n         * - Event listeners can be attached to monitor the request lifecycle.\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Creating an instance of ApiGet without caching\r\n         * const apiGet = new hison.link.ApiGet(\"/users\");\r\n         * \r\n         * // Sending a GET request\r\n         * apiGet.call().then(response => {\r\n         *     console.log(response.data); // Response data\r\n         * });\r\n         *\r\n         * // Creating an instance with caching\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * const cachedApiGet = new hison.link.ApiGet(\"/users\", cachingModule);\r\n         * \r\n         * // Handling request events\r\n         * cachedApiGet.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n         *     console.log(\"GET request completed!\", data);\r\n         * });\r\n         * ```\r\n         *\r\n         * ### **Internal Components**\r\n         * - **`ApiLink`**: Handles request execution and response processing.\r\n         * - **`EventEmitter`**: Manages event-based request handling.\r\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n         *\r\n         * ### **Return Value**\r\n         * - This class returns an instance of `ApiGet`, which provides methods for executing GET requests and managing request events.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Fetching data from a REST API** with minimal setup.\r\n         * - **Using cached responses** to reduce redundant API calls.\r\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n         */\r\n        ApiGet: new (resourcePath?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiGet;\r\n        /**\r\n         * **`ApiPost` - A class for handling HTTP POST requests within the `hison.link` module.**\r\n         *\r\n         * The `ApiPost` class is responsible for sending HTTP POST requests to a specified service command.\r\n         * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\r\n         *\r\n         * ### **Key Features**\r\n         * - **Executes HTTP POST requests** using `ApiLink`.\r\n         * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\r\n         * - **Supports response caching** via an optional `CachingModule`.\r\n         * - **Emits request lifecycle events** using `EventEmitter`.\r\n         * - **Allows event listeners** for monitoring request execution.\r\n         *\r\n         * ### **How It Works**\r\n         * - When instantiated, `ApiPost` requires a `serviceCmd` that specifies the business logic endpoint.\r\n         * - The `call()` method sends a POST request with the provided request data.\r\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n         * - Event listeners can be attached to monitor the request lifecycle.\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Creating an instance of ApiPost\r\n         * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\r\n         *\r\n         * // Creating request data\r\n         * const requestData = new hison.data.DataWrapper();\r\n         * requestData.putString(\"username\", \"Alice\");\r\n         * \r\n         * // Sending a POST request\r\n         * apiPost.call(requestData).then(response => {\r\n         *     console.log(response.data); // Response data\r\n         * });\r\n         *\r\n         * // Creating an instance with caching\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * const cachedApiPost = new hison.link.ApiPost(\"UserService.createUser\", cachingModule);\r\n         *\r\n         * // Handling request events\r\n         * cachedApiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n         *     console.log(\"POST request completed!\", data);\r\n         * });\r\n         * ```\r\n         *\r\n         * ### **Internal Components**\r\n         * - **`ApiLink`**: Handles request execution and response processing.\r\n         * - **`EventEmitter`**: Manages event-driven request handling.\r\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n         *\r\n         * ### **Return Value**\r\n         * - This class returns an instance of `ApiPost`, providing methods for executing POST requests and managing request events.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Sending data to a REST API** with structured payloads.\r\n         * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\r\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n         */\r\n        ApiPost: new (serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPost;\r\n        /**\r\n         * **`ApiPut` - A class for handling HTTP PUT requests within the `hison.link` module.**\r\n         *\r\n         * The `ApiPut` class is responsible for sending HTTP PUT requests to a specified service command.\r\n         * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\r\n         *\r\n         * ### **Key Features**\r\n         * - **Executes HTTP PUT requests** using `ApiLink`.\r\n         * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\r\n         * - **Supports response caching** via an optional `CachingModule`.\r\n         * - **Emits request lifecycle events** using `EventEmitter`.\r\n         * - **Allows event listeners** for monitoring request execution.\r\n         *\r\n         * ### **How It Works**\r\n         * - When instantiated, `ApiPut` requires a `serviceCmd` that specifies the business logic endpoint.\r\n         * - The `call()` method sends a PUT request with the provided request data.\r\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n         * - Event listeners can be attached to monitor the request lifecycle.\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Creating an instance of ApiPut\r\n         * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\r\n         *\r\n         * // Creating request data\r\n         * const requestData = new hison.data.DataWrapper();\r\n         * requestData.putString(\"username\", \"Alice\");\r\n         * \r\n         * // Sending a PUT request\r\n         * apiPut.call(requestData).then(response => {\r\n         *     console.log(response.data); // Response data\r\n         * });\r\n         *\r\n         * // Creating an instance with caching\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * const cachedApiPut = new hison.link.ApiPut(\"UserService.createUser\", cachingModule);\r\n         *\r\n         * // Handling request events\r\n         * cachedApiPut.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n         *     console.log(\"PUT request completed!\", data);\r\n         * });\r\n         * ```\r\n         *\r\n         * ### **Internal Components**\r\n         * - **`ApiLink`**: Handles request execution and response processing.\r\n         * - **`EventEmitter`**: Manages event-driven request handling.\r\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n         *\r\n         * ### **Return Value**\r\n         * - This class returns an instance of `ApiPut`, providing methods for executing PUT requests and managing request events.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Sending data to a REST API** with structured payloads.\r\n         * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\r\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n         */\r\n        ApiPut: new (serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPut;\r\n        /**\r\n         * **`ApiPatch` - A class for handling HTTP PATCH requests within the `hison.link` module.**\r\n         *\r\n         * The `ApiPatch` class is responsible for sending HTTP PATCH requests to a specified service command.\r\n         * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\r\n         *\r\n         * ### **Key Features**\r\n         * - **Executes HTTP PATCH requests** using `ApiLink`.\r\n         * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\r\n         * - **Supports response caching** via an optional `CachingModule`.\r\n         * - **Emits request lifecycle events** using `EventEmitter`.\r\n         * - **Allows event listeners** for monitoring request execution.\r\n         *\r\n         * ### **How It Works**\r\n         * - When instantiated, `ApiPatch` requires a `serviceCmd` that specifies the business logic endpoint.\r\n         * - The `call()` method sends a PATCH request with the provided request data.\r\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n         * - Event listeners can be attached to monitor the request lifecycle.\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Creating an instance of ApiPatch\r\n         * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\r\n         *\r\n         * // Creating request data\r\n         * const requestData = new hison.data.DataWrapper();\r\n         * requestData.putString(\"username\", \"Alice\");\r\n         * \r\n         * // Sending a PATCH request\r\n         * apiPatch.call(requestData).then(response => {\r\n         *     console.log(response.data); // Response data\r\n         * });\r\n         *\r\n         * // Creating an instance with caching\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * const cachedApiPatch = new hison.link.ApiPatch(\"UserService.createUser\", cachingModule);\r\n         *\r\n         * // Handling request events\r\n         * cachedApiPatch.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n         *     console.log(\"PATCH request completed!\", data);\r\n         * });\r\n         * ```\r\n         *\r\n         * ### **Internal Components**\r\n         * - **`ApiLink`**: Handles request execution and response processing.\r\n         * - **`EventEmitter`**: Manages event-driven request handling.\r\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n         *\r\n         * ### **Return Value**\r\n         * - This class returns an instance of `ApiPatch`, providing methods for executing PATCH requests and managing request events.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Sending data to a REST API** with structured payloads.\r\n         * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\r\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n         */\r\n        ApiPatch: new (serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPatch;\r\n        /**\r\n         * **`ApiDelete` - A class for handling HTTP DELETE requests within the `hison.link` module.**\r\n         *\r\n         * The `ApiDelete` class is responsible for sending HTTP DELETE requests to a specified service command.\r\n         * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\r\n         *\r\n         * ### **Key Features**\r\n         * - **Executes HTTP DELETE requests** using `ApiLink`.\r\n         * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\r\n         * - **Supports response caching** via an optional `CachingModule`.\r\n         * - **Emits request lifecycle events** using `EventEmitter`.\r\n         * - **Allows event listeners** for monitoring request execution.\r\n         *\r\n         * ### **How It Works**\r\n         * - When instantiated, `ApiDelete` requires a `serviceCmd` that specifies the business logic endpoint.\r\n         * - The `call()` method sends a DELETE request with the provided request data.\r\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n         * - Event listeners can be attached to monitor the request lifecycle.\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Creating an instance of ApiDelete\r\n         * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\r\n         *\r\n         * // Creating request data\r\n         * const requestData = new hison.data.DataWrapper();\r\n         * requestData.putString(\"username\", \"Alice\");\r\n         * \r\n         * // Sending a DELETE request\r\n         * apiDelete.call(requestData).then(response => {\r\n         *     console.log(response.data); // Response data\r\n         * });\r\n         *\r\n         * // Creating an instance with caching\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * const cachedApiDelete = new hison.link.ApiDelete(\"UserService.createUser\", cachingModule);\r\n         *\r\n         * // Handling request events\r\n         * cachedApiDelete.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n         *     console.log(\"DELETE request completed!\", data);\r\n         * });\r\n         * ```\r\n         *\r\n         * ### **Internal Components**\r\n         * - **`ApiLink`**: Handles request execution and response processing.\r\n         * - **`EventEmitter`**: Manages event-driven request handling.\r\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n         *\r\n         * ### **Return Value**\r\n         * - This class returns an instance of `ApiDelete`, providing methods for executing DELETE requests and managing request events.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Sending data to a REST API** with structured payloads.\r\n         * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\r\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n         */\r\n        ApiDelete: new (serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiDelete;\r\n        /**\r\n         * **`ApiGetUrl` - A class for handling HTTP GET requests to a specified URL.**\r\n         *\r\n         * The `ApiGetUrl` class is responsible for sending HTTP GET requests to a provided URL.\r\n         * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\r\n         *\r\n         * ### **Key Features**\r\n         * - **Executes HTTP GET requests** using `ApiLink`.\r\n         * - **Accepts a direct URL** instead of using a predefined API resource path.\r\n         * - **Supports response caching** via an optional `CachingModule`.\r\n         * - **Emits request lifecycle events** using `EventEmitter`.\r\n         * - **Allows event listeners** for monitoring request execution.\r\n         *\r\n         * ### **How It Works**\r\n         * - When instantiated, `ApiGetUrl` requires a valid URL.\r\n         * - The `call()` method triggers a GET request to the specified URL.\r\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n         * - Event listeners can be attached to monitor the request lifecycle.\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Creating an instance of ApiGetUrl without caching\r\n         * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\r\n         * \r\n         * // Sending a GET request\r\n         * apiGetUrl.call().then(response => {\r\n         *     console.log(response.data); // Response data\r\n         * });\r\n         *\r\n         * // Creating an instance with caching\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * const cachedApiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\", cachingModule);\r\n         * \r\n         * // Handling request events\r\n         * cachedApiGetUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n         *     console.log(\"GET request completed!\", data);\r\n         * });\r\n         * ```\r\n         *\r\n         * ### **Internal Components**\r\n         * - **`ApiLink`**: Handles request execution and response processing.\r\n         * - **`EventEmitter`**: Manages event-driven request handling.\r\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n         *\r\n         * ### **Return Value**\r\n         * - This class returns an instance of `ApiGetUrl`, which provides methods for executing GET requests to a specific URL.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Fetching data from an external API** by specifying a full URL.\r\n         * - **Using cached responses** to reduce redundant API calls.\r\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n         */\r\n        ApiGetUrl: new (url: string, cachingModule?: InterfaceCachingModule) => InterfaceApiGetUrl;\r\n        /**\r\n         * **`ApiPostUrl` - A class for handling HTTP POST requests to a specified URL.**\r\n         *\r\n         * The `ApiPostUrl` class is responsible for sending HTTP POST requests to a provided URL.\r\n         * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\r\n         *\r\n         * ### **Key Features**\r\n         * - **Executes HTTP POST requests** using `ApiLink`.\r\n         * - **Accepts a direct URL** instead of using a predefined service command.\r\n         * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\r\n         * - **Supports response caching** via an optional `CachingModule`.\r\n         * - **Emits request lifecycle events** using `EventEmitter`.\r\n         * - **Allows event listeners** for monitoring request execution.\r\n         *\r\n         * ### **How It Works**\r\n         * - When instantiated, `ApiPostUrl` requires a valid URL and an optional `serviceCmd`.\r\n         * - The `call()` method sends a POST request with the provided request data.\r\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n         * - Event listeners can be attached to monitor the request lifecycle.\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Creating an instance of ApiPostUrl\r\n         * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n         *\r\n         * // Creating request data\r\n         * const requestData = new hison.data.DataWrapper();\r\n         * requestData.putString(\"username\", \"Alice\");\r\n         * \r\n         * // Sending a POST request\r\n         * apiPostUrl.call(requestData).then(response => {\r\n         *     console.log(response.data); // Response data\r\n         * });\r\n         *\r\n         * // Creating an instance with caching\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * const cachedApiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\r\n         *\r\n         * // Handling request events\r\n         * cachedApiPostUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n         *     console.log(\"POST request completed!\", data);\r\n         * });\r\n         * ```\r\n         *\r\n         * ### **Internal Components**\r\n         * - **`ApiLink`**: Handles request execution and response processing.\r\n         * - **`EventEmitter`**: Manages event-driven request handling.\r\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n         *\r\n         * ### **Return Value**\r\n         * - This class returns an instance of `ApiPostUrl`, which provides methods for executing POST requests to a specific URL.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Sending data to an external API** using a full URL.\r\n         * - **Passing a `serviceCmd` for structured request routing**.\r\n         * - **Using cached responses** to reduce redundant API calls.\r\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n         */\r\n        ApiPostUrl: new (url: string, serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPostUrl;\r\n        /**\r\n         * **`ApiPutUrl` - A class for handling HTTP PUT requests to a specified URL.**\r\n         *\r\n         * The `ApiPutUrl` class is responsible for sending HTTP PUT requests to a provided URL.\r\n         * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\r\n         *\r\n         * ### **Key Features**\r\n         * - **Executes HTTP PUT requests** using `ApiLink`.\r\n         * - **Accepts a direct URL** instead of using a predefined service command.\r\n         * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\r\n         * - **Supports response caching** via an optional `CachingModule`.\r\n         * - **Emits request lifecycle events** using `EventEmitter`.\r\n         * - **Allows event listeners** for monitoring request execution.\r\n         *\r\n         * ### **How It Works**\r\n         * - When instantiated, `ApiPutUrl` requires a valid URL and an optional `serviceCmd`.\r\n         * - The `call()` method sends a PUT request with the provided request data.\r\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n         * - Event listeners can be attached to monitor the request lifecycle.\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Creating an instance of ApiPutUrl\r\n         * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n         *\r\n         * // Creating request data\r\n         * const requestData = new hison.data.DataWrapper();\r\n         * requestData.putString(\"username\", \"Alice\");\r\n         * \r\n         * // Sending a PUT request\r\n         * apiPutUrl.call(requestData).then(response => {\r\n         *     console.log(response.data); // Response data\r\n         * });\r\n         *\r\n         * // Creating an instance with caching\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * const cachedApiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\r\n         *\r\n         * // Handling request events\r\n         * cachedApiPutUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n         *     console.log(\"PUT request completed!\", data);\r\n         * });\r\n         * ```\r\n         *\r\n         * ### **Internal Components**\r\n         * - **`ApiLink`**: Handles request execution and response processing.\r\n         * - **`EventEmitter`**: Manages event-driven request handling.\r\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n         *\r\n         * ### **Return Value**\r\n         * - This class returns an instance of `ApiPutUrl`, which provides methods for executing PUT requests to a specific URL.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Sending data to an external API** using a full URL.\r\n         * - **Passing a `serviceCmd` for structured request routing**.\r\n         * - **Using cached responses** to reduce redundant API calls.\r\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n         */\r\n        ApiPutUrl: new (url: string, serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPutUrl;\r\n        /**\r\n         * **`ApiPatchUrl` - A class for handling HTTP PATCH requests to a specified URL.**\r\n         *\r\n         * The `ApiPatchUrl` class is responsible for sending HTTP PATCH requests to a provided URL.\r\n         * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\r\n         *\r\n         * ### **Key Features**\r\n         * - **Executes HTTP PATCH requests** using `ApiLink`.\r\n         * - **Accepts a direct URL** instead of using a predefined service command.\r\n         * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\r\n         * - **Supports response caching** via an optional `CachingModule`.\r\n         * - **Emits request lifecycle events** using `EventEmitter`.\r\n         * - **Allows event listeners** for monitoring request execution.\r\n         *\r\n         * ### **How It Works**\r\n         * - When instantiated, `ApiPatchUrl` requires a valid URL and an optional `serviceCmd`.\r\n         * - The `call()` method sends a PATCH request with the provided request data.\r\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n         * - Event listeners can be attached to monitor the request lifecycle.\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Creating an instance of ApiPatchUrl\r\n         * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n         *\r\n         * // Creating request data\r\n         * const requestData = new hison.data.DataWrapper();\r\n         * requestData.putString(\"username\", \"Alice\");\r\n         * \r\n         * // Sending a PATCH request\r\n         * apiPatchUrl.call(requestData).then(response => {\r\n         *     console.log(response.data); // Response data\r\n         * });\r\n         *\r\n         * // Creating an instance with caching\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * const cachedApiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\r\n         *\r\n         * // Handling request events\r\n         * cachedApiPatchUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n         *     console.log(\"PATCH request completed!\", data);\r\n         * });\r\n         * ```\r\n         *\r\n         * ### **Internal Components**\r\n         * - **`ApiLink`**: Handles request execution and response processing.\r\n         * - **`EventEmitter`**: Manages event-driven request handling.\r\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n         *\r\n         * ### **Return Value**\r\n         * - This class returns an instance of `ApiPatchUrl`, which provides methods for executing PATCH requests to a specific URL.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Sending data to an external API** using a full URL.\r\n         * - **Passing a `serviceCmd` for structured request routing**.\r\n         * - **Using cached responses** to reduce redundant API calls.\r\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n         */\r\n        ApiPatchUrl: new (url: string, serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPatchUrl;\r\n        /**\r\n         * **`ApiDeleteUrl` - A class for handling HTTP DELETE requests to a specified URL.**\r\n         *\r\n         * The `ApiDeleteUrl` class is responsible for sending HTTP DELETE requests to a provided URL.\r\n         * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\r\n         *\r\n         * ### **Key Features**\r\n         * - **Executes HTTP DELETE requests** using `ApiLink`.\r\n         * - **Accepts a direct URL** instead of using a predefined service command.\r\n         * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\r\n         * - **Supports response caching** via an optional `CachingModule`.\r\n         * - **Emits request lifecycle events** using `EventEmitter`.\r\n         * - **Allows event listeners** for monitoring request execution.\r\n         *\r\n         * ### **How It Works**\r\n         * - When instantiated, `ApiDeleteUrl` requires a valid URL and an optional `serviceCmd`.\r\n         * - The `call()` method sends a DELETE request with the provided request data.\r\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n         * - Event listeners can be attached to monitor the request lifecycle.\r\n         *\r\n         * ### **Example Usage**\r\n         * ```typescript\r\n         * // Creating an instance of ApiDeleteUrl\r\n         * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n         *\r\n         * // Creating request data\r\n         * const requestData = new hison.data.DataWrapper();\r\n         * requestData.putString(\"username\", \"Alice\");\r\n         * \r\n         * // Sending a DELETE request\r\n         * apiDeleteUrl.call(requestData).then(response => {\r\n         *     console.log(response.data); // Response data\r\n         * });\r\n         *\r\n         * // Creating an instance with caching\r\n         * const cachingModule = new hison.link.CachingModule(20);\r\n         * const cachedApiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\r\n         *\r\n         * // Handling request events\r\n         * cachedApiDeleteUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n         *     console.log(\"DELETE request completed!\", data);\r\n         * });\r\n         * ```\r\n         *\r\n         * ### **Internal Components**\r\n         * - **`ApiLink`**: Handles request execution and response processing.\r\n         * - **`EventEmitter`**: Manages event-driven request handling.\r\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n         *\r\n         * ### **Return Value**\r\n         * - This class returns an instance of `ApiDeleteUrl`, which provides methods for executing DELETE requests to a specific URL.\r\n         *\r\n         * ### **Typical Use Cases**\r\n         * - **Sending data to an external API** using a full URL.\r\n         * - **Passing a `serviceCmd` for structured request routing**.\r\n         * - **Using cached responses** to reduce redundant API calls.\r\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n         */\r\n        ApiDeleteUrl: new (url: string, serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiDeleteUrl;\r\n    }\r\n}\r\n//====================================================================================\r\n//utils interface, type\r\n//====================================================================================\r\n/**\r\n * Represents a date structure with year, month, and day properties.\r\n *\r\n * - `y`: The year (e.g., `2025`).\r\n * - `M`: The month (`1-12`).\r\n * - `d`: The day of the month (`1-31`).\r\n *\r\n * All properties can be `null` if no value is set.\r\n */\r\nexport interface DateObject {\r\n    y: number | null;\r\n    M: number | null;\r\n    d: number | null;\r\n}\r\n/**\r\n * Represents a time structure with hours, minutes, and seconds.\r\n *\r\n * - `h`: The hour (`0-23`).\r\n * - `m`: The minutes (`0-59`).\r\n * - `s`: The seconds (`0-59`).\r\n *\r\n * All properties can be `null` if no value is set.\r\n */\r\nexport interface TimeObject {\r\n    h: number | null;\r\n    m: number | null;\r\n    s: number | null;\r\n}\r\n/**\r\n * Represents a full datetime structure combining `DateObject` and `TimeObject`.\r\n *\r\n * - Includes year, month, day, hour, minute, and second properties.\r\n * - All properties can be `null` if no value is set.\r\n */\r\nexport interface DateTimeObject extends DateObject, TimeObject {}\r\n/**\r\n * Enum representing the full names of the months (`January` to `December`).\r\n *\r\n * - Values range from `1` to `12`, corresponding to the month number.\r\n */\r\nexport enum MonthFullName {\r\n    January = 1, February, March, April, May, June, July, August, September, October, November, December\r\n}\r\n/**\r\n * Enum representing the abbreviated names of the months (`Jan` to `Dec`).\r\n *\r\n * - Values range from `1` to `12`, corresponding to the month number.\r\n */\r\nexport enum MonthShortName {\r\n    Jan = 1, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec\r\n}\r\n/**\r\n * Enum representing the full English names of the days of the week (`Sunday` to `Saturday`).\r\n *\r\n * - Values range from `0` to `6`, where `0 = Sunday`, `1 = Monday`, ..., `6 = Saturday`.\r\n */\r\nexport enum DayOfWeekFullName {\r\n    Sun = 0, Mon, Tue, Wed, Thu, Fri, Sat\r\n}\r\n/**\r\n * Enum representing the abbreviated English names of the days of the week (`Sun` to `Sat`).\r\n *\r\n * - Values range from `0` to `6`, where `0 = Sun`, `1 = Mon`, ..., `6 = Sat`.\r\n */\r\nexport enum DayOfWeekShortName {\r\n    Sunday = 0, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\r\n}\r\n/**\r\n * Enum representing the full Korean names of the days of the week (`일요일` to `토요일`).\r\n *\r\n * - Values range from `0` to `6`, where `0 = 일요일`, `1 = 월요일`, ..., `6 = 토요일`.\r\n */\r\nexport enum DayOfWeekFullNameKR {\r\n    일 = 0, 월, 화, 수, 목, 금, 토\r\n}\r\n/**\r\n * Enum representing the abbreviated Korean names of the days of the week (`일` to `토`).\r\n *\r\n * - Values range from `0` to `6`, where `0 = 일`, `1 = 월`, ..., `6 = 토`.\r\n */\r\nexport enum DayOfWeekShortNameKR {\r\n    일요일 = 0, 월요일, 화요일, 수요일, 목요일, 금요일, 토요일\r\n}\r\n//====================================================================================\r\n//shield interface, type\r\n//====================================================================================\r\n\r\n//====================================================================================\r\n//data interface, type\r\n//====================================================================================\r\n/**\r\n * Converts special values into a predefined format before they are inserted into the DataModel.\r\n * This function allows for custom handling of values like Date, or other special values, to ensure\r\n * they are stored in the DataModel in a consistent and predictable format. By default, it returns the value as is.\r\n *\r\n * @param {any} value - The value to be converted. This can be a special value like Date or any other value.\r\n * @returns {any} Returns the converted value.\r\n *\r\n * @example\r\n * //When set the hison.data.convertValue\r\n * hison.data.convertValue = function(value) {\r\n *     if (value instanceof Date) {\r\n *          let year = value.getFullYear();\r\n *          let month = value.getMonth() + 1;\r\n *          let day = value.getDate();\r\n *          let hour = value.getHours();\r\n *          let minute = value.getMinutes();\r\n *          let second = value.getSeconds();\r\n *          month = month < 10 ? '0' + month : month;\r\n *          day = day < 10 ? '0' + day : day;\r\n *          hour = hour < 10 ? '0' + hour : hour;\r\n *          minute = minute < 10 ? '0' + minute : minute;\r\n *          second = second < 10 ? '0' + second : second;\r\n *          return year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second;\r\n *     }\r\n *     return value;\r\n * };\r\n * //Inserting a Date object into DataModel\r\n * const dm = newDataModel([{key:'key1',value:new Date()},{key:'key2',value:new Date()}]);\r\n * //The value will be in 'yyyy-MM-dd hh:mm:ss' format\r\n * \r\n * Note: \r\n * 1. Special values not processed by convertValue are stored in the DataModel as references. \r\n *    Changes to the original object will also reflect in the DataModel.\r\n * 2. After customizing the handling of special values, ensure to return the object for all other cases.\r\n *    This ensures that undefined values are still stored in the DataModel.\r\n */\r\nexport interface ConvertValue {\r\n    (value: any): any;\r\n};\r\n/**\r\n * The `DataWrapper` class provides a flexible key-value storage container\r\n * within the `hisondev` solution. It allows storing various data types,\r\n * including string value and `DataModel` instances.\r\n *\r\n * ### Core Features:\r\n * - **Key-Value Storage:**\r\n *   - Supports dynamic insertion and retrieval of key-value pairs.\r\n *   - Ensures that keys are always strings.\r\n * - **Integration with `DataModel`:**\r\n *   - Allows storing `DataModel` instances under specific keys.\r\n *   - Provides methods to retrieve `DataModel` instances safely.\r\n * - **Serialization & Cloning:**\r\n *   - Supports deep cloning of stored data.\r\n *   - Provides JSON serialization for structured data handling.\r\n * - **Validation & Type Safety:**\r\n *   - Ensures type safety for values stored in `DataWrapper`.\r\n *   - Throws errors when attempting to insert invalid types.\r\n *\r\n * ### Data Integrity & Deep Copying:\r\n * - Uses `hison.utils.deepCopyObject()` to ensure stored objects are immutable.\r\n * - Prevents unintended modifications by returning cloned values.\r\n *\r\n * ### Example Usage:\r\n * ```typescript\r\n * // Creating a DataWrapper with key-value pairs\r\n * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\r\n * console.log(dataWrapper.getString(\"name\")); // Output: \"Alice\"\r\n *\r\n * // Storing a DataModel instance\r\n * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n * dataWrapper.putDataModel(\"users\", dataModel);\r\n * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\r\n *\r\n * // Serializing the DataWrapper to JSON\r\n * console.log(dataWrapper.getSerialized());\r\n * ```\r\n */\r\nexport interface InterfaceDataWrapper {\r\n    /**\r\n     * Checks whether the current instance is a `DataWrapper`.\r\n     * This method is primarily used for type verification.\r\n     *\r\n     * ### Returns\r\n     * - **`boolean`**: Returns `true` if the instance is a `DataWrapper`, otherwise `false`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper({ key: \"value\" });\r\n     * console.log(dataWrapper.getIsDataWrapper()); // Output: true\r\n     * ```\r\n     *\r\n     * @returns {boolean} `true` if the instance is a `DataWrapper`, otherwise `false`.\r\n     */\r\n    getIsDataWrapper(): boolean;\r\n    /**\r\n     * Creates and returns a deep copy of the current `DataWrapper` instance.\r\n     * This method ensures that all stored key-value pairs are fully cloned, \r\n     * preventing unintended modifications between the original and copied instances.\r\n     *\r\n     * ### Implementation Details\r\n     * - Uses `hison.utils.deepCopyObject()` to recursively copy nested objects and arrays.\r\n     * - Supports cloning `DataModel` instances stored within the `DataWrapper`.\r\n     * - Prevents circular references by tracking previously copied objects.\r\n     * - Ensures that modifications in the cloned instance do not affect the original instance.\r\n     *\r\n     * ### Returns\r\n     * - **`DataWrapper`**: A new `DataWrapper` instance containing a deep copy of the original data.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\r\n     * const clonedWrapper = dataWrapper.clone();\r\n     * \r\n     * console.log(clonedWrapper.getString(\"name\")); // Output: \"Alice\"\r\n     * console.log(clonedWrapper !== dataWrapper);   // Output: true (Cloned instance is independent)\r\n     *\r\n     * // Deep copy verification\r\n     * const originalNested = new hison.data.DataModel([{ id: 1, value: \"Test\" }]);\r\n     * const dataWrapperWithModel = new hison.data.DataWrapper({ nested: originalNested });\r\n     * const clonedWrapperWithModel = dataWrapperWithModel.clone();\r\n     * \r\n     * console.log(clonedWrapperWithModel.getDataModel(\"nested\") !== originalNested); // Output: true\r\n     * ```\r\n     *\r\n     * @returns {InterfaceDataWrapper} A new `DataWrapper` instance with a deep copy of the stored data.\r\n     */\r\n    clone(): InterfaceDataWrapper | null;\r\n    /**\r\n     * Removes all stored key-value pairs in the `DataWrapper`, resetting it to an empty state.\r\n     * \r\n     * ### Behavior\r\n     * - Clears the internal storage by setting `_data` to an empty object.\r\n     * - Returns the same `DataWrapper` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`DataWrapper`**: The current instance after clearing all stored data.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper({ key1: \"value1\", key2: \"value2\" });\r\n     * console.log(dataWrapper.size()); // Output: 2\r\n     * \r\n     * dataWrapper.clear();\r\n     * console.log(dataWrapper.size()); // Output: 0\r\n     * ```\r\n     *\r\n     * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after clearing all data.\r\n     */\r\n    clear(): InterfaceDataWrapper;\r\n    /**\r\n     * Serializes the `DataWrapper` into a JSON string representation.\r\n     * Converts stored `DataModel` instances into their row data format for proper serialization.\r\n     *\r\n     * ### Behavior\r\n     * - Iterates through all key-value pairs in the `DataWrapper`.\r\n     * - If a value is a `DataModel`, it is converted to an array of rows using `getRows()`.\r\n     * - Other values are stored as-is.\r\n     * - The final object is serialized into a JSON string.\r\n     *\r\n     * ### Returns\r\n     * - **`string`**: A JSON string representation of the `DataWrapper` contents.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * const dataWrapper = new hison.data.DataWrapper({ users: dataModel, status: \"active\" });\r\n     * \r\n     * console.log(dataWrapper.getSerialized());\r\n     * // Output: '{\"users\":[{\"id\":1,\"name\":\"Alice\"}],\"status\":\"active\"}'\r\n     * ```\r\n     *\r\n     * @returns {string} JSON string representation of the stored data.\r\n     */\r\n    getSerialized(): string;\r\n    /**\r\n     * Retrieves the value associated with the specified key from the `DataWrapper`.\r\n     * If the value exists, a deep copy is returned to prevent unintended modifications.\r\n     *\r\n     * ### Generic Type `<T>`\r\n     * - `T` represents the shape of the `DataModel` rows.\r\n     * - If `T` is not specified, it defaults to `Record<string, any>`, allowing dynamic structures.\r\n     *\r\n     * ### Parameters\r\n     * - `key` **(string)**: The key associated with the value to retrieve.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `key` is not a string.\r\n     * - If the key exists and contains a `DataModel<T>`, returns a deep copy of the stored `DataModel<T>`.\r\n     * - If the key exists but is a string, returns the stored string value.\r\n     * - If the key does not exist, returns `null`.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T> | string | null`**: \r\n     *   - A deep copy of the `DataModel<T>` if stored under the key.\r\n     *   - The string value if a string was stored under the key.\r\n     *   - `null` if the key does not exist.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     * }\r\n     *\r\n     * const dataWrapper = new hison.data.DataWrapper();\r\n     *\r\n     * // Storing a string value\r\n     * dataWrapper.put(\"message\", \"Hello\");\r\n     * console.log(dataWrapper.get(\"message\")); // Output: \"Hello\"\r\n     *\r\n     * // Storing a DataModel with a defined type\r\n     * const userModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * dataWrapper.put(\"users\", userModel);\r\n     *\r\n     * // Retrieving with type inference\r\n     * const users = dataWrapper.get<User>(\"users\");\r\n     * console.log(users?.getRowCount()); // Output: 2\r\n     * console.log(users?.getValue(0, \"name\").toUpperCase()); // Output: \"ALICE\"\r\n     *\r\n     * // Attempting to retrieve a non-existent key\r\n     * console.log(dataWrapper.get(\"nonExistentKey\")); // Output: null\r\n     * ```\r\n     *\r\n     * @param {string} key The key to retrieve the associated value.\r\n     * @returns {InterfaceDataModel<T> | string | null} A deep copy of the stored value, or `null` if the key is not found.\r\n     */\r\n    get<T = Record<string, any>>(key: string): InterfaceDataModel<T> | string | null;\r\n    /**\r\n     * Retrieves the string value associated with the specified key from the `DataWrapper`.\r\n     * Ensures that the retrieved value is explicitly a string before returning it.\r\n     *\r\n     * ### Parameters\r\n     * - `key` **(string)**: The key associated with the string value to retrieve.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `key` is not a string.\r\n     * - Throws an error if the value associated with `key` is not a string.\r\n     * - Returns the string value if it exists; otherwise, returns `null`.\r\n     *\r\n     * ### Returns\r\n     * - **`string | null`**: The associated string value, or `null` if the key is not found.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper({ status: \"active\", count: 5 });\r\n     * \r\n     * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\r\n     * console.log(dataWrapper.getString(\"nonExistentKey\")); // Output: null\r\n     *\r\n     * // Throws an error: \"The data does not contain the specified string value.\"\r\n     * console.log(dataWrapper.getString(\"count\"));\r\n     * ```\r\n     *\r\n     * @param {string} key The key associated with the string value.\r\n     * @returns {string | null} The associated string value, or `null` if not found.\r\n     * @throws {Error} If the key is not a string or if the stored value is not a string.\r\n     */\r\n    getString(key: string): string | null;\r\n    /**\r\n     * Retrieves the `DataModel<T>` instance associated with the specified key from the `DataWrapper`.\r\n     * Ensures that the retrieved value is a valid `DataModel<T>` before returning a cloned copy.\r\n     *\r\n     * ### Generic Type `<T>`\r\n     * - `T` represents the shape of each row in the `DataModel<T>`.\r\n     * - If `T` is not specified, it defaults to `Record<string, any>`, allowing dynamic structures.\r\n     *\r\n     * ### Parameters\r\n     * - `key` **(string)**: The key associated with the `DataModel<T>` instance to retrieve.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `key` is not a string.\r\n     * - Throws an error if the value associated with `key` is not a valid `DataModel<T>` instance.\r\n     * - Returns a deep-cloned copy of the `DataModel<T>` to maintain data integrity.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: A cloned `DataModel<T>` instance retrieved from the `DataWrapper`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     * }\r\n     * \r\n     * const userModel = new hison.data.DataModel<User>([{ id: 1, name: \"Alice\" }]);\r\n     * const dataWrapper = new hison.data.DataWrapper();\r\n     * dataWrapper.put(\"users\", userModel);\r\n     * \r\n     * // Retrieving with type inference\r\n     * const clonedDataModel = dataWrapper.getDataModel<User>(\"users\");\r\n     * console.log(clonedDataModel.getRowCount()); // Output: 1\r\n     * console.log(clonedDataModel.getValue(0, \"name\").toUpperCase()); // Output: \"ALICE\"\r\n     *\r\n     * // Throws an error: \"The data does not contain the specified data-model value.\"\r\n     * console.log(dataWrapper.getDataModel(\"nonExistentKey\"));\r\n     * ```\r\n     *\r\n     * @param {string} key The key associated with the `DataModel<T>` instance.\r\n     * @returns {InterfaceDataModel<T>} A cloned `DataModel<T>` instance retrieved from the `DataWrapper`.\r\n     * @throws {Error} If the key is not a string or if the stored value is not a valid `DataModel<T>`.\r\n     */\r\n    getDataModel<T = Record<string, any>>(key: string): InterfaceDataModel<T>;\r\n    /**\r\n     * Inserts or updates a key-value pair in the `DataWrapper`.\r\n     * Allows storing primitive values, strings, and `DataModel` instances.\r\n     *\r\n     * ### Parameters\r\n     * - `key` **(string)**: The key under which the value will be stored.\r\n     * - `value` **(any)**: The value to be stored. Can be a string, number, boolean, `DataModel`, or other valid types.\r\n     *\r\n     * ### Behavior\r\n     * - Calls the internal `_put()` method to validate and store the value.\r\n     * - If the key already exists, its value is updated.\r\n     * - Returns the current `DataWrapper` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`DataWrapper`**: The current instance after inserting/updating the value.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper();\r\n     * \r\n     * // Storing a string value\r\n     * dataWrapper.put(\"status\", \"active\");\r\n     * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\r\n     * \r\n     * // Storing a DataModel instance\r\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * dataWrapper.put(\"users\", dataModel);\r\n     * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\r\n     * ```\r\n     *\r\n     * @param {string} key The key under which the value is stored.\r\n     * @param {any} value The value to store.\r\n     * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\r\n     */\r\n    put(key: string, value: any): InterfaceDataWrapper;\r\n    /**\r\n     * Inserts or updates a key-value pair in the `DataWrapper`, ensuring that the value is a string-convertible type.\r\n     * Only accepts primitive types (`string`, `number`, `boolean`, `bigint`, `symbol`) or `null`.\r\n     *\r\n     * ### Parameters\r\n     * - `key` **(string)**: The key under which the value will be stored.\r\n     * - `value` **(string | number | boolean | bigint | symbol | null)**: The value to be stored, \r\n     *   restricted to types that can be converted to a string.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `key` is not a string.\r\n     * - Throws an error if `value` is not of a valid type.\r\n     * - Calls the internal `_put()` method to store the value.\r\n     * - Returns the current `DataWrapper` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`DataWrapper`**: The current instance after inserting/updating the value.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper();\r\n     * \r\n     * // Storing a string value\r\n     * dataWrapper.putString(\"status\", \"active\");\r\n     * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\r\n     *\r\n     * // Storing a number (converted to string internally)\r\n     * dataWrapper.putString(\"count\", 10);\r\n     * console.log(dataWrapper.getString(\"count\")); // Output: \"10\"\r\n     *\r\n     * // Throws an error: \"Please insert only values convertible to string type.\"\r\n     * dataWrapper.putString(\"invalid\", { key: \"value\" });\r\n     * ```\r\n     *\r\n     * @param {string} key The key under which the value is stored.\r\n     * @param {string | number | boolean | bigint | symbol | null} value The value to store.\r\n     * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\r\n     * @throws {Error} If `key` is not a string or `value` is not a valid type.\r\n     */\r\n    putString(key: string, value: string | number | boolean | bigint | symbol | null): InterfaceDataWrapper;\r\n    /**\r\n     * Inserts or updates a `DataModel` instance in the `DataWrapper`.\r\n     * Ensures that the stored value is a valid `DataModel`.\r\n     *\r\n     * ### Parameters\r\n     * - `key` **(string)**: The key under which the `DataModel` will be stored.\r\n     * - `value` **(`DataModel`)**: The `DataModel` instance to be stored.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `key` is not a string.\r\n     * - Throws an error if `value` is not a valid `DataModel` instance.\r\n     * - Calls the internal `_put()` method to store the `DataModel`.\r\n     * - Returns the current `DataWrapper` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`DataWrapper`**: The current instance after inserting/updating the `DataModel`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper();\r\n     * \r\n     * // Creating and storing a DataModel\r\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * dataWrapper.putDataModel(\"users\", dataModel);\r\n     * \r\n     * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\r\n     *\r\n     * // Throws an error: \"Please insert only values of data-model type.\"\r\n     * dataWrapper.putDataModel(\"invalid\", \"not a DataModel\");\r\n     * ```\r\n     *\r\n     * @param {string} key The key under which the `DataModel` is stored.\r\n     * @param {InterfaceDataModel<any>} value The `DataModel` instance to store.\r\n     * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\r\n     * @throws {Error} If `key` is not a string or `value` is not a valid `DataModel`.\r\n     */\r\n    putDataModel(key: string, value: InterfaceDataModel<any>): InterfaceDataWrapper;\r\n    /**\r\n     * Converts the `DataWrapper` instance into a standard JavaScript object.\r\n     * If the stored values include `DataModel` instances, they are converted into object representations.\r\n     *\r\n     * ### Behavior\r\n     * - Iterates through all key-value pairs in the `DataWrapper`.\r\n     * - If a value is a `DataModel`, it is converted using `getObject()`.\r\n     * - Other values are returned as-is.\r\n     * - Returns a plain JavaScript object representation of the `DataWrapper`.\r\n     *\r\n     * ### Returns\r\n     * - **`Record<string, any>`**: A plain object containing all stored key-value pairs.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * const dataWrapper = new hison.data.DataWrapper({ users: dataModel, status: \"active\" });\r\n     * \r\n     * console.log(dataWrapper.getObject());\r\n     * // Output: { users: { cols: [\"id\", \"name\"], rows: [{ id: 1, name: \"Alice\" }] }, status: \"active\" }\r\n     * ```\r\n     *\r\n     * @returns {Record<string, any>} A plain object representation of the `DataWrapper` instance.\r\n     */\r\n    getObject(): Record<string, any>;\r\n    /**\r\n     * Checks whether the `DataWrapper` contains a specified key.\r\n     *\r\n     * ### Parameters\r\n     * - `key` **(string)**: The key to check for existence in the `DataWrapper`.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `key` is not a string.\r\n     * - Uses `hasOwnProperty()` to determine if the key exists in the stored data.\r\n     *\r\n     * ### Returns\r\n     * - **`boolean`**: `true` if the key exists, otherwise `false`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\r\n     * \r\n     * console.log(dataWrapper.containsKey(\"name\")); // Output: true\r\n     * console.log(dataWrapper.containsKey(\"nonExistentKey\")); // Output: false\r\n     * ```\r\n     *\r\n     * @param {string} key The key to check for existence.\r\n     * @returns {boolean} `true` if the key exists, otherwise `false`.\r\n     * @throws {Error} If `key` is not a string.\r\n     */\r\n    containsKey(key: string): boolean;\r\n    /**\r\n     * Checks whether the `DataWrapper` is empty (i.e., contains no key-value pairs).\r\n     *\r\n     * ### Behavior\r\n     * - Determines emptiness by checking if the number of stored keys is `0`.\r\n     *\r\n     * ### Returns\r\n     * - **`boolean`**: `true` if the `DataWrapper` contains no data, otherwise `false`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper();\r\n     * console.log(dataWrapper.isEmpty()); // Output: true\r\n     * \r\n     * dataWrapper.put(\"status\", \"active\");\r\n     * console.log(dataWrapper.isEmpty()); // Output: false\r\n     * ```\r\n     *\r\n     * @returns {boolean} `true` if the `DataWrapper` contains no data, otherwise `false`.\r\n     */\r\n    isEmpty(): boolean;\r\n    /**\r\n     * Removes a key-value pair from the `DataWrapper` if the key exists and returns the removed value.\r\n     *\r\n     * ### Parameters\r\n     * - `key` **(string)**: The key to be removed from the `DataWrapper`.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `key` is not a string.\r\n     * - Checks if the key exists using `hasOwnProperty()`.\r\n     * - If the key exists, retrieves the associated value and deletes the key.\r\n     * - Returns the removed value, which can be either a `DataModel` or a `string`.\r\n     * - If the key does not exist, returns `null`.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T> | string | null`**:\r\n     *   - The removed value if the key existed.\r\n     *   - `null` if the key was not found in the `DataWrapper`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: \"25\" });\r\n     * \r\n     * console.log(dataWrapper.containsKey(\"name\")); // Output: true\r\n     * \r\n     * const removedValue = dataWrapper.remove(\"name\");\r\n     * console.log(removedValue); // Output: \"Alice\"\r\n     * console.log(dataWrapper.containsKey(\"name\")); // Output: false\r\n     *\r\n     * const nonExistentValue = dataWrapper.remove(\"nonExistentKey\");\r\n     * console.log(nonExistentValue); // Output: null\r\n     * ```\r\n     *\r\n     * @param {string} key The key to remove from the `DataWrapper`.\r\n     * @returns {InterfaceDataModel<T> | string | null} The removed value if it existed, otherwise `null`.\r\n     * @throws {Error} If `key` is not a string.\r\n     */\r\n    remove<T = Record<string, any>>(key: string): InterfaceDataModel<T> | string | null;\r\n    /**\r\n     * Returns the number of key-value pairs stored in the `DataWrapper`.\r\n     *\r\n     * ### Behavior\r\n     * - Counts the number of keys present in the internal data storage.\r\n     *\r\n     * ### Returns\r\n     * - **`number`**: The total number of stored key-value pairs.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\r\n     * console.log(dataWrapper.size()); // Output: 2\r\n     * \r\n     * dataWrapper.put(\"status\", \"active\");\r\n     * console.log(dataWrapper.size()); // Output: 3\r\n     * ```\r\n     *\r\n     * @returns {number} The number of stored key-value pairs in the `DataWrapper`.\r\n     */\r\n    size(): number;\r\n    /**\r\n     * Retrieves an array of all keys stored in the `DataWrapper`.\r\n     *\r\n     * ### Behavior\r\n     * - Returns a list of all keys currently stored in the `DataWrapper`.\r\n     * - If the `DataWrapper` is empty, returns an empty array.\r\n     *\r\n     * ### Returns\r\n     * - **`string[]`**: An array containing all stored keys.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\r\n     * console.log(dataWrapper.keys()); // Output: [\"name\", \"age\"]\r\n     * \r\n     * dataWrapper.clear();\r\n     * console.log(dataWrapper.keys()); // Output: []\r\n     * ```\r\n     *\r\n     * @returns {string[]} An array of keys stored in the `DataWrapper`.\r\n     */\r\n    keys(): string[];\r\n    /**\r\n     * Retrieves an array of all values stored in the `DataWrapper`.\r\n     * Ensures that stored values are returned as deep copies to prevent unintended modifications.\r\n     *\r\n     * ### Behavior\r\n     * - Iterates through all key-value pairs in the `DataWrapper`.\r\n     * - Uses `hison.utils.deepCopyObject()` to return deep copies of stored values.\r\n     * - If the `DataWrapper` is empty, returns an empty array.\r\n     *\r\n     * ### Returns\r\n     * - **`any[]`**: An array containing deep copies of all stored values.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\r\n     * console.log(dataWrapper.values()); // Output: [\"Alice\", 25]\r\n     * \r\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * dataWrapper.put(\"users\", dataModel);\r\n     * console.log(dataWrapper.values()); // Output: [\"Alice\", 25, <cloned DataModel>]\r\n     * ```\r\n     *\r\n     * @returns {InterfaceDataModel<any>[] | string[]} An array of deep-copied values stored in the `DataWrapper`.\r\n     */\r\n    values(): InterfaceDataModel<any>[] | string[];\r\n};\r\n/**\r\n * The `InterfaceDataModel<T>` interface defines the structure for managing tabular data within the `hisondev` solution.\r\n * It is designed to store, manipulate, and retrieve data efficiently while ensuring type consistency and validation.\r\n *\r\n * ### Generic Type `<T>`\r\n * - `T` represents the shape of each row in the `DataModel`.\r\n * - By specifying `T`, developers can enforce type safety for row values.\r\n * - If no type is provided, `T` defaults to `Record<string, any>`, allowing dynamic structures.\r\n * \r\n * ### Core Features:\r\n * - **Column and Row Management:**\r\n *   - Supports dynamic addition and removal of columns and rows.\r\n *   - Ensures column consistency when inserting data.\r\n * - **Validation and Formatting:**\r\n *   - Allows setting a `DataModelValidator` to check column values.\r\n *   - Supports `DataModelFormatter` to format column values uniformly.\r\n * - **Filtering and Searching:**\r\n *   - Provides methods to filter rows based on conditions (`filterRows()`, `searchRows()`).\r\n *   - Allows searching rows and modifying data accordingly (`searchAndModify()`).\r\n * - **Sorting and Structuring:**\r\n *   - Supports ascending, descending, and reverse sorting on both columns and rows.\r\n * - **Serialization and Cloning:**\r\n *   - Enables deep copying of the entire `DataModel<T>`.\r\n *   - Provides `getSerialized()` to retrieve a JSON string of the model.\r\n * - **Integration with `DataWrapper`**\r\n *   - `DataWrapper` is an instance for storing `DataModel<T>`.\r\n *\r\n * ### Data Consistency and Validation:\r\n * - Uses `_deepCopy()` to ensure stored objects are immutable.\r\n * - Prevents invalid data types using `_getValidRowValue()`.\r\n * - Ensures uniform column data types to maintain consistency.\r\n *\r\n * ### Example Usage:\r\n * ```typescript\r\n * interface User {\r\n *     id: number;\r\n *     name: string;\r\n *     age: number;\r\n * }\r\n * \r\n * // Creating a DataModel with a defined type\r\n * const dataModel: InterfaceDataModel<User> = new hison.data.DataModel<User>([\r\n *     { id: 1, name: \"Alice\", age: 25 },\r\n *     { id: 2, name: \"Bob\", age: 30 }\r\n * ]);\r\n * \r\n * // Add a new column (TypeScript enforces type constraints)\r\n * dataModel.addColumn(\"gender\");\r\n * \r\n * // Set a default value for a column\r\n * dataModel.setColumnSameValue(\"gender\", \"Unknown\");\r\n * \r\n * // Apply a formatting function to the age column\r\n * dataModel.setColumnSameFormat(\"age\", (value) => `${value} years old`);\r\n * \r\n * // Get filtered rows where age is greater than 25\r\n * const filtered = dataModel.filterRows(row => row.age > 25);\r\n * console.log(filtered);\r\n * ```\r\n *\r\n * ### Related Functions:\r\n * - `hison.setConvertValue()`: Sets the conversion logic for special values before insertion.\r\n */\r\nexport interface InterfaceDataModel<T extends Record<string, any> = Record<string, any>> {\r\n    /**\r\n     * Checks whether the current instance is a `DataModel`.\r\n     * This method is primarily used for type verification.\r\n     *\r\n     * ### Returns\r\n     * - **`boolean`**: Returns `true` if the instance is a `DataModel`, otherwise `false`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * console.log(dataModel.getIsDataModel()); // Output: true\r\n     * ```\r\n     *\r\n     * @returns {boolean} `true` if the instance is a `DataModel`, otherwise `false`.\r\n     */\r\n    getIsDataModel(): boolean;\r\n    /**\r\n     * Creates and returns a deep copy of the current `DataModel` instance.\r\n     * The cloned instance contains independent copies of all stored rows, \r\n     * ensuring that modifications in the cloned instance do not affect the original instance.\r\n     *\r\n     * ### Behavior\r\n     * - Uses the internal `_rows` data to initialize a new `DataModel` instance.\r\n     * - Ensures that all row data is duplicated to maintain data integrity.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: A new `DataModel` instance containing a copy of the original rows.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * const clonedModel = dataModel.clone();\r\n     * \r\n     * console.log(clonedModel.getRowCount()); // Output: 1\r\n     * console.log(clonedModel !== dataModel); // Output: true (Cloned instance is independent)\r\n     * ```\r\n     *\r\n     * @returns {InterfaceDataModel<T>} A new `DataModel` instance with a copy of the stored rows.\r\n     */\r\n    clone(): InterfaceDataModel<T>;\r\n    /**\r\n     * Removes all stored rows and columns from the `DataModel`, resetting it to an empty state.\r\n     * \r\n     * ### Behavior\r\n     * - Clears the `_cols` array, removing all column definitions.\r\n     * - Clears the `_rows` array, removing all stored data.\r\n     * - Returns the same `DataModel` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: The current instance after clearing all stored data.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * console.log(dataModel.getRowCount()); // Output: 1\r\n     * \r\n     * dataModel.clear();\r\n     * console.log(dataModel.getRowCount()); // Output: 0\r\n     * console.log(dataModel.getColumns());  // Output: []\r\n     * ```\r\n     *\r\n     * @returns {InterfaceDataModel<T>} The current `DataModel` instance after clearing all data.\r\n     */\r\n    clear(): InterfaceDataModel<T>;\r\n    /**\r\n     * Serializes the `DataModel` instance into a JSON string representation.\r\n     * Converts the stored row data into a JSON format for easy storage or transmission.\r\n     *\r\n     * ### Behavior\r\n     * - Uses `JSON.stringify()` to serialize the `_rows` array.\r\n     * - Column definitions (`_cols`) are not included in the serialized output.\r\n     *\r\n     * ### Returns\r\n     * - **`string`**: A JSON string representation of the stored row data.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getSerialized());\r\n     * // Output: '[{\"id\":1,\"name\":\"Alice\"},{\"id\":2,\"name\":\"Bob\"}]'\r\n     * ```\r\n     *\r\n     * @returns {string} JSON string representation of the stored row data.\r\n     */\r\n    getSerialized(): string;\r\n    /**\r\n     * Checks whether the `DataModel` has defined columns.\r\n     * This method determines if the `DataModel` has been initialized with at least one column.\r\n     *\r\n     * ### Behavior\r\n     * - Returns `true` if `_cols` contains at least one column.\r\n     * - Returns `false` if no columns have been defined.\r\n     *\r\n     * ### Returns\r\n     * - **`boolean`**: `true` if columns are defined, otherwise `false`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\r\n     * console.log(dataModel.isDeclare()); // Output: true\r\n     * \r\n     * const emptyModel = new hison.data.DataModel();\r\n     * console.log(emptyModel.isDeclare()); // Output: false\r\n     * ```\r\n     *\r\n     * @returns {boolean} `true` if columns are defined, otherwise `false`.\r\n     */\r\n    isDeclare(): boolean;\r\n    /**\r\n     * Retrieves an array of all column names defined in the `DataModel`.\r\n     * Returns a deep copy of the `_cols` array to prevent unintended modifications.\r\n     *\r\n     * ### Behavior\r\n     * - Uses `_deepCopy()` to return a copy of `_cols`, ensuring data integrity.\r\n     * - If no columns are defined, returns an empty array.\r\n     *\r\n     * ### Returns\r\n     * - **`string[]`**: An array of column names.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\r\n     * \r\n     * const emptyModel = new hison.data.DataModel();\r\n     * console.log(emptyModel.getColumns()); // Output: []\r\n     * ```\r\n     *\r\n     * @returns {string[]} An array containing the column names.\r\n     */\r\n    getColumns(): string[];\r\n    /**\r\n     * Retrieves an array of all values in the specified column.\r\n     * Ensures that returned values are deep copies to prevent unintended modifications.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The column name from which to retrieve values.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `column` is not a valid key in `T`.\r\n     * - Throws an error if the specified column does not exist.\r\n     * - Iterates through all rows and extracts the values of the specified column.\r\n     * - Uses `_deepCopy()` to return deep copies of the values.\r\n     * - The return type is inferred as `T[K][]`, maintaining strong type safety.\r\n     *\r\n     * ### Returns\r\n     * - **`T[K][]`**: An array containing all values from the specified column.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: string;\r\n     *     age: number;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: \"U1\", age: 25 },\r\n     *     { id: \"U2\", age: 30 }\r\n     * ]);\r\n     * \r\n     * const ids = dataModel.getColumnValues(\"id\");  // Inferred as string[]\r\n     * console.log(ids); // Output: [\"U1\", \"U2\"]\r\n     * \r\n     * const ages = dataModel.getColumnValues(\"age\"); // Inferred as number[]\r\n     * console.log(ages); // Output: [25, 30]\r\n     * \r\n     * // Throws an error: \"The column does not exist.\"\r\n     * // console.log(dataModel.getColumnValues(\"name\"));\r\n     * ```\r\n     *\r\n     * @param {K} column The column name from which to retrieve values.\r\n     * @returns {T[K][]} An array of values from the specified column.\r\n     * @throws {Error} If the column is invalid or does not exist.\r\n     */\r\n    getColumnValues<K extends keyof T>(column: K): T[K][];\r\n    /**\r\n     * Adds a new column to the `DataModel`.\r\n     * Ensures that all existing rows include the new column with a default value of `null`.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(string)**: The name of the column to be added.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `column` is not a valid string.\r\n     * - Calls `_addCol(column)` to validate and add the column.\r\n     * - Iterates through `_rows` and ensures each row includes the new column, assigning `null` if missing.\r\n     * - Returns the current `DataModel` instance for method chaining.\r\n     *\r\n     * ⚠ **Note:** If `T` is explicitly defined, TypeScript does not recognize dynamically added columns.\r\n     * To modify columns dynamically, use `DataModel` with its default type `Record<string, any>`.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: The current instance after adding the new column.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\r\n     * \r\n     * dataModel.addColumn(\"age\");\r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\r\n     * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\", age: null }\r\n     * ```\r\n     *\r\n     * @param {string} column The name of the column to add.\r\n     * @returns {InterfaceDataModel<T>} The current `DataModel` instance after adding the column.\r\n     * @throws {Error} If the column is invalid or already exists.\r\n     */\r\n    addColumn(column: string): InterfaceDataModel<T>;\r\n    /**\r\n     * Adds multiple new columns to the `DataModel`.\r\n     * Ensures that all existing rows include the newly added columns with a default value of `null`.\r\n     *\r\n     * ### Parameters\r\n     * - `columns` **(string[])**: An array of column names to be added.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `columns` is not an array.\r\n     * - Iterates through the provided column names and calls `_addCol(column)` to validate and add each column.\r\n     * - Ensures that all existing rows include the new columns, assigning `null` if missing.\r\n     * - Returns the current `DataModel` instance for method chaining.\r\n     *\r\n     * ⚠ **Note:** If `T` is explicitly defined, TypeScript does not recognize dynamically added columns.\r\n     * To modify columns dynamically, use `DataModel` with its default type `Record<string, any>`.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: The current instance after adding the new columns.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\r\n     * \r\n     * dataModel.addColumns([\"age\", \"email\"]);\r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\", \"email\"]\r\n     * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\", age: null, email: null }\r\n     * ```\r\n     *\r\n     * @param {string[]} columns An array of column names to add.\r\n     * @returns {InterfaceDataModel<T>} The current `DataModel` instance after adding the columns.\r\n     * @throws {Error} If `columns` is not an array or contains invalid column names.\r\n     */\r\n    addColumns(columns: string[]): InterfaceDataModel<T>;\r\n    /**\r\n     * Sets the same value for all rows in the specified column.\r\n     * If the column does not exist, it is created before assigning values.\r\n     * \r\n     * Supports type safety when `T` is defined, while allowing dynamic usage when `T = Record<string, any>`.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The name of the column to update, constrained to keys of `T` if defined.\r\n     * - `value` **(`T[K]`)**: The value to be assigned to all rows in the specified column.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `value` is `undefined`.\r\n     * - Calls `_getValidColValue(column)` to validate the column name.\r\n     * - If the column does not exist, `_addCol(column)` is called to add it.\r\n     * - Iterates through all rows and assigns the specified value using `_getValidRowValue()`.\r\n     * - Ensures type consistency when `T` is specified.\r\n     * - Allows any column name when `T = Record<string, any>`.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The current `DataModel` instance after setting the column values.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     *     status?: string;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * \r\n     * // Set the same value for all rows in the \"status\" column\r\n     * dataModel.setColumnSameValue(\"status\", \"active\");\r\n     * console.log(dataModel.getColumnValues(\"status\")); // Output: [\"active\", \"active\"]\r\n     * \r\n     * // If the column does not exist, it is created automatically\r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"status\"]\r\n     * \r\n     * // With default `Record<string, any>`, dynamic columns can be added without strict typing\r\n     * const flexibleModel = new hison.data.DataModel();\r\n     * flexibleModel.setColumnSameValue(\"newField\", 123);\r\n     * ```\r\n     *\r\n     * @param {K} column The name of the column to set the value for.\r\n     * @param {T[K]} value The value to assign to all rows in the column.\r\n     * @returns {InterfaceDataModel<T>} The current `DataModel<T>` instance after updating the column.\r\n     * @throws {Error} If `value` is `undefined` or if the column name is invalid.\r\n     */\r\n    setColumnSameValue<K extends keyof T>(column: K, value: T[K]): InterfaceDataModel<T>;\r\n    /**\r\n     * Applies a formatting function to all values in the specified column.\r\n     * Ensures type safety when `T` is specified, while maintaining flexibility for dynamic structures.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The name of the column to format, constrained to keys of `T` if defined.\r\n     * - `formatter` **(`DataModelFormatter`)**: A function that transforms each value in the column.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `formatter` is not a valid function.\r\n     * - Validates `column` using `_getValidColValue(column)`.\r\n     * - Throws an error if the column does not exist.\r\n     * - Iterates through all rows and applies `formatter` to each value in the column.\r\n     * - Ensures that the formatted values remain valid using `_getValidRowValue()`.\r\n     * - Allows any string as `column` if `T = Record<string, any>`.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The current `DataModel` instance after formatting the column.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface Product {\r\n     *     id: number;\r\n     *     price: number;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<Product>([\r\n     *     { id: 1, price: 1000 },\r\n     *     { id: 2, price: 2000 }\r\n     * ]);\r\n     * \r\n     * // Format the \"price\" column by adding a currency symbol\r\n     * dataModel.setColumnSameFormat(\"price\", value => `$${value}`);\r\n     * console.log(dataModel.getColumnValues(\"price\")); // Output: [\"$1000\", \"$2000\"]\r\n     * \r\n     * // With default `Record<string, any>`, any column can be formatted dynamically\r\n     * const flexibleModel = new hison.data.DataModel();\r\n     * flexibleModel.setColumnSameFormat(\"randomColumn\", value => `formatted-${value}`);\r\n     * ```\r\n     *\r\n     * @param {K} column The name of the column to format.\r\n     * @param {DataModelFormatter} formatter A function that transforms each value in the column.\r\n     * @returns {InterfaceDataModel<T>} The current `DataModel<T>` instance after formatting the column.\r\n     * @throws {Error} If `formatter` is not a function or if the column does not exist.\r\n     */\r\n    setColumnSameFormat<K extends keyof T>(column: K, formatter: DataModelFormatter): InterfaceDataModel<T>;\r\n    /**\r\n     * Retrieves a deep copy of the row at the specified index.\r\n     * Ensures that modifications to the returned row do not affect the original data.\r\n     *\r\n     * ### Parameters\r\n     * - `rowIndex` **(number)**: The index of the row to retrieve.\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\r\n     * - Uses `_deepCopy()` to return a copy of the row, preventing unintended modifications.\r\n     *\r\n     * ### Returns\r\n     * - **`T`**: A deep copy of the row data as an object.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\" }\r\n     *\r\n     * // Throws an error if the index is out of bounds\r\n     * // console.log(dataModel.getRow(10));\r\n     * ```\r\n     *\r\n     * @param {number} rowIndex The index of the row to retrieve.\r\n     * @returns {T} A deep copy of the row data.\r\n     * @throws {Error} If `rowIndex` is out of bounds.\r\n     */\r\n    getRow(rowIndex: number): T;\r\n    /**\r\n     * Retrieves the row at the specified index as a new `DataModel` instance.\r\n     * Converts the row object into a `DataModel` for further structured operations.\r\n     *\r\n     * ### Parameters\r\n     * - `rowIndex` **(number)**: The index of the row to retrieve.\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\r\n     * - Initializes a new `DataModel` using the retrieved row data.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: A new `DataModel` instance containing the specified row.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * \r\n     * const rowDataModel = dataModel.getRowAsDataModel(0);\r\n     * console.log(rowDataModel.getRowCount()); // Output: 1\r\n     * console.log(rowDataModel.getColumns()); // Output: [\"id\", \"name\"]\r\n     *\r\n     * // Throws an error if the index is out of bounds\r\n     * // console.log(dataModel.getRowAsDataModel(10));\r\n     * ```\r\n     *\r\n     * @param {number} rowIndex The index of the row to retrieve.\r\n     * @returns {InterfaceDataModel<T>} A new `DataModel` instance containing the row data.\r\n     * @throws {Error} If `rowIndex` is out of bounds.\r\n     */\r\n    getRowAsDataModel(rowIndex: number): InterfaceDataModel<T>;\r\n    /**\r\n     * Adds a new row to the `DataModel<T>` at the specified index or appends it to the end.\r\n     * If no parameters are provided, an empty row is added.\r\n     *\r\n     * ### Generic Type `<T>`\r\n     * - `T` represents the structure of each row in the `DataModel<T>`.\r\n     * - If no type is provided, `T` defaults to `Record<string, any>`, allowing flexible row structures.\r\n     *\r\n     * ### Parameters\r\n     * - `rowIndexOrRow` **(number | T, optional)**: The index at which to insert the row, or the row data to insert.\r\n     * - `row` **(T, optional)**: The row data to insert (only required when `rowIndexOrRow` is a number).\r\n     *\r\n     * ### Behavior\r\n     * - If **no parameters** are provided, an empty row is appended.\r\n     * - If **only a number is provided**, an empty row is inserted at that index.\r\n     * - If **only an object (`T`) is provided**, it is inserted as a new row at the end.\r\n     * - If **both a number and an object are provided**, the row is inserted at the specified index.\r\n     * - Throws an error if attempting to add a row without first defining columns.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel<T>`**: The current instance after adding the new row.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\"id\", \"name\"]);\r\n     * \r\n     * // Add an empty row\r\n     * dataModel.addRow();\r\n     * console.log(dataModel.getRowCount()); // Output: 1\r\n     * console.log(dataModel.getRow(0)); // Output: { id: null, name: null }\r\n     * \r\n     * // Add a row with data\r\n     * dataModel.addRow({ id: 1, name: \"Alice\" });\r\n     * console.log(dataModel.getRow(1)); // Output: { id: 1, name: \"Alice\" }\r\n     * \r\n     * // Insert a row at index 1\r\n     * dataModel.addRow(1, { id: 2, name: \"Bob\" });\r\n     * console.log(dataModel.getRow(1)); // Output: { id: 2, name: \"Bob\" }\r\n     * \r\n     * // Throws an error: \"Please define the column first.\"\r\n     * // new hison.data.DataModel<User>().addRow();\r\n     * ```\r\n     *\r\n     * @param {number | T} [rowIndexOrRow] The index at which to insert the row, or the row data.\r\n     * @param {T} [row] The row data to insert (only required if `rowIndexOrRow` is a number).\r\n     * @returns {InterfaceDataModel<T>} The current `DataModel<T>` instance after adding the row.\r\n     * @throws {Error} If columns are not defined or parameters are invalid.\r\n     */\r\n    addRow(rowIndexOrRow?: number | T, row?: T): InterfaceDataModel<T>;\r\n    /**\r\n     * Retrieves a deep copy of a range of rows from the `DataModel`.\r\n     * Ensures that modifications to the returned rows do not affect the original data.\r\n     *\r\n     * ### Generic Type `<T>`\r\n     * - `T` represents the structure of each row in the `DataModel`.\r\n     * - By specifying `T`, developers can enforce type safety when retrieving rows.\r\n     * - If no type is provided, `T` defaults to `Record<string, any>`, allowing flexible data structures.\r\n     *\r\n     * ### Parameters\r\n     * - `startRow` **(number, optional, default = `0`)**: The starting index of the row range.\r\n     * - `endRow` **(number, optional, default = `null`)**: The ending index of the row range (inclusive).\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_getValidRowIndex(startRow)` and `_getValidRowIndex(endRow)` to validate row indices.\r\n     * - If `endRow` is `null`, retrieves rows from `startRow` to the last row.\r\n     * - Uses `_deepCopy()` to ensure the returned rows are independent copies.\r\n     *\r\n     * ### Returns\r\n     * - **`T[]`**: An array of deep-copied row objects, ensuring type safety.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" },\r\n     *     { id: 3, name: \"Charlie\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getRows()); \r\n     * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\r\n     * \r\n     * console.log(dataModel.getRows(1, 2)); \r\n     * // Output: [{ id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\r\n     * \r\n     * // Throws an error if startRow or endRow is out of bounds\r\n     * // console.log(dataModel.getRows(5));\r\n     * ```\r\n     *\r\n     * @param {number} [startRow=0] The starting index of the row range.\r\n     * @param {number | null} [endRow=null] The ending index of the row range (inclusive).\r\n     * @returns {T[]} An array of deep-copied rows, preserving type safety.\r\n     * @throws {Error} If `startRow` or `endRow` is out of bounds.\r\n     */\r\n    getRows(startRow?: number, endRow?: number | null): T[];\r\n    /**\r\n     * Retrieves a range of rows as a new `DataModel` instance.\r\n     * Ensures that the returned `DataModel` contains independent copies of the selected rows.\r\n     *\r\n     * ### Parameters\r\n     * - `startRow` **(number, optional, default = `0`)**: The starting index of the row range.\r\n     * - `endRow` **(number, optional, default = `null`)**: The ending index of the row range (inclusive).\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_getValidRowIndex(startRow)` and `_getValidRowIndex(endRow)` to validate row indices.\r\n     * - If `startRow` is `0` and `endRow` is `null`, returns a clone of the entire `DataModel`.\r\n     * - Uses `_deepCopy()` to ensure the returned rows are independent.\r\n     * - Returns a new `DataModel` containing the selected rows.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: A new `DataModel` instance containing the selected row range.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" },\r\n     *     { id: 3, name: \"Charlie\" }\r\n     * ]);\r\n     * \r\n     * const newModel = dataModel.getRowsAsDataModel(1, 2);\r\n     * console.log(newModel.getRowCount()); // Output: 2\r\n     * console.log(newModel.getRow(0)); // Output: { id: 2, name: \"Bob\" }\r\n     *\r\n     * // Retrieves all rows as a new DataModel\r\n     * const clonedModel = dataModel.getRowsAsDataModel();\r\n     * console.log(clonedModel.getRowCount()); // Output: 3\r\n     * ```\r\n     *\r\n     * @param {number} [startRow=0] The starting index of the row range.\r\n     * @param {number | null} [endRow=null] The ending index of the row range (inclusive).\r\n     * @returns {InterfaceDataModel<T>} A new `DataModel` instance containing the selected rows.\r\n     * @throws {Error} If `startRow` or `endRow` is out of bounds.\r\n     */\r\n    getRowsAsDataModel(startRow?: number, endRow?: number | null): InterfaceDataModel<T>;\r\n    /**\r\n     * Adds multiple rows to the `DataModel`.\r\n     * Each row is validated and inserted into the existing dataset.\r\n     *\r\n     * ### Generic Type `<T>`\r\n     * - `T` represents the structure of each row in the `DataModel`.\r\n     * - By specifying `T`, developers can enforce type safety for inserted rows.\r\n     * - If no type is provided, `T` defaults to `Record<string, any>`, allowing flexible data structures.\r\n     *\r\n     * ### Parameters\r\n     * - `rows` **(`T[]`)**: An array of row objects to be added.\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_put(rows)` to process and insert the provided rows.\r\n     * - Ensures that column structures are maintained.\r\n     * - Returns the current `DataModel` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The current instance after adding the new rows.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\"id\", \"name\"]);\r\n     * \r\n     * // Add multiple rows\r\n     * dataModel.addRows([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getRowCount()); // Output: 2\r\n     * console.log(dataModel.getRow(1)); // Output: { id: 2, name: \"Bob\" }\r\n     * ```\r\n     *\r\n     * @param {T[]} rows An array of row objects to add.\r\n     * @returns {InterfaceDataModel<T>} The current `DataModel<T>` instance after adding the rows.\r\n     * @throws {Error} If `rows` contain invalid data.\r\n     */\r\n    addRows(rows: T[]): InterfaceDataModel<T>;\r\n    /**\r\n     * Converts the `DataModel` instance into a structured JavaScript object.\r\n     * The returned object includes column definitions, row data, and metadata.\r\n     *\r\n     * ### Behavior\r\n     * - Uses `_deepCopy()` to ensure the returned data is independent of the original `DataModel`.\r\n     * - The returned object contains:\r\n     *   - `cols`: An array of column names (`keyof T`).\r\n     *   - `rows`: An array of row objects (`T[]`).\r\n     *   - `colCount`: The total number of columns.\r\n     *   - `rowCount`: The total number of rows.\r\n     *   - `isDeclare`: A boolean indicating whether columns are explicitly defined.\r\n     *\r\n     * ### Returns\r\n     * - **`{ cols: (keyof T)[], rows: T[], colCount: number, rowCount: number, isDeclare: boolean }`**:\r\n     *   A structured object representing the `DataModel`.\r\n     *\r\n     * ⚠ **Note:** If `T` is explicitly defined, `cols` will reflect only the known keys of `T`.\r\n     * If `T` is the default `Record<string, any>`, `cols` may include dynamically added columns.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getObject());\r\n     * // Output:\r\n     * // {\r\n     * //   cols: [\"id\", \"name\"],\r\n     * //   rows: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }],\r\n     * //   colCount: 2,\r\n     * //   rowCount: 2,\r\n     * //   isDeclare: true\r\n     * // }\r\n     * ```\r\n     *\r\n     * @returns {{ cols: (keyof T)[], rows: T[], colCount: number, rowCount: number, isDeclare: boolean }}\r\n     *          A structured object representing the `DataModel` structure.\r\n     */\r\n    getObject(): { cols: (keyof T)[]; rows: T[]; colCount: number; rowCount: number; isDeclare: boolean; };\r\n    /**\r\n     * Retrieves a deep copy of the value at the specified row index and column name.\r\n     * Ensures type safety when `T` is specified, while maintaining flexibility for dynamic structures.\r\n     *\r\n     * ### Parameters\r\n     * - `rowIndex` **(number)**: The index of the row to retrieve the value from.\r\n     * - `column` **(K)**: The column name, constrained to the keys of `T` if defined.\r\n     *\r\n     * ### Behavior\r\n     * - Validates `column` and `rowIndex` before accessing the value.\r\n     * - Returns a deep copy to prevent unintended modifications.\r\n     * - Allows any string as `column` if `T = Record<string, any>`.\r\n     *\r\n     * ### Returns\r\n     * - **`T[K]`**: A deep copy of the value stored at the specified row and column.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: string;\r\n     *     age: number;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: \"U1\", age: 25 },\r\n     *     { id: \"U2\", age: 30 }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getValue(0, \"age\")); // Output: 25 (type: number)\r\n     * console.log(dataModel.getValue(0, \"id\"));  // Output: \"U1\" (type: string)\r\n     * \r\n     * // With default `Record<string, any>`, any column can be accessed.\r\n     * const flexibleModel = new hison.data.DataModel();\r\n     * console.log(flexibleModel.getValue(0, \"randomColumn\")); // No TypeScript error\r\n     * ```\r\n     *\r\n     * @param {number} rowIndex The row index to retrieve the value from.\r\n     * @param {K} column The column name to retrieve the value from.\r\n     * @returns {T[K]} A deep copy of the value stored at the specified row and column.\r\n     * @throws {Error} If `rowIndex` or `column` is invalid.\r\n     */\r\n    getValue<K extends keyof T>(rowIndex: number, column: K): T[K];\r\n    /**\r\n     * Sets a value at the specified row index and column name.\r\n     * Ensures that the value is valid and maintains data integrity.\r\n     *\r\n     * ### Parameters\r\n     * - `rowIndex` **(number)**: The index of the row where the value should be set.\r\n     * - `column` **(K)**: The name of the column where the value should be stored.\r\n     * - `value` **(T[K])**: The value to be assigned, ensuring type safety.\r\n     *\r\n     * ### Behavior\r\n     * - Throws an error if `value` is `undefined`.\r\n     * - Calls `_getValidColValue(column)` to validate the column name.\r\n     * - Throws an error if the specified column does not exist.\r\n     * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\r\n     * - Calls `_getValidRowValue(rowIndex, column, value)` to ensure the value is properly formatted.\r\n     * - Updates the value at the specified row and column.\r\n     * - Returns the current `DataModel` instance for method chaining.\r\n     *\r\n     * ### Type Safety\r\n     * - Uses `<K extends keyof T>` to ensure that `column` is a valid key of `T`.\r\n     * - The `value` type is inferred as `T[K]`, preventing type mismatches.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The current instance after updating the value.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * \r\n     * dataModel.setValue(0, \"name\", \"Charlie\");\r\n     * console.log(dataModel.getValue(0, \"name\")); // Output: \"Charlie\"\r\n     *\r\n     * // Throws an error if trying to set `undefined`\r\n     * // dataModel.setValue(1, \"name\", undefined);\r\n     *\r\n     * // Throws an error if the column does not exist\r\n     * // dataModel.setValue(0, \"age\", 25);\r\n     * ```\r\n     *\r\n     * @param {number} rowIndex The index of the row where the value should be set.\r\n     * @param {K} column The column name where the value should be stored.\r\n     * @param {T[K]} value The value to assign, ensuring type safety.\r\n     * @returns {InterfaceDataModel<T>} The current `DataModel` instance after updating the value.\r\n     * @throws {Error} If `value` is `undefined` or if `rowIndex` or `column` is invalid.\r\n     */\r\n    setValue<K extends keyof T>(rowIndex: number, column: K, value: T[K]): InterfaceDataModel<T>;\r\n    /**\r\n     * Removes a column from the `DataModel`, deleting its values from all rows.\r\n     * Ensures that the column exists before attempting removal.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The name of the column to remove, ensuring type safety.\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_getValidColValue(column)` to validate the column name.\r\n     * - Throws an error if the specified column does not exist.\r\n     * - Iterates through all rows and removes the specified column.\r\n     * - Updates `_cols` to exclude the removed column.\r\n     * - Returns the current `DataModel` instance for method chaining.\r\n     * \r\n     * ⚠ **Note:** If `T` is explicitly defined, TypeScript does not recognize dynamically removed columns.\r\n     * To modify columns dynamically, use `DataModel` with its default type `Record<string, any>`.\r\n     * \r\n     * ### Type Safety\r\n     * - Uses `<K extends keyof T>` to ensure that `column` is a valid key of `T`.\r\n     * - Prevents attempts to remove a column that does not exist in the defined type.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The current instance after removing the column.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string;\r\n     *   age: number;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\r\n     * \r\n     * dataModel.removeColumn(\"age\");\r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\r\n     *\r\n     * // Throws an error if the column does not exist\r\n     * // dataModel.removeColumn(\"salary\");\r\n     * ```\r\n     *\r\n     * @param {K} column The name of the column to remove, ensuring type safety.\r\n     * @returns {InterfaceDataModel<T>} The current `DataModel` instance after removing the column.\r\n     * @throws {Error} If `column` is invalid or does not exist.\r\n     */\r\n    removeColumn<K extends keyof T>(column: K): InterfaceDataModel<T>;\r\n    /**\r\n     * Removes multiple columns from the `DataModel`, deleting their values from all rows.\r\n     * Ensures that each specified column exists before attempting removal.\r\n     *\r\n     * ### Parameters\r\n     * - `columns` **(K[])**: An array of column names to remove, ensuring type safety.\r\n     *\r\n     * ### Behavior\r\n     * - Uses `<K extends keyof T>` to enforce that `columns` contain only valid keys of `T`.\r\n     * - Iterates through the `columns` array and calls `removeColumn(column)` for each entry.\r\n     * - If any column does not exist, `removeColumn` will throw an error.\r\n     * - Returns the current `DataModel` instance for method chaining.\r\n     * \r\n     * ⚠ **Note:** If `T` is explicitly defined, TypeScript does not recognize dynamically removed columns.\r\n     * To modify columns dynamically, use `DataModel` with its default type `Record<string, any>`.\r\n     * \r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The current instance after removing the specified columns.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string;\r\n     *   age: number;\r\n     *   city: string;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\", age: 25, city: \"New York\" },\r\n     *     { id: 2, name: \"Bob\", age: 30, city: \"Los Angeles\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\", \"city\"]\r\n     * \r\n     * dataModel.removeColumns([\"age\", \"city\"]);\r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\r\n     *\r\n     * // Throws an error if a column does not exist\r\n     * // dataModel.removeColumns([\"salary\", \"bonus\"]);\r\n     * ```\r\n     *\r\n     * @param {K[]} columns An array of column names to remove, ensuring type safety.\r\n     * @returns {InterfaceDataModel<T>} The current `DataModel` instance after removing the columns.\r\n     * @throws {Error} If any column does not exist.\r\n     */\r\n    removeColumns<K extends keyof T>(columns: K[]): InterfaceDataModel<T>;\r\n    /**\r\n     * Removes a row from the `DataModel` at the specified index and returns the removed row.\r\n     * Ensures that the row index is valid before removal.\r\n     *\r\n     * ### Parameters\r\n     * - `rowIndex` **(number, optional, default = `0`)**: The index of the row to remove.\r\n     *\r\n     * ### Behavior\r\n     * - Uses `<T>` to ensure that the returned row matches the structure of `T`.\r\n     * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\r\n     * - Uses `splice()` to remove the row from `_rows` and returns the removed row.\r\n     *\r\n     * ### Returns\r\n     * - **`T`**: The removed row object, ensuring type safety based on `T`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" },\r\n     *     { id: 3, name: \"Charlie\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getRowCount()); // Output: 3\r\n     * \r\n     * const removedRow = dataModel.removeRow(1);\r\n     * console.log(removedRow); // Output: { id: 2, name: \"Bob\" }\r\n     * console.log(dataModel.getRowCount()); // Output: 2\r\n     *\r\n     * // Throws an error if rowIndex is out of bounds\r\n     * // dataModel.removeRow(10);\r\n     * ```\r\n     *\r\n     * @param {number} [rowIndex=0] The index of the row to remove.\r\n     * @returns {T} The removed row object, with type safety enforced.\r\n     * @throws {Error} If `rowIndex` is out of bounds.\r\n     */\r\n    removeRow(rowIndex?: number): T;\r\n    /**\r\n     * Retrieves the total number of columns in the `DataModel`.\r\n     *\r\n     * ### Behavior\r\n     * - Returns the length of the `_cols` array, which represents the column definitions.\r\n     *\r\n     * ### Returns\r\n     * - **`number`**: The total number of columns in the `DataModel`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\", \"age\"]);\r\n     * console.log(dataModel.getColumnCount()); // Output: 3\r\n     * \r\n     * dataModel.removeColumn(\"age\");\r\n     * console.log(dataModel.getColumnCount()); // Output: 2\r\n     * ```\r\n     *\r\n     * @returns {number} The number of columns in the `DataModel`.\r\n     */\r\n    getColumnCount(): number;\r\n    /**\r\n     * Retrieves the total number of rows in the `DataModel`.\r\n     *\r\n     * ### Behavior\r\n     * - Returns the length of the `_rows` array, which represents the stored data rows.\r\n     *\r\n     * ### Returns\r\n     * - **`number`**: The total number of rows in the `DataModel`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getRowCount()); // Output: 2\r\n     * \r\n     * dataModel.addRow({ id: 3, name: \"Charlie\" });\r\n     * console.log(dataModel.getRowCount()); // Output: 3\r\n     * ```\r\n     *\r\n     * @returns {number} The number of rows in the `DataModel`.\r\n     */\r\n    getRowCount(): number;\r\n    /**\r\n     * Checks whether the `DataModel` contains a specified column.\r\n     * Uses `<K extends keyof T>` to ensure type safety when checking column names.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The column name to check, constrained to keys of `T`.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures type safety by restricting `column` to valid keys of `T`.\r\n     * - Calls `_hasColumn(column)` to determine if the column exists.\r\n     * - Returns `true` if the column is found in `_cols`, otherwise `false`.\r\n     *\r\n     * ### Returns\r\n     * - **`boolean`**: `true` if the column exists, otherwise `false`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\"id\", \"name\"]);\r\n     * \r\n     * console.log(dataModel.hasColumn(\"name\")); // Output: true\r\n     * console.log(dataModel.hasColumn(\"age\"));  // TypeScript Error: Argument of type '\"age\"' is not assignable to parameter of type '\"id\" | \"name\"'.\r\n     * ```\r\n     *\r\n     * @param {K} column The column name to check, constrained to keys of `T`.\r\n     * @returns {boolean} `true` if the column exists, otherwise `false`.\r\n     */\r\n    hasColumn<K extends keyof T>(column: K): boolean;\r\n    /**\r\n     * Restricts the `DataModel` to only the specified columns by removing all other columns.\r\n     * Uses `<K extends keyof T>` to enforce type safety when specifying valid columns.\r\n     *\r\n     * ### Parameters\r\n     * - `columns` **(K[])**: An array of column names to retain, constrained to keys of `T`.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures type safety by allowing only existing keys of `T` as valid columns.\r\n     * - Identifies and removes columns that are **not** included in the provided `columns` list.\r\n     * - Calls `removeColumns()` to eliminate those columns from the dataset.\r\n     * - Returns the modified `DataModel` instance for method chaining.\r\n     * \r\n     * ⚠ **Note:** If `T` is explicitly defined, TypeScript does not recognize dynamically removed columns.\r\n     * To modify columns dynamically, use `DataModel` with its default type `Record<string, any>`.\r\n     * \r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The modified `DataModel` instance with only the specified columns retained.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string;\r\n     *   age: number;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\r\n     * \r\n     * // Keep only \"id\" and \"name\" columns\r\n     * dataModel.setValidColumns([\"id\", \"name\"]);\r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\r\n     *\r\n     * // TypeScript Error: Argument of type '\"salary\"' is not assignable to parameter of type '\"id\" | \"name\" | \"age\"'.\r\n     * // dataModel.setValidColumns([\"id\", \"salary\"]);\r\n     * ```\r\n     *\r\n     * @param {K[]} columns An array of column names to retain, constrained to keys of `T`.\r\n     * @returns {InterfaceDataModel<T>} The modified `DataModel` instance with only the specified columns retained.\r\n     */\r\n    setValidColumns<K extends keyof T>(columns: K[]): InterfaceDataModel<T>;\r\n    /**\r\n     * Checks whether a specified column contains only non-null values.\r\n     * Uses `<K extends keyof T>` to ensure type safety when specifying the column.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The name of the column to check, constrained to keys of `T`.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures type safety by restricting `column` to existing keys of `T`.\r\n     * - Calls `_getNullColumnFirstRowIndex(column)` to find the first occurrence of a `null` value in the column.\r\n     * - If no `null` values are found, returns `true`; otherwise, returns `false`.\r\n     *\r\n     * ### Returns\r\n     * - **`boolean`**: `true` if the column has no `null` values, otherwise `false`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string | null;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: null },\r\n     *     { id: 3, name: \"Charlie\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.isNotNullColumn(\"id\"));   // Output: true\r\n     * console.log(dataModel.isNotNullColumn(\"name\")); // Output: false\r\n     *\r\n     * // TypeScript Error: Argument of type '\"age\"' is not assignable to parameter of type '\"id\" | \"name\"'.\r\n     * // console.log(dataModel.isNotNullColumn(\"age\"));\r\n     * ```\r\n     *\r\n     * @param {K} column The column name to check, constrained to keys of `T`.\r\n     * @returns {boolean} `true` if the column has no `null` values, otherwise `false`.\r\n     * @throws {Error} If `column` does not exist.\r\n     */\r\n    isNotNullColumn<K extends keyof T>(column: K): boolean;\r\n    /**\r\n     * Finds and returns the first row where the specified column contains a `null` value.\r\n     * Uses `<K extends keyof T>` to enforce type safety on the column name.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The column name to check, constrained to keys of `T`.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures type safety by restricting `column` to existing keys of `T`.\r\n     * - Calls `_getNullColumnFirstRowIndex(column)` to locate the first occurrence of a `null` value.\r\n     * - If no `null` values are found, returns `null`.\r\n     * - If a `null` value is found, retrieves and returns the corresponding row using `getRow()`.\r\n     *\r\n     * ### Returns\r\n     * - **`T | null`**: The first row where the column has a `null` value, or `null` if none exist.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string | null;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: null },\r\n     *     { id: 3, name: \"Charlie\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.findFirstRowNullColumn(\"name\"));\r\n     * // Output: { id: 2, name: null }\r\n     * \r\n     * console.log(dataModel.findFirstRowNullColumn(\"id\"));\r\n     * // Output: null (no null values in the \"id\" column)\r\n     *\r\n     * // TypeScript Error: Argument of type '\"age\"' is not assignable to parameter of type '\"id\" | \"name\"'.\r\n     * // console.log(dataModel.findFirstRowNullColumn(\"age\"));\r\n     * ```\r\n     *\r\n     * @param {K} column The column name to check for `null` values.\r\n     * @returns {T | null} The first row where the column has a `null` value, or `null` if none exist.\r\n     * @throws {Error} If `column` does not exist.\r\n     */\r\n    findFirstRowNullColumn<K extends keyof T>(column: K): T | null;\r\n    /**\r\n     * Checks whether a specified column contains only unique values (i.e., no duplicate values).\r\n     * Uses `<K extends keyof T>` to enforce type safety on the column name.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The column name to check, constrained to keys of `T`.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures type safety by restricting `column` to existing keys of `T`.\r\n     * - Calls `_getDuplColumnFirstRowIndex(column)` to find the first occurrence of a duplicate value in the column.\r\n     * - If no duplicates are found, returns `true`; otherwise, returns `false`.\r\n     *\r\n     * ### Returns\r\n     * - **`boolean`**: `true` if the column has no duplicate values, otherwise `false`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" },\r\n     *     { id: 3, name: \"Alice\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.isNotDuplColumn(\"id\")); // Output: true\r\n     * console.log(dataModel.isNotDuplColumn(\"name\")); // Output: false\r\n     *\r\n     * // TypeScript Error: Argument of type '\"age\"' is not assignable to parameter of type '\"id\" | \"name\"'.\r\n     * // console.log(dataModel.isNotDuplColumn(\"age\"));\r\n     * ```\r\n     *\r\n     * @param {K} column The column name to check for duplicate values.\r\n     * @returns {boolean} `true` if the column has no duplicate values, otherwise `false`.\r\n     * @throws {Error} If `column` does not exist.\r\n     */\r\n    isNotDuplColumn<K extends keyof T>(column: K): boolean;\r\n    /**\r\n     * Finds and returns the first row where the specified column contains a duplicate value.\r\n     * Uses `<K extends keyof T>` to ensure that the column exists in `T`, enforcing type safety.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The column name to check for duplicate values, constrained to keys of `T`.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures type safety by restricting `column` to existing keys of `T`.\r\n     * - Calls `_getDuplColumnFirstRowIndex(column)` to locate the first occurrence of a duplicate value.\r\n     * - If no duplicate values are found, returns `null`.\r\n     * - If a duplicate value is found, retrieves and returns the corresponding row using `getRow()`.\r\n     *\r\n     * ### Returns\r\n     * - **`T | null`**: The first row where the column has a duplicate value, or `null` if no duplicates exist.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   name: string;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" },\r\n     *     { id: 3, name: \"Alice\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.findFirstRowDuplColumn(\"name\"));\r\n     * // Output: { id: 3, name: \"Alice\" } (the second occurrence of \"Alice\")\r\n     * \r\n     * console.log(dataModel.findFirstRowDuplColumn(\"id\"));\r\n     * // Output: null (no duplicate values in the \"id\" column)\r\n     *\r\n     * // TypeScript Error: Argument of type '\"age\"' is not assignable to parameter of type '\"id\" | \"name\"'.\r\n     * // console.log(dataModel.findFirstRowDuplColumn(\"age\"));\r\n     * ```\r\n     *\r\n     * @param {K} column The column name to check for duplicate values.\r\n     * @returns {T | null} The first row where the column has a duplicate value, or `null` if none exist.\r\n     * @throws {Error} If `column` does not exist.\r\n     */\r\n    findFirstRowDuplColumn<K extends keyof T>(column: K): T | null;\r\n    /**\r\n     * Checks whether all values in the specified column satisfy a given validation function.\r\n     * Uses `<K extends keyof T>` to ensure type safety for column selection.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The column name to validate, constrained to keys of `T`.\r\n     * - `validator` **(`DataModelValidator`)**: A function that takes a value as input and returns `true` if the value is valid.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures type safety by restricting `column` to existing keys of `T`.\r\n     * - Calls `_getInValidColumnFirstRowIndex(column, validator)` to check for invalid values.\r\n     * - If no invalid values are found, returns `true`; otherwise, returns `false`.\r\n     *\r\n     * ### Returns\r\n     * - **`boolean`**: `true` if all values in the column are valid, otherwise `false`.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   age: number;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, age: 25 },\r\n     *     { id: 2, age: 30 },\r\n     *     { id: 3, age: \"invalid\" as any }\r\n     * ]);\r\n     * \r\n     * // Check if all values in \"age\" column are valid numbers\r\n     * console.log(dataModel.isValidValue(\"age\", value => typeof value === \"number\"));\r\n     * // Output: false\r\n     * \r\n     * console.log(dataModel.isValidValue(\"id\", value => typeof value === \"number\"));\r\n     * // Output: true\r\n     *\r\n     * // TypeScript Error: Argument of type '\"name\"' is not assignable to parameter of type '\"id\" | \"age\"'.\r\n     * // console.log(dataModel.isValidValue(\"name\", value => typeof value === \"string\"));\r\n     * ```\r\n     *\r\n     * @param {K} column The column name to validate.\r\n     * @param {DataModelValidator} validator A function that checks if a value is valid.\r\n     * @returns {boolean} `true` if all values in the column are valid, otherwise `false`.\r\n     * @throws {Error} If `column` does not exist or `validator` is not a function.\r\n     */\r\n    isValidValue<K extends keyof T>(column: K, vaildator: DataModelValidator): boolean;\r\n    /**\r\n     * Finds and returns the first row where the specified column contains an invalid value based on a given validation function.\r\n     * Uses `<K extends keyof T>` to ensure type safety for column selection.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(K)**: The column name to validate, constrained to keys of `T`.\r\n     * - `validator` **(`DataModelValidator`)**: A function that takes a value as input and returns `true` if the value is valid.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures type safety by restricting `column` to existing keys of `T`.\r\n     * - Calls `_getInValidColumnFirstRowIndex(column, validator)` to locate the first occurrence of an invalid value in the column.\r\n     * - If no invalid values are found, returns `null`.\r\n     * - If an invalid value is found, retrieves and returns the corresponding row using `getRow()`.\r\n     *\r\n     * ### Returns\r\n     * - **`T | null`**: The first row where the column has an invalid value, or `null` if all values are valid.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *   id: number;\r\n     *   age: number;\r\n     * }\r\n     *\r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, age: 25 },\r\n     *     { id: 2, age: \"invalid\" as any },\r\n     *     { id: 3, age: 30 }\r\n     * ]);\r\n     * \r\n     * // Find the first row where \"age\" contains a non-numeric value\r\n     * console.log(dataModel.findFirstRowInvalidValue(\"age\", value => typeof value === \"number\"));\r\n     * // Output: { id: 2, age: \"invalid\" }\r\n     * \r\n     * console.log(dataModel.findFirstRowInvalidValue(\"id\", value => typeof value === \"number\"));\r\n     * // Output: null (all values in \"id\" are valid)\r\n     *\r\n     * // TypeScript Error: Argument of type '\"name\"' is not assignable to parameter of type '\"id\" | \"age\"'.\r\n     * // console.log(dataModel.findFirstRowInvalidValue(\"name\", value => typeof value === \"string\"));\r\n     * ```\r\n     *\r\n     * @param {K} column The column name to validate.\r\n     * @param {DataModelValidator} validator A function that checks if a value is valid.\r\n     * @returns {T | null} The first row with an invalid value, or `null` if all values are valid.\r\n     * @throws {Error} If `column` does not exist or `validator` is not a function.\r\n     */\r\n    findFirstRowInvalidValue<K extends keyof T>(column: K, vaildator: DataModelValidator): T | null;\r\n    /**\r\n     * Searches for rows that match a given condition and returns their indexes.\r\n     * Allows both positive and negative filtering based on the `isNegative` flag.\r\n     *\r\n     * ### Parameters\r\n     * - `condition` **(`Record<K, T[K]>`)**: An object representing the key-value conditions to match.\r\n     * - `isNegative` **(`boolean`, optional, default = `false`)**: If `true`, returns indexes of rows that **do not** match the condition.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures `condition` is a valid object using `_checkOriginObject(condition)`.\r\n     * - Validates `isNegative` as a boolean using `_checkBoolean(isNegative)`.\r\n     * - Iterates through `_rows` to check if each row meets the condition.\r\n     * - Uses `JSON.stringify()` for deep comparison of values.\r\n     * - If `isNegative` is `false`, adds matching row indexes to the result.\r\n     * - If `isNegative` is `true`, adds **non-matching** row indexes to the result.\r\n     *\r\n     * ### Type Safety\r\n     * - The generic type `<K extends keyof T>` ensures that `condition` keys must exist in `T`.\r\n     * - `T[K]` enforces that values in `condition` match the expected type of the corresponding column.\r\n     *\r\n     * ### Returns\r\n     * - **`number[]`**: An array of indexes of rows that match (or do not match) the condition.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     *     age: number;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 },\r\n     *     { id: 3, name: \"Charlie\", age: 25 }\r\n     * ]);\r\n     * \r\n     * // Search for row indexes where age is 25\r\n     * console.log(dataModel.searchRowIndexes({ age: 25 }));\r\n     * // Output: [0, 2]\r\n     * \r\n     * // Search for row indexes where age is NOT 25\r\n     * console.log(dataModel.searchRowIndexes({ age: 25 }, true));\r\n     * // Output: [1]\r\n     * ```\r\n     *\r\n     * @param {Record<K, T[K]>} condition The key-value condition to match.\r\n     * @param {boolean} [isNegative=false] If `true`, returns indexes of rows that do **not** match the condition.\r\n     * @returns {number[]} An array of indexes of rows that match or do not match the condition.\r\n     * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\r\n     */\r\n    searchRowIndexes<K extends keyof T>(condition: Record<K, T[K]>, isNegative?: boolean): number[];\r\n    /**\r\n     * Searches for rows that match a given condition and returns them as an array.\r\n     * Allows both positive and negative filtering based on the `isNegative` flag.\r\n     *\r\n     * ### Parameters\r\n     * - `condition` **(`Record<K, T[K]>`)**: An object representing the key-value conditions to match.\r\n     * - `isNegative` **(`boolean`, optional, default = `false`)**: If `true`, returns rows that **do not** match the condition.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures `condition` is a valid object using `_checkOriginObject(condition)`.\r\n     * - Validates `isNegative` as a boolean using `_checkBoolean(isNegative)`.\r\n     * - Iterates through `_rows`, checking if each row meets the condition.\r\n     * - Uses `JSON.stringify()` for deep comparison of values.\r\n     * - If `isNegative` is `false`, adds matching rows to the result.\r\n     * - If `isNegative` is `true`, adds **non-matching** rows to the result.\r\n     * - Returns a deep copy of the matched rows to ensure immutability.\r\n     *\r\n     * ### Type Safety\r\n     * - The generic type `<K extends keyof T>` ensures that `condition` keys must exist in `T`.\r\n     * - `T[K]` enforces that values in `condition` match the expected type of the corresponding column.\r\n     *\r\n     * ### Returns\r\n     * - **`T[]`**: An array of deep-copied rows that match (or do not match) the condition.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     *     age: number;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 },\r\n     *     { id: 3, name: \"Charlie\", age: 25 }\r\n     * ]);\r\n     * \r\n     * // Search for rows where age is 25\r\n     * console.log(dataModel.searchRows({ age: 25 }));\r\n     * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\r\n     * \r\n     * // Search for rows where age is NOT 25\r\n     * console.log(dataModel.searchRows({ age: 25 }, true));\r\n     * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\r\n     * ```\r\n     *\r\n     * @param {Record<K, T[K]>} condition The key-value condition to match.\r\n     * @param {boolean} [isNegative=false] If `true`, returns rows that do **not** match the condition.\r\n     * @returns {T[]} An array of deep-copied rows that match or do not match the condition.\r\n     * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\r\n     */\r\n    searchRows<K extends keyof T>(condition: Record<K, T[K]>, isNegative?: boolean): T[];\r\n    /**\r\n     * Searches for rows that match a given condition and returns them as a new `DataModel` instance.\r\n     * Allows both positive and negative filtering based on the `isNegative` flag.\r\n     *\r\n     * ### Parameters\r\n     * - `condition` **(`Record<K, T[K]>`)**: An object representing the key-value conditions to match.\r\n     * - `isNegative` **(`boolean`, optional, default = `false`)**: If `true`, returns rows that **do not** match the condition.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures `condition` is a valid object using `_checkOriginObject(condition)`.\r\n     * - Validates `isNegative` as a boolean using `_checkBoolean(isNegative)`.\r\n     * - Iterates through `_rows`, checking if each row meets the condition.\r\n     * - Uses `JSON.stringify()` for deep comparison of values.\r\n     * - If `isNegative` is `false`, adds matching rows to the result.\r\n     * - If `isNegative` is `true`, adds **non-matching** rows to the result.\r\n     * - Returns a new `DataModel<T>` containing the filtered rows.\r\n     *\r\n     * ### Type Safety\r\n     * - The generic type `<K extends keyof T>` ensures that `condition` keys must exist in `T`.\r\n     * - `T[K]` enforces that values in `condition` match the expected type of the corresponding column.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: A new `DataModel<T>` instance containing the matched rows.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     *     age: number;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 },\r\n     *     { id: 3, name: \"Charlie\", age: 25 }\r\n     * ]);\r\n     * \r\n     * // Search for rows where age is 25 and return them as a new DataModel\r\n     * const filteredModel = dataModel.searchRowsAsDataModel({ age: 25 });\r\n     * console.log(filteredModel.getRowCount()); // Output: 2\r\n     * console.log(filteredModel.getRows());\r\n     * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\r\n     * \r\n     * // Search for rows where age is NOT 25\r\n     * const excludedModel = dataModel.searchRowsAsDataModel({ age: 25 }, true);\r\n     * console.log(excludedModel.getRows());\r\n     * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\r\n     * ```\r\n     *\r\n     * @param {Record<K, T[K]>} condition The key-value condition to match.\r\n     * @param {boolean} [isNegative=false] If `true`, returns rows that do **not** match the condition.\r\n     * @returns {InterfaceDataModel<T>} A new `DataModel<T>` instance containing the matched rows.\r\n     * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\r\n     */\r\n    searchRowsAsDataModel<K extends keyof T>(condition: Record<K, T[K]>, isNegative?: boolean): InterfaceDataModel<T>;\r\n    /**\r\n     * Searches for rows that match a given condition and **modifies** the original `DataModel` \r\n     * by removing matched or unmatched rows. Unlike `searchRowsAsDataModel`, this method directly \r\n     * updates the existing dataset instead of returning a new instance.\r\n     *\r\n     * ### Parameters\r\n     * - `condition` **(`Record<K, T[K]>`)**: An object representing the key-value conditions to match.\r\n     * - `isNegative` **(`boolean`, optional, default = `false`)**: \r\n     *   - If `false` (default), removes rows that **do not** match the condition.\r\n     *   - If `true`, removes rows that **do** match the condition.\r\n     *\r\n     * ### Behavior\r\n     * - Ensures `condition` is a valid object using `_checkOriginObject(condition)`.\r\n     * - Validates `isNegative` as a boolean using `_checkBoolean(isNegative)`.\r\n     * - Iterates through `_rows`, checking if each row meets the condition.\r\n     * - Uses `JSON.stringify()` for deep comparison of values.\r\n     * - Removes rows based on the `isNegative` flag:\r\n     *   - If `false`, keeps only matching rows.\r\n     *   - If `true`, removes matching rows.\r\n     * - Returns the modified `DataModel<T>` instance for method chaining.\r\n     *\r\n     * ### Type Safety\r\n     * - The generic type `<K extends keyof T>` ensures that `condition` keys must exist in `T`.\r\n     * - `T[K]` enforces that values in `condition` match the expected type of the corresponding column.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The modified `DataModel<T>` instance after removing specified rows.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     *     age: number;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 },\r\n     *     { id: 3, name: \"Charlie\", age: 25 }\r\n     * ]);\r\n     * \r\n     * // Keep only rows where age is 25\r\n     * dataModel.searchAndModify({ age: 25 });\r\n     * console.log(dataModel.getRows());\r\n     * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\r\n     * \r\n     * // Remove rows where age is 25\r\n     * dataModel.searchAndModify({ age: 25 }, true);\r\n     * console.log(dataModel.getRows());\r\n     * // Output: []\r\n     * ```\r\n     *\r\n     * @param {Record<K, T[K]>} condition The key-value condition to match.\r\n     * @param {boolean} [isNegative=false] If `true`, removes rows that **match** the condition; otherwise, removes rows that **do not** match the condition.\r\n     * @returns {InterfaceDataModel<T>} The modified `DataModel<T>` instance after removing specified rows.\r\n     * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\r\n     */\r\n    searchAndModify<K extends keyof T>(condition: Record<K, T[K]>, isNegative?: boolean): InterfaceDataModel<T>;\r\n    /**\r\n     * Filters rows in the `DataModel` based on a custom filtering function and returns their indexes.\r\n     * Allows for efficiently identifying row positions that match a given condition.\r\n     *\r\n     * ### Parameters\r\n     * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\r\n     * - Iterates through `_rows`, applying the filter function to each row.\r\n     * - Collects the indexes of rows that satisfy the filter condition.\r\n     *\r\n     * ### Returns\r\n     * - **`number[]`**: An array of indexes of rows that match the filter condition.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 },\r\n     *     { id: 3, name: \"Charlie\", age: 22 }\r\n     * ]);\r\n     * \r\n     * // Get indexes of rows where age is greater than 25\r\n     * const rowIndexes = dataModel.filterRowIndexes(row => row.age > 25);\r\n     * console.log(rowIndexes); // Output: [1]\r\n     * ```\r\n     *\r\n     * @param {DataModelFillter} filter A function that determines whether a row should be included.\r\n     * @returns {number[]} An array of indexes of rows that match the filter condition.\r\n     * @throws {Error} If `filter` is not a valid function.\r\n     */\r\n    filterRowIndexes(filter: DataModelFillter): number[];\r\n    /**\r\n     * Filters rows in the `DataModel` based on a custom filtering function.\r\n     * Returns an array of rows that satisfy the provided filter condition.\r\n     *\r\n     * ### Parameters\r\n     * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\r\n     * - Iterates through `_rows`, applying the filter function to each row.\r\n     * - Uses `_deepCopy()` to ensure the returned rows are independent copies.\r\n     * - Returns an array of matching rows.\r\n     *\r\n     * ### Returns\r\n     * - **`T[]`**: An array of deep-copied rows that match the filter condition.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 },\r\n     *     { id: 3, name: \"Charlie\", age: 22 }\r\n     * ]);\r\n     * \r\n     * // Filter rows where age is greater than 25\r\n     * const filteredRows = dataModel.filterRows(row => row.age > 25);\r\n     * console.log(filteredRows);\r\n     * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\r\n     * ```\r\n     *\r\n     * @param {DataModelFillter} filter A function that determines whether a row should be included.\r\n     * @returns {T[]} An array of deep-copied rows that match the filter condition.\r\n     * @throws {Error} If `filter` is not a valid function.\r\n     */\r\n    filterRows(filter: DataModelFillter): T[];\r\n    /**\r\n     * Filters rows in the `DataModel` based on a custom filtering function and returns a new `DataModel` containing the matched rows.\r\n     * Allows for extracting a subset of the dataset while preserving the structured format.\r\n     *\r\n     * ### Parameters\r\n     * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\r\n     * - Iterates through `_rows`, applying the filter function to each row.\r\n     * - Collects rows that satisfy the filter condition.\r\n     * - Returns a new `DataModel` instance containing the filtered rows.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: A new `DataModel` instance containing the filtered rows.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 },\r\n     *     { id: 3, name: \"Charlie\", age: 22 }\r\n     * ]);\r\n     * \r\n     * // Create a new DataModel containing only rows where age is greater than 25\r\n     * const filteredDataModel = dataModel.filterRowsAsDataModel(row => row.age > 25);\r\n     * console.log(filteredDataModel.getRowCount()); // Output: 1\r\n     * console.log(filteredDataModel.getRow(0)); // Output: { id: 2, name: \"Bob\", age: 30 }\r\n     * ```\r\n     *\r\n     * @param {DataModelFillter} filter A function that determines whether a row should be included.\r\n     * @returns {InterfaceDataModel<T>} A new `DataModel` instance containing the filtered rows.\r\n     * @throws {Error} If `filter` is not a valid function.\r\n     */\r\n    filterRowsAsDataModel(filter: DataModelFillter): InterfaceDataModel<T>;\r\n    /**\r\n     * Filters rows in the `DataModel` based on a custom filtering function and **modifies** the original `DataModel` by removing unmatched rows.\r\n     * This method directly updates the existing dataset instead of returning a new instance.\r\n     *\r\n     * ### Parameters\r\n     * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be retained.\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\r\n     * - Iterates through `_rows`, applying the filter function to each row.\r\n     * - Removes rows that do **not** satisfy the filter condition.\r\n     * - Returns the modified `DataModel` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: The modified `DataModel` instance with only the filtered rows.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\", age: 25 },\r\n     *     { id: 2, name: \"Bob\", age: 30 },\r\n     *     { id: 3, name: \"Charlie\", age: 22 }\r\n     * ]);\r\n     * \r\n     * // Remove all rows where age is 25 or below\r\n     * dataModel.filterAndModify(row => row.age > 25);\r\n     * \r\n     * console.log(dataModel.getRowCount()); // Output: 1\r\n     * console.log(dataModel.getRow(0)); // Output: { id: 2, name: \"Bob\", age: 30 }\r\n     * ```\r\n     *\r\n     * @param {DataModelFillter} filter A function that determines whether a row should be retained.\r\n     * @returns {InterfaceDataModel<T>} The modified `DataModel` instance after removing unmatched rows.\r\n     * @throws {Error} If `filter` is not a valid function.\r\n     */\r\n    filterAndModify(filter: DataModelFillter): InterfaceDataModel<T>;\r\n    /**\r\n     * Reorders the columns in the `DataModel` based on the specified order.\r\n     * Ensures that all existing columns are included, maintaining the defined structure.\r\n     *\r\n     * ### Parameters\r\n     * - `columns` **(`K[]`)**: An array of column names in the desired order.\r\n     *\r\n     * ### Behavior\r\n     * - Calls `_checkArray(columns)` to validate the input as an array.\r\n     * - Ensures that each column in `columns` exists in the `DataModel` using `_checkColumn(column)`.\r\n     * - Constructs a new column order by placing unspecified columns at the end.\r\n     * - Updates `_cols` with the new column order.\r\n     * - Returns the modified `DataModel<T>` instance for method chaining.\r\n     *\r\n     * ### Type Safety\r\n     * - Uses `<K extends keyof T>` to ensure that `columns` only contain valid keys of `T`.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The modified `DataModel<T>` instance with reordered columns.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     *     age: number;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\"id\", \"name\", \"age\"]);\r\n     * \r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\r\n     * \r\n     * // Change column order\r\n     * dataModel.setColumnSorting([\"age\", \"name\"]);\r\n     * console.log(dataModel.getColumns()); // Output: [\"age\", \"name\", \"id\"]\r\n     * ```\r\n     *\r\n     * @param {K[]} columns An array of column names in the desired order.\r\n     * @returns {InterfaceDataModel<T>} The modified `DataModel<T>` instance with reordered columns.\r\n     * @throws {Error} If `columns` is not an array or contains invalid column names.\r\n     */\r\n    setColumnSorting<K extends keyof T>(columns: K[]): InterfaceDataModel<T>;\r\n    /**\r\n     * Sorts the columns of the `DataModel` in ascending (A-Z) order.\r\n     * The sorting is applied alphabetically based on column names.\r\n     *\r\n     * ### Behavior\r\n     * - Calls the native `Array.sort()` method on `_cols` to rearrange columns in ascending order.\r\n     * - Returns the modified `DataModel` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: The modified `DataModel` instance with columns sorted in ascending order.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\"name\", \"id\", \"age\"]);\r\n     * \r\n     * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\r\n     * \r\n     * dataModel.sortColumnAscending();\r\n     * console.log(dataModel.getColumns()); // Output: [\"age\", \"id\", \"name\"]\r\n     * ```\r\n     *\r\n     * @returns {InterfaceDataModel<T>} The modified `DataModel` instance with columns sorted in ascending order.\r\n     */\r\n    sortColumnAscending(): InterfaceDataModel<T>;\r\n    /**\r\n     * Sorts the columns of the `DataModel` in descending (Z-A) order.\r\n     * The sorting is applied alphabetically based on column names.\r\n     *\r\n     * ### Behavior\r\n     * - Calls the native `Array.sort()` method on `_cols` with a custom comparator to sort columns in descending order.\r\n     * - Returns the modified `DataModel` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: The modified `DataModel` instance with columns sorted in descending order.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\"name\", \"id\", \"age\"]);\r\n     * \r\n     * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\r\n     * \r\n     * dataModel.sortColumnDescending();\r\n     * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\r\n     * ```\r\n     *\r\n     * @returns {InterfaceDataModel<T>} The modified `DataModel` instance with columns sorted in descending order.\r\n     */\r\n    sortColumnDescending(): InterfaceDataModel<T>;\r\n    /**\r\n     * Reverses the order of columns in the `DataModel`.\r\n     * The column order is flipped without sorting alphabetically.\r\n     *\r\n     * ### Behavior\r\n     * - Calls the native `Array.reverse()` method on `_cols` to reverse the column order.\r\n     * - Returns the modified `DataModel` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: The modified `DataModel` instance with reversed column order.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\", \"age\"]);\r\n     * \r\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\r\n     * \r\n     * dataModel.sortColumnReverse();\r\n     * console.log(dataModel.getColumns()); // Output: [\"age\", \"name\", \"id\"]\r\n     * ```\r\n     *\r\n     * @returns {InterfaceDataModel<T>} The modified `DataModel` instance with reversed column order.\r\n     */\r\n    sortColumnReverse(): InterfaceDataModel<T>;\r\n    /**\r\n     * Sorts the rows of the `DataModel` in ascending order based on the specified column.\r\n     * Optionally supports integer-based sorting for numerical values.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(`K`)**: The column name to sort by.\r\n     * - `isIntegerOrder` **(`boolean`, optional, default = `false`)**: If `true`, treats values as integers for sorting.\r\n     *\r\n     * ### Behavior\r\n     * - Validates `column` using `_getValidColValue(column)`.\r\n     * - Ensures `column` exists in the `DataModel` with `_checkColumn(column)`.\r\n     * - Validates `isIntegerOrder` using `_checkBoolean(isIntegerOrder)`.\r\n     * - Uses `Array.sort()` to sort rows in ascending order.\r\n     * - Places `null` values at the end of the sorted list.\r\n     * - Converts object values to JSON strings for sorting consistency.\r\n     * - If `isIntegerOrder` is `true`, parses values as integers before sorting.\r\n     * - Throws an error if a non-numeric value is encountered in integer sorting mode.\r\n     *\r\n     * ### Type Safety\r\n     * - Uses `<K extends keyof T>` to ensure `column` is a valid key of `T`.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The modified `DataModel<T>` instance with rows sorted in ascending order.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 3, name: \"Charlie\" },\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * \r\n     * // Sort rows by \"id\" in ascending order\r\n     * dataModel.sortRowAscending(\"id\");\r\n     * console.log(dataModel.getRows());\r\n     * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\r\n     * \r\n     * // Sort rows numerically by \"id\"\r\n     * dataModel.sortRowAscending(\"id\", true);\r\n     * ```\r\n     *\r\n     * @param {K} column The column name to sort by.\r\n     * @param {boolean} [isIntegerOrder=false] If `true`, treats values as integers for sorting.\r\n     * @returns {InterfaceDataModel<T>} The modified `DataModel<T>` instance with rows sorted in ascending order.\r\n     * @throws {Error} If `column` is invalid or contains non-numeric values in integer mode.\r\n     */\r\n    sortRowAscending<K extends keyof T>(column: K, isIntegerOrder?: boolean): InterfaceDataModel<T>;\r\n    /**\r\n     * Sorts the rows of the `DataModel` in descending order based on the specified column.\r\n     * Optionally supports integer-based sorting for numerical values.\r\n     *\r\n     * ### Parameters\r\n     * - `column` **(`K`)**: The column name to sort by.\r\n     * - `isIntegerOrder` **(`boolean`, optional, default = `false`)**: If `true`, treats values as integers for sorting.\r\n     *\r\n     * ### Behavior\r\n     * - Validates `column` using `_getValidColValue(column)`.\r\n     * - Ensures `column` exists in the `DataModel` with `_checkColumn(column)`.\r\n     * - Validates `isIntegerOrder` using `_checkBoolean(isIntegerOrder)`.\r\n     * - Uses `Array.sort()` to sort rows in descending order.\r\n     * - Places `null` values at the beginning of the sorted list.\r\n     * - Converts object values to JSON strings for sorting consistency.\r\n     * - If `isIntegerOrder` is `true`, parses values as integers before sorting.\r\n     * - Throws an error if a non-numeric value is encountered in integer sorting mode.\r\n     *\r\n     * ### Type Safety\r\n     * - Uses `<K extends keyof T>` to ensure `column` is a valid key of `T`.\r\n     *\r\n     * ### Returns\r\n     * - **`InterfaceDataModel<T>`**: The modified `DataModel<T>` instance with rows sorted in descending order.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     * }\r\n     * \r\n     * const dataModel = new hison.data.DataModel<User>([\r\n     *     { id: 3, name: \"Charlie\" },\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" }\r\n     * ]);\r\n     * \r\n     * // Sort rows by \"id\" in descending order\r\n     * dataModel.sortRowDescending(\"id\");\r\n     * console.log(dataModel.getRows());\r\n     * // Output: [{ id: 3, name: \"Charlie\" }, { id: 2, name: \"Bob\" }, { id: 1, name: \"Alice\" }]\r\n     * \r\n     * // Sort rows numerically by \"id\"\r\n     * dataModel.sortRowDescending(\"id\", true);\r\n     * ```\r\n     *\r\n     * @param {K} column The column name to sort by.\r\n     * @param {boolean} [isIntegerOrder=false] If `true`, treats values as integers for sorting.\r\n     * @returns {InterfaceDataModel<T>} The modified `DataModel<T>` instance with rows sorted in descending order.\r\n     * @throws {Error} If `column` is invalid or contains non-numeric values in integer mode.\r\n     */\r\n    sortRowDescending<K extends keyof T>(column: K, isIntegerOrder?: boolean): InterfaceDataModel<T>;\r\n    /**\r\n     * Reverses the order of rows in the `DataModel`.\r\n     * This method flips the row order without sorting by a specific column.\r\n     *\r\n     * ### Behavior\r\n     * - Calls the native `Array.reverse()` method on `_rows` to reverse the row order.\r\n     * - Returns the modified `DataModel` instance for method chaining.\r\n     *\r\n     * ### Returns\r\n     * - **`DataModel`**: The modified `DataModel` instance with reversed row order.\r\n     *\r\n     * ### Example Usage\r\n     * ```typescript\r\n     * const dataModel = new hison.data.DataModel([\r\n     *     { id: 1, name: \"Alice\" },\r\n     *     { id: 2, name: \"Bob\" },\r\n     *     { id: 3, name: \"Charlie\" }\r\n     * ]);\r\n     * \r\n     * console.log(dataModel.getRows());\r\n     * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\r\n     * \r\n     * dataModel.sortRowReverse();\r\n     * console.log(dataModel.getRows());\r\n     * // Output: [{ id: 3, name: \"Charlie\" }, { id: 2, name: \"Bob\" }, { id: 1, name: \"Alice\" }]\r\n     * ```\r\n     *\r\n     * @returns {InterfaceDataModel<T>} The modified `DataModel` instance with reversed row order.\r\n     */\r\n    sortRowReverse(): InterfaceDataModel<T>;\r\n};\r\n/**\r\n * Defines a function signature for formatting values in a `DataModel` column.\r\n * \r\n * - This function takes a value as input and returns a transformed version of it.\r\n * - Used in `DataModel.setColumnSameFormat()` to apply consistent formatting across a column.\r\n * \r\n * ### Example Usage\r\n * ```typescript\r\n * const formatCurrency: DataModelFormatter = (value) => `$${value.toFixed(2)}`;\r\n * console.log(formatCurrency(1000)); // \"$1000.00\"\r\n * ```\r\n * \r\n * @callback DataModelFormatter\r\n * @param value The original value from the `DataModel` column.\r\n * @returns The formatted value.\r\n */\r\nexport interface DataModelFormatter{(value: any): any;};\r\n/**\r\n * Defines a function signature for validating values in a `DataModel` column.\r\n * \r\n * - This function takes a value as input and returns a boolean indicating validity.\r\n * - Used in `DataModel.isValidValue()` to check if all column values meet the validation criteria.\r\n * \r\n * ### Example Usage\r\n * ```typescript\r\n * const isNumber: DataModelValidator = (value) => typeof value === \"number\";\r\n * console.log(isNumber(123)); // true\r\n * console.log(isNumber(\"text\")); // false\r\n * ```\r\n * \r\n * @callback DataModelValidator\r\n * @param value The value from the `DataModel` column to validate.\r\n * @returns `true` if the value is valid, otherwise `false`.\r\n */\r\nexport interface DataModelValidator{(value: any): boolean;};\r\n/**\r\n * Defines a function signature for filtering rows in a `DataModel`.\r\n * \r\n * - This function takes a row (as an object) and returns `true` if it should be included.\r\n * - Used in `DataModel.filterRowIndexes()` to filter row indexes based on the given condition.\r\n * \r\n * ### Example Usage\r\n * ```typescript\r\n * const filterByAge: DataModelFillter = (row) => row.age > 25;\r\n * console.log(filterByAge({ age: 30 })); // true\r\n * console.log(filterByAge({ age: 22 })); // false\r\n * ```\r\n * \r\n * @callback DataModelFillter\r\n * @param row A record representing a row in the `DataModel`.\r\n * @returns `true` if the row matches the filter criteria, otherwise `false`.\r\n */\r\nexport interface DataModelFillter{(row: Record<string, any>): boolean;};\r\n//====================================================================================\r\n//link interface, type\r\n//====================================================================================\r\n/**\r\n * **`CachingModule` - A module for API response caching and real-time WebSocket updates.**\r\n *\r\n * The `CachingModule` provides a caching mechanism for API responses using an **LRU (Least Recently Used) strategy** \r\n * while integrating **WebSocket communication** for real-time data updates.\r\n *\r\n * ### **Key Features**\r\n * - **LRU Cache for API Responses**: Stores API responses with a configurable limit, reducing redundant network requests.\r\n * - **WebSocket Support**: Maintains a persistent WebSocket connection for real-time data updates.\r\n * - **Cache Management Methods**: Supports cache operations (`get`, `put`, `remove`, `clear`, etc.).\r\n * - **Event-Driven Communication**: Allows event listeners (`onopen`, `onmessage`, `onclose`, `onerror`) for WebSocket handling.\r\n * - **Flexible Configuration**: Uses `CustomOption` settings for cache limits and WebSocket parameters.\r\n * - **Validation Methods**: Ensures proper data types for cache keys and event listeners.\r\n *\r\n * ### **How It Works**\r\n * - **API responses are stored in an LRUCache instance**, avoiding redundant network calls.\r\n * - **When a WebSocket connection is established**, data updates can be received in real-time.\r\n * - **Cache data can be accessed and managed using `get`, `put`, `remove`, and `clear` methods.**\r\n * - **WebSocket event handlers can be set up for real-time notifications.**\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Create a CachingModule instance with a cache limit of 20\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * \r\n * // Store API response in the cache\r\n * cachingModule.put(\"users\", fetch(\"/api/users\").then(response => response.json()));\r\n * \r\n * // Retrieve cached data\r\n * cachingModule.get(\"users\").then(data => console.log(data));\r\n * \r\n * // Register WebSocket event handlers\r\n * cachingModule.onopen = () => console.log(\"WebSocket Connected\");\r\n * cachingModule.onmessage = event => console.log(\"New Message:\", event.data);\r\n * ```\r\n *\r\n * ### **Internal Structure**\r\n * - **Uses `LRUCache`** to manage cached responses with a defined limit.\r\n * - **Maintains a WebSocket connection** to receive real-time data updates.\r\n * - **Supports configurable options via `CustomOption`**, such as WebSocket endpoint and cache size.\r\n * - **Provides utility methods** for cache validation, data retrieval, and event handling.\r\n *\r\n * ### **Related Components**\r\n * - **`LRUCache`**: Handles the caching logic for API responses.\r\n * - **`WebSocket`**: Establishes a real-time connection for live data updates.\r\n * - **`CustomOption`**: Provides configurable options for WebSocket and cache settings.\r\n * - **`ApiLink`**: Uses this module to fetch and store API responses efficiently.\r\n *\r\n * ### **Return Value**\r\n * - This module **returns an instance of `CachingModule`**, which allows cache operations and WebSocket event management.\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Reducing unnecessary API calls** by storing frequently accessed responses.\r\n * - **Receiving real-time updates** from the server without polling.\r\n * - **Efficiently managing API response data** in web applications.\r\n * - **Supporting offline or low-latency scenarios** by using cached responses.\r\n */\r\nexport interface InterfaceCachingModule {\r\n    /**\r\n     * **Checks whether this instance is a valid caching module.**\r\n     *\r\n     * This method returns a boolean flag indicating whether the current instance \r\n     * is recognized as a `CachingModule`. This is useful for validating whether \r\n     * an instance supports caching functionalities.\r\n     *\r\n     * ### **Return Value**\r\n     * - `true` if this instance is a caching module.\r\n     * - `false` if caching is not enabled.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * console.log(cachingModule.getIsCachingModule()); // true\r\n     * ```\r\n     *\r\n     * ### **Related Properties**\r\n     * - **`_isCachingModule`** *(boolean)* - Stores the module's caching capability status.\r\n     *\r\n     * @returns {boolean} `true` if this instance is a caching module.\r\n     */\r\n    getIsCachingModule(): boolean;\r\n    /**\r\n     * **Checks if the cache contains a specific key.**\r\n     *\r\n     * This method verifies if the specified `key` exists in the LRU cache. It ensures \r\n     * that the key is a valid string and then delegates the check to the underlying \r\n     * `LRUCache` instance.\r\n     *\r\n     * ### **Parameters**\r\n     * - `key` *(string)* - The key to check in the cache.\r\n     *\r\n     * ### **Return Value**\r\n     * - `true` if the cache contains the specified key.\r\n     * - `false` if the key is not found in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\r\n     * console.log(cachingModule.hasKey(\"user123\")); // true\r\n     * console.log(cachingModule.hasKey(\"user456\")); // false\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`_checkTypeString(key)`** - Ensures the key is a valid string before performing the cache check.\r\n     * - **`_LRUCache.hasKey(key)`** - The internal method that checks the existence of the key in the cache.\r\n     *\r\n     * @param {string} key - The key to check in the cache.\r\n     * @returns {boolean} `true` if the cache contains the key, otherwise `false`.\r\n     */\r\n    hasKey(key: string): boolean;\r\n    /**\r\n     * **Retrieves cached data for a given key.**\r\n     *\r\n     * Fetches the cached API response associated with `key`, returning a promise.\r\n     * If the key does not exist in the cache, `null` is returned.\r\n     *\r\n     * ### **Parameters**\r\n     * - `key` *(string)* - The cache key to retrieve.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing:\r\n     *   - `data` *(T)* - The cached API response.\r\n     *   - `response` *(Response)* - The original HTTP response.\r\n     * - Returns `null` if the key does not exist.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Store API response in the cache\r\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\r\n     * \r\n     * // Retrieve cached data\r\n     * cachingModule.get(\"user123\").then(data => console.log(data));\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`put(key, value)`** - Stores API responses in the cache.\r\n     * - **`hasKey(key)`** - Checks if a key exists in the cache.\r\n     * - **`remove(key)`** - Removes a key from the cache.\r\n     *\r\n     * @param {string} key - The cache key to retrieve.\r\n     * @returns {Promise<{ data: T; response: Response }>} | null\r\n     */\r\n    get<T = any>(key: string): Promise<{ data: T; response: Response; }> | null;\r\n    /**\r\n     * **Stores API response data in the cache.**\r\n     *\r\n     * This method saves the provided `value` (API response) in the cache with the specified `key`.\r\n     * Before storing the data, it validates that the `key` is a string.\r\n     *\r\n     * ### **Parameters**\r\n     * - `key` *(string)* - The cache key under which the response will be stored.\r\n     * - `value` *(Promise<{ data: any; response: Response }>)*\r\n     *   - A promise resolving to an object containing:\r\n     *     - `data` *(any)* - The API response data.\r\n     *     - `response` *(Response)* - The original HTTP response object.\r\n     *\r\n     * ### **Behavior**\r\n     * - If the `key` already exists, the old value is **replaced** with the new one.\r\n     * - If the cache reaches its limit, the **least recently used (LRU) entry is removed**.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Store an API response in the cache\r\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`get(key)`** - Retrieves cached data for a given key.\r\n     * - **`hasKey(key)`** - Checks if a key exists in the cache.\r\n     * - **`remove(key)`** - Removes a specific key from the cache.\r\n     *\r\n     * @param {string} key - The cache key under which the response will be stored.\r\n     * @param {Promise<{ data: any; response: Response }>} value - The API response to be cached.\r\n     */\r\n    put(key: string, value: Promise<{ data: any; response: Response; }>): void;\r\n    /**\r\n     * **Removes a key from the cache and returns its value.**\r\n     *\r\n     * Retrieves the cached response for `key` before deleting it.  \r\n     * If the key does not exist, returns `null`.\r\n     *\r\n     * ### **Parameters**\r\n     * - `key` *(string)* - The cache key to remove.\r\n     *\r\n     * ### **Behavior**\r\n     * - Ensures `key` is a valid string before proceeding.\r\n     * - Fetches the cached data for `key`, if available.\r\n     * - Deletes the key from the cache.\r\n     * - Returns the cached data before deletion, or `null` if not found.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Store an API response in the cache\r\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\r\n     * \r\n     * // Remove and retrieve cached data\r\n     * cachingModule.remove(\"user123\").then(data => console.log(data));\r\n     * \r\n     * // Verify key removal\r\n     * console.log(cachingModule.hasKey(\"user123\")); // false\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`put(key, value)`** - Stores API responses in the cache.\r\n     * - **`get(key)`** - Retrieves cached data for a given key.\r\n     * - **`clear()`** - Removes all cached entries.\r\n     *\r\n     * @param {string} key - The cache key to remove.\r\n     * @returns {Promise<{ data: T; response: Response; }> | null} The cached response before removal, or `null` if not found.\r\n     */\r\n    remove<T = any>(key: string): Promise<{ data: T; response: Response; }> | null;\r\n    /**\r\n     * **Retrieves all cached data as a key-value object.**\r\n     *\r\n     * Returns the entire cache as a `Record<string, Promise<{ data: T; response: Response }>>`,  \r\n     * where each key corresponds to a cached API response.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Record<string, Promise<{ data: T; response: Response }>>`, where:\r\n     *   - `key` *(string)* - The cache key.\r\n     *   - `value` *(Promise<{ data: T; response: Response }>>)* - A promise resolving to:\r\n     *     - `data` *(T)* - The API response data.\r\n     *     - `response` *(Response)* - The original HTTP response object.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Store multiple API responses in the cache\r\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\r\n     * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\r\n     * \r\n     * // Retrieve all cached data\r\n     * console.log(cachingModule.getAll());\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`put(key, value)`** - Stores API responses in the cache.\r\n     * - **`get(key)`** - Retrieves cached data for a given key.\r\n     * - **`getKeys()`** - Retrieves all cache keys.\r\n     * - **`clear()`** - Removes all cached entries.\r\n     *\r\n     * @returns {Record<string, Promise<{ data: T; response: Response }>>} An object containing all cached responses.\r\n     */\r\n    getAll<T = any>(): Record<string, Promise<{ data: T; response: Response; }>>;\r\n    /**\r\n     * **Retrieves all cache keys.**\r\n     *\r\n     * This method returns an array of all keys currently stored in the cache.\r\n     *\r\n     * ### **Return Value**\r\n     * - An array of strings representing the cache keys.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Store multiple API responses in the cache\r\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\r\n     * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\r\n     * \r\n     * // Retrieve all cache keys\r\n     * console.log(cachingModule.getKeys()); // [\"user123\", \"posts\"]\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`put(key, value)`** - Stores API responses in the cache.\r\n     * - **`get(key)`** - Retrieves cached data for a given key.\r\n     * - **`getAll()`** - Retrieves all cached data as a key-value object.\r\n     * - **`clear()`** - Removes all cached entries.\r\n     *\r\n     * @returns {string[]} An array of cache keys.\r\n     */\r\n    getKeys(): string[];\r\n    /**\r\n     * **Clears all cached data.**\r\n     *\r\n     * This method removes all entries from the cache, resetting it to an empty state.\r\n     *\r\n     * ### **Behavior**\r\n     * - All cached responses are permanently deleted.\r\n     * - The cache size is reset to zero.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Store multiple API responses in the cache\r\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\r\n     * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\r\n     * \r\n     * // Clear all cached data\r\n     * cachingModule.clear();\r\n     * \r\n     * // Verify that the cache is empty\r\n     * console.log(cachingModule.getKeys()); // []\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`put(key, value)`** - Stores API responses in the cache.\r\n     * - **`get(key)`** - Retrieves cached data for a given key.\r\n     * - **`getAll()`** - Retrieves all cached data as a key-value object.\r\n     * - **`getKeys()`** - Retrieves all cache keys.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    clear(): void;\r\n    /**\r\n     * **Registers an event handler for the WebSocket `open` event.**\r\n     *\r\n     * This method assigns a custom event handler to be executed when the WebSocket connection is successfully opened.\r\n     *\r\n     * ### **Parameters**\r\n     * - `func` *(function | null)* - A callback function to handle the WebSocket `open` event.\r\n     *   - If `null` is provided, the event handler is cleared.\r\n     *\r\n     * ### **Behavior**\r\n     * - Ensures that the provided function is valid before assigning it as the event handler.\r\n     * - When the WebSocket connection is established, the specified function is invoked.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Register a WebSocket open event handler\r\n     * cachingModule.onopen = (event) => {\r\n     *     console.log(\"WebSocket connected:\", event);\r\n     * };\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\r\n     * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\r\n     * - **`onerror(func)`** - Registers a handler for WebSocket error events.\r\n     *\r\n     * @param {(this: WebSocket, ev: Event) => any | null} func - The event handler function for the WebSocket `open` event.\r\n     */\r\n    onopen(func: ((this: WebSocket, ev: Event) => any) | null): void;\r\n    /**\r\n     * **Registers an event handler for the WebSocket `message` event.**\r\n     *\r\n     * This method assigns a custom event handler to be executed whenever a message is received \r\n     * through the WebSocket connection.\r\n     *\r\n     * ### **Parameters**\r\n     * - `func` *(function | null)* - A callback function to handle incoming WebSocket messages.\r\n     *   - If `null` is provided, the event handler is cleared.\r\n     *\r\n     * ### **Behavior**\r\n     * - Ensures that the provided function is valid before assigning it as the event handler.\r\n     * - When a message is received, the specified function is invoked with the event data.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Register a WebSocket message event handler\r\n     * cachingModule.onmessage = (event) => {\r\n     *     console.log(\"Received WebSocket message:\", event.data);\r\n     * };\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\r\n     * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\r\n     * - **`onerror(func)`** - Registers a handler for WebSocket error events.\r\n     *\r\n     * @param {(this: WebSocket, ev: MessageEvent) => any | null} func - The event handler function for WebSocket messages.\r\n     */\r\n    onmessage(func: ((this: WebSocket, ev: MessageEvent) => any) | null): void;\r\n    /**\r\n     * **Registers an event handler for the WebSocket `close` event.**\r\n     *\r\n     * This method assigns a custom event handler to be executed when the WebSocket connection is closed.\r\n     *\r\n     * ### **Parameters**\r\n     * - `func` *(function | null)* - A callback function to handle the WebSocket `close` event.\r\n     *   - If `null` is provided, the event handler is cleared.\r\n     *\r\n     * ### **Behavior**\r\n     * - Ensures that the provided function is valid before assigning it as the event handler.\r\n     * - When the WebSocket connection is closed, the specified function is invoked with the event data.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Register a WebSocket close event handler\r\n     * cachingModule.onclose = (event) => {\r\n     *     console.log(\"WebSocket closed:\", event);\r\n     * };\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\r\n     * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\r\n     * - **`onerror(func)`** - Registers a handler for WebSocket error events.\r\n     *\r\n     * @param {(this: WebSocket, ev: CloseEvent) => any | null} func - The event handler function for WebSocket disconnection.\r\n     */\r\n    onclose(func: ((this: WebSocket, ev: CloseEvent) => any) | null): void;\r\n    /**\r\n     * **Registers an event handler for the WebSocket `error` event.**\r\n     *\r\n     * This method assigns a custom event handler to be executed when a WebSocket error occurs.\r\n     *\r\n     * ### **Parameters**\r\n     * - `func` *(function | null)* - A callback function to handle WebSocket errors.\r\n     *   - If `null` is provided, the event handler is cleared.\r\n     *\r\n     * ### **Behavior**\r\n     * - Ensures that the provided function is valid before assigning it as the event handler.\r\n     * - When an error occurs in the WebSocket connection, the specified function is invoked with the event data.\r\n     * - **Note:** The implementation currently assigns the function to `onclose` instead of `onerror`,\r\n     *   which may require correction.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Register a WebSocket error event handler\r\n     * cachingModule.onerror = (event) => {\r\n     *     console.error(\"WebSocket error:\", event);\r\n     * };\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\r\n     * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\r\n     * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\r\n     *\r\n     * @param {(this: WebSocket, ev: Event) => any | null} func - The event handler function for WebSocket errors.\r\n     */\r\n    onerror(func: ((this: WebSocket, ev: Event) => any) | null): void;\r\n    /**\r\n     * **Checks the current state of the WebSocket connection.**\r\n     *\r\n     * This method returns an integer representing the current status of the WebSocket connection.\r\n     *\r\n     * ### **Return Value**\r\n     * - `1` → The WebSocket connection is open.\r\n     * - `0` → The WebSocket connection is in the process of connecting.\r\n     * - `-1` → The WebSocket connection is closed or unavailable.\r\n     *\r\n     * ### **Behavior**\r\n     * - Internally calls `_checkWebSocketConnection()` to determine the WebSocket state.\r\n     * - Useful for monitoring connection status and handling reconnection logic if needed.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const cachingModule = new hison.link.CachingModule();\r\n     * \r\n     * // Check WebSocket connection status\r\n     * const status = cachingModule.isWebSocketConnection();\r\n     * console.log(status); // Output: 1 (open), 0 (connecting), or -1 (closed)\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\r\n     * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\r\n     * - **`onerror(func)`** - Registers a handler for WebSocket error events.\r\n     *\r\n     * @returns {number} The WebSocket connection status (`1`: open, `0`: connecting, `-1`: closed).\r\n     */\r\n    isWebSocketConnection(): number;\r\n};\r\n/**\r\n * **`ApiGet<T>` - A generic class for handling HTTP GET requests within the `hison.link` module.**\r\n *\r\n * The `ApiGet<T>` class is responsible for sending HTTP GET requests to a specified API resource.\r\n * It allows defining a **custom response type** using the generic parameter `T`, providing strong typing for API responses.\r\n * \r\n * ### **Key Features**\r\n * - **Executes HTTP GET requests** using `ApiLink`.\r\n * - **Supports response caching** via an optional `CachingModule`.\r\n * - **Emits request lifecycle events** using `EventEmitter`.\r\n * - **Allows defining the expected response type** via the generic parameter `T` (default: `InterfaceDataWrapper`).\r\n *\r\n * ### **How It Works**\r\n * - When instantiated, `ApiGet<T>` stores the API resource path and an optional `CachingModule` instance.\r\n * - The `call()` method triggers a GET request and returns a `Promise<{ data: T; response: Response } | null>`.\r\n * - If caching is enabled, previously stored responses may be returned instead of making a new request.\r\n * - Event listeners can be attached to monitor the request lifecycle.\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Default usage (response type: InterfaceDataWrapper)\r\n * const apiGet = new hison.link.ApiGet(\"/users\");\r\n * apiGet.call().then(response => {\r\n *     console.log(response?.data); // Type: InterfaceDataWrapper\r\n * });\r\n *\r\n * // Specifying a custom response type (User[])\r\n * interface User {\r\n *     id: number;\r\n *     name: string;\r\n * }\r\n * const apiGetUsers = new hison.link.ApiGet<User[]>(\"/users\");\r\n * apiGetUsers.call().then(response => {\r\n *     console.log(response?.data); // Type: User[]\r\n * });\r\n *\r\n * // Creating an instance with caching\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * const cachedApiGet = new hison.link.ApiGet<User[]>(\"/users\", cachingModule);\r\n * \r\n * // Handling request events\r\n * cachedApiGet.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n *     console.log(\"GET request completed!\", data);\r\n * });\r\n * ```\r\n *\r\n * ### **Internal Components**\r\n * - **`ApiLink`**: Handles request execution and response processing.\r\n * - **`EventEmitter`**: Manages event-based request handling.\r\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n *\r\n * ### **Return Value**\r\n * - This class returns an instance of `ApiGet<T>`, which provides methods for executing GET requests and managing request events.\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Fetching data from a REST API** with strong type support.\r\n * - **Using cached responses** to reduce redundant API calls.\r\n * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n *\r\n * @template T - The expected response data type (default: `InterfaceDataWrapper`).\r\n */\r\nexport interface InterfaceApiGet<T = InterfaceDataWrapper> {\r\n    /**\r\n     * **Executes an HTTP GET request to the specified resource path.**\r\n     *\r\n     * This method sends a GET request using `ApiLink`, optionally applying caching if a `CachingModule` is provided.\r\n     * It **invokes a pre-request hook** (`hison.setBeforeGetRequest`) and **emits a request-start event**\r\n     * (`\"requestStarted_GET\"`) before execution.\r\n     *\r\n     * ### **Parameters**\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or query parameters.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Pre-Request Handling**\r\n     * - **`hison.setBeforeGetRequest((resourcePath, options) => {})`**\r\n     *   - A customizable hook executed **before sending the GET request**.\r\n     *   - If it returns `false`, the request is **prevented from execution**.\r\n     *   - **Use Case:** Validating request parameters or implementing conditional request logic.\r\n     *\r\n     * ### **Event Emission**\r\n     * - **`\"requestStarted_GET\"` Event**\r\n     *   - This event is emitted **before the GET request is executed**.\r\n     *   - Can be used for logging, request tracking, or debugging.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing:\r\n     *   - `data` *(T)* - The API response data, **typed according to the generic parameter `T`**.\r\n     *   - `response` *(Response)* - The original HTTP response object.\r\n     *\r\n     * ### **Behavior**\r\n     * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\r\n     * - If the data is not cached, it makes an HTTP GET request to `_resourcePath`.\r\n     * - Before executing the request:\r\n     *   - The **before-request hook (`beforeGetRequest`)** is checked.\r\n     *   - The **event `\"requestStarted_GET\"`** is emitted.\r\n     * - Once the request is completed, the response is returned and optionally stored in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * // Default usage (response type: InterfaceDataWrapper)\r\n     * const apiGet = new hison.link.ApiGet(\"/users\");\r\n     * apiGet.call().then(response => {\r\n     *     console.log(response?.data); // Type: InterfaceDataWrapper\r\n     * });\r\n     * \r\n     * // Specifying a custom response type (User[])\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     * }\r\n     * const apiGetUsers = new hison.link.ApiGet<User[]>(\"/users\");\r\n     * apiGetUsers.call().then(response => {\r\n     *     console.log(response?.data); // Type: User[]\r\n     * });\r\n     *\r\n     * // Handling request events\r\n     * apiGetUsers.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n     *     console.log(\"GET request completed!\", data);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\r\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\r\n     *\r\n     * @template T - The expected response data type.\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<{ data: T; response: Response } | null>} A promise resolving to the API response.\r\n     */\r\n    call(options?: Record<string, any>): Promise<{ data: T; response: Response; } | null>;\r\n    /**\r\n     * **Sends an HTTP HEAD request to the specified resource path.**\r\n     *\r\n     * This method retrieves only the headers from the specified resource without downloading the response body.\r\n     * It is useful for checking metadata such as content type, content length, and caching information.\r\n     *\r\n     * ### **Parameters**\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\r\n     *\r\n     * ### **Behavior**\r\n     * - The method delegates the request execution to `ApiLink.head()`.\r\n     * - The response body is **not** included in the result, only headers are returned.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiGet = new hison.link.ApiGet(\"/users\");\r\n     * \r\n     * // Sending a HEAD request\r\n     * apiGet.head().then(headers => {\r\n     *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\r\n     * });\r\n     *\r\n     * // Sending a HEAD request with additional headers\r\n     * apiGet.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\r\n     *     console.log(headers);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(options)`** - Sends a GET request to retrieve full response data.\r\n     * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\r\n     *\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\r\n     */\r\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\r\n    /**\r\n     * **Sends an HTTP OPTIONS request to the specified resource path.**\r\n     *\r\n     * This method retrieves the list of allowed HTTP methods for the specified resource \r\n     * without performing an actual data operation.\r\n     *\r\n     * ### **Parameters**\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\r\n     *\r\n     * ### **Behavior**\r\n     * - The method delegates the request execution to `ApiLink.options()`.\r\n     * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiGet = new hison.link.ApiGet(\"/users\");\r\n     * \r\n     * // Sending an OPTIONS request\r\n     * apiGet.options().then(allowedMethods => {\r\n     *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\r\n     * });\r\n     *\r\n     * // Sending an OPTIONS request with additional headers\r\n     * apiGet.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\r\n     *     console.log(allowedMethods);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(options)`** - Sends a GET request to retrieve full response data.\r\n     * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\r\n     *\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\r\n     */\r\n    options(options?: Record<string, any>): Promise<string[]>;\r\n    /**\r\n     * **Registers an event listener for API request lifecycle events.**\r\n     *\r\n     * This method allows attaching a callback function to be executed when a specified event \r\n     * occurs during the execution of a GET request.\r\n     *\r\n     * ### **Parameters**\r\n     * - `eventName` *(string)* - The name of the event to listen for.\r\n     * - `eventFunc` *(function)* - The callback function to be executed when the event occurs.\r\n     *\r\n     * ### **Supported Events**\r\n     * - `\"requestStarted_GET\"` - Triggered when a GET request begins.\r\n     * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\r\n     * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\r\n     * - `\"requestError\"` - Triggered when an error occurs during the request.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiGet = new hison.link.ApiGet(\"/users\");\r\n     * \r\n     * // Register an event listener for when the request completes\r\n     * apiGet.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n     *     console.log(\"GET request completed!\", data);\r\n     * });\r\n     * \r\n     * // Register an event listener for request errors\r\n     * apiGet.onEventEmit(\"requestError\", (error) => {\r\n     *     console.error(\"GET request failed:\", error);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(options)`** - Sends a GET request, triggering events during execution.\r\n     *\r\n     * @param {string} eventName - The name of the event to listen for.\r\n     * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\r\n     */\r\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\r\n};\r\n/**\r\n * **`ApiPost<T>` - A class for handling HTTP POST requests within the `hison.link` module.**\r\n *\r\n * The `ApiPost<T>` class is responsible for sending HTTP POST requests to a specified service command.\r\n * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\r\n * The response type can be customized using the generic parameter `T`, with a default type of `InterfaceDataWrapper`.\r\n *\r\n * ### **Key Features**\r\n * - **Executes HTTP POST requests** using `ApiLink`.\r\n * - **Encapsulates request data in `DataWrapper`**, ensuring structured payloads with a `cmd` field for service routing.\r\n * - **Supports response caching** via an optional `CachingModule`.\r\n * - **Emits request lifecycle events** using `EventEmitter`.\r\n * - **Allows event listeners** to monitor request execution.\r\n * - **Flexible response typing** via **`T`**, allowing the user to define the expected response data structure.\r\n *\r\n * ### **How It Works**\r\n * - When instantiated, `ApiPost<T>` requires a `serviceCmd` that specifies the business logic endpoint.\r\n * - The `call()` method sends a POST request with the provided request data.\r\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n * - Event listeners can be attached to monitor the request lifecycle.\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Creating an instance of ApiPost (default response type: InterfaceDataWrapper)\r\n * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\r\n *\r\n * // Creating request data\r\n * const requestData = new hison.data.DataWrapper();\r\n * requestData.putString(\"username\", \"Alice\");\r\n * \r\n * // Sending a POST request\r\n * apiPost.call(requestData).then(response => {\r\n *     console.log(response.data); // Type: InterfaceDataWrapper\r\n * });\r\n *\r\n * // Creating an instance with caching\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * const cachedApiPost = new hison.link.ApiPost(\"UserService.createUser\", cachingModule);\r\n *\r\n * // Specifying a custom response type\r\n * interface CreateUserResponse {\r\n *     userId: number;\r\n *     username: string;\r\n * }\r\n * const apiPostTyped = new hison.link.ApiPost<CreateUserResponse>(\"UserService.createUser\");\r\n *\r\n * apiPostTyped.call(requestData).then(response => {\r\n *     console.log(response.data.userId); // Type: number\r\n *     console.log(response.data.username); // Type: string\r\n * });\r\n *\r\n * // Handling request events\r\n * cachedApiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n *     console.log(\"POST request completed!\", data);\r\n * });\r\n * ```\r\n *\r\n * ### **Internal Components**\r\n * - **`ApiLink`**: Handles request execution and response processing.\r\n * - **`EventEmitter`**: Manages event-driven request handling.\r\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n *\r\n * ### **Return Value**\r\n * - This class returns an instance of `ApiPost<T>`, which provides methods for executing POST requests and managing request events.\r\n * - The response type **defaults to `InterfaceDataWrapper`** but can be customized by specifying a different type `T`.\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Sending data to a REST API** with structured payloads.\r\n * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\r\n * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n *\r\n * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\r\n */\r\nexport interface InterfaceApiPost<T = InterfaceDataWrapper> {\r\n    /**\r\n     * **Executes an HTTP POST request to the specified service command.**\r\n     *\r\n     * This method sends a POST request using `ApiLink`, encapsulating request data in a `DataWrapper`\r\n     * and invoking necessary pre-request hooks and event emissions.\r\n     *\r\n     * ### **Parameters**\r\n     * - `requestData` *(T | InterfaceDataWrapper, required)* - The data to be sent in the request.\r\n     *   - If it is a `DataWrapper`, it is sent as-is.\r\n     *   - If it is a standard object matching `T`, it is automatically processed as JSON.\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Pre-Request Handling**\r\n     * - **`hison.setBeforePostRequst((requestData, options) => {})`**\r\n     *   - A customizable hook executed **before sending the POST request**.\r\n     *   - If it returns `false`, the request is **prevented from execution**.\r\n     *   - **Use Case:** Validating request parameters, modifying request data dynamically.\r\n     *\r\n     * ### **Event Emission**\r\n     * - **`\"requestStarted_POST\"` Event**\r\n     *   - This event is emitted **before the POST request is executed**.\r\n     *   - Can be used for logging, request tracking, or debugging.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing:\r\n     *   - `data` *(T)* - The API response data.\r\n     *   - `response` *(Response)* - The original HTTP response object.\r\n     *\r\n     * ### **Behavior**\r\n     * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\r\n     * - If the data is not cached, it makes an HTTP POST request to `_serviceCmd`.\r\n     * - Before executing the request:\r\n     *   - The **before-request hook (`beforePostRequst`)** is checked.\r\n     *   - The **event `\"requestStarted_POST\"`** is emitted.\r\n     * - Once the request is completed, the response is returned and optionally stored in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * // Defining a custom response type\r\n     * interface CreateUserResponse {\r\n     *     userId: number;\r\n     *     username: string;\r\n     * }\r\n     * \r\n     * // Creating an instance of ApiPost with a custom response type\r\n     * const apiPost = new hison.link.ApiPost<CreateUserResponse>(\"UserService.createUser\");\r\n     * \r\n     * // Creating request data\r\n     * const requestData = new hison.data.DataWrapper();\r\n     * requestData.putString(\"username\", \"Alice\");\r\n     * \r\n     * // Customizing the before-request hook to modify data before sending\r\n     * customOption.link.beforePostRequst = (requestData, options) => {\r\n     *     requestData.putString(\"timestamp\", Date.now().toString());\r\n     *     return true;\r\n     * };\r\n     * \r\n     * // Listening to the \"requestStarted_POST\" event\r\n     * apiPost.onEventEmit(\"requestStarted_POST\", (requestData, options) => {\r\n     *     console.log(\"POST request started with data:\", requestData);\r\n     * });\r\n     * \r\n     * // Sending a POST request\r\n     * apiPost.call(requestData).then(response => {\r\n     *     console.log(response.data.userId); // Type: number\r\n     *     console.log(response.data.username); // Type: string\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\r\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\r\n     *\r\n     * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\r\n     * @param {T | InterfaceDataWrapper} requestData - The data to be sent in the request.\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<{ data: T; response: Response }>} A promise resolving to the API response.\r\n     */\r\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: T; response: Response; } | null>;\r\n    /**\r\n     * **Sends an HTTP HEAD request to the API controller path.**\r\n     *\r\n     * This method retrieves only the headers from the API without downloading the response body.\r\n     * It is useful for checking metadata such as content type, content length, and caching information.\r\n     *\r\n     * ### **Parameters**\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\r\n     *\r\n     * ### **Behavior**\r\n     * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\r\n     * - The response body is **not** included in the result; only headers are returned.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\r\n     * \r\n     * // Sending a HEAD request\r\n     * apiPost.head().then(headers => {\r\n     *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\r\n     * });\r\n     *\r\n     * // Sending a HEAD request with additional headers\r\n     * apiPost.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\r\n     *     console.log(headers);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\r\n     * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\r\n     *\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\r\n     */\r\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\r\n    /**\r\n     * **Sends an HTTP OPTIONS request to the API controller path.**\r\n     *\r\n     * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\r\n     * It is useful for checking which HTTP methods are permitted for a specific endpoint.\r\n     *\r\n     * ### **Parameters**\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\r\n     *\r\n     * ### **Behavior**\r\n     * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\r\n     * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\r\n     * \r\n     * // Sending an OPTIONS request\r\n     * apiPost.options().then(allowedMethods => {\r\n     *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\r\n     * });\r\n     *\r\n     * // Sending an OPTIONS request with additional headers\r\n     * apiPost.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\r\n     *     console.log(allowedMethods);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\r\n     * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\r\n     *\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\r\n     */\r\n    options(options?: Record<string, any>): Promise<string[]>;\r\n    /**\r\n     * **Registers an event listener for API request lifecycle events.**\r\n     *\r\n     * This method allows attaching a callback function to be executed when a specified event \r\n     * occurs during the execution of a POST request.\r\n     *\r\n     * ### **Parameters**\r\n     * - `eventName` *(string, required)* - The name of the event to listen for.\r\n     * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\r\n     *\r\n     * ### **Supported Events**\r\n     * - `\"requestStarted_POST\"` - Triggered when a POST request begins.\r\n     * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\r\n     * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\r\n     * - `\"requestError\"` - Triggered when an error occurs during the request.\r\n     *\r\n     * ### **Behavior**\r\n     * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"POST\"` as the method type.\r\n     * - The provided `eventFunc` is executed whenever the specified event is emitted.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\r\n     * \r\n     * // Register an event listener for when the request completes\r\n     * apiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n     *     console.log(\"POST request completed!\", data);\r\n     * });\r\n     * \r\n     * // Register an event listener for request errors\r\n     * apiPost.onEventEmit(\"requestError\", (error) => {\r\n     *     console.error(\"POST request failed:\", error);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(requestData, options)`** - Sends a POST request, triggering events during execution.\r\n     *\r\n     * @param {string} eventName - The name of the event to listen for.\r\n     * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\r\n     */\r\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\r\n};\r\n/**\r\n * **`ApiPut<T>` - A class for handling HTTP PUT requests within the `hison.link` module.**\r\n *\r\n * The `ApiPut` class is responsible for sending HTTP PUT requests to a specified service command.\r\n * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\r\n *\r\n * ### **Key Features**\r\n * - **Executes HTTP PUT requests** using `ApiLink`.\r\n * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\r\n * - **Supports response caching** via an optional `CachingModule`.\r\n * - **Emits request lifecycle events** using `EventEmitter`.\r\n * - **Allows event listeners** for monitoring request execution.\r\n * - **Supports generic response types (`T`)** to enable type-safe API responses.\r\n *\r\n * ### **How It Works**\r\n * - When instantiated, `ApiPut<T>` requires a `serviceCmd` that specifies the business logic endpoint.\r\n * - The `call()` method sends a PUT request with the provided request data.\r\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n * - Event listeners can be attached to monitor the request lifecycle.\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Defining a custom response type\r\n * interface UpdateUserResponse {\r\n *     success: boolean;\r\n *     updatedUserId: number;\r\n * }\r\n *\r\n * // Creating an instance of ApiPut with a custom response type\r\n * const apiPut = new hison.link.ApiPut<UpdateUserResponse>(\"UserService.updateUser\");\r\n *\r\n * // Creating request data\r\n * const requestData = new hison.data.DataWrapper();\r\n * requestData.putString(\"username\", \"Alice\");\r\n * \r\n * // Sending a PUT request\r\n * apiPut.call(requestData).then(response => {\r\n *     console.log(response.data.success); // Type: boolean\r\n *     console.log(response.data.updatedUserId); // Type: number\r\n * });\r\n *\r\n * // Creating an instance with caching\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * const cachedApiPut = new hison.link.ApiPut<UpdateUserResponse>(\"UserService.updateUser\", cachingModule);\r\n *\r\n * // Handling request events\r\n * cachedApiPut.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n *     console.log(\"PUT request completed!\", data);\r\n * });\r\n * ```\r\n *\r\n * ### **Internal Components**\r\n * - **`ApiLink`**: Handles request execution and response processing.\r\n * - **`EventEmitter`**: Manages event-driven request handling.\r\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n *\r\n * ### **Return Value**\r\n * - This class returns an instance of `ApiPut<T>`, providing methods for executing PUT requests and managing request events.\r\n * - The `T` type parameter allows users to define the expected response structure.\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Sending data to a REST API** with structured payloads.\r\n * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\r\n * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n *\r\n * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\r\n */\r\nexport interface InterfaceApiPut<T = InterfaceDataWrapper> {\r\n    /**\r\n     * **Executes an HTTP PUT request to the specified service command with a generic response type.**\r\n     *\r\n     * This method sends a PUT request using `ApiLink`, encapsulating request data in a `DataWrapper`\r\n     * and invoking necessary pre-request hooks and event emissions.\r\n     *\r\n     * ### **Parameters**\r\n     * - `requestData` *(any, required)* - The data to be sent in the request.\r\n     *   - If it is a `DataWrapper`, it is sent as-is.\r\n     *   - If it is a standard object, it is converted to a JSON payload.\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Pre-Request Handling**\r\n     * - **`hison.setBeforePutRequest((requestData, options) => {})`**\r\n     *   - A customizable hook executed **before sending the PUT request**.\r\n     *   - If it returns `false`, the request is **prevented from execution**.\r\n     *   - **Use Case:** Validating request parameters, modifying request data dynamically.\r\n     *\r\n     * ### **Event Emission**\r\n     * - **`\"requestStarted_PUT\"` Event**\r\n     *   - This event is emitted **before the PUT request is executed**.\r\n     *   - Can be used for logging, request tracking, or debugging.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing:\r\n     *   - `data` *(T)* - The API response data, strongly typed based on the generic `T`.\r\n     *   - `response` *(Response)* - The original HTTP response object.\r\n     *\r\n     * ### **Behavior**\r\n     * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\r\n     * - If the data is not cached, it makes an HTTP PUT request to `_serviceCmd`.\r\n     * - Before executing the request:\r\n     *   - The **before-request hook (`beforePutRequest`)** is checked.\r\n     *   - The **event `\"requestStarted_PUT\"`** is emitted.\r\n     * - Once the request is completed, the response is returned and optionally stored in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * // Defining a custom response type\r\n     * interface UpdateUserResponse {\r\n     *     success: boolean;\r\n     *     updatedUserId: number;\r\n     * }\r\n     *\r\n     * // Creating an instance of ApiPut with a custom response type\r\n     * const apiPut = new hison.link.ApiPut<UpdateUserResponse>(\"UserService.updateUser\");\r\n     * \r\n     * // Creating request data\r\n     * const requestData = new hison.data.DataWrapper();\r\n     * requestData.putString(\"username\", \"Alice\");\r\n     * \r\n     * // Customizing the before-request hook to modify data before sending\r\n     * customOption.link.beforePutRequest = (requestData, options) => {\r\n     *     requestData.putString(\"timestamp\", Date.now().toString());\r\n     *     return true;\r\n     * };\r\n     * \r\n     * // Listening to the \"requestStarted_PUT\" event\r\n     * apiPut.onEventEmit(\"requestStarted_PUT\", (requestData, options) => {\r\n     *     console.log(\"PUT request started with data:\", requestData);\r\n     * });\r\n     * \r\n     * // Sending a PUT request with a typed response\r\n     * apiPut.call(requestData).then(response => {\r\n     *     console.log(response.data.success); // Type: boolean\r\n     *     console.log(response.data.updatedUserId); // Type: number\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\r\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\r\n     *\r\n     * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\r\n     * @param {any} requestData - The data to be sent in the request.\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<{ data: T; response: Response }>} A promise resolving to the API response.\r\n     */\r\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: T; response: Response; } | null>;\r\n    /**\r\n     * **Sends an HTTP HEAD request to the API controller path.**\r\n     *\r\n     * This method retrieves only the headers from the API without downloading the response body.\r\n     * It is useful for checking metadata such as content type, content length, and caching information.\r\n     *\r\n     * ### **Parameters**\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\r\n     *\r\n     * ### **Behavior**\r\n     * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\r\n     * - The response body is **not** included in the result; only headers are returned.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\r\n     * \r\n     * // Sending a HEAD request\r\n     * apiPut.head().then(headers => {\r\n     *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\r\n     * });\r\n     *\r\n     * // Sending a HEAD request with additional headers\r\n     * apiPut.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\r\n     *     console.log(headers);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\r\n     * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\r\n     *\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\r\n     */\r\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\r\n    /**\r\n     * **Sends an HTTP OPTIONS request to the API controller path.**\r\n     *\r\n     * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\r\n     * It is useful for checking which HTTP methods are permitted for a specific endpoint.\r\n     *\r\n     * ### **Parameters**\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PUT\", \"OPTIONS\"]`).\r\n     *\r\n     * ### **Behavior**\r\n     * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\r\n     * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\r\n     * \r\n     * // Sending an OPTIONS request\r\n     * apiPut.options().then(allowedMethods => {\r\n     *     console.log(allowedMethods); // e.g., [\"GET\", \"PUT\", \"OPTIONS\"]\r\n     * });\r\n     *\r\n     * // Sending an OPTIONS request with additional headers\r\n     * apiPut.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\r\n     *     console.log(allowedMethods);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\r\n     * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\r\n     *\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\r\n     */\r\n    options(options?: Record<string, any>): Promise<string[]>;\r\n    /**\r\n     * **Registers an event listener for API request lifecycle events.**\r\n     *\r\n     * This method allows attaching a callback function to be executed when a specified event \r\n     * occurs during the execution of a PUT request.\r\n     *\r\n     * ### **Parameters**\r\n     * - `eventName` *(string, required)* - The name of the event to listen for.\r\n     * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\r\n     *\r\n     * ### **Supported Events**\r\n     * - `\"requestStarted_PUT\"` - Triggered when a PUT request begins.\r\n     * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\r\n     * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\r\n     * - `\"requestError\"` - Triggered when an error occurs during the request.\r\n     *\r\n     * ### **Behavior**\r\n     * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PUT\"` as the method type.\r\n     * - The provided `eventFunc` is executed whenever the specified event is emitted.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\r\n     * \r\n     * // Register an event listener for when the request completes\r\n     * apiPut.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n     *     console.log(\"PUT request completed!\", data);\r\n     * });\r\n     * \r\n     * // Register an event listener for request errors\r\n     * apiPut.onEventEmit(\"requestError\", (error) => {\r\n     *     console.error(\"PUT request failed:\", error);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(requestData, options)`** - Sends a PUT request, triggering events during execution.\r\n     *\r\n     * @param {string} eventName - The name of the event to listen for.\r\n     * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\r\n     */\r\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\r\n};\r\n/**\r\n * **`ApiPatch` - A class for handling HTTP PATCH requests within the `hison.link` module.**\r\n *\r\n * The `ApiPatch` class is responsible for sending HTTP PATCH requests to a specified service command.\r\n * It supports **strongly typed responses** using generics (`T`), allowing precise response data handling.\r\n *\r\n * ### **Key Features**\r\n * - **Executes HTTP PATCH requests** using `ApiLink`.\r\n * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\r\n * - **Supports response caching** via an optional `CachingModule`.\r\n * - **Emits request lifecycle events** using `EventEmitter`.\r\n * - **Allows event listeners** for monitoring request execution.\r\n * - **Utilizes generics (`T`)** to enable type-safe response handling.\r\n *\r\n * ### **How It Works**\r\n * - When instantiated, `ApiPatch` requires a `serviceCmd` that specifies the business logic endpoint.\r\n * - The `call<T>()` method sends a PATCH request and expects a response of type `T`.\r\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n * - Event listeners can be attached to monitor the request lifecycle.\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Defining a custom response type\r\n * interface UpdateUserResponse {\r\n *     success: boolean;\r\n *     updatedFields: string[];\r\n * }\r\n *\r\n * // Creating an instance of ApiPatch with a custom response type\r\n * const apiPatch = new hison.link.ApiPatch<UpdateUserResponse>(\"UserService.updateUser\");\r\n *\r\n * // Creating request data\r\n * const requestData = new hison.data.DataWrapper();\r\n * requestData.putString(\"username\", \"Alice\");\r\n * \r\n * // Sending a PATCH request with a typed response\r\n * apiPatch.call(requestData).then(response => {\r\n *     console.log(response.data.success); // Type: boolean\r\n *     console.log(response.data.updatedFields); // Type: string[]\r\n * });\r\n *\r\n * // Creating an instance with caching\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * const cachedApiPatch = new hison.link.ApiPatch(\"UserService.updateUser\", cachingModule);\r\n *\r\n * // Handling request events\r\n * cachedApiPatch.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n *     console.log(\"PATCH request completed!\", data);\r\n * });\r\n * ```\r\n *\r\n * ### **Internal Components**\r\n * - **`ApiLink`**: Handles request execution and response processing.\r\n * - **`EventEmitter`**: Manages event-driven request handling.\r\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n *\r\n * ### **Return Value**\r\n * - This class returns an instance of `ApiPatch<T>`, providing methods for executing PATCH requests and managing request events.\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Applying partial updates** to a REST API.\r\n * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\r\n * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n *\r\n * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\r\n */\r\nexport interface InterfaceApiPatch<T = InterfaceDataWrapper> {\r\n    /**\r\n     * **Executes an HTTP PATCH request to the specified service command.**\r\n     *\r\n     * This method sends a PATCH request using `ApiLink`, encapsulating request data in a `DataWrapper`\r\n     * and invoking necessary pre-request hooks and event emissions. The response type is determined by\r\n     * the **generic type `T`**, allowing for precise response handling.\r\n     *\r\n     * ### **Parameters**\r\n     * - `requestData` *(T, required)* - The data to be sent in the request.\r\n     *   - If it is a `DataWrapper`, it is sent as-is.\r\n     *   - If it is a standard object, it is converted to a JSON payload.\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Pre-Request Handling**\r\n     * - **`hison.setBeforePatchRequest((requestData, options) => {})`**\r\n     *   - A customizable hook executed **before sending the PATCH request**.\r\n     *   - If it returns `false`, the request is **prevented from execution**.\r\n     *   - **Use Case:** Validating request parameters, modifying request data dynamically.\r\n     *\r\n     * ### **Event Emission**\r\n     * - **`\"requestStarted_PATCH\"` Event**\r\n     *   - This event is emitted **before the PATCH request is executed**.\r\n     *   - Can be used for logging, request tracking, or debugging.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing:\r\n     *   - `data` *(T)* - The API response data, strongly typed based on the generic type.\r\n     *   - `response` *(Response)* - The original HTTP response object.\r\n     *\r\n     * ### **Behavior**\r\n     * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\r\n     * - If the data is not cached, it makes an HTTP PATCH request to `_serviceCmd`.\r\n     * - Before executing the request:\r\n     *   - The **before-request hook (`beforePatchRequest`)** is checked.\r\n     *   - The **event `\"requestStarted_PATCH\"`** is emitted.\r\n     * - Once the request is completed, the response is returned and optionally stored in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * // Define a response type\r\n     * interface UpdateUserResponse {\r\n     *     success: boolean;\r\n     *     updatedFields: string[];\r\n     * }\r\n     *\r\n     * // Creating an ApiPatch instance with a typed response\r\n     * const apiPatch = new hison.link.ApiPatch<UpdateUserResponse>(\"UserService.updateUser\");\r\n     * \r\n     * // Creating request data\r\n     * const requestData = new hison.data.DataWrapper();\r\n     * requestData.putString(\"username\", \"Alice\");\r\n     * \r\n     * // Customizing the before-request hook to modify data before sending\r\n     * customOption.link.beforePatchRequest = (requestData, options) => {\r\n     *     requestData.putString(\"timestamp\", Date.now().toString());\r\n     *     return true;\r\n     * };\r\n     * \r\n     * // Listening to the \"requestStarted_PATCH\" event\r\n     * apiPatch.onEventEmit(\"requestStarted_PATCH\", (requestData, options) => {\r\n     *     console.log(\"PATCH request started with data:\", requestData);\r\n     * });\r\n     * \r\n     * // Sending a PATCH request with a typed response\r\n     * apiPatch.call(requestData).then(response => {\r\n     *     console.log(response.data.success); // Type: boolean\r\n     *     console.log(response.data.updatedFields); // Type: string[]\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\r\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\r\n     *\r\n     * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\r\n     * @param {T} requestData - The data to be sent in the request.\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<{ data: T; response: Response }>} A promise resolving to the API response.\r\n     */\r\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: T; response: Response; } | null>;\r\n    /**\r\n     * **Sends an HTTP HEAD request to the API controller path.**\r\n     *\r\n     * This method retrieves only the headers from the API without downloading the response body.\r\n     * It is useful for checking metadata such as content type, content length, and caching information.\r\n     *\r\n     * ### **Parameters**\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\r\n     *\r\n     * ### **Behavior**\r\n     * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\r\n     * - The response body is **not** included in the result; only headers are returned.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\r\n     * \r\n     * // Sending a HEAD request\r\n     * apiPatch.head().then(headers => {\r\n     *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\r\n     * });\r\n     *\r\n     * // Sending a HEAD request with additional headers\r\n     * apiPatch.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\r\n     *     console.log(headers);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\r\n     * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\r\n     *\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\r\n     */\r\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\r\n    /**\r\n     * **Sends an HTTP OPTIONS request to the API controller path.**\r\n     *\r\n     * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\r\n     * It is useful for checking which HTTP methods are permitted for a specific endpoint.\r\n     *\r\n     * ### **Parameters**\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PATCH\", \"OPTIONS\"]`).\r\n     *\r\n     * ### **Behavior**\r\n     * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\r\n     * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\r\n     * \r\n     * // Sending an OPTIONS request\r\n     * apiPatch.options().then(allowedMethods => {\r\n     *     console.log(allowedMethods); // e.g., [\"GET\", \"PATCH\", \"OPTIONS\"]\r\n     * });\r\n     *\r\n     * // Sending an OPTIONS request with additional headers\r\n     * apiPatch.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\r\n     *     console.log(allowedMethods);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\r\n     * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\r\n     *\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\r\n     */\r\n    options(options?: Record<string, any>): Promise<string[]>;\r\n    /**\r\n     * **Registers an event listener for API request lifecycle events.**\r\n     *\r\n     * This method allows attaching a callback function to be executed when a specified event \r\n     * occurs during the execution of a PATCH request.\r\n     *\r\n     * ### **Parameters**\r\n     * - `eventName` *(string, required)* - The name of the event to listen for.\r\n     * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\r\n     *\r\n     * ### **Supported Events**\r\n     * - `\"requestStarted_PATCH\"` - Triggered when a PATCH request begins.\r\n     * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\r\n     * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\r\n     * - `\"requestError\"` - Triggered when an error occurs during the request.\r\n     *\r\n     * ### **Behavior**\r\n     * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PATCH\"` as the method type.\r\n     * - The provided `eventFunc` is executed whenever the specified event is emitted.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\r\n     * \r\n     * // Register an event listener for when the request completes\r\n     * apiPatch.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n     *     console.log(\"PATCH request completed!\", data);\r\n     * });\r\n     * \r\n     * // Register an event listener for request errors\r\n     * apiPatch.onEventEmit(\"requestError\", (error) => {\r\n     *     console.error(\"PATCH request failed:\", error);\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`call(requestData, options)`** - Sends a PATCH request, triggering events during execution.\r\n     *\r\n     * @param {string} eventName - The name of the event to listen for.\r\n     * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\r\n     */\r\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\r\n};\r\n/**\r\n * **`ApiDelete<T>` - A class for handling HTTP DELETE requests within the `hison.link` module.**\r\n *\r\n * The `ApiDelete` class is responsible for sending HTTP DELETE requests to a specified service command.\r\n * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\r\n *\r\n * ### **Key Features**\r\n * - **Executes HTTP DELETE requests** using `ApiLink`.\r\n * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\r\n * - **Supports response caching** via an optional `CachingModule`.\r\n * - **Emits request lifecycle events** using `EventEmitter`.\r\n * - **Allows event listeners** for monitoring request execution.\r\n * - **Supports generic response types (`T`)**, allowing for **strongly typed responses**.\r\n *\r\n * ### **How It Works**\r\n * - When instantiated, `ApiDelete<T>` requires a `serviceCmd` that specifies the business logic endpoint.\r\n * - The `call()` method sends a DELETE request with the provided request data.\r\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n * - Event listeners can be attached to monitor the request lifecycle.\r\n * - The **generic type `T` defines the response data structure**, ensuring **type safety**.\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Define a response type\r\n * interface DeleteUserResponse {\r\n *     success: boolean;\r\n *     deletedId: string;\r\n * }\r\n *\r\n * // Creating an instance of ApiDelete with a typed response\r\n * const apiDelete = new hison.link.ApiDelete<DeleteUserResponse>(\"UserService.deleteUser\");\r\n *\r\n * // Creating request data\r\n * const requestData = new hison.data.DataWrapper();\r\n * requestData.putString(\"userId\", \"12345\");\r\n * \r\n * // Sending a DELETE request\r\n * apiDelete.call(requestData).then(response => {\r\n *     console.log(response.data.success); // Type: boolean\r\n *     console.log(response.data.deletedId); // Type: string\r\n * });\r\n *\r\n * // Creating an instance with caching\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * const cachedApiDelete = new hison.link.ApiDelete(\"UserService.deleteUser\", cachingModule);\r\n *\r\n * // Handling request events\r\n * cachedApiDelete.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n *     console.log(\"DELETE request completed!\", data);\r\n * });\r\n * ```\r\n *\r\n * ### **Internal Components**\r\n * - **`ApiLink`**: Handles request execution and response processing.\r\n * - **`EventEmitter`**: Manages event-driven request handling.\r\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n *\r\n * ### **Return Value**\r\n * - This class returns an instance of `ApiDelete<T>`, providing methods for executing DELETE requests and managing request events.\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Deleting data from a REST API** in a structured and type-safe way.\r\n * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\r\n * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n *\r\n * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\r\n */\r\nexport interface InterfaceApiDelete<T = InterfaceDataWrapper> {\r\n    /**\r\n     * **Executes an HTTP DELETE request to the specified service command.**\r\n     *\r\n     * This method sends a DELETE request using `ApiLink`, encapsulating request data in a `DataWrapper`\r\n     * and invoking necessary pre-request hooks and event emissions.\r\n     *\r\n     * ### **Parameters**\r\n     * - `requestData` *(any, required)* - The data to be sent in the request.\r\n     *   - If it is a `DataWrapper`, it is sent as-is.\r\n     *   - If it is a standard object, it is converted to a JSON payload.\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Pre-Request Handling**\r\n     * - **`hison.setBeforeDeleteRequest((requestData, options) => {})`**\r\n     *   - A customizable hook executed **before sending the DELETE request**.\r\n     *   - If it returns `false`, the request is **prevented from execution**.\r\n     *   - **Use Case:** Validating request parameters, modifying request data dynamically.\r\n     *\r\n     * ### **Event Emission**\r\n     * - **`\"requestStarted_DELETE\"` Event**\r\n     *   - This event is emitted **before the DELETE request is executed**.\r\n     *   - Can be used for logging, request tracking, or debugging.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing:\r\n     *   - `data` *(`T`)* - The API response data, **strongly typed based on `T`**.\r\n     *   - `response` *(Response)* - The original HTTP response object.\r\n     *\r\n     * ### **Behavior**\r\n     * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\r\n     * - If the data is not cached, it makes an HTTP DELETE request to `_serviceCmd`.\r\n     * - Before executing the request:\r\n     *   - The **before-request hook (`beforeDeleteRequest`)** is checked.\r\n     *   - The **event `\"requestStarted_DELETE\"`** is emitted.\r\n     * - Once the request is completed, the response is returned and optionally stored in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * interface DeleteUserResponse {\r\n     *     success: boolean;\r\n     *     deletedId: string;\r\n     * }\r\n     *\r\n     * const apiDelete = new hison.link.ApiDelete<DeleteUserResponse>(\"UserService.deleteUser\");\r\n     * \r\n     * // Creating request data\r\n     * const requestData = new hison.data.DataWrapper();\r\n     * requestData.putString(\"userId\", \"12345\");\r\n     * \r\n     * // Customizing the before-request hook to modify data before sending\r\n     * customOption.link.beforeDeleteRequest = (requestData, options) => {\r\n     *     requestData.putString(\"timestamp\", Date.now().toString());\r\n     *     return true;\r\n     * };\r\n     * \r\n     * // Listening to the \"requestStarted_DELETE\" event\r\n     * apiDelete.onEventEmit(\"requestStarted_DELETE\", (requestData, options) => {\r\n     *     console.log(\"DELETE request started with data:\", requestData);\r\n     * });\r\n     * \r\n     * // Sending a DELETE request\r\n     * apiDelete.call(requestData).then(response => {\r\n     *     console.log(response.data.success); // Type: boolean\r\n     *     console.log(response.data.deletedId); // Type: string\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\r\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\r\n     *\r\n     * @param {any} requestData - The data to be sent in the request.\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<{ data: T; response: Response } | null>} A promise resolving to the API response.\r\n     */\r\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: T; response: Response; } | null>;\r\n    /**\r\n    * **Sends an HTTP HEAD request to the API controller path.**\r\n    *\r\n    * This method retrieves only the headers from the API without downloading the response body.\r\n    * It is useful for checking metadata such as content type, content length, and caching information.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\r\n    *\r\n    * ### **Behavior**\r\n    * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\r\n    * - The response body is **not** included in the result; only headers are returned.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\r\n    * \r\n    * // Sending a HEAD request\r\n    * apiDelete.head().then(headers => {\r\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\r\n    * });\r\n    *\r\n    * // Sending a HEAD request with additional headers\r\n    * apiDelete.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\r\n    *     console.log(headers);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\r\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\r\n    */\r\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\r\n    /**\r\n    * **Sends an HTTP OPTIONS request to the API controller path.**\r\n    *\r\n    * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\r\n    * It is useful for checking which HTTP methods are permitted for a specific endpoint.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"DELETE\", \"OPTIONS\"]`).\r\n    *\r\n    * ### **Behavior**\r\n    * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\r\n    * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\r\n    * \r\n    * // Sending an OPTIONS request\r\n    * apiDelete.options().then(allowedMethods => {\r\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"DELETE\", \"OPTIONS\"]\r\n    * });\r\n    *\r\n    * // Sending an OPTIONS request with additional headers\r\n    * apiDelete.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\r\n    *     console.log(allowedMethods);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\r\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\r\n    */\r\n    options(options?: Record<string, any>): Promise<string[]>;\r\n    /**\r\n    * **Registers an event listener for API request lifecycle events.**\r\n    *\r\n    * This method allows attaching a callback function to be executed when a specified event \r\n    * occurs during the execution of a DELETE request.\r\n    *\r\n    * ### **Parameters**\r\n    * - `eventName` *(string, required)* - The name of the event to listen for.\r\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\r\n    *\r\n    * ### **Supported Events**\r\n    * - `\"requestStarted_DELETE\"` - Triggered when a DELETE request begins.\r\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\r\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\r\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\r\n    *\r\n    * ### **Behavior**\r\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"DELETE\"` as the method type.\r\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\r\n    * \r\n    * // Register an event listener for when the request completes\r\n    * apiDelete.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n    *     console.log(\"DELETE request completed!\", data);\r\n    * });\r\n    * \r\n    * // Register an event listener for request errors\r\n    * apiDelete.onEventEmit(\"requestError\", (error) => {\r\n    *     console.error(\"DELETE request failed:\", error);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a DELETE request, triggering events during execution.\r\n    *\r\n    * @param {string} eventName - The name of the event to listen for.\r\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\r\n    */\r\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\r\n};\r\n/**\r\n * **`ApiGetUrl` - A class for handling HTTP GET requests to a specified URL.**\r\n *\r\n * The `ApiGetUrl` class is responsible for sending HTTP GET requests to a provided URL.\r\n * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\r\n *\r\n * ### **Key Features**\r\n * - **Executes HTTP GET requests** using `ApiLink`.\r\n * - **Accepts a direct URL** instead of using a predefined API resource path.\r\n * - **Supports response caching** via an optional `CachingModule`.\r\n * - **Emits request lifecycle events** using `EventEmitter`.\r\n * - **Allows event listeners** for monitoring request execution.\r\n * - **Supports generic response types (`T`)** with a default value of `any` to accommodate diverse API responses.\r\n *\r\n * ### **How It Works**\r\n * - When instantiated, `ApiGetUrl` requires a valid URL.\r\n * - The `call()` method triggers a GET request to the specified URL.\r\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n * - Event listeners can be attached to monitor the request lifecycle.\r\n * - The response data type can be explicitly defined using `T` (default: `any`).\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Creating an instance of ApiGetUrl without caching\r\n * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\r\n * \r\n * // Sending a GET request\r\n * apiGetUrl.call().then(response => {\r\n *     console.log(response.data); // Response data (any type by default)\r\n * });\r\n *\r\n * // Creating an instance with caching\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * const cachedApiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\", cachingModule);\r\n * \r\n * // Handling request events\r\n * cachedApiGetUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n *     console.log(\"GET request completed!\", data);\r\n * });\r\n * \r\n * // Defining a specific response type using generics\r\n * interface UserResponse {\r\n *     id: number;\r\n *     name: string;\r\n *     email: string;\r\n * }\r\n * const typedApiGetUrl = new hison.link.ApiGetUrl<UserResponse>(\"https://api.example.com/user/1\");\r\n * \r\n * typedApiGetUrl.call().then(response => {\r\n *     console.log(response.data.name); // `name` is inferred as a string\r\n * });\r\n * ```\r\n *\r\n * ### **Internal Components**\r\n * - **`ApiLink`**: Handles request execution and response processing.\r\n * - **`EventEmitter`**: Manages event-driven request handling.\r\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n *\r\n * ### **Return Value**\r\n * - This class returns an instance of `ApiGetUrl`, which provides methods for executing GET requests to a specific URL.\r\n * - The response type is determined by the generic parameter `T` (default: `any`).\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Fetching data from an external API** by specifying a full URL.\r\n * - **Using cached responses** to reduce redundant API calls.\r\n * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n * - **Explicitly defining the response structure** using TypeScript generics.\r\n */\r\nexport interface InterfaceApiGetUrl<T = any> {\r\n    /**\r\n     * **Executes an HTTP GET request to the specified URL.**\r\n     *\r\n     * This method sends a GET request using `ApiLink.getURL()`, optionally applying caching if a `CachingModule` is provided.\r\n     * It also **emits a request-start event** (`\"requestStarted_GET\"`) before execution.\r\n     *\r\n     * ### **Parameters**\r\n     * - `options` *(optional, `Record<string, any>`)* - Additional request options such as headers or query parameters.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Pre-Request Handling**\r\n     * - **Event Emission: `\"requestStarted_GET\"`**\r\n     *   - This event is emitted **before the GET request is executed**.\r\n     *   - Can be used for logging, request tracking, or debugging.\r\n     *\r\n     * ### **Caching Mechanism**\r\n     * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\r\n     * - If cached data is found, it is returned **without making a new network request**.\r\n     * - If no cached data exists, a new GET request is executed, and the response may be stored in the cache.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing:\r\n     *   - **`data: T`** - The API response data, where `T` is a generic type (default: `any`).\r\n     *   - **`response: Response`** - The original HTTP response object.\r\n     *   - Returns `null` if the request fails or is prevented by an event hook.\r\n     *\r\n     * ### **Behavior**\r\n     * - Calls `this._apiLink.getURL(this._url, options)`, which:\r\n     *   - Emits `\"requestStarted_GET\"` before making the request.\r\n     *   - Checks if the requested data is cached and returns it if available.\r\n     *   - If not cached, makes an HTTP GET request to `_url`.\r\n     *   - Returns the response and optionally stores it in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\r\n     * \r\n     * // Listening to the \"requestStarted_GET\" event\r\n     * apiGetUrl.onEventEmit(\"requestStarted_GET\", (url, options) => {\r\n     *     console.log(`GET request started for: ${url}`);\r\n     * });\r\n     * \r\n     * // Sending a GET request with inferred response type (`any` by default)\r\n     * apiGetUrl.call().then(response => {\r\n     *     console.log(response.data); // Response data\r\n     * });\r\n     * \r\n     * // Defining a specific response type\r\n     * interface User {\r\n     *     id: number;\r\n     *     name: string;\r\n     *     email: string;\r\n     * }\r\n     * const typedApiGetUrl = new hison.link.ApiGetUrl<User>(\"https://api.example.com/user/1\");\r\n     * \r\n     * typedApiGetUrl.call().then(response => {\r\n     *     console.log(response.data.name); // `name` is inferred as a string\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\r\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\r\n     *\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<{ data: T; response: Response } | null>} A promise resolving to the API response.\r\n     */\r\n    call(options?: Record<string, any>): Promise<{ data: T; response: Response; } | null>;\r\n    /**\r\n    * **Sends an HTTP HEAD request to the specified URL.**\r\n    *\r\n    * This method retrieves only the headers from the specified URL without downloading the response body.\r\n    * It is useful for checking metadata such as content type, content length, and caching information.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\r\n    *\r\n    * ### **Behavior**\r\n    * - Calls `this._apiLink.head(this._url, options)`, which:\r\n    *   - Sends an HTTP HEAD request to `_url`.\r\n    *   - Extracts and returns the response headers.\r\n    *   - Does **not** include the response body.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\r\n    * \r\n    * // Sending a HEAD request\r\n    * apiGetUrl.head().then(headers => {\r\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\r\n    * });\r\n    *\r\n    * // Sending a HEAD request with additional headers\r\n    * apiGetUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\r\n    *     console.log(headers);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(options)`** - Sends a GET request to retrieve full response data.\r\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\r\n    */\r\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\r\n    /**\r\n    * **Sends an HTTP OPTIONS request to the specified URL.**\r\n    *\r\n    * This method retrieves the list of allowed HTTP methods for the specified URL \r\n    * without performing an actual data operation. It is useful for checking which \r\n    * HTTP methods are permitted for a specific endpoint.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\r\n    *\r\n    * ### **Behavior**\r\n    * - Calls `this._apiLink.options(this._url, options)`, which:\r\n    *   - Sends an HTTP OPTIONS request to `_url`.\r\n    *   - Extracts the `Allow` header from the response.\r\n    *   - Parses and returns the list of permitted HTTP methods.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\r\n    * \r\n    * // Sending an OPTIONS request\r\n    * apiGetUrl.options().then(allowedMethods => {\r\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\r\n    * });\r\n    *\r\n    * // Sending an OPTIONS request with additional headers\r\n    * apiGetUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\r\n    *     console.log(allowedMethods);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(options)`** - Sends a GET request to retrieve full response data.\r\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\r\n    */\r\n    options(options?: Record<string, any>): Promise<string[]>;\r\n    /**\r\n    * **Registers an event listener for API request lifecycle events.**\r\n    *\r\n    * This method allows attaching a callback function to be executed when a specified event \r\n    * occurs during the execution of a GET request to a specified URL.\r\n    *\r\n    * ### **Parameters**\r\n    * - `eventName` *(string, required)* - The name of the event to listen for.\r\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\r\n    *\r\n    * ### **Supported Events**\r\n    * - `\"requestStarted_GET\"` - Triggered when a GET request begins.\r\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\r\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\r\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\r\n    *\r\n    * ### **Behavior**\r\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"GET\"` as the method type.\r\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\r\n    * \r\n    * // Register an event listener for when the request completes\r\n    * apiGetUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n    *     console.log(\"GET request completed!\", data);\r\n    * });\r\n    * \r\n    * // Register an event listener for request errors\r\n    * apiGetUrl.onEventEmit(\"requestError\", (error) => {\r\n    *     console.error(\"GET request failed:\", error);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(options)`** - Sends a GET request, triggering events during execution.\r\n    *\r\n    * @param {string} eventName - The name of the event to listen for.\r\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\r\n    */\r\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\r\n};\r\n/**\r\n * **`ApiPostUrl` - A class for handling HTTP POST requests to a specified URL.**\r\n *\r\n * The `ApiPostUrl` class is responsible for sending HTTP POST requests to a provided URL.\r\n * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\r\n *\r\n * ### **Key Features**\r\n * - **Executes HTTP POST requests** using `ApiLink`.\r\n * - **Accepts a direct URL** instead of using a predefined service command.\r\n * - **Supports an optional `serviceCmd` parameter**, allowing structured routing on the server.\r\n * - **Supports response caching** via an optional `CachingModule`.\r\n * - **Emits request lifecycle events** using `EventEmitter`.\r\n * - **Allows event listeners** for monitoring request execution.\r\n * - **Uses a generic type `T` (default: `any`)** to specify the expected response data format.\r\n *\r\n * ### **How It Works**\r\n * - When instantiated, `ApiPostUrl` requires a valid URL and an optional `serviceCmd`.\r\n * - The `call()` method sends a POST request with the provided request data.\r\n * - If caching is enabled, previously stored responses may be returned instead of making a new request.\r\n * - Event listeners can be attached to track request execution and completion.\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Creating an instance of ApiPostUrl for a direct POST request\r\n * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\");\r\n *\r\n * // Creating request data\r\n * const requestData = new hison.data.DataWrapper();\r\n * requestData.putString(\"username\", \"Alice\");\r\n * \r\n * // Sending a POST request\r\n * apiPostUrl.call(requestData).then(response => {\r\n *     console.log(response.data); // Response data\r\n * });\r\n *\r\n * // Creating an instance with a service command for structured routing\r\n * const apiPostUrlWithCmd = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n * \r\n * // Sending a POST request with service command\r\n * apiPostUrlWithCmd.call(requestData).then(response => {\r\n *     console.log(response.data);\r\n * });\r\n * \r\n * // Creating an instance with caching enabled\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * const cachedApiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\r\n *\r\n * // Handling request events\r\n * cachedApiPostUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n *     console.log(\"POST request completed!\", data);\r\n * });\r\n * ```\r\n *\r\n * ### **Internal Components**\r\n * - **`ApiLink`**: Handles request execution and response processing.\r\n * - **`EventEmitter`**: Manages event-driven request handling.\r\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n *\r\n * ### **Return Value**\r\n * - This class returns an instance of `ApiPostUrl`, providing methods for executing POST requests to a specific URL.\r\n * - The response data type is determined by `T`, with a default of `any`.\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Sending data to an external API** using a full URL.\r\n * - **Passing a `serviceCmd` for structured request routing**.\r\n * - **Using cached responses** to reduce redundant API calls.\r\n * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n *\r\n * ### **Type-Safe Example**\r\n * ```typescript\r\n * interface UserResponse {\r\n *     id: number;\r\n *     name: string;\r\n *     email: string;\r\n * }\r\n * \r\n * const typedApiPostUrl = new hison.link.ApiPostUrl<UserResponse>(\"https://api.example.com/users\");\r\n * \r\n * typedApiPostUrl.call(requestData).then(response => {\r\n *     console.log(response.data.name); // `name` is inferred as a string\r\n * });\r\n * ```\r\n */\r\nexport interface InterfaceApiPostUrl<T = any> {\r\n    /**\r\n     * **Executes an HTTP POST request to the specified URL with an optional service command.**\r\n     *\r\n     * This method sends a POST request using `ApiLink.postURL()`, encapsulating request data and invoking\r\n     * necessary pre-request hooks and event emissions. The response type is determined by the generic `T` (default: `any`).\r\n     *\r\n     * ### **Parameters**\r\n     * - `requestData` *(any, required)* - The data to be sent in the request.\r\n     *   - If it is a `DataWrapper`, it is sent as-is.\r\n     *   - If it is a standard object, it is converted to a JSON payload.\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Pre-Request Handling**\r\n     * - **`\"requestStarted_POST\"` Event**\r\n     *   - This event is emitted **before the POST request is executed**.\r\n     *   - It includes the `serviceCmd`, request options, and request data.\r\n     *   - Useful for logging, request tracking, or debugging.\r\n     *\r\n     * ### **Caching Mechanism**\r\n     * - If a `CachingModule` is provided, it checks if the requested data is available in the cache.\r\n     * - If cached data is found, it is returned **without making a new network request**.\r\n     * - If no cached data exists, a new POST request is executed, and the response may be stored in the cache.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing:\r\n     *   - `data` *(T)* - The API response data (typed based on the provided generic `T`, default: `any`).\r\n     *   - `response` *(Response)* - The original HTTP response object.\r\n     * - If an error occurs, it returns `null`.\r\n     *\r\n     * ### **Behavior**\r\n     * - Calls `this._apiLink.postURL(this._url, requestData, this._serviceCmd, options)`, which:\r\n     *   - Emits `\"requestStarted_POST\"` before making the request.\r\n     *   - Checks if the requested data is cached and returns it if available.\r\n     *   - If not cached, makes an HTTP POST request to `_url` with the provided `serviceCmd`.\r\n     *   - Returns the response and optionally stores it in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * // Creating an instance of ApiPostUrl with a service command\r\n     * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n     * \r\n     * // Creating request data\r\n     * const requestData = new hison.data.DataWrapper();\r\n     * requestData.putString(\"username\", \"Alice\");\r\n     * \r\n     * // Listening to the \"requestStarted_POST\" event\r\n     * apiPostUrl.onEventEmit(\"requestStarted_POST\", (serviceCmd, options, requestData) => {\r\n     *     console.log(`POST request started for service: ${serviceCmd}`, requestData);\r\n     * });\r\n     * \r\n     * // Sending a POST request\r\n     * apiPostUrl.call(requestData).then(response => {\r\n     *     console.log(response.data); // Response data\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Type-Safe Example**\r\n     * ```typescript\r\n     * interface UserResponse {\r\n     *     id: number;\r\n     *     name: string;\r\n     *     email: string;\r\n     * }\r\n     * \r\n     * const apiPostUrl = new hison.link.ApiPostUrl<UserResponse>(\"https://api.example.com/users\");\r\n     * \r\n     * apiPostUrl.call(requestData).then(response => {\r\n     *     if (response) {\r\n     *         console.log(response.data.name); // `name` is inferred as a string\r\n     *     }\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\r\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\r\n     *\r\n     * @param {any} requestData - The data to be sent in the request.\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<{ data: T; response: Response; } | null>} A promise resolving to the API response.\r\n     */\r\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: T; response: Response; } | null>;\r\n    /**\r\n    * **Sends an HTTP HEAD request to the specified URL.**\r\n    *\r\n    * This method retrieves only the headers from the specified URL without downloading the response body.\r\n    * It is useful for checking metadata such as content type, content length, and caching information.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\r\n    *\r\n    * ### **Behavior**\r\n    * - Calls `this._apiLink.headURL(this._url, options)`, which:\r\n    *   - Sends an HTTP HEAD request to `_url`.\r\n    *   - Extracts and returns the response headers.\r\n    *   - Does **not** include the response body.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Sending a HEAD request\r\n    * apiPostUrl.head().then(headers => {\r\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\r\n    * });\r\n    *\r\n    * // Sending a HEAD request with additional headers\r\n    * apiPostUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\r\n    *     console.log(headers);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\r\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\r\n    */\r\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\r\n    /**\r\n    * **Sends an HTTP OPTIONS request to the specified URL.**\r\n    *\r\n    * This method retrieves the list of allowed HTTP methods for the specified URL \r\n    * without performing an actual data operation. It is useful for checking which \r\n    * HTTP methods are permitted for a specific endpoint.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\r\n    *\r\n    * ### **Behavior**\r\n    * - Calls `this._apiLink.options(this._url, options)`, which:\r\n    *   - Sends an HTTP OPTIONS request to `_url`.\r\n    *   - Extracts the `Allow` header from the response.\r\n    *   - Parses and returns the list of permitted HTTP methods.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Sending an OPTIONS request\r\n    * apiPostUrl.options().then(allowedMethods => {\r\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\r\n    * });\r\n    *\r\n    * // Sending an OPTIONS request with additional headers\r\n    * apiPostUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\r\n    *     console.log(allowedMethods);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\r\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\r\n    */\r\n    options(options?: Record<string, any>): Promise<string[]>;\r\n    /**\r\n    * **Registers an event listener for API request lifecycle events.**\r\n    *\r\n    * This method allows attaching a callback function to be executed when a specified event \r\n    * occurs during the execution of a POST request to a specified URL.\r\n    *\r\n    * ### **Parameters**\r\n    * - `eventName` *(string, required)* - The name of the event to listen for.\r\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\r\n    *\r\n    * ### **Supported Events**\r\n    * - `\"requestStarted_POST\"` - Triggered when a POST request begins.\r\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\r\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\r\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\r\n    *\r\n    * ### **Behavior**\r\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"POST\"` as the method type.\r\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Register an event listener for when the request completes\r\n    * apiPostUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n    *     console.log(\"POST request completed!\", data);\r\n    * });\r\n    * \r\n    * // Register an event listener for request errors\r\n    * apiPostUrl.onEventEmit(\"requestError\", (error) => {\r\n    *     console.error(\"POST request failed:\", error);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a POST request, triggering events during execution.\r\n    *\r\n    * @param {string} eventName - The name of the event to listen for.\r\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\r\n    */\r\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\r\n};\r\n/**\r\n * **`ApiPutUrl` - A class for handling HTTP PUT requests to a specified URL.**\r\n *\r\n * The `ApiPutUrl` class is responsible for sending HTTP PUT requests to a provided URL.\r\n * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\r\n * This class supports a generic type `T`, allowing users to define the expected response type.\r\n *\r\n * ### **Key Features**\r\n * - **Executes HTTP PUT requests** using `ApiLink.putURL()`.\r\n * - **Accepts a direct URL** instead of using a predefined service command.\r\n * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\r\n * - **Supports response caching** via an optional `CachingModule`.\r\n * - **Emits request lifecycle events** using `EventEmitter`.\r\n * - **Allows event listeners** for monitoring request execution.\r\n * - **Provides type safety for response data** using a generic `T` (default: `any`).\r\n *\r\n * ### **How It Works**\r\n * - When instantiated, `ApiPutUrl` requires a valid URL and an optional `serviceCmd`.\r\n * - The `call()` method sends a PUT request with the provided request data.\r\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n * - Event listeners can be attached to monitor the request lifecycle.\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Creating an instance of ApiPutUrl\r\n * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.updateUser\");\r\n *\r\n * // Creating request data\r\n * const requestData = new hison.data.DataWrapper();\r\n * requestData.putString(\"username\", \"Alice\");\r\n * \r\n * // Sending a PUT request\r\n * apiPutUrl.call(requestData).then(response => {\r\n *     console.log(response.data); // Response data\r\n * });\r\n *\r\n * // Creating an instance with caching\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * const cachedApiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.updateUser\", cachingModule);\r\n *\r\n * // Handling request events\r\n * cachedApiPutUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n *     console.log(\"PUT request completed!\", data);\r\n * });\r\n * ```\r\n *\r\n * ### **Type-Safe Example**\r\n * ```typescript\r\n * interface UpdateUserResponse {\r\n *     success: boolean;\r\n *     message: string;\r\n * }\r\n *\r\n * const apiPutUrl = new hison.link.ApiPutUrl<UpdateUserResponse>(\"https://api.example.com/users\", \"UserService.updateUser\");\r\n * \r\n * apiPutUrl.call(requestData).then(response => {\r\n *     if (response) {\r\n *         console.log(response.data.message); // `message` is inferred as a string\r\n *     }\r\n * });\r\n * ```\r\n *\r\n * ### **Internal Components**\r\n * - **`ApiLink`**: Handles request execution and response processing.\r\n * - **`EventEmitter`**: Manages event-driven request handling.\r\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n *\r\n * ### **Return Value**\r\n * - A `Promise` resolving to an object containing:\r\n *   - `data` *(T)* - The API response data (typed based on the provided generic `T`, default: `any`).\r\n *   - `response` *(Response)* - The original HTTP response object.\r\n * - If an error occurs, it returns `null`.\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Sending data to an external API** using a full URL.\r\n * - **Passing a `serviceCmd` for structured request routing**.\r\n * - **Using cached responses** to reduce redundant API calls.\r\n * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n */\r\nexport interface InterfaceApiPutUrl<T = any> {\r\n    /**\r\n     * **Executes an HTTP PUT request to the specified URL with an optional service command.**\r\n     *\r\n     * This method sends a PUT request using `ApiLink.putURL()`, encapsulating request data in a `DataWrapper`\r\n     * and invoking necessary pre-request hooks and event emissions.\r\n     *\r\n     * ### **Parameters**\r\n     * - `requestData` *(any, required)* - The data to be sent in the request.\r\n     *   - If it is a `DataWrapper`, it is sent as-is.\r\n     *   - If it is a standard object, it is converted to a JSON payload.\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers, timeout settings, etc.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Pre-Request Handling**\r\n     * - **`\"requestStarted_PUT\"` Event**\r\n     *   - This event is emitted **before the PUT request is executed**.\r\n     *   - Includes the `serviceCmd`, request options, and request data.\r\n     *   - Can be used for logging, request tracking, or debugging.\r\n     *\r\n     * ### **Caching Mechanism**\r\n     * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\r\n     * - If cached data is found, it is returned **without making a new network request**.\r\n     * - If no cached data exists, a new PUT request is executed, and the response may be stored in the cache.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing:\r\n     *   - `data` *(T)* - The API response data (typed based on the provided generic `T`, default: `any`).\r\n     *   - `response` *(Response)* - The original HTTP response object.\r\n     * - If an error occurs, it returns `null`.\r\n     *\r\n     * ### **Behavior**\r\n     * - Calls `this._apiLink.putURL(this._url, requestData, this._serviceCmd, options)`, which:\r\n     *   - Emits `\"requestStarted_PUT\"` before making the request.\r\n     *   - Checks if the requested data is cached and returns it if available.\r\n     *   - If not cached, makes an HTTP PUT request to `_url` with the provided `serviceCmd`.\r\n     *   - Returns the response and optionally stores it in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.updateUser\");\r\n     * \r\n     * // Creating request data\r\n     * const requestData = new hison.data.DataWrapper();\r\n     * requestData.putString(\"username\", \"Alice\");\r\n     * \r\n     * // Listening to the \"requestStarted_PUT\" event\r\n     * apiPutUrl.onEventEmit(\"requestStarted_PUT\", (serviceCmd, options, requestData) => {\r\n     *     console.log(`PUT request started for service: ${serviceCmd}`, requestData);\r\n     * });\r\n     * \r\n     * // Sending a PUT request\r\n     * apiPutUrl.call(requestData).then(response => {\r\n     *     if (response) {\r\n     *         console.log(response.data); // Response data\r\n     *     }\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Type-Safe Example**\r\n     * ```typescript\r\n     * interface UpdateUserResponse {\r\n     *     success: boolean;\r\n     *     message: string;\r\n     * }\r\n     *\r\n     * const apiPutUrl = new hison.link.ApiPutUrl<UpdateUserResponse>(\"https://api.example.com/users\", \"UserService.updateUser\");\r\n     * \r\n     * apiPutUrl.call(requestData).then(response => {\r\n     *     if (response) {\r\n     *         console.log(response.data.message); // `message` is inferred as a string\r\n     *     }\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\r\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\r\n     *\r\n     * @param {any} requestData - The data to be sent in the request.\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<{ data: T; response: Response } | null>} A promise resolving to the API response.\r\n     */\r\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: T; response: Response; } | null>;\r\n    /**\r\n    * **Sends an HTTP HEAD request to the specified URL.**\r\n    *\r\n    * This method retrieves only the headers from the specified URL without downloading the response body.\r\n    * It is useful for checking metadata such as content type, content length, and caching information.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\r\n    *\r\n    * ### **Behavior**\r\n    * - Calls `this._apiLink.headURL(this._url, options)`, which:\r\n    *   - Sends an HTTP HEAD request to `_url`.\r\n    *   - Extracts and returns the response headers.\r\n    *   - Does **not** include the response body.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Sending a HEAD request\r\n    * apiPutUrl.head().then(headers => {\r\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\r\n    * });\r\n    *\r\n    * // Sending a HEAD request with additional headers\r\n    * apiPutUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\r\n    *     console.log(headers);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\r\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\r\n    */\r\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\r\n    /**\r\n    * **Sends an HTTP OPTIONS request to the specified URL.**\r\n    *\r\n    * This method retrieves the list of allowed HTTP methods for the specified URL \r\n    * without performing an actual data operation. It is useful for checking which \r\n    * HTTP methods are permitted for a specific endpoint.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PUT\", \"OPTIONS\"]`).\r\n    *\r\n    * ### **Behavior**\r\n    * - Calls `this._apiLink.options(this._url, options)`, which:\r\n    *   - Sends an HTTP OPTIONS request to `_url`.\r\n    *   - Extracts the `Allow` header from the response.\r\n    *   - Parses and returns the list of permitted HTTP methods.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Sending an OPTIONS request\r\n    * apiPutUrl.options().then(allowedMethods => {\r\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"PUT\", \"OPTIONS\"]\r\n    * });\r\n    *\r\n    * // Sending an OPTIONS request with additional headers\r\n    * apiPutUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\r\n    *     console.log(allowedMethods);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\r\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\r\n    */\r\n    options(options?: Record<string, any>): Promise<string[]>;\r\n    /**\r\n    * **Registers an event listener for API request lifecycle events.**\r\n    *\r\n    * This method allows attaching a callback function to be executed when a specified event \r\n    * occurs during the execution of a PUT request to a specified URL.\r\n    *\r\n    * ### **Parameters**\r\n    * - `eventName` *(string, required)* - The name of the event to listen for.\r\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\r\n    *\r\n    * ### **Supported Events**\r\n    * - `\"requestStarted_PUT\"` - Triggered when a PUT request begins.\r\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\r\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\r\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\r\n    *\r\n    * ### **Behavior**\r\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PUT\"` as the method type.\r\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Register an event listener for when the request completes\r\n    * apiPutUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n    *     console.log(\"PUT request completed!\", data);\r\n    * });\r\n    * \r\n    * // Register an event listener for request errors\r\n    * apiPutUrl.onEventEmit(\"requestError\", (error) => {\r\n    *     console.error(\"PUT request failed:\", error);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a PUT request, triggering events during execution.\r\n    *\r\n    * @param {string} eventName - The name of the event to listen for.\r\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\r\n    */\r\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\r\n};\r\n/**\r\n * **`ApiPatchUrl` - A class for handling HTTP PATCH requests to a specified URL.**\r\n *\r\n * The `ApiPatchUrl` class is responsible for sending HTTP PATCH requests to a provided URL.\r\n * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\r\n *\r\n * ### **Key Features**\r\n * - **Executes HTTP PATCH requests** using `ApiLink`.\r\n * - **Accepts a direct URL** instead of using a predefined service command.\r\n * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\r\n * - **Supports response caching** via an optional `CachingModule`.\r\n * - **Emits request lifecycle events** using `EventEmitter`.\r\n * - **Allows event listeners** for monitoring request execution.\r\n *\r\n * ### **How It Works**\r\n * - When instantiated, `ApiPatchUrl` requires a valid URL and an optional `serviceCmd`.\r\n * - The `call()` method sends a PATCH request with the provided request data.\r\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n * - Event listeners can be attached to monitor the request lifecycle.\r\n *\r\n * ### **Return Value**\r\n * - A `Promise` resolving to an object containing:\r\n *   - `data` *(T)* - The API response data (typed based on the provided generic `T`, default: `any`).\r\n *   - `response` *(Response)* - The original HTTP response object.\r\n * - If an error occurs, it returns `null`.\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Creating an instance of ApiPatchUrl\r\n * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.updateUser\");\r\n *\r\n * // Creating request data\r\n * const requestData = new hison.data.DataWrapper();\r\n * requestData.putString(\"username\", \"Alice\");\r\n * \r\n * // Sending a PATCH request\r\n * apiPatchUrl.call(requestData).then(response => {\r\n *     if (response) {\r\n *         console.log(response.data); // Response data\r\n *     }\r\n * });\r\n *\r\n * // Creating an instance with caching\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * const cachedApiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.updateUser\", cachingModule);\r\n *\r\n * // Handling request events\r\n * cachedApiPatchUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n *     console.log(\"PATCH request completed!\", data);\r\n * });\r\n * ```\r\n *\r\n * ### **Type-Safe Example**\r\n * ```typescript\r\n * interface UpdateUserResponse {\r\n *     success: boolean;\r\n *     message: string;\r\n * }\r\n *\r\n * const apiPatchUrl = new hison.link.ApiPatchUrl<UpdateUserResponse>(\"https://api.example.com/users\", \"UserService.updateUser\");\r\n * \r\n * apiPatchUrl.call(requestData).then(response => {\r\n *     if (response) {\r\n *         console.log(response.data.message); // `message` is inferred as a string\r\n *     }\r\n * });\r\n * ```\r\n *\r\n * ### **Internal Components**\r\n * - **`ApiLink`**: Handles request execution and response processing.\r\n * - **`EventEmitter`**: Manages event-driven request handling.\r\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Sending data to an external API** using a full URL.\r\n * - **Passing a `serviceCmd` for structured request routing**.\r\n * - **Using cached responses** to reduce redundant API calls.\r\n * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n */\r\nexport interface InterfaceApiPatchUrl<T = any> {\r\n    /**\r\n     * **Executes an HTTP PATCH request to the specified URL with an optional service command.**\r\n     *\r\n     * This method sends a PATCH request using `ApiLink.patchURL()`, encapsulating request data in a `DataWrapper`\r\n     * and invoking necessary pre-request hooks and event emissions.\r\n     *\r\n     * ### **Parameters**\r\n     * - `requestData` *(any, required)* - The data to be sent in the request.\r\n     *   - If it is a `DataWrapper`, it is sent as-is.\r\n     *   - If it is a standard object, it is converted to a JSON payload.\r\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Pre-Request Handling**\r\n     * - **`\"requestStarted_PATCH\"` Event**\r\n     *   - This event is emitted **before the PATCH request is executed**.\r\n     *   - It includes the `serviceCmd`, request options, and request data.\r\n     *   - Can be used for logging, request tracking, or debugging.\r\n     *\r\n     * ### **Caching Mechanism**\r\n     * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\r\n     * - If cached data is found, it is returned **without making a new network request**.\r\n     * - If no cached data exists, a new PATCH request is executed, and the response may be stored in the cache.\r\n     *\r\n     * ### **Return Value**\r\n     * - A `Promise` resolving to an object containing:\r\n     *   - `data` *(T)* - The API response data, typed based on the provided generic `T` (default: `any`).\r\n     *   - `response` *(Response)* - The original HTTP response object.\r\n     * - If an error occurs, it returns `null`.\r\n     *\r\n     * ### **Behavior**\r\n     * - Calls `this._apiLink.patchURL(this._url, requestData, this._serviceCmd, options)`, which:\r\n     *   - Emits `\"requestStarted_PATCH\"` before making the request.\r\n     *   - Checks if the requested data is cached and returns it if available.\r\n     *   - If not cached, makes an HTTP PATCH request to `_url` with the provided `serviceCmd`.\r\n     *   - Returns the response and optionally stores it in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.updateUser\");\r\n     * \r\n     * // Creating request data\r\n     * const requestData = new hison.data.DataWrapper();\r\n     * requestData.putString(\"username\", \"Alice\");\r\n     * \r\n     * // Listening to the \"requestStarted_PATCH\" event\r\n     * apiPatchUrl.onEventEmit(\"requestStarted_PATCH\", (serviceCmd, options, requestData) => {\r\n     *     console.log(`PATCH request started for service: ${serviceCmd}`, requestData);\r\n     * });\r\n     * \r\n     * // Sending a PATCH request\r\n     * apiPatchUrl.call(requestData).then(response => {\r\n     *     if (response) {\r\n     *         console.log(response.data); // Response data\r\n     *     }\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Type-Safe Example**\r\n     * ```typescript\r\n     * interface UpdateUserResponse {\r\n     *     success: boolean;\r\n     *     message: string;\r\n     * }\r\n     *\r\n     * const apiPatchUrl = new hison.link.ApiPatchUrl<UpdateUserResponse>(\"https://api.example.com/users\", \"UserService.updateUser\");\r\n     * \r\n     * apiPatchUrl.call(requestData).then(response => {\r\n     *     if (response) {\r\n     *         console.log(response.data.message); // `message` is inferred as a string\r\n     *     }\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\r\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\r\n     *\r\n     * @param {any} requestData - The data to be sent in the request.\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<{ data: T; response: Response; } | null>} A promise resolving to the API response.\r\n     */\r\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: T; response: Response; } | null>;\r\n    /**\r\n    * **Sends an HTTP HEAD request to the specified URL.**\r\n    *\r\n    * This method retrieves only the headers from the specified URL without downloading the response body.\r\n    * It is useful for checking metadata such as content type, content length, and caching information.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\r\n    *\r\n    * ### **Behavior**\r\n    * - Calls `this._apiLink.headURL(this._url, options)`, which:\r\n    *   - Sends an HTTP HEAD request to `_url`.\r\n    *   - Extracts and returns the response headers.\r\n    *   - Does **not** include the response body.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Sending a HEAD request\r\n    * apiPatchUrl.head().then(headers => {\r\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\r\n    * });\r\n    *\r\n    * // Sending a HEAD request with additional headers\r\n    * apiPatchUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\r\n    *     console.log(headers);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\r\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\r\n    */\r\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\r\n    /**\r\n    * **Sends an HTTP OPTIONS request to the specified URL.**\r\n    *\r\n    * This method retrieves the list of allowed HTTP methods for the specified URL \r\n    * without performing an actual data operation. It is useful for checking which \r\n    * HTTP methods are permitted for a specific endpoint.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PATCH\", \"OPTIONS\"]`).\r\n    *\r\n    * ### **Behavior**\r\n    * - Calls `this._apiLink.options(this._url, options)`, which:\r\n    *   - Sends an HTTP OPTIONS request to `_url`.\r\n    *   - Extracts the `Allow` header from the response.\r\n    *   - Parses and returns the list of permitted HTTP methods.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Sending an OPTIONS request\r\n    * apiPatchUrl.options().then(allowedMethods => {\r\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"PATCH\", \"OPTIONS\"]\r\n    * });\r\n    *\r\n    * // Sending an OPTIONS request with additional headers\r\n    * apiPatchUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\r\n    *     console.log(allowedMethods);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\r\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\r\n    */\r\n    options(options?: Record<string, any>): Promise<string[]>;\r\n    /**\r\n    * **Registers an event listener for API request lifecycle events.**\r\n    *\r\n    * This method allows attaching a callback function to be executed when a specified event \r\n    * occurs during the execution of a PATCH request to a specified URL.\r\n    *\r\n    * ### **Parameters**\r\n    * - `eventName` *(string, required)* - The name of the event to listen for.\r\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\r\n    *\r\n    * ### **Supported Events**\r\n    * - `\"requestStarted_PATCH\"` - Triggered when a PATCH request begins.\r\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\r\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\r\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\r\n    *\r\n    * ### **Behavior**\r\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PATCH\"` as the method type.\r\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Register an event listener for when the request completes\r\n    * apiPatchUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n    *     console.log(\"PATCH request completed!\", data);\r\n    * });\r\n    * \r\n    * // Register an event listener for request errors\r\n    * apiPatchUrl.onEventEmit(\"requestError\", (error) => {\r\n    *     console.error(\"PATCH request failed:\", error);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a PATCH request, triggering events during execution.\r\n    *\r\n    * @param {string} eventName - The name of the event to listen for.\r\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\r\n    */\r\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\r\n};\r\n/**\r\n * **`ApiDeleteUrl` - A class for handling HTTP DELETE requests to a specified URL.**\r\n *\r\n * The `ApiDeleteUrl` class is responsible for sending HTTP DELETE requests to a provided URL.\r\n * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\r\n *\r\n * ### **Key Features**\r\n * - **Executes HTTP DELETE requests** using `ApiLink`.\r\n * - **Accepts a direct URL** instead of using a predefined service command.\r\n * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\r\n * - **Supports response caching** via an optional `CachingModule`.\r\n * - **Emits request lifecycle events** using `EventEmitter`.\r\n * - **Allows event listeners** for monitoring request execution.\r\n * - **Supports generic response types** for type-safe API responses.\r\n *\r\n * ### **How It Works**\r\n * - When instantiated, `ApiDeleteUrl` requires a valid URL and an optional `serviceCmd`.\r\n * - The `call()` method sends a DELETE request with the provided request data.\r\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\r\n * - Event listeners can be attached to monitor the request lifecycle.\r\n *\r\n * ### **Example Usage**\r\n * ```typescript\r\n * // Creating an instance of ApiDeleteUrl\r\n * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.deleteUser\");\r\n *\r\n * // Creating request data\r\n * const requestData = new hison.data.DataWrapper();\r\n * requestData.putString(\"username\", \"Alice\");\r\n * \r\n * // Sending a DELETE request\r\n * apiDeleteUrl.call(requestData).then(response => {\r\n *     if (response) {\r\n *         console.log(response.data); // Response data\r\n *     }\r\n * });\r\n *\r\n * // Creating an instance with caching\r\n * const cachingModule = new hison.link.CachingModule(20);\r\n * const cachedApiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.deleteUser\", cachingModule);\r\n *\r\n * // Handling request events\r\n * cachedApiDeleteUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n *     console.log(\"DELETE request completed!\", data);\r\n * });\r\n * ```\r\n *\r\n * ### **Type-Safe Example**\r\n * ```typescript\r\n * interface DeleteResponse {\r\n *     success: boolean;\r\n *     message: string;\r\n * }\r\n *\r\n * const apiDeleteUrl = new hison.link.ApiDeleteUrl<DeleteResponse>(\"https://api.example.com/users\", \"UserService.deleteUser\");\r\n * \r\n * apiDeleteUrl.call(requestData).then(response => {\r\n *     if (response) {\r\n *         console.log(response.data.message); // `message` is inferred as a string\r\n *     }\r\n * });\r\n * ```\r\n *\r\n * ### **Internal Components**\r\n * - **`ApiLink`**: Handles request execution and response processing.\r\n * - **`EventEmitter`**: Manages event-driven request handling.\r\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\r\n *\r\n * ### **Return Value**\r\n * - **A `Promise` resolving to an object with the following properties:**\r\n *   - `data` *(T)* - The API response data, where `T` is the specified generic type (default: `any`).\r\n *   - `response` *(Response)* - The original HTTP response object.\r\n * - If an error occurs, it returns `null`.\r\n *\r\n * ### **Typical Use Cases**\r\n * - **Sending data to an external API** using a full URL.\r\n * - **Passing a `serviceCmd` for structured request routing**.\r\n * - **Using cached responses** to reduce redundant API calls.\r\n * - **Handling event-driven request monitoring** via `onEventEmit`.\r\n */\r\nexport interface InterfaceApiDeleteUrl<T = any> {\r\n    /**\r\n     * **Executes an HTTP DELETE request to the specified URL with an optional service command.**\r\n     *\r\n     * This method sends a DELETE request using `ApiLink.deleteURL()`, encapsulating request data in a `DataWrapper`\r\n     * and invoking necessary pre-request hooks and event emissions.\r\n     *\r\n     * ### **Parameters**\r\n     * - `requestData` *(any, required)* - The data to be sent in the request.\r\n     *   - If it is a `DataWrapper`, it is sent as-is.\r\n     *   - If it is a standard object, it is converted to a JSON payload.\r\n     * - `options` *(optional, `Record<string, any>`)* - Additional request options such as headers or timeout settings.\r\n     *   - **Default:** `{}` (empty object)\r\n     *\r\n     * ### **Pre-Request Handling**\r\n     * - **`\"requestStarted_DELETE\"` Event**\r\n     *   - This event is emitted **before the DELETE request is executed**.\r\n     *   - It includes the `serviceCmd`, request options, and request data.\r\n     *   - Can be used for logging, request tracking, or debugging.\r\n     *\r\n     * ### **Caching Mechanism**\r\n     * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\r\n     * - If cached data is found, it is returned **without making a new network request**.\r\n     * - If no cached data exists, a new DELETE request is executed, and the response may be stored in the cache.\r\n     *\r\n     * ### **Return Value**\r\n     * - **A `Promise` resolving to an object with the following properties:**\r\n     *   - `data` *(T)* - The API response data, where `T` is the specified generic type (default: `any`).\r\n     *   - `response` *(Response)* - The original HTTP response object.\r\n     * - If an error occurs, it returns `null`.\r\n     *\r\n     * ### **Behavior**\r\n     * - Calls `this._apiLink.deleteURL(this._url, requestData, this._serviceCmd, options)`, which:\r\n     *   - Emits `\"requestStarted_DELETE\"` before making the request.\r\n     *   - Checks if the requested data is cached and returns it if available.\r\n     *   - If not cached, makes an HTTP DELETE request to `_url` with the provided `serviceCmd`.\r\n     *   - Returns the response and optionally stores it in the cache.\r\n     *\r\n     * ### **Example Usage**\r\n     * ```typescript\r\n     * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.deleteUser\");\r\n     * \r\n     * // Creating request data\r\n     * const requestData = new hison.data.DataWrapper();\r\n     * requestData.putString(\"username\", \"Alice\");\r\n     * \r\n     * // Listening to the \"requestStarted_DELETE\" event\r\n     * apiDeleteUrl.onEventEmit(\"requestStarted_DELETE\", (serviceCmd, options, requestData) => {\r\n     *     console.log(`DELETE request started for service: ${serviceCmd}`, requestData);\r\n     * });\r\n     * \r\n     * // Sending a DELETE request\r\n     * apiDeleteUrl.call(requestData).then(response => {\r\n     *     if (response) {\r\n     *         console.log(response.data); // Response data\r\n     *     }\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Type-Safe Example**\r\n     * ```typescript\r\n     * interface DeleteResponse {\r\n     *     success: boolean;\r\n     *     message: string;\r\n     * }\r\n     *\r\n     * const apiDeleteUrl = new hison.link.ApiDeleteUrl<DeleteResponse>(\"https://api.example.com/users\", \"UserService.deleteUser\");\r\n     * \r\n     * apiDeleteUrl.call(requestData).then(response => {\r\n     *     if (response) {\r\n     *         console.log(response.data.message); // `message` is inferred as a string\r\n     *     }\r\n     * });\r\n     * ```\r\n     *\r\n     * ### **Related Methods**\r\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\r\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\r\n     *\r\n     * @param {any} requestData - The data to be sent in the request.\r\n     * @param {Record<string, any>} [options={}] - Additional request options.\r\n     * @returns {Promise<{ data: T; response: Response; } | null>} A promise resolving to the API response.\r\n     */\r\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: T; response: Response; } | null>;\r\n    /**\r\n    * **Sends an HTTP HEAD request to the specified URL.**\r\n    *\r\n    * This method retrieves only the headers from the specified URL without downloading the response body.\r\n    * It is useful for checking metadata such as content type, content length, and caching information.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\r\n    *\r\n    * ### **Behavior**\r\n    * - Calls `this._apiLink.headURL(this._url, options)`, which:\r\n    *   - Sends an HTTP HEAD request to `_url`.\r\n    *   - Extracts and returns the response headers.\r\n    *   - Does **not** include the response body.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Sending a HEAD request\r\n    * apiDeleteUrl.head().then(headers => {\r\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\r\n    * });\r\n    *\r\n    * // Sending a HEAD request with additional headers\r\n    * apiDeleteUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\r\n    *     console.log(headers);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\r\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\r\n    */\r\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\r\n    /**\r\n    * **Sends an HTTP OPTIONS request to the specified URL.**\r\n    *\r\n    * This method retrieves the list of allowed HTTP methods for the specified URL \r\n    * without performing an actual data operation. It is useful for checking which \r\n    * HTTP methods are permitted for a specific endpoint.\r\n    *\r\n    * ### **Parameters**\r\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\r\n    *   - **Default:** `{}` (empty object)\r\n    *\r\n    * ### **Return Value**\r\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"DELETE\", \"OPTIONS\"]`).\r\n    *\r\n    * ### **Behavior**\r\n    * - Calls `this._apiLink.options(this._url, options)`, which:\r\n    *   - Sends an HTTP OPTIONS request to `_url`.\r\n    *   - Extracts the `Allow` header from the response.\r\n    *   - Parses and returns the list of permitted HTTP methods.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Sending an OPTIONS request\r\n    * apiDeleteUrl.options().then(allowedMethods => {\r\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"DELETE\", \"OPTIONS\"]\r\n    * });\r\n    *\r\n    * // Sending an OPTIONS request with additional headers\r\n    * apiDeleteUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\r\n    *     console.log(allowedMethods);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\r\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\r\n    *\r\n    * @param {Record<string, any>} [options={}] - Additional request options.\r\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\r\n    */\r\n    options(options?: Record<string, any>): Promise<string[]>;\r\n    /**\r\n    * **Registers an event listener for API request lifecycle events.**\r\n    *\r\n    * This method allows attaching a callback function to be executed when a specified event \r\n    * occurs during the execution of a DELETE request to a specified URL.\r\n    *\r\n    * ### **Parameters**\r\n    * - `eventName` *(string, required)* - The name of the event to listen for.\r\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\r\n    *\r\n    * ### **Supported Events**\r\n    * - `\"requestStarted_DELETE\"` - Triggered when a DELETE request begins.\r\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\r\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\r\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\r\n    *\r\n    * ### **Behavior**\r\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"DELETE\"` as the method type.\r\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\r\n    *\r\n    * ### **Example Usage**\r\n    * ```typescript\r\n    * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\r\n    * \r\n    * // Register an event listener for when the request completes\r\n    * apiDeleteUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\r\n    *     console.log(\"DELETE request completed!\", data);\r\n    * });\r\n    * \r\n    * // Register an event listener for request errors\r\n    * apiDeleteUrl.onEventEmit(\"requestError\", (error) => {\r\n    *     console.error(\"DELETE request failed:\", error);\r\n    * });\r\n    * ```\r\n    *\r\n    * ### **Related Methods**\r\n    * - **`call(requestData, options)`** - Sends a DELETE request, triggering events during execution.\r\n    *\r\n    * @param {string} eventName - The name of the event to listen for.\r\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\r\n    */\r\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\r\n};\r\n/**\r\n * Defines a function type for handling API GET requests before they are sent.\r\n * This allows developers to modify request options or cancel the request.\r\n *\r\n * ### Parameters\r\n * - `resourcePath` *(optional, string)*: The API endpoint URL for the GET request.\r\n * - `options` *(optional, Record<string, any>)*: Additional request options, such as headers or timeout settings.\r\n *\r\n * ### Return Value\r\n * - Returns `false` to prevent the GET request from being executed.\r\n * - Returns `void` or `true` to proceed with the request.\r\n *\r\n * ### Example Usage\r\n * ```typescript\r\n * hison.setBeforeGetRequst((resourcePath, options) => {\r\n *     console.log(\"Preparing GET request to:\", resourcePath);\r\n *     options.headers = { Authorization: \"Bearer token\" };\r\n *     return true;\r\n * });\r\n * ```\r\n */\r\nexport interface BeforeGetRequst {(resourcePath?: string, options?: Record<string, any>): boolean | void;};\r\n/**\r\n * Defines a function type for handling API POST requests before they are sent.\r\n * This allows modifying request data, headers, or preventing the request.\r\n *\r\n * ### Parameters\r\n * - `requestDw` *(optional, any)*: The request payload.\r\n * - `options` *(optional, Record<string, any>)*: Additional request options.\r\n *\r\n * ### Return Value\r\n * - Returns `false` to cancel the POST request.\r\n * - Returns `void` or `true` to proceed with the request.\r\n *\r\n * ### Example Usage\r\n * ```typescript\r\n * hison.setBeforePostRequst((requestDw, options) => {\r\n *     requestDw.putString(\"timestamp\", Date.now().toString());\r\n *     return true;\r\n * });\r\n * ```\r\n */\r\nexport interface BeforePostRequst {(requestDw?: any, options?: Record<string, any>): boolean | void;};\r\n/**\r\n * Defines a function type for handling API PUT requests before they are sent.\r\n * Similar to `BeforePostRequst`, this allows modifying request payload or settings.\r\n *\r\n * ### Parameters\r\n * - `requestDw` *(optional, any)*: The request payload.\r\n * - `options` *(optional, Record<string, any>)*: Additional request options.\r\n *\r\n * ### Return Value\r\n * - Returns `false` to cancel the PUT request.\r\n * - Returns `void` or `true` to proceed.\r\n *\r\n * ### Example Usage\r\n * ```typescript\r\n * hison.setBeforePutRequst((requestDw, options) => {\r\n *     requestDw.putString(\"modified\", \"true\");\r\n * });\r\n * ```\r\n */\r\nexport interface BeforePutRequst {(requestDw?: any, options?: Record<string, any>): boolean | void;};\r\n/**\r\n * Defines a function type for handling API PATCH requests before they are sent.\r\n * This allows modifying partial update data before execution.\r\n *\r\n * ### Parameters\r\n * - `requestDw` *(optional, any)*: The request payload.\r\n * - `options` *(optional, Record<string, any>)*: Additional request options.\r\n *\r\n * ### Return Value\r\n * - Returns `false` to cancel the PATCH request.\r\n * - Returns `void` or `true` to proceed.\r\n *\r\n * ### Example Usage\r\n * ```typescript\r\n * hison.setBeforePatchRequst((requestDw, options) => {\r\n *     requestDw.putString(\"lastUpdated\", new Date().toISOString());\r\n * });\r\n * ```\r\n */\r\nexport interface BeforePatchRequst {(requestDw?: any, options?: Record<string, any>): boolean | void;};\r\n/**\r\n * Defines a function type for handling API DELETE requests before they are sent.\r\n * This allows validating or modifying delete operations before execution.\r\n *\r\n * ### Parameters\r\n * - `requestDw` *(optional, any)*: The request payload.\r\n * - `options` *(optional, Record<string, any>)*: Additional request options.\r\n *\r\n * ### Return Value\r\n * - Returns `false` to cancel the DELETE request.\r\n * - Returns `void` or `true` to proceed.\r\n *\r\n * ### Example Usage\r\n * ```typescript\r\n * hison.setBeforeDeleteRequst((requestDw, options) => {\r\n *     if (!requestDw.hasKey(\"id\")) return false;\r\n * });\r\n * ```\r\n */\r\nexport interface BeforeDeleteRequst {(requestDw?: any, options?: Record<string, any>): boolean | void;};\r\n/**\r\n * Defines a function type for intercepting API response results.\r\n * This allows modifying API responses before they are returned to the caller.\r\n *\r\n * ### Parameters\r\n * - `result` *(DataWrapper | undefined)*: The API response data wrapped in `DataWrapper`.\r\n * - `response` *(Response)*: The original HTTP response object.\r\n *\r\n * ### Return Value\r\n * - Returns `false` to prevent the response from being processed further.\r\n * - Returns `void` or `true` to allow normal response handling.\r\n *\r\n * ### Example Usage\r\n * ```typescript\r\n * hison.setInterceptApiResult((result, response) => {\r\n *     console.log(\"Received API result:\", result);\r\n *     return true;\r\n * });\r\n * ```\r\n */\r\nexport interface InterceptApiResult {(result: any | undefined, response: Response): boolean | void;};\r\n/**\r\n * Defines a function type for handling API errors before they are propagated.\r\n * This allows logging or modifying error responses before they are thrown.\r\n *\r\n * ### Parameters\r\n * - `error` *(any)*: The error object thrown by the API request.\r\n *\r\n * ### Return Value\r\n * - Returns `false` to suppress the error.\r\n * - Returns `void` or `true` to propagate the error as normal.\r\n *\r\n * ### Example Usage\r\n * ```typescript\r\n * hison.setInterceptApiError((error) => {\r\n *     console.error(\"API error occurred:\", error);\r\n * });\r\n * ```\r\n */\r\nexport interface InterceptApiError {(error: any): boolean | void;};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {\n    Hison,\n    DateObject,\n    TimeObject,\n    DateTimeObject,\n    MonthFullName,\n    MonthShortName,\n    DayOfWeekFullName,\n    DayOfWeekShortName,\n    DayOfWeekFullNameKR,\n    DayOfWeekShortNameKR,\n    ConvertValue,\n    InterfaceDataWrapper,\n    InterfaceDataModel,\n    DataModelFormatter,\n    DataModelValidator,\n    DataModelFillter,\n    InterfaceCachingModule,\n    InterfaceApiGet,\n    InterfaceApiPost,\n    InterfaceApiPut,\n    InterfaceApiPatch,\n    InterfaceApiDelete,\n    InterfaceApiGetUrl,\n    InterfaceApiPostUrl,\n    InterfaceApiPutUrl,\n    InterfaceApiPatchUrl,\n    InterfaceApiDeleteUrl,\n    BeforeGetRequst,\n    BeforePostRequst,\n    BeforePutRequst,\n    BeforePatchRequst,\n    BeforeDeleteRequst,\n    InterceptApiResult,\n    InterceptApiError\n} from '.'\n\n//====================================================================================\n//createHison\n//====================================================================================\n/**\n * Creates and returns an instance of `Hison`, the core object of the `hisondev` solution.\n * \n * ### **Overview**\n * The `createHison()` function **encapsulates the creation of the `Hison` object** using a **closure pattern**.\n * This ensures that:\n * - **Internal states remain private** while exposing necessary functionalities.\n * - **Methods are encapsulated**, preventing direct manipulation of internal logic.\n * - **Security and integrity** of configuration settings are preserved.\n * \n * The returned `Hison` object serves as the **central interface** for configuration, security, utilities, \n * structured data handling, and API communication.\n * \n * ---\n * ### **Encapsulation with Closure**\n * - Internally, `createHison()` initializes a **`HisonCore` object**, which holds the actual implementations.\n * - The **returned object only exposes a selected set of methods**, ensuring safe interaction.\n * - This design provides **data encapsulation** and **prevents unintended modifications**.\n * \n * ---\n * ### **Core Functionalities of `Hison`**\n * \n * The `Hison` object provides a **modular and extensible API** with the following key components:\n * \n * ### **1. Configuration Management**\n * - **Dynamic Customization**: Modify settings via setter methods (`setDateFormat()`, `setTimeFormat()`, etc.).\n * - **Character Encoding Configuration**: Adjust byte sizes for different character encodings.\n * - **Security Settings**: Enable object freezing, access restrictions, and debugging prevention.\n *\n * Example:\n * ```typescript\n * hison.setDateFormat(\"MM/dd/yyyy\");\n * hison.setTimeFormat(\"HH:mm:ss\");\n * hison.setCharByteLess2047(3);\n * ```\n *\n * ---\n * ### **2. Security & Access Control (`hison.shield`)**\n * - **Enforce object immutability** (`setIsFreeze(true)`).\n * - **Restrict access to specific URLs/IPs** (`setShieldURL()`, `setExposeIpList()`).\n * - **Prevent developer tool access** (`setIsPossibleOpenDevTool(false)`).\n *\n * Example:\n * ```typescript\n * hison.setIsFreeze(true);\n * hison.setShieldURL(\"https://secure.example.com\");\n * hison.setExposeIpList([\"192.168.1.1\", \"10.0.0.2\"]);\n * ```\n *\n * ---\n * ### **3. Utility Functions (`hison.utils`)**\n * - **String Processing** (`isAlpha()`, `getLpad()`).\n * - **Number Formatting** (`getRound()`, `getNumberFormat()`).\n * - **Date Handling** (`getDateWithFormat()`).\n *\n * Example:\n * ```typescript\n * hison.utils.isAlpha(\"HelloWorld\"); // true\n * hison.utils.getNumberFormat(1234.5678, \"#,###.00\"); // \"1,234.57\"\n * ```\n *\n * ---\n * ### **4. Structured Data Handling (`hison.data`)**\n * The `data` module provides structured data storage and manipulation tools:\n *\n * - **`DataWrapper`**: Key-value storage for flexible data management.\n * - **`DataModel`**: Table-based structure for handling tabular data.\n *\n * Example:\n * ```typescript\n * const wrapper = new hison.data.DataWrapper({ username: \"Alice\", age: 25 });\n * console.log(wrapper.getString(\"username\")); // \"Alice\"\n * \n * const model = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n * console.log(model.getValue(0, \"name\")); // \"Alice\"\n * ```\n *\n * ---\n * ### **5. API Communication (`hison.link`)**\n * - **Simplified HTTP Requests** using promise-based networking.\n * - **Built-in caching** to optimize API performance.\n * - **WebSocket support** for real-time data updates.\n *\n * Example:\n * ```typescript\n * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n * apiPost.call(new hison.data.DataWrapper({ username: \"Alice\" })).then(response => {\n *     console.log(response.data);\n * });\n * ```\n *\n * ---\n * ### **Encapsulation Benefits**\n * - **Prevents direct access to internal states**.\n * - **Ensures safe API exposure** while protecting core logic.\n * - **Maintains clean separation between implementation and interface**.\n *\n * ---\n * ### **Summary**\n * The `createHison()` function returns an instance of `Hison`, a **comprehensive framework** for managing:\n * - Configuration settings\n * - Security controls\n * - Utility functions\n * - Structured data storage\n * - API communication\n *\n * Through **closure-based encapsulation**, `Hison` maintains **high security, modularity, and efficiency**.\n *\n * ---\n * @returns {Hison} An encapsulated `Hison` object with restricted direct access to core logic.\n */\nfunction createHison(): Hison {\n    class CustomOption {\n        utils = {\n            /**\n             * The default format for displaying dates.\n             *\n             * This format is used throughout the `hisondev` solution for parsing \n             * and formatting date values.\n             *\n             * - Default value: `'yyyy-MM-dd'`\n             * - Example output: `'2025-02-04'` (for February 4, 2025)\n             * - Can be modified using `setDateFormat(format: string)`.\n             */\n            dateFormat : 'yyyy-MM-dd',\n            /**\n             * The default format for displaying time.\n             *\n             * This format is used throughout the `hisondev` solution for parsing \n             * and formatting time values.\n             *\n             * - Default value: `'hh:mm:ss'`\n             * - Example output: `'14:30:15'` (for 2:30:15 PM)\n             * - Can be modified using `setTimeFormat(format: string)`.\n             */\n            timeFormat : 'hh:mm:ss',\n            /**\n             * The default format for displaying date and time.\n             *\n             * This format is used throughout the `hisondev` solution for parsing \n             * and formatting datetime values.\n             *\n             * - Default value: `'yyyy-MM-dd hh:mm:ss'`\n             * - Example output: `'2025-02-04 14:30:15'` (for February 4, 2025, 2:30:15 PM)\n             * - Can be modified using `setDatetimeFormat(format: string)`.\n             */\n            datetimeFormat : 'yyyy-MM-dd hh:mm:ss',\n            /**\n             * The default format for displaying the year.\n             *\n             * This format is used to represent year values in date-related operations.\n             *\n             * - Default value: `'yyyy'`\n             * - Example output: `'2025'` (for the year 2025)\n             * - Can be modified using `setYearFormat(format: string)`.\n             */\n            yearFormat : 'yyyy',\n            /**\n             * The default format for displaying the month.\n             *\n             * This format is used to represent month values in date-related operations.\n             *\n             * - Default value: `'M'`\n             * - Example output: `'2'` (for February)\n             * - Can be modified using `setMonthFormat(format: string)`.\n             */\n            monthFormat : 'M',\n            /**\n             * The default format for displaying the full month name.\n             *\n             * This format is used to represent the full name of a month in date-related operations.\n             *\n             * - Default value: `'MMMM'`\n             * - Example output: `'February'` (for the month of February)\n             * - Can be modified using `setMonthNameFormat(format: string)`.\n             */\n            monthNameFormat : 'MMMM',\n            /**\n             * The default format for displaying year and month.\n             *\n             * This format is used to represent a combination of year and month in date-related operations.\n             *\n             * - Default value: `'yyyy-MM'`\n             * - Example output: `'2025-02'` (for February 2025)\n             * - Can be modified using `setYearMonthFormat(format: string)`.\n             */\n            yearMonthFormat : 'yyyy-MM',\n            /**\n             * The default format for displaying the day of the month.\n             *\n             * This format is used to represent the day component in date-related operations.\n             *\n             * - Default value: `'d'`\n             * - Example output: `'4'` (for the 4th day of the month)\n             * - Can be modified using `setDayFormat(format: string)`.\n             */\n            dayFormat : 'd',\n            /**\n             * The default format for displaying the day of the week.\n             *\n             * This format is used to represent the day of the week in date-related operations.\n             *\n             * - Default value: `'d'`\n             * - Example output: `'3'` (where 3 could represent Wednesday depending on locale settings)\n             * - Can be modified using `setDayOfWeekFormat(format: string)`.\n             */\n            dayOfWeekFormat : 'd',\n            /**\n             * The default format for displaying the hour.\n             *\n             * This format is used to represent the hour component in time-related operations.\n             *\n             * - Default value: `'h'`\n             * - Example output: `'2'\n             * - Can be modified using `setHourFormat(format: string)`.\n             */\n            hourFormat : 'h',\n            /**\n             * The default format for displaying the hour and minute.\n             *\n             * This format is used to represent the time in hours and minutes.\n             *\n             * - Default value: `'hh:mm'`\n             * - Example output: `'14:30'` (for 2:30 PM in 24-hour format)\n             * - Can be modified using `setHourMinuteFormat(format: string)`.\n             */\n            hourMinuteFormat : 'hh:mm',\n            /**\n             * The default format for displaying the minute.\n             *\n             * This format is used to represent the minute component in time-related operations.\n             *\n             * - Default value: `'m'`\n             * - Example output: `'5'` (for the 5th minute of the hour)\n             * - Can be modified using `setMinuteFormat(format: string)`.\n             */\n            minuteFormat : 'm',\n            /**\n             * The default format for displaying the second.\n             *\n             * This format is used to represent the second component in time-related operations.\n             *\n             * - Default value: `'s'`\n             * - Example output: `'45'` (for the 45th second of the minute)\n             * - Can be modified using `setSecondFormat(format: string)`.\n             */\n            secondFormat : 's',\n            /**\n             * The default format for displaying numbers.\n             *\n             * This format is used to represent numeric values with grouping separators and decimal precision.\n             *\n             * - Default value: `\"#,##0.##\"`\n             * - Example output: `\"1,234.56\"` (for the number `1234.56`)\n             * - Can be modified using `setNumberFormat(format: string)`.\n             */\n            numberFormat : '#,##0.##',\n            /**\n             * The byte size used for characters with a char code less than or equal to `0x7FF`.\n             *\n             * This value defines the number of bytes required to encode characters in this range.\n             *\n             * - Default value: `2`\n             * - Represents characters with `charCode <= 0x7FF`\n             */\n            LESSOREQ_0X7FF_BYTE : 2,\n            /**\n             * The byte size used for characters with a char code less than or equal to `0xFFFF`.\n             *\n             * This value defines the number of bytes required to encode characters in this range.\n             *\n             * - Default value: `3`\n             * - Represents characters with `charCode <= 0xFFFF`\n             */\n            LESSOREQ_0XFFFF_BYTE : 3,\n            /**\n             * The byte size used for characters with a char code greater than `0xFFFF`.\n             *\n             * This value defines the number of bytes required to encode characters in this range.\n             *\n             * - Default value: `4`\n             * - Represents characters with `charCode > 0xFFFF`\n             */\n            GREATER_0XFFFF_BYTE : 4,\n        };\n        shield = {\n            /**\n             * The URL used to enforce access restrictions.\n             *\n             * If this value is set, the system verifies whether the current location matches \n             * the specified URL. If not, access may be blocked.\n             *\n             * - Default value: `\"\"` (empty string, meaning no restriction)\n             * - Used in `shield.excute(hison: Hison)` to validate the URL.\n             */\n            shieldURL : '',\n            /**\n             * A list of IP addresses that are allowed to bypass security restrictions.\n             *\n             * When the shield mechanism is activated, only these IPs are granted access.\n             *\n             * - Default value: `[\"0:0:0:0:0:0:0:1\"]` (allows localhost)\n             * - Used in `shield.excute(hison: Hison)` to verify access permissions.\n             */\n            exposeIpList : ['0:0:0:0:0:0:0:1'],\n            /**\n             * Determines whether the `Hison` instance should be frozen to prevent modifications.\n             *\n             * If `true`, the `Hison` object and its properties are deeply frozen using `Object.freeze()`, \n             * ensuring that no further changes can be made.\n             *\n             * - Default value: `true`\n             * - Used in `shield.excute(hison: Hison)`, where `deepFreeze(hison)` is applied.\n             */\n            isFreeze : true,\n            /**\n             * Determines whether the browser's back navigation is allowed.\n             *\n             * If `false`, a mechanism is implemented to prevent the user from navigating back.\n             *\n             * - Default value: `false`\n             * - Used in `shield.excute(hison: Hison)`, where `history.pushState()` is applied \n             *   to disable the back button.\n             */\n            isPossibleGoBack : false,\n            /**\n             * Determines whether developer tools can be opened.\n             *\n             * If `false`, an event listener is added to detect developer mode access (F12 key, \n             * browser dev tools, resizing, etc.), and alerts the user if an attempt is detected.\n             *\n             * - Default value: `false`\n             * - Used in `shield.excute(hison: Hison)`, where `shieldFuncCreateBlockDevMode()` is triggered.\n             */\n            isPossibleOpenDevTool : false,\n        };\n        data = {\n            /**\n             * A function that allows customization of how specific objects are inserted into a `DataModel`.\n             *\n             * In `hisondev`, all values inserted into a `DataModel` are **copied** to maintain data integrity.\n             * However, certain JavaScript objects, such as `Date`, require a more flexible way of handling \n             * their copying process. Instead of manually defining conversion logic for every object type, \n             * `convertValue` provides a way for developers to customize how specific objects are transformed\n             * before being inserted into a `DataModel`.\n             *\n             * - By default, this function **returns the input value as is**.\n             * - Developers can override this function to implement custom conversion logic.\n             * - Used in `DataModel._deepCopy(object)`, where it is applied to non-plain objects.\n             *\n             * ### Usage in `DataModel`\n             * When copying an object, if it is not a plain `Object` or `Array`, `convertValue` is called:\n             * ```typescript\n             * if (object.constructor !== Object && object.constructor !== Array) {\n             *     const convertValue = customOption.data.convertValue(object);\n             *     return convertValue !== undefined ? convertValue : object;\n             * }\n             * ```\n             *\n             * ### Example: Customizing `convertValue` to Handle `Date` Objects\n             * ```typescript\n             * hison.setConvertValue((value: any) => {\n             *     return value instanceof Date ? value.getTime() : value;\n             * });\n             * ```\n             *\n             * - The above example ensures that when a `Date` object is inserted into `DataModel`, \n             *   it is converted into a timestamp (`number`) instead of being copied as a reference.\n             *\n             * @param value The value to be processed before being inserted into `DataModel`.\n             * @returns The customized or original value.\n             */\n            convertValue(value: any): any {return value;},\n        };\n        link = {\n            /**\n             * The default protocol used for API communication.\n             *\n             * - Default value: `'http://'`\n             * - Used in `ApiLink` to construct request URLs.\n             */\n            protocol : 'http://',\n            /**\n             * The default domain for API requests.\n             *\n             * - Default value: `'localhost:8080'`\n             * - Used in `ApiLink` when constructing full request URLs.\n             */\n            domain : 'localhost:8080',\n            /**\n             * The default controller path for API requests.\n             *\n             * This value is appended to the `protocol` and `domain` when making API calls.\n             *\n             * - Default value: `'/hison-api-link'`\n             * - Used in `ApiLink` when constructing API request URLs.\n             */\n            controllerPath : '/hison-api-link',\n            /**\n             * The timeout duration (in milliseconds) for API requests.\n             *\n             * If the request does not complete within this time, it will be aborted.\n             *\n             * - Default value: `10000` (10 seconds)\n             * - Used in `ApiLink._getFetch()` to set request timeouts.\n             */\n            timeout : 10000,\n            /**\n             * The default protocol used for WebSocket connections.\n             *\n             * - Default value: `'ws://'`\n             * - Used in `ApiLink` when initializing WebSocket communication.\n             */\n            webSocketProtocol : 'ws://',\n            /**\n             * The default WebSocket endpoint for caching-related communication.\n             *\n             * - Default value: `'/hison-websocket-endpoint'`\n             * - Used in `ApiLink` when establishing WebSocket connections.\n             */\n            webSocketEndPoint : '/hison-websocket-endpoint',\n            /**\n             * The caching limit for stored API responses.\n             *\n             * Determines the maximum number of cached API responses before old ones are removed.\n             *\n             * - Default value: `10`\n             * - Used in `ApiLink._getCachingResult()` for cache management.\n             */\n            cachingLimit : 10,\n            /**\n             * Hook function executed before making a `GET` request.\n             *\n             * This function can be used to modify request parameters or cancel the request.\n             *\n             * - If it returns `false`, the request will be canceled.\n             * - Default implementation returns `true`.\n             *\n             * @param resourcePath The API resource path being requested.\n             * @param options Additional request options.\n             * @returns `boolean | void` (Returning `false` cancels the request)\n             */\n            beforeGetRequst(resourcePath: string, options: Record<string, any>): boolean | void {return true;},\n            /**\n             * Hook function executed before making a `POST` request.\n             *\n             * This function allows modifying the request before it is sent.\n             *\n             * - If it returns `false`, the request will be canceled.\n             * - Default implementation returns `true`.\n             *\n             * @param requestDw The `DataWrapper` object containing the request data.\n             * @param options Additional request options.\n             * @returns `boolean | void` (Returning `false` cancels the request)\n             */\n            beforePostRequst(requestDw: InterfaceDataWrapper, options: Record<string, any>): boolean | void {return true;},\n            /**\n             * Hook function executed before making a `PUT` request.\n             *\n             * - If it returns `false`, the request will be canceled.\n             * - Default implementation returns `true`.\n             *\n             * @param requestDw The `DataWrapper` object containing the request data.\n             * @param options Additional request options.\n             * @returns `boolean | void` (Returning `false` cancels the request)\n             */\n            beforePutRequst(requestDw: InterfaceDataWrapper, options: Record<string, any>): boolean | void {return true;},\n            /**\n             * Hook function executed before making a `PATCH` request.\n             *\n             * - If it returns `false`, the request will be canceled.\n             * - Default implementation returns `true`.\n             *\n             * @param requestDw The `DataWrapper` object containing the request data.\n             * @param options Additional request options.\n             * @returns `boolean | void` (Returning `false` cancels the request)\n             */\n            beforePatchRequst(requestDw: InterfaceDataWrapper, options: Record<string, any>): boolean | void {return true;},\n            /**\n             * Hook function executed before making a `DELETE` request.\n             *\n             * - If it returns `false`, the request will be canceled.\n             * - Default implementation returns `true`.\n             *\n             * @param requestDw The `DataWrapper` object containing the request data.\n             * @param options Additional request options.\n             * @returns `boolean | void` (Returning `false` cancels the request)\n             */\n            beforeDeleteRequst(requestDw: InterfaceDataWrapper, options: Record<string, any>): boolean | void {return true;},\n            /**\n             * Intercepts and processes API responses before returning them to the caller.\n             *\n             * - If it returns `false`, the response is ignored.\n             * - Default implementation returns `true`.\n             *\n             * @param result The `DataWrapper` object containing the API response.\n             * @param response The raw `Response` object from the fetch request.\n             * @returns `boolean | void` (Returning `false` cancels further processing)\n             */\n            interceptApiResult(result: InterfaceDataWrapper | undefined, response: Response): boolean | void {return true;},\n            /**\n             * Intercepts and processes API errors before returning them to the caller.\n             *\n             * - If it returns `false`, the error is ignored.\n             * - Default implementation returns `true`.\n             *\n             * @param error The encountered error.\n             * @returns `boolean | void` (Returning `false` cancels further error handling)\n             */\n            interceptApiError(error: any): boolean | void {return true;},\n        };\n    }\n    class LRUCache {\n        constructor(limit: number) {\n            this._limit = limit;\n            this._cache = {};\n            this._keys = [];\n        }\n        private _limit: number;\n        private _cache: Record<string, Promise<{ data: any; response: Response; }>>;\n        private _keys: string[];\n        private _removeKey = (key: string) => {\n            const index = this._keys.indexOf(key);\n            if (index > -1) {\n                this._keys.splice(index, 1);\n            }\n        }\n        hasKey = (key: string): boolean => {\n            return this._cache.hasOwnProperty(key);\n        }\n        get = (key: string): Promise<{ data: any; response: Response; }> | null => {\n            if(!this.hasKey(key)) return null;\n            const value = hison.utils.deepCopyObject(this._cache[key]);\n            this._removeKey(key);\n            this._keys.push(key);\n            return value;\n        };\n        put = (key: string , value: Promise<{ data: any; response: Response; }>) => {\n            if (this.hasKey(key)) {\n                this.remove(key);\n            } else if (this._keys.length == this._limit) {\n                const oldestKey = this._keys.shift();\n                if(oldestKey !== undefined) delete this._cache[oldestKey];\n            }\n            this._cache[key] = hison.utils.deepCopyObject(value);\n            this._keys.push(key);\n        };\n        remove = (key: string): Promise<{ data: any; response: Response; }> | null => {\n            if(!this.hasKey(key)) return null;\n            this._removeKey(key);\n            const result = hison.utils.deepCopyObject(this._cache[key])\n            delete this._cache[key];\n            return result;\n        };\n        getAll = (): Record<string, Promise<{ data: any; response: Response; }>> => {\n            const result: Record<string, Promise<{ data: any; response: Response; }>> = {}\n            Object.keys(this._cache).forEach((key) => {\n                result[key] = hison.utils.deepCopyObject(this._cache[key]);\n            });\n            return result;\n        };\n        getKeys = (): string[] => {\n            const result: string[] = [];\n            this._keys.forEach((key) => {\n                result.push(key);\n            })\n            return result;\n        };\n        clear = () => {\n            this._cache = {};\n            this._keys = [];\n        };\n    };\n    class EventEmitter {\n        private events: { [eventName: string]: Array<(...args: any[]) => void> } = {};\n    \n        on = (eventName: string, listener: (...args: any[]) => void): void => {\n            if (!this.events[eventName]) {\n                this.events[eventName] = [];\n            }\n            this.events[eventName].push(listener);\n        };\n    \n        emit = (eventName: string, ...args: any[]): void => {\n            if (this.events[eventName]) {\n                this.events[eventName].forEach(listener => listener(...args));\n            }\n        };\n    };\n    class ApiLink {\n        constructor(eventEmitter: EventEmitter, cachingModule?: InterfaceCachingModule | null) {\n            this._eventEmitter = eventEmitter;\n            if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) {\n                this._cachingModule = cachingModule;\n            }\n        };\n        private _eventEmitter: EventEmitter;\n        private _cachingModule: InterfaceCachingModule | null = null;\n        private _getRsultDataWrapper = (resultData: any): any => {\n            let data = null;\n            if(resultData && resultData.constructor === Object && resultData.DATAWRAPPER === 'TRUE'\n            ) {\n                data = new hison.data.DataWrapper();\n                for(const key of Object.keys(resultData)) {\n                    if (resultData[key].constructor === Object || resultData[key].constructor === Array) {\n                        data.putDataModel(key, new hison.data.DataModel(resultData[key]));\n                    } else {\n                        if(key !== 'DATAWRAPPER') data.put(key, resultData[key]);\n                    }\n                }\n            } else {\n                data = resultData;\n            }\n            return data;\n        };\n        private _getCachingResult = async (resourcePath: string): Promise<{ data: any; response: Response; } | null> => {\n            if(this._cachingModule && this._cachingModule.isWebSocketConnection() === 1) {\n                const result = await this._cachingModule.get(resourcePath);\n                if(result && customOption.link.interceptApiResult(result.data, result.response) !== false) {\n                    return result;\n                };\n                return null;\n            }\n            return null;\n        };\n        private _getFetch = (methodName: string, requestPath: string, options: Record<string, any>, serviceCmd: string | null, requestData: any): Promise<any>[] => {\n            if(requestData && requestData.getIsDataWrapper && requestData.getIsDataWrapper()) { //1\n                if (serviceCmd) requestData.putString('cmd', serviceCmd);\n                requestData = requestData.getSerialized();\n            } else if (requestData && requestData.getIsDataModel && requestData.getIsDataModel()){  //2\n                requestData = requestData.getSerialized();\n            } else if (requestData && typeof requestData === 'object'){ //3\n                if (typeof requestData === 'string') {\n                    try {\n                        JSON.parse(requestData);\n                    } catch (e) {\n                        requestData = JSON.stringify({ data: requestData });\n                    }\n                } else if (Array.isArray(requestData)) {\n                    requestData = JSON.stringify(requestData);\n                } else if (typeof requestData === 'object') {\n                    if (serviceCmd && requestData.constructor === Object) {\n                        requestData.cmd = serviceCmd;\n                    }\n                    requestData = JSON.stringify(requestData);\n                } else {\n                    requestData = JSON.stringify({ data: requestData });\n                }\n            }\n            const fetchOptions: Record<string, any> = {\n                method: methodName,\n                headers: {'Content-Type': 'application/json'},\n                body: requestData\n            }\n            if (options.constructor !== Object) {\n                throw new Error('fetchOptions must be an object which contains key and value.');\n            }\n            let timeoutPromise = null;\n            Object.keys(options).forEach(key => {\n                if(key !== 'timeout') fetchOptions[key] = options[key];\n            });\n            if(options.timeout) {\n                if (typeof options.timeout !== 'number' || options.timeout <= 0 || !Number.isInteger(options.timeout)) {\n                    throw new Error('Timeout must be a positive integer.');\n                }\n                timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error('Request timed out')), options.timeout));\n            }\n            const fecthArr: Promise<any>[] = [fetch(requestPath, fetchOptions)];\n            if(timeoutPromise) fecthArr.push(timeoutPromise);\n            return fecthArr;\n        };\n        private _request = async (fecthInfo: any[], cachingKey: string) => {\n            const result = await Promise.race(fecthInfo)\n            .then((response: Response) => {\n                this._eventEmitter.emit('requestCompleted_Response', response);\n                const contentType = response.headers.get('Content-Type');\n                if (contentType && contentType.includes('application/json')) {\n                    return response.json().then(data => ({ data: data, response: response }));\n                } else if (contentType) {\n                    return response.text().then(text => ({ data: text ? text : null, response: response }));\n                } else {\n                    return { data: null, response: response };\n                }\n            })\n            .then(rtn => {\n                const resultData = rtn.data;\n                const data = this._getRsultDataWrapper(resultData);\n                this._eventEmitter.emit('requestCompleted_Data', { data: data, response: rtn.response });\n                if(this._cachingModule && this._cachingModule.isWebSocketConnection() === 1) this._cachingModule.put(cachingKey, Promise.resolve({ data: data, response: rtn.response }));\n                if(customOption.link.interceptApiResult(data, rtn.response) === false) return null;\n                return { data: data, response: rtn.response };\n            })\n            .catch(error => {\n                this._eventEmitter.emit('requestError', error);\n                if(customOption.link.interceptApiError(error) === false) return null;\n                return error;\n            });\n        \n            return result;\n        };\n        get = (resourcePath: string, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n            if(customOption.link.beforeGetRequst(resourcePath, options) === false) return Promise.resolve(null);\n            const METHOD_NAME = 'GET';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, resourcePath, options);\n            if(this._cachingModule && this._cachingModule.hasKey(resourcePath)) return this._getCachingResult(resourcePath);\n            return this._request(this._getFetch(METHOD_NAME, customOption.link.protocol + customOption.link.domain + resourcePath, options, null, null), resourcePath);\n        };\n        post = async (requestData: any, serviceCmd: string, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n            if(customOption.link.beforePostRequst(requestData, options) === false) return Promise.resolve(null);\n            const METHOD_NAME = 'POST';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, customOption.link.protocol + customOption.link.domain + customOption.link.controllerPath, options, serviceCmd, requestData), serviceCmd);\n        };\n        put = async (requestData: any, serviceCmd: string, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n            if(customOption.link.beforePutRequst(requestData, options) === false) return Promise.resolve(null);\n            const METHOD_NAME = 'PUT';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, customOption.link.protocol + customOption.link.domain + customOption.link.controllerPath, options, serviceCmd, requestData), serviceCmd);\n        };\n        patch = async (requestData: any, serviceCmd: string, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n            if(customOption.link.beforePatchRequst(requestData, options) === false) return Promise.resolve(null);\n            const METHOD_NAME = 'PATCH';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, customOption.link.protocol + customOption.link.domain + customOption.link.controllerPath, options, serviceCmd, requestData), serviceCmd);\n        };\n        delete = async (requestData: any, serviceCmd: string, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n            if(customOption.link.beforeDeleteRequst(requestData, options) === false) return Promise.resolve(null);\n            const METHOD_NAME = 'DELETE';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, customOption.link.protocol + customOption.link.domain + customOption.link.controllerPath, options, serviceCmd, requestData), serviceCmd);\n        };\n        head = async (resourcePath: string, options: Record<string, any> = {}): Promise<Record<string, string>> => {\n            const url = customOption.link.protocol + customOption.link.domain + resourcePath;\n            return fetch(url, { method: 'HEAD', ...options })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HEAD request failed with status: ${response.status}`);\n                    }\n                    const headers: Record<string, any> = {};\n                    response.headers.forEach((value, key) => {\n                        headers[key] = value;\n                    });\n                    return headers;\n                })\n                .catch(error => {\n                    return Promise.reject(error);\n                });\n        };\n        options = async (resourcePath: string, options: Record<string, any> = {}): Promise<string[]> => {\n            const url = customOption.link.protocol + customOption.link.domain + resourcePath;\n            return fetch(url, { method: 'OPTIONS', ...options })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`OPTIONS request failed with status: ${response.status}`);\n                    }\n                    const allowHeader = response.headers.get('Allow');\n                    if (allowHeader) {\n                        return allowHeader.split(',').map(method => method.trim());\n                    }\n                    return []\n                })\n                .catch(error => {\n                    return Promise.reject(error);\n                });\n        };\n        getURL = (url: string, options: Record<string, any> ={}): Promise<{ data: any; response: Response; } | null> => {\n            const METHOD_NAME = 'GET';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, url, options);\n            if(this._cachingModule && this._cachingModule.hasKey(url)) return this._getCachingResult(url);\n            return this._request(this._getFetch(METHOD_NAME, url, options, null, null), url);\n        };\n        postURL = async (url: string, requestData: any, serviceCmd: string, options: Record<string, any> ={}): Promise<{ data: any; response: Response; } | null> => {\n            const METHOD_NAME = 'POST';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(url + serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, url, options, serviceCmd, requestData), url + serviceCmd);\n        };\n        putURL = async (url: string, requestData: any, serviceCmd: string, options: Record<string, any> ={}): Promise<{ data: any; response: Response; } | null> => {\n            const METHOD_NAME = 'PUT';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(url + serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, url, options, serviceCmd, requestData), url + serviceCmd);\n        };\n        patchURL = async (url: string, requestData: any, serviceCmd: string, options: Record<string, any> ={}): Promise<{ data: any; response: Response; } | null> => {\n            const METHOD_NAME = 'PATCH';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(url + serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, url, options, serviceCmd, requestData), url + serviceCmd);\n        };\n        deleteURL = async (url: string, requestData: any, serviceCmd: string, options: Record<string, any> ={}): Promise<{ data: any; response: Response; } | null> => {\n            const METHOD_NAME = 'DELETE';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(url + serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, url, options, serviceCmd, requestData), url + serviceCmd);\n        };\n        headURL = async (url: string, options: Record<string, any> = {}): Promise<Record<string, string>> => {\n            return fetch(url, { method: 'HEAD', ...options })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HEAD request failed with status: ${response.status}`);\n                    }\n                    const headers: Record<string, any> = {};\n                    response.headers.forEach((value, key) => {\n                        headers[key] = value;\n                    });\n                    return headers;\n                })\n                .catch(error => {\n                    return Promise.reject(error);\n                });\n        };\n        optionsURL = async (url: string, options: Record<string, any> = {}): Promise<string[]> => {\n            return fetch(url, { method: 'OPTIONS', ...options })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`OPTIONS request failed with status: ${response.status}`);\n                    }\n                    const allowHeader = response.headers.get('Allow');\n                    if (allowHeader) {\n                        return allowHeader.split(',').map(method => method.trim());\n                    }\n                    return []\n                })\n                .catch(error => {\n                    return Promise.reject(error);\n                });\n        };\n        onEventEmit = (methodName: string, eventName: string, eventFunc: (...args: any[]) => void) => {\n            if (!eventName) {\n                throw new Error('Event name is required.');\n            }\n            if (!eventFunc) {\n                throw new Error('Event function is required.');\n            }\n            if (typeof eventName !== 'string') {\n                throw new Error('Event name must be a string.');\n            }\n            const requestEventName = 'requestStarted_' + methodName;\n            if ([requestEventName,\n                 'requestCompleted_Response',\n                 'requestCompleted_Data',\n                 'requestError'].indexOf(eventName) === -1) {\n                throw new Error('Invalid event name.'\n                + '\\nInserted event name: ' + eventName\n                + '\\nValid event names are:'\n                + `\\n${requestEventName}`\n                + '\\nrequestCompleted_Response'\n                + '\\nrequestCompleted_Data'\n                + '\\nrequestError'\n                );\n            }\n            if (typeof eventFunc !== 'function') {\n                throw new Error('Event function must be a function.');\n            }\n            this._eventEmitter.on(eventName, eventFunc);\n        };\n    };\n    class HisonCore{\n        utils = {\n            /**\n             * Checks if the given string contains only alphabetic characters (A-Z, a-z).\n             *\n             * - Returns `true` if the string consists solely of alphabetic characters.\n             * - Returns `false` if the string contains numbers, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only alphabetic characters, otherwise `false`.\n             *\n             * @example\n             * isAlpha(\"Hello\"); // true\n             * isAlpha(\"Hello123\"); // false\n             * isAlpha(\"!@#\"); // false\n             */\n            isAlpha(str: string): boolean {\n                return /^[A-Za-z]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only alphabetic characters (A-Z, a-z) and numbers (0-9).\n             *\n             * - Returns `true` if the string consists solely of alphabetic characters and/or numbers.\n             * - Returns `false` if the string contains symbols or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only alphabetic characters and numbers, otherwise `false`.\n             *\n             * @example\n             * isAlphaNumber(\"Hello123\"); // true\n             * isAlphaNumber(\"Hello!\"); // false\n             * isAlphaNumber(\"123\"); // true\n             */\n            isAlphaNumber(str: string): boolean {\n                return /^[A-Za-z0-9]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only numeric characters (0-9).\n             *\n             * - Returns `true` if the string consists solely of numbers.\n             * - Returns `false` if the string contains letters, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only numeric characters, otherwise `false`.\n             *\n             * @example\n             * isNumber(\"123456\"); // true\n             * isNumber(\"123a\"); // false\n             * isNumber(\"!@#\"); // false\n             */\n            isNumber(str: string): boolean {\n                return /^[0-9]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only numeric characters (0-9) and symbols.\n             *\n             * - Returns `true` if the string consists solely of numbers and/or symbols.\n             * - Returns `false` if the string contains alphabetic characters or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only numeric characters and symbols, otherwise `false`.\n             *\n             * @example\n             * isNumberSymbols(\"123!@#\"); // true\n             * isNumberSymbols(\"123ABC\"); // false\n             * isNumberSymbols(\"!@#$%^\"); // true\n             */\n            isNumberSymbols(str: string): boolean {\n                return /^[0-9!@#$%^&*()_+\\-=\\[\\]{};':'\\\\|,.<>\\/?~]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains any symbols.\n             *\n             * - Returns `true` if the string contains at least one symbol.\n             * - Returns `false` if the string has only alphanumeric characters or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains symbols, otherwise `false`.\n             *\n             * @example\n             * isIncludeSymbols(\"Hello!\"); // true\n             * isIncludeSymbols(\"123\"); // false\n             * isIncludeSymbols(\"password@123\"); // true\n             */\n            isIncludeSymbols(str: string): boolean {\n                return /[!@#$%^&*()_+\\-=\\[\\]{};':'\\\\|,.<>\\/?~]/.test(str);\n            },\n            /**\n             * Checks if the given string contains only lowercase alphabetic characters (a-z).\n             *\n             * - Returns `true` if the string consists solely of lowercase letters.\n             * - Returns `false` if the string contains uppercase letters, numbers, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only lowercase alphabetic characters, otherwise `false`.\n             *\n             * @example\n             * isLowerAlpha(\"hello\"); // true\n             * isLowerAlpha(\"Hello\"); // false\n             * isLowerAlpha(\"hello123\"); // false\n             */\n            isLowerAlpha(str: string): boolean {\n                return /^[a-z]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only lowercase alphabetic characters (a-z) and numbers (0-9).\n             *\n             * - Returns `true` if the string consists solely of lowercase letters and/or numbers.\n             * - Returns `false` if the string contains uppercase letters, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only lowercase letters and numbers, otherwise `false`.\n             *\n             * @example\n             * isLowerAlphaAndNumber(\"hello123\"); // true\n             * isLowerAlphaAndNumber(\"Hello123\"); // false\n             * isLowerAlphaAndNumber(\"hello!\"); // false\n             */\n            isLowerAlphaAndNumber(str: string): boolean {\n                return /^[a-z0-9]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only uppercase alphabetic characters (A-Z).\n             *\n             * - Returns `true` if the string consists solely of uppercase letters.\n             * - Returns `false` if the string contains lowercase letters, numbers, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only uppercase alphabetic characters, otherwise `false`.\n             *\n             * @example\n             * isUpperAlpha(\"HELLO\"); // true\n             * isUpperAlpha(\"Hello\"); // false\n             * isUpperAlpha(\"HELLO123\"); // false\n             */\n            isUpperAlpha(str: string): boolean {\n                return /^[A-Z]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only uppercase alphabetic characters (A-Z) and numbers (0-9).\n             *\n             * - Returns `true` if the string consists solely of uppercase letters and/or numbers.\n             * - Returns `false` if the string contains lowercase letters, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only uppercase letters and numbers, otherwise `false`.\n             *\n             * @example\n             * isUpperAlphaNumber(\"HELLO123\"); // true\n             * isUpperAlphaNumber(\"Hello123\"); // false\n             * isUpperAlphaNumber(\"HELLO!\"); // false\n             */\n            isUpperAlphaNumber(str: string): boolean {\n                return /^[A-Z0-9]+$/.test(str);\n            },\n            /**\n             * Checks if the given value is a numeric value.\n             *\n             * - Returns `true` if the value is a finite number.\n             * - Returns `false` if the value is `NaN`, `Infinity`, or not a number.\n             *\n             * @param num The value to be checked.\n             * @returns `true` if the value is numeric, otherwise `false`.\n             *\n             * @example\n             * isNumeric(123); // true\n             * isNumeric(\"123\"); // true\n             * isNumeric(\"abc\"); // false\n             * isNumeric(Infinity); // false\n             * isNumeric(NaN); // false\n             */\n            isNumeric(num: any): boolean {\n                return !isNaN(num) && isFinite(num);\n            },\n            /**\n             * Checks if the given value is an integer.\n             *\n             * - Returns `true` if the value is a finite integer.\n             * - Returns `false` if the value is a decimal, `NaN`, `Infinity`, or not a number.\n             *\n             * @param num The value to be checked.\n             * @returns `true` if the value is an integer, otherwise `false`.\n             *\n             * @example\n             * isInteger(10); // true\n             * isInteger(\"10\"); // true\n             * isInteger(10.5); // false\n             * isInteger(\"abc\"); // false\n             * isInteger(Infinity); // false\n             */\n            isInteger(num: any): boolean {\n                if (!hison.utils.isNumeric(num)) return false;\n                num = Number(num);\n                return Number.isInteger(num);\n            },\n            /**\n             * Checks if the given value is a positive integer.\n             *\n             * - Returns `true` if the value is a finite integer greater than zero.\n             * - Returns `false` if the value is zero, a negative number, a decimal, `NaN`, `Infinity`, or not a number.\n             *\n             * @param num The value to be checked.\n             * @returns `true` if the value is a positive integer, otherwise `false`.\n             *\n             * @example\n             * isPositiveInteger(10); // true\n             * isPositiveInteger(\"10\"); // true\n             * isPositiveInteger(0); // false\n             * isPositiveInteger(-5); // false\n             * isPositiveInteger(10.5); // false\n             */\n            isPositiveInteger(num: any): boolean {\n                if (!hison.utils.isNumeric(num)) return false;\n                num = Number(num);\n                return Number.isInteger(num) && num > 0;\n            },\n            /**\n             * Checks if the given value is a negative integer.\n             *\n             * - Returns `true` if the value is a finite integer less than zero.\n             * - Returns `false` if the value is zero, a positive number, a decimal, `NaN`, `Infinity`, or not a number.\n             *\n             * @param num The value to be checked.\n             * @returns `true` if the value is a negative integer, otherwise `false`.\n             *\n             * @example\n             * isNegativeInteger(-10); // true\n             * isNegativeInteger(\"-10\"); // true\n             * isNegativeInteger(0); // false\n             * isNegativeInteger(5); // false\n             * isNegativeInteger(-10.5); // false\n             */\n            isNegativeInteger(num: any): boolean {\n                if (!hison.utils.isNumeric(num)) return false;\n                num = Number(num);\n                return Number.isInteger(num) && num < 0;\n            },\n            /**\n             * Checks if the given value is an array.\n             *\n             * - Returns `true` if the value is an array.\n             * - Returns `false` if the value is `null`, `undefined`, an object, or any other data type.\n             *\n             * @param arr The value to be checked.\n             * @returns `true` if the value is an array, otherwise `false`.\n             *\n             * @example\n             * isArray([1, 2, 3]); // true\n             * isArray(\"Hello\"); // false\n             * isArray({ key: \"value\" }); // false\n             * isArray(null); // false\n             */\n            isArray(arr: any): boolean {\n                return Array.isArray(arr) && arr.constructor === Array;\n            },\n            /**\n             * Checks if the given value is a plain object.\n             *\n             * - Returns `true` if the value is a non-null object and not an array.\n             * - Returns `false` if the value is `null`, an array, or any other data type.\n             *\n             * @param obj The value to be checked.\n             * @returns `true` if the value is a plain object, otherwise `false`.\n             *\n             * @example\n             * isObject({ key: \"value\" }); // true\n             * isObject([1, 2, 3]); // false\n             * isObject(null); // false\n             * isObject(\"Hello\"); // false\n             */\n            isObject(obj: any): boolean {\n                return obj !== null && typeof obj === 'object' && !Array.isArray(obj) && obj.constructor === Object;\n            },\n            /**\n             * Checks if the given value is a valid date.\n             *\n             * - Accepts a `DateObject` or a string representation of a date.\n             * - Returns `true` if the date is valid based on its year, month, and day.\n             * - Returns `false` if the date is improperly formatted or does not exist.\n             *\n             * @param date The value to be checked (as a `DateObject` or string).\n             * @returns `true` if the value is a valid date, otherwise `false`.\n             *\n             * @example\n             * isDate(\"2024-02-29\"); // true (valid leap year date)\n             * isDate(\"2023-02-29\"); // false (February 29 does not exist in 2023)\n             * isDate({ y: 2023, M: 12, d: 31 }); // true\n             * isDate(\"invalid-date\"); // false\n             */\n            isDate(date: DateObject | string | null): boolean {\n                if(!date) return false;\n                const dateObj: DateObject = hison.utils.isObject(date) ? date as DateObject : hison.utils.getDateObject(date as string);\n        \n                let yyyy: string = hison.utils.getToString(dateObj.y);\n                let MM: string = hison.utils.getToString(dateObj.M);\n                let dd: string = hison.utils.getToString(dateObj.d);\n        \n                let result = true;\n                try {\n                    if (!hison.utils.isInteger(yyyy) || !hison.utils.isInteger(MM) || !hison.utils.isInteger(dd)) {\n                        return false;\n                    }\n        \n                    if (!yyyy) {\n                        return false;\n                    }\n                    if (!MM) {\n                        MM = '01';\n                    } else if (MM.length === 1) {\n                        MM = '0' + MM;\n                    }\n                    if (!dd) {\n                        dd = '01';\n                    } else if (dd.length === 1) {\n                        dd = '0' + dd;\n                    }\n        \n                    if (hison.utils.getToNumber(yyyy+MM+dd) < 16000101) {\n                        const date = new Date(hison.utils.getToNumber(yyyy), hison.utils.getToNumber(MM) - 1, hison.utils.getToNumber(dd));\n                        if (date.getFullYear() !== hison.utils.getToNumber(yyyy) || date.getMonth() !== hison.utils.getToNumber(MM) - 1 || date.getDate() !== hison.utils.getToNumber(dd)) {\n                            return false;\n                        }\n                        return true;\n                    }\n                    else {\n                        const dateRegex = /^(?=\\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\\x20|$))|(?:2[0-8]|1\\d|0?[1-9]))([-.\\/])(?:1[012]|0?[1-9])\\1(?:1[6-9]|[2-9]\\d)?\\d\\d(?:(?=\\x20\\d)\\x20|$))?(((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\x20[AP]M))|([01]\\d|2[0-3])(:[0-5]\\d){1,2})?$/;\n                        result = dateRegex.test(dd+'-'+MM+'-'+yyyy);\n                    }\n                    \n                } catch (err) {\n                    result = false;\n                }    \n                return result;\n            },\n            /**\n             * Checks if the given value is a valid time.\n             *\n             * - Accepts a `TimeObject` or a string representation of a time.\n             * - Returns `true` if the time consists of valid hours, minutes, and seconds.\n             * - Returns `false` if any part of the time is invalid or improperly formatted.\n             *\n             * @param time The value to be checked (as a `TimeObject` or string).\n             * @returns `true` if the value is a valid time, otherwise `false`.\n             *\n             * @example\n             * isTime(\"14:30:59\"); // true\n             * isTime({ h: 23, m: 59, s: 59 }); // true\n             * isTime(\"25:00:00\"); // false (invalid hour)\n             * isTime(\"12:60:00\"); // false (invalid minute)\n             * isTime(\"12:30:61\"); // false (invalid second)\n             */\n            isTime(time: TimeObject | string | null): boolean {\n                if(!time) return false;\n                const timeObj: TimeObject = hison.utils.isObject(time) ? time as TimeObject : hison.utils.getTimeObject(time as string);\n        \n                let hh: number | null = timeObj.h;\n                let mm: number | null = timeObj.m;\n                let ss: number | null = timeObj.s;\n        \n                if (!hison.utils.isInteger(hh) || !hison.utils.isInteger(mm) || !hison.utils.isInteger(ss)) {\n                    return false;\n                }\n                /*\n                hh = parseInt(hh, 10);\n                mm = parseInt(mm, 10);\n                ss = parseInt(ss, 10);\n                */\n        \n                function isValidTimePart(time: number | null, max: number): boolean {\n                    if(!time) return false;\n                    return !isNaN(time) && time >= 0 && time <= max;\n                }\n            \n                return isValidTimePart(hh, 23) && isValidTimePart(mm, 59) && isValidTimePart(ss, 59);\n            },\n            /**\n             * Checks if the given value is a valid datetime.\n             *\n             * - Accepts a `DateTimeObject` or a string representation of a datetime.\n             * - Returns `true` if both the date and time components are valid.\n             * - Returns `false` if either the date or time is invalid or improperly formatted.\n             *\n             * @param datetime The value to be checked (as a `DateTimeObject` or string).\n             * @returns `true` if the value is a valid datetime, otherwise `false`.\n             *\n             * @example\n             * isDatetime(\"2024-02-29 14:30:59\"); // true\n             * isDatetime({ y: 2023, M: 12, d: 31, h: 23, m: 59, s: 59 }); // true\n             * isDatetime(\"2023-02-29 12:00:00\"); // false (invalid date)\n             * isDatetime(\"2024-02-28 25:00:00\"); // false (invalid time)\n             */\n            isDatetime(datetime: DateTimeObject | string): boolean {\n                const datetimeObj: DateTimeObject | null = hison.utils.isObject(datetime) ? datetime as DateTimeObject : hison.utils.getDatetimeObject(datetime as string);\n                if (!hison.utils.isDate(datetimeObj)) return false;\n                if (!hison.utils.isTime(datetimeObj)) return false;\n                return true;\n            },\n            /**\n             * Checks if the given string is a valid email address.\n             *\n             * - Returns `true` if the string follows the standard email format.\n             * - Returns `false` if the string does not match the email pattern.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string is a valid email address, otherwise `false`.\n             *\n             * @example\n             * isEmail(\"user@example.com\"); // true\n             * isEmail(\"user.name@domain.co\"); // true\n             * isEmail(\"user@domain\"); // false (missing top-level domain)\n             * isEmail(\"invalid-email\"); // false\n             */\n            isEmail(str: string): boolean {\n                const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]{2,}$/;\n                return emailPattern.test(str);\n            },\n            /**\n             * Checks if the given string is a valid URL.\n             *\n             * - Returns `true` if the string follows the standard URL format.\n             * - Returns `false` if the string does not match the URL pattern.\n             *\n             * @param urlStr The string to be checked.\n             * @returns `true` if the string is a valid URL, otherwise `false`.\n             *\n             * @example\n             * isURL(\"https://example.com\"); // true\n             * isURL(\"ftp://files.server.com\"); // true\n             * isURL(\"www.example.com\"); // false (missing protocol)\n             * isURL(\"invalid-url\"); // false\n             */\n            isURL(urlStr: string): boolean {\n                const urlPattern = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i;\n                return urlPattern.test(urlStr);\n            },\n            /**\n             * Checks if the given string matches the specified mask pattern.\n             *\n             * - A mask defines expected character types at each position:\n             *   - `'A'` expects an uppercase letter (A-Z).\n             *   - `'a'` expects a lowercase letter (a-z).\n             *   - `'9'` expects a numeric digit (0-9).\n             *   - Any other character in the mask must match exactly.\n             * - Returns `true` if the string fully matches the mask pattern.\n             * - Returns `false` if the string does not match the mask or has a different length.\n             *\n             * @param str The string to be validated.\n             * @param mask The mask pattern defining expected character types.\n             * @returns `true` if the string matches the mask pattern, otherwise `false`.\n             *\n             * @example\n             * isValidMask(\"ABC123\", \"AAA999\"); // true\n             * isValidMask(\"abc123\", \"AAA999\"); // false (lowercase letters don't match uppercase mask)\n             * isValidMask(\"abc-123\", \"aaa-999\"); // true\n             * isValidMask(\"abcd123\", \"aaa-999\"); // false (length mismatch)\n             */\n            isValidMask(str: string, mask: string): boolean {\n                if (str.length !== mask.length) {\n                    return false;\n                }\n            \n                for (let i = 0; i < str.length; i++) {\n                    const char = str.charAt(i);\n                    const maskChar = mask.charAt(i);\n            \n                    switch (maskChar) {\n                        case 'A':\n                            if (char < 'A' || char > 'Z') return false;\n                            break;\n                        case 'a':\n                            if (char < 'a' || char > 'z') return false;\n                            break;\n                        case '9':\n                            if (isNaN(parseInt(char))) return false;\n                            break;\n                        default:\n                            if (char !== maskChar) return false;\n                    }\n                }\n                return true;\n            },\n            /**\n             * Extracts and returns the year, month, and day from a given date.\n             *\n             * - If the input is a `Date` object, it extracts the year, month, and day.\n             * - If the input is a string, it attempts to parse it in formats:\n             *   - `\"YYYY-MM-DD\"`\n             *   - `\"YYYY/MM/DD\"`\n             *   - `\"YYYYMMDD\"`\n             * - If parsing fails, it returns an object with `null` values.\n             *\n             * @param date A `Date` object or a date string in a supported format.\n             * @returns An object containing the year (`y`), month (`M`), and day (`d`).\n             *\n             * @example\n             * getDateObject(\"2024-02-05\"); // { y: 2024, M: 2, d: 5 }\n             * getDateObject(\"20240205\"); // { y: 2024, M: 2, d: 5 }\n             * getDateObject(new Date(2024, 1, 5)); // { y: 2024, M: 2, d: 5 }\n             * getDateObject(\"invalid\"); // { y: null, M: null, d: null }\n             */\n            getDateObject(date: Date | string): DateObject {\n                const result: {\n                   y: number | null;\n                   M: number | null;\n                   d: number | null; \n                } = {y: null, M: null, d: null};\n                if (typeof date === 'string') {\n                    let year: number | null = null, month: number | null = null, day: number | null = null;\n                    date = hison.utils.getToString(date);\n                    date = date.split(' ')[0];\n                    if (date.includes('-')) {\n                        [year, month, day] = date.split('-').map(num => parseInt(num, 10));\n                    } else if (date.includes('/')) {\n                        [year, month, day] = date.split('/').map(num => parseInt(num, 10));\n                    } else if (date.length === 8) {\n                        year = parseInt(date.substring(0, 4), 10);\n                        month = parseInt(date.substring(4, 6), 10);\n                        day = parseInt(date.substring(6, 8), 10);\n                    } else {\n                        return result;\n                    }\n                    result.y = year;\n                    result.M = month;\n                    result.d = day;\n                } else if (date instanceof Date) {\n                    result.y = date.getFullYear();\n                    result.M = date.getMonth() + 1;\n                    result.d = date.getDate();\n                }\n                return result\n            },\n            /**\n             * Extracts and returns the hours, minutes, and seconds from a given time.\n             *\n             * - If the input is a `Date` object, it extracts the hour, minute, and second.\n             * - If the input is a string, it attempts to parse it in formats:\n             *   - `\"HH:MM:SS\"`\n             *   - `\"HHMMSS\"`\n             * - If the input is a datetime string (`\"YYYY-MM-DD HH:MM:SS\"`), it extracts only the time part.\n             * - If parsing fails, it returns an object with `null` values.\n             *\n             * @param time A `Date` object or a time string in a supported format.\n             * @returns An object containing the hours (`h`), minutes (`m`), and seconds (`s`).\n             *\n             * @example\n             * getTimeObject(\"14:30:45\"); // { h: 14, m: 30, s: 45 }\n             * getTimeObject(\"143045\"); // { h: 14, m: 30, s: 45 }\n             * getTimeObject(\"2024-02-05 14:30:45\"); // { h: 14, m: 30, s: 45 }\n             * getTimeObject(new Date(2024, 1, 5, 14, 30, 45)); // { h: 14, m: 30, s: 45 }\n             * getTimeObject(\"invalid\"); // { h: null, m: null, s: null }\n             */\n            getTimeObject(time: Date | string): TimeObject {\n                const result: {\n                    h: number | null;\n                    m: number | null;\n                    s: number | null;\n                } = {h: null, m: null, s: null};\n                if (typeof time === 'string') {\n                    let hours: number | null = null, minutes: number | null = null, seconds: number | null = null;\n                    time = hison.utils.getToString(time);\n                    const dateArr = time.split(' ');\n                    time = dateArr.length > 1 ? dateArr[1] : time;\n            \n                    if (time.includes(':')) {\n                        [hours, minutes, seconds] = time.split(':').map(num => parseInt(num, 10));\n                    } else if (time.length === 6) {\n                        hours = parseInt(time.substring(0, 2), 10);\n                        minutes = parseInt(time.substring(2, 4), 10);\n                        seconds = parseInt(time.substring(4, 6), 10);\n                    } else {\n                        return { h: null, m: null, s: null };\n                    }\n                    result.h = hours;\n                    result.m = minutes;\n                    result.s = seconds;\n                } else if (time instanceof Date) {\n                    result.h = time.getHours();\n                    result.m = time.getMinutes();\n                    result.s = time.getSeconds();\n                }\n                return result;\n            },\n            /**\n             * Extracts and returns the year, month, day, hours, minutes, and seconds from a given datetime.\n             *\n             * - If the input is a `Date` object, it extracts all date and time components.\n             * - If the input is a string, it attempts to parse it in formats:\n             *   - `\"YYYY-MM-DD HH:MM:SS\"`\n             *   - `\"YYYY/MM/DD HH:MM:SS\"`\n             *   - `\"YYYYMMDDHHMMSS\"`\n             * - If the input is a date-only string (`\"YYYY-MM-DD\"`), the time defaults to `00:00:00`.\n             * - If parsing fails, it returns `null`.\n             *\n             * @param datetime A `Date` object or a datetime string in a supported format.\n             * @returns An object containing the year (`y`), month (`M`), day (`d`), hours (`h`), minutes (`m`), and seconds (`s`), or `null` if parsing fails.\n             *\n             * @example\n             * getDatetimeObject(\"2024-02-05 14:30:45\"); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\n             * getDatetimeObject(\"20240205143045\"); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\n             * getDatetimeObject(\"2024-02-05\"); // { y: 2024, M: 2, d: 5, h: 0, m: 0, s: 0 }\n             * getDatetimeObject(new Date(2024, 1, 5, 14, 30, 45)); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\n             * getDatetimeObject(\"invalid\"); // null\n             */\n            getDatetimeObject(datetime: Date | string): DateTimeObject | null {\n                if (typeof datetime === 'string') {\n                    datetime = hison.utils.getToString(datetime);\n                    const datetimeArr = datetime.split(' ');\n                    const dateObj = datetimeArr[0];\n                    const timeObj = datetimeArr.length > 1 ? datetimeArr[1] as string : '';\n                    return Object.assign({}, hison.utils.getDateObject(dateObj), hison.utils.getTimeObject(timeObj));\n                }\n                if (datetime instanceof Date) {\n                    return {\n                        y : datetime.getFullYear(),\n                        M : datetime.getMonth() + 1,\n                        d : datetime.getDate(),\n                        h : datetime.getHours(),\n                        m : datetime.getMinutes(),\n                        s : datetime.getSeconds(),\n                    }\n                }\n                return null;\n            },\n\n            /**\n             * Adds a specified amount of time to a given date or datetime.\n             *\n             * - Accepts a `DateTimeObject`, `DateObject`, or a date string.\n             * - Supports adding years (`'y'`), months (`'M'`), days (`'d'`), hours (`'h'`), minutes (`'m'`), and seconds (`'s'`).\n             * - If `addType` is omitted or invalid, it defaults to adding days.\n             * - If `format` is provided, returns a formatted string; otherwise, returns a `DateTimeObject`.\n             *\n             * @param datetime The original datetime as an object or string.\n             * @param addValue The amount to add (positive or negative).\n             * @param addType The unit of time to add (`'y'`, `'M'`, `'d'`, `'h'`, `'m'`, `'s'`).\n             * @param format Optional format string for the output. default : 'yyyy-MM-dd' or 'yyyy-MM-dd hh:mm:ss'\n             * @returns The updated datetime as an object or formatted string.\n             *\n             * @example\n             * addDate(\"2024-02-05\", 1, \"d\"); // { y: 2024, M: 2, d: 6 }\n             * addDate(\"2024-02-05\", -1, \"M\"); // { y: 2024, M: 1, d: 5 }\n             * addDate(\"2024-02-05 14:30:00\", 2, \"h\"); // { y: 2024, M: 2, d: 5, h: 16, m: 30, s: 0 }\n             * addDate(\"2024-02-05\", 1, \"d\", \"yyyy-MM-dd\"); // \"2024-02-06\"\n             */\n            addDate(datetime: DateTimeObject | DateObject | string, addValue: string | number = 0, addType: string = '', format: string = ''): DateTimeObject | string {\n                const datetimeObj: DateTimeObject = hison.utils.isObject(datetime) ? hison.utils.deepCopyObject(datetime) : hison.utils.getDatetimeObject(datetime as string);\n                if (!format) {\n                    if (datetimeObj.h === undefined || datetimeObj.h === null) {\n                        format = customOption.utils.dateFormat\n                    }\n                    else {\n                        format = customOption.utils.datetimeFormat;\n                    }\n                }\n                \n                if (!hison.utils.isInteger(addValue)) throw new Error(`ER0001 Please enter a valid value.\\n=>${JSON.stringify(addValue)}`);\n                addValue = hison.utils.getToNumber(addValue);\n\n                datetimeObj.M = datetimeObj.M === null || datetimeObj.M === undefined ? 1 : datetimeObj.M;\n                datetimeObj.d = datetimeObj.d === null || datetimeObj.d === undefined ? 1 : datetimeObj.d;\n                datetimeObj.h = datetimeObj.h === null || datetimeObj.h === undefined ? 0 : datetimeObj.h;\n                datetimeObj.m = datetimeObj.m === null || datetimeObj.m === undefined ? 0 : datetimeObj.m;\n                datetimeObj.s = datetimeObj.s === null || datetimeObj.s === undefined ? 0 : datetimeObj.s;\n        \n                if (!hison.utils.isDate(datetimeObj)) throw new Error(`ER0002 Please enter a valid date.\\n=>${JSON.stringify(datetime)}`);\n                if (!hison.utils.isTime(datetimeObj)) throw new Error(`ER0003 Please enter a valid date.\\n=>${JSON.stringify(datetime)}`);\n                if (datetimeObj.y === null || datetimeObj.M === null || datetimeObj.d === null) {\n                    throw new Error(`ER0002 Please enter a valid date.\\n=>${JSON.stringify(datetime)}`);\n                }\n\n                const d = new Date(datetimeObj.y, datetimeObj.M - 1, datetimeObj.d, datetimeObj.h, datetimeObj.m, datetimeObj.s);\n            \n                switch (addType) {\n                    case 'y':\n                        d.setFullYear(d.getFullYear() + addValue);\n                        break;\n                    case 'M':\n                        d.setMonth(d.getMonth() + addValue);\n                        break;\n                    case 'd':\n                        d.setDate(d.getDate() + addValue);\n                        break;\n                    case 'h':\n                        d.setHours(d.getHours() + addValue);\n                        break;\n                    case 'm':\n                        d.setMinutes(d.getMinutes() + addValue);\n                        break;\n                    case 's':\n                        d.setSeconds(d.getSeconds() + addValue);\n                        break;\n                    default:\n                        d.setDate(d.getDate() + addValue);\n                }\n        \n                const rtnObj = {\n                    y: d.getFullYear(),\n                    M: (d.getMonth() + 1),\n                    d: d.getDate(),\n                    h: d.getHours(),\n                    m: d.getMinutes(),\n                    s: d.getSeconds()\n                }\n        \n                return hison.utils.isObject(datetime) ? rtnObj : hison.utils.getDateWithFormat(rtnObj, format);\n            },\n            /**\n             * Calculates the difference between two dates or datetimes.\n             *\n             * - Accepts `DateTimeObject`, `DateObject`, or a string representation of a date or datetime.\n             * - If `diffType` is specified, it returns the difference in the given unit:\n             *   - `'y'`: Years\n             *   - `'M'`: Months\n             *   - `'d'`: Days\n             *   - `'h'`: Hours\n             *   - `'m'`: Minutes\n             *   - `'s'`: Seconds\n             * - If `diffType` is omitted or invalid, it defaults to calculating the difference in days.\n             *\n             * @param datetime1 The first date or datetime.\n             * @param datetime2 The second date or datetime.\n             * @param diffType The unit of difference (`'y'`, `'M'`, `'d'`, `'h'`, `'m'`, `'s'`).\n             * @returns The difference between the two dates in the specified unit.\n             *\n             * @example\n             * getDateDiff(\"2024-02-01\", \"2024-03-01\", \"M\"); // 1\n             * getDateDiff(\"2024-02-01\", \"2025-02-01\", \"y\"); // 1\n             * getDateDiff(\"2024-02-01\", \"2024-02-10\", \"d\"); // 9\n             * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 16:30:00\", \"h\"); // 2\n             * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 14:45:00\", \"m\"); // 45\n             * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 14:00:30\", \"s\"); // 30\n             */\n            getDateDiff(datetime1: DateTimeObject | DateObject | string, datetime2: DateTimeObject | DateObject | string, diffType: string = ''): number {\n                const datetimeObj1: DateTimeObject = hison.utils.isObject(datetime1) ? hison.utils.deepCopyObject(datetime1) : hison.utils.getDatetimeObject(datetime1 as string);\n                const datetimeObj2: DateTimeObject = hison.utils.isObject(datetime2) ? hison.utils.deepCopyObject(datetime2) : hison.utils.getDatetimeObject(datetime2 as string);\n                            \n                datetimeObj1.M = datetimeObj1.M || 1; datetimeObj2.M = datetimeObj2.M || 1;\n                datetimeObj1.d = datetimeObj1.d || 1; datetimeObj2.d = datetimeObj2.d || 1;\n                datetimeObj1.h = datetimeObj1.h || 0; datetimeObj2.h = datetimeObj2.h || 0;\n                datetimeObj1.m = datetimeObj1.m || 0; datetimeObj2.m = datetimeObj2.m || 0;\n                datetimeObj1.s = datetimeObj1.s || 0; datetimeObj2.s = datetimeObj2.s || 0;\n        \n                if (!hison.utils.isDate(datetimeObj1)) throw new Error(`ER0004 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj1)}`);\n                if (!hison.utils.isTime(datetimeObj1)) throw new Error(`ER0005 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj1)}`);\n                if (!hison.utils.isDate(datetimeObj2)) throw new Error(`ER0006 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj2)}`);\n                if (!hison.utils.isTime(datetimeObj2)) throw new Error(`ER0007 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj2)}`);\n                if (datetimeObj1.y === null) {\n                    throw new Error(`ER0004 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj1)}`);\n                }\n                if (datetimeObj2.y === null) {\n                    throw new Error(`ER0005 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj2)}`);\n                }\n            \n                const d1 = new Date(datetimeObj1.y, datetimeObj1.M - 1, datetimeObj1.d, datetimeObj1.h, datetimeObj1.m, datetimeObj1.s);\n                const d2 = new Date(datetimeObj2.y, datetimeObj2.M - 1, datetimeObj2.d, datetimeObj2.h, datetimeObj2.m, datetimeObj2.s);\n            \n                switch (diffType) {\n                    case 'y':\n                        return d2.getFullYear() - d1.getFullYear();\n                    case 'M':\n                        return (d2.getFullYear() - d1.getFullYear()) * 12 + d2.getMonth() - d1.getMonth();\n                    case 'd':\n                        return Math.floor((d2.getTime() - d1.getTime()) / (24 * 60 * 60 * 1000));\n                    case 'h':\n                        return Math.floor((d2.getTime() - d1.getTime()) / (60 * 60 * 1000));\n                    case 'm':\n                        return Math.floor((d2.getTime() - d1.getTime()) / (60 * 1000));\n                    case 's':\n                        return Math.floor((d2.getTime() - d1.getTime()) / 1000);\n                    default:\n                        return Math.floor((d2.getTime() - d1.getTime()) / (24 * 60 * 60 * 1000));\n                }\n            },\n            /**\n             * Returns the full or abbreviated name of a given month.\n             *\n             * - Accepts a month number (`1-12`) or a string representation of a number.\n             * - If `isFullName` is `true`, it returns the full month name (e.g., `\"January\"`).\n             * - If `isFullName` is `false`, it returns the abbreviated month name (e.g., `\"Jan\"`).\n             * - Throws an error if the input month is outside the valid range (`1-12`).\n             *\n             * @param month The month as a number (`1-12`) or a string representing a number.\n             * @param isFullName Determines whether to return the full name (`true`) or the abbreviated name (`false`) (default: `true`).\n             * @returns The full or abbreviated month name.\n             *\n             * @throws Error if the month is not between `1` and `12`.\n             *\n             * @example\n             * getMonthName(2); // \"February\"\n             * getMonthName(\"3\", false); // \"Mar\"\n             * getMonthName(12, true); // \"December\"\n             * getMonthName(0); // Throws error: \"Month must be between 1 and 12\"\n             */\n            getMonthName(month: number | string, isFullName: boolean = true): string {\n                if (typeof month === 'string') month = parseInt(month, 10);\n        \n                if (month < 1 || month > 12) {\n                    throw new Error(`ER0008 Month must be between 1 and 12`);\n                }\n\n                if (isFullName) {\n                    return MonthFullName[month];\n                } else {\n                    return MonthShortName[month];\n                }\n            },\n            /**\n             * Formats a given date or datetime according to the specified format.\n             *\n             * - Accepts a `DateTimeObject`, `DateObject`, or a string representation of a date/datetime.\n             * - If no format is provided, it defaults to `CustomOption.dateFormat` for dates \n             *   and `CustomOption.datetimeFormat` for datetimes.\n             * - Supports various formats such as:\n             *   - `'yyyy-MM-dd'` → `\"2025-02-05\"`\n             *   - `'yyyy/MM/dd hh:mm:ss'` → `\"2025/02/05 14:30:45\"`\n             *   - `'MMMM dd, yyyy'` → `\"February 5, 2025\"`\n             * - Throws an error if the input date is invalid.\n             *\n             * @param datetime The date or datetime to format.\n             * @param format The desired output format (optional). Default: `'yyyy-MM-dd'` or `'yyyy-MM-dd hh:mm:ss'`\n             * @returns The formatted date/time as a string.\n             *\n             * @throws Error if the provided date is invalid.\n             *\n             * @example\n             * getDateWithFormat(\"2025-02-05\", \"yyyy/MM/dd\"); // \"2025/02/05\"\n             * getDateWithFormat(\"2025-02-05 14:30:45\", \"MMMM dd, yyyy\"); // \"February 5, 2025\"\n             * getDateWithFormat({ y: 2025, M: 2, d: 5 }, \"MM-dd-yyyy\"); // \"02-05-2025\"\n             */\n            getDateWithFormat(datetime: DateTimeObject | DateObject | string, format: string = ''): string {\n                const datetimeObj = hison.utils.isObject(datetime) ? hison.utils.deepCopyObject(datetime) : hison.utils.getDatetimeObject(datetime as string);\n                if (!format) {\n                    if (datetimeObj.h === undefined || datetimeObj.h === null) {\n                        format = customOption.utils.dateFormat\n                    }\n                    else {\n                        format = customOption.utils.datetimeFormat;\n                    }\n                }\n\n                const y = datetimeObj.y.toString();\n                const M = (datetimeObj.M || 1).toString().padStart(2, '0');\n                const d = (datetimeObj.d || 1).toString().padStart(2, '0');\n                const h = (datetimeObj.h || 0).toString().padStart(2, '0');\n                const m = (datetimeObj.m || 0).toString().padStart(2, '0');\n                const s = (datetimeObj.s || 0).toString().padStart(2, '0');\n\n                if (!hison.utils.isDate(y + M + d)) throw new Error(`ER0009 Please enter a valid date.\\n=>${JSON.stringify(datetime)}`);\n                if (!hison.utils.isTime(h + m + s)) throw new Error(`ER0010 Please enter a valid date.\\n=>${JSON.stringify(datetime)}`);\n\n                const MMMM = hison.utils.getMonthName(datetimeObj.M);\n                const MMM = hison.utils.getMonthName(datetimeObj.M, false);\n\n                switch (format) {\n                    case 'yyyy':\n                        return y;\n                        \n                    case 'yyyyMM':\n                        return y + M;\n                    case 'yyyy-MM':\n                        return y + '-' + M;\n                    case 'yyyy/MM':\n                        return y + '/' + M;\n                    case 'yyyy. MM':\n                        return y + '. ' + M;\n                    case 'yyyy MM':\n                        return y + ' ' + M;\n            \n                    case 'yyyyMMdd':\n                        return y + M + d;\n                    case 'yyyy-MM-dd':\n                        return y + '-' + M + '-' + d;\n                    case 'yyyy/MM/dd':\n                        return y + '/' + M + '/' + d;\n                    case 'yyyy. MM. dd':\n                        return y + '. ' + M + '. ' + d;\n                    case 'yyyy MM dd':\n                        return y + ' ' + M + ' ' + d;\n            \n                    case 'yyyyMMdd hh':\n                        return y + M + d + ' ' + h;\n                    case 'yyyyMMdd hhmm':\n                        return y + M + d + ' ' + h + m;\n                    case 'yyyyMMdd hhmmss':\n                        return y + M + d + ' ' + h + m + s;\n                    case 'yyyyMMdd hh:mm':\n                        return y + M + d + ' ' + h + ':' + m;\n                    case 'yyyyMMdd hh:mm:ss':\n                        return y + M + d + ' ' + h + ':' + m + ':' + s;\n                    case 'yyyy-MM-dd hh':\n                        return y + '-' + M + '-' + d + ' ' + h;\n                    case 'yyyy-MM-dd hhmm':\n                        return y + '-' + M + '-' + d + ' ' + h + m;\n                    case 'yyyy-MM-dd hhmmss':\n                        return y + '-' + M + '-' + d + ' ' + h + m + s;\n                    case 'yyyy-MM-dd hh:mm':\n                        return y + '-' + M + '-' + d + ' ' + h + ':' + m;\n                    case 'yyyy-MM-dd hh:mm:ss':\n                        return y + '-' + M + '-' + d + ' ' + h + ':' + m + ':' + s;\n                    case 'yyyy/MM/dd hh':\n                        return y + '/' + M + '/' + d + ' ' + h;\n                    case 'yyyy/MM/dd hhmm':\n                        return y + '/' + M + '/' + d + ' ' + h + m;\n                    case 'yyyy/MM/dd hhmmss':\n                        return y + '/' + M + '/' + d + ' ' + h + m + s;\n                    case 'yyyy/MM/dd hh:mm':\n                        return y + '/' + M + '/' + d + ' ' + h + ':' + m;\n                    case 'yyyy/MM/dd hh:mm:ss':\n                        return y + '/' + M + '/' + d + ' ' + h + ':' + m + ':' + s;\n                    case 'yyyy. MM. dd hh':\n                        return y + '. ' + M + '. ' + d + ' ' + h;\n                    case 'yyyy. MM. dd hhmm':\n                        return y + '. ' + M + '. ' + d + ' ' + h + m;\n                    case 'yyyy. MM. dd hhmmss':\n                        return y + '. ' + M + '. ' + d + ' ' + h + m + s;\n                    case 'yyyy. MM. dd hh:mm':\n                        return y + '. ' + M + '. ' + d + ' ' + h + ':' + m;\n                    case 'yyyy. MM. dd hh:mm:ss':\n                        return y + '. ' + M + '. ' + d + ' ' + h + ':' + m + ':' + s;\n                    case 'yyyy MM dd hh':\n                        return y + ' ' + M + ' ' + d + ' ' + h;\n                    case 'yyyy MM dd hhmm':\n                        return y + ' ' + M + ' ' + d + ' ' + h + m;\n                    case 'yyyy MM dd hhmmss':\n                        return y + ' ' + M + ' ' + d + ' ' + h + m + s;\n                    case 'yyyy MM dd hh:mm':\n                        return y + ' ' + M + ' ' + d + ' ' + h + ':' + m;\n                    case 'yyyy MM dd hh:mm:ss':\n                        return y + ' ' + M + ' ' + d + ' ' + h + ':' + m + ':' + s;\n            \n                    case 'MMyyyy':\n                        return M + y;\n                    case 'MM-yyyy':\n                        return M + '-' + y;\n                    case 'MM/yyyy':\n                        return M + '/' + y;\n                    case 'MM. yyyy':\n                        return M + '/' + y;\n                    case 'MM yyyy':\n                        return M + '/' + y;\n                    case 'MMMM yyyy':\n                        return MMMM + ' ' + y;\n                    case 'MMMM, yyyy':\n                        return MMMM + ', ' + y;\n                    case 'MMM yyyy':\n                        return MMM + ' ' + y;\n                    case 'MMM, yyyy':\n                        return MMM + ', ' + y;\n            \n                    case 'MMddyyyy':\n                        return M + d + y;\n                    case 'MM-dd-yyyy':\n                        return M + '-' + d + '-' + y;\n                    case 'MM/dd/yyyy':\n                        return M + '/' + d + '/' + y;\n                    case 'MM. dd. yyyy':\n                        return M + '. ' + d + '. ' + y;\n                    case 'MMMM dd yyyy':\n                        return MMMM + ' ' + d + ' ' + y;\n                    case 'MMMM dd, yyyy':\n                        return MMMM + ' ' + d + ', ' + y;\n                    case 'MMM dd yyyy':\n                        return MMM + ' ' + d + ' ' + y;\n                    case 'MMM dd, yyyy':\n                        return MMM + ' ' + d + ', ' + y;\n            \n                    case 'MMddyyyy hh':\n                        return M + d + y + ' ' + h;\n                    case 'MMddyyyy hhmm':\n                        return M + d + y + ' ' + h + m;\n                    case 'MMddyyyy hhmmss':\n                        return M + d + y + ' ' + h + m + s;\n                    case 'MMddyyyy hh:mm':\n                        return M + d + y + ' ' + h + ':' + m;\n                    case 'MMddyyyy hh:mm:ss':\n                        return M + d + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MM-dd-yyyy hh':\n                        return M + '-' + d + '-' + y + ' ' + h;\n                    case 'MM-dd-yyyy hhmm':\n                        return M + '-' + d + '-' + y + ' ' + h + m;\n                    case 'MM-dd-yyyy hhmmss':\n                        return M + '-' + d + '-' + y + ' ' + h + m + s;\n                    case 'MM-dd-yyyy hh:mm':\n                        return M + '-' + d + '-' + y + ' ' + h + ':' + m;\n                    case 'MM-dd-yyyy hh:mm:ss':\n                        return M + '-' + d + '-' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MM/dd/yyyy hh':\n                        return M + '/' + d + '/' + y + ' ' + h;\n                    case 'MM/dd/yyyy hhmm':\n                        return M + '/' + d + '/' + y + ' ' + h + m;\n                    case 'MM/dd/yyyy hhmmss':\n                        return M + '/' + d + '/' + y + ' ' + h + m + s;\n                    case 'MM/dd/yyyy hh:mm':\n                        return M + '/' + d + '/' + y + ' ' + h + ':' + m;\n                    case 'MM/dd/yyyy hh:mm:ss':\n                        return M + '/' + d + '/' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MM. dd. yyyy hh':\n                        return M + '. ' + d + '. ' + y + ' ' + h;\n                    case 'MM. dd. yyyy hhmm':\n                        return M + '. ' + d + '. ' + y + ' ' + h + m;\n                    case 'MM. dd. yyyy hhmmss':\n                        return M + '. ' + d + '. ' + y + ' ' + h + m + s;\n                    case 'MM. dd. yyyy hh:mm':\n                        return M + '. ' + d + '. ' + y + ' ' + h + ':' + m;\n                    case 'MM. dd. yyyy hh:mm:ss':\n                        return M + '. ' + d + '. ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MMMM dd yyyy hh':\n                        return MMMM + ' ' + d + ' ' + y + ' ' + h;\n                    case 'MMMM dd yyyy hhmm':\n                        return MMMM + ' ' + d + ' ' + y + ' ' + h + m;\n                    case 'MMMM dd yyyy hhmmss':\n                        return MMMM + ' ' + d + ' ' + y + ' ' + h + m + s;\n                    case 'MMMM dd yyyy hh:mm':\n                        return MMMM + ' ' + d + ' ' + y + ' ' + h + ':' + m;\n                    case 'MMMM dd yyyy hh:mm:ss':\n                        return MMMM + ' ' + d + ' ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MMMM dd, yyyy hh':\n                        return MMMM + ' ' + d + ', ' + y + ' ' + h;\n                    case 'MMMM dd, yyyy hhmm':\n                        return MMMM + ' ' + d + ', ' + y + ' ' + h + m;\n                    case 'MMMM dd, yyyy hhmmss':\n                        return MMMM + ' ' + d + ', ' + y + ' ' + h + m + s;\n                    case 'MMMM dd, yyyy hh:mm':\n                        return MMMM + ' ' + d + ', ' + y + ' ' + h + ':' + m;\n                    case 'MMMM dd, yyyy hh:mm:ss':\n                        return MMMM + ' ' + d + ', ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MMM dd yyyy hh':\n                        return MMM + ' ' + d + ' ' + y + ' ' + h;\n                    case 'MMM dd yyyy hhmm':\n                        return MMM + ' ' + d + ' ' + y + ' ' + h + m;\n                    case 'MMM dd yyyy hhmmss':\n                        return MMM + ' ' + d + ' ' + y + ' ' + h + m + s;\n                    case 'MMM dd yyyy hh:mm':\n                        return MMM + ' ' + d + ' ' + y + ' ' + h + ':' + m;\n                    case 'MMM dd yyyy hh:mm:ss':\n                        return MMM + ' ' + d + ' ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MMM dd, yyyy hh':\n                        return MMM + ' ' + d + ', ' + y + ' ' + h;\n                    case 'MMM dd, yyyy hhmm':\n                        return MMM + ' ' + d + ', ' + y + ' ' + h + m;\n                    case 'MMM dd, yyyy hhmmss':\n                        return MMM + ' ' + d + ', ' + y + ' ' + h + m + s;\n                    case 'MMM dd, yyyy hh:mm':\n                        return MMM + ' ' + d + ', ' + y + ' ' + h + ':' + m;\n                    case 'MMM dd, yyyy hh:mm:ss':\n                        return MMM + ' ' + d + ', ' + y + ' ' + h + ':' + m + ':' + s;\n            \n                    case 'ddMMyyyy':\n                        return d + M + y;\n                    case 'dd-MM-yyyy':\n                        return d + '-' + M + '-' + y;\n                    case 'dd/MM/yyyy':\n                        return d + '/' + M + '/' + y;\n                    case 'dd. MM. yyyy':\n                        return d + '. ' + M + '. ' + y;\n                    case 'dd MMMM yyyy':\n                        return d + ' ' + MMMM + ' ' + y;\n                    case 'dd MMM yyyy':\n                        return d + ' ' + MMM + ' ' + y;\n            \n                    case 'ddMMyyyy hh':\n                        return d + M + y + ' ' + h;\n                    case 'ddMMyyyy hhmm':\n                        return d + M + y + ' ' + h + m;\n                    case 'ddMMyyyy hhmmss':\n                        return d + M + y + ' ' + h + m + s;\n                    case 'ddMMyyyy hh:mm':\n                        return d + M + y + ' ' + h + ':' + m;\n                    case 'ddMMyyyy hh:mm:ss':\n                        return d + M + y + ' ' + h + ':' + m + ':' + s;\n                    case 'dd-MM-yyyy hh':\n                        return d + '-' + M + '-' + y + ' ' + h;\n                    case 'dd-MM-yyyy hhmm':\n                        return d + '-' + M + '-' + y + ' ' + h + m;\n                    case 'dd-MM-yyyy hhmmss':\n                        return d + '-' + M + '-' + y + ' ' + h + m + s;\n                    case 'dd-MM-yyyy hh:mm':\n                        return d + '-' + M + '-' + y + ' ' + h + ':' + m;\n                    case 'dd-MM-yyyy hh:mm:ss':\n                        return d + '-' + M + '-' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'dd/MM/yyyy hh':\n                        return d + '/' + M + '/' + y + ' ' + h;\n                    case 'dd/MM/yyyy hhmm':\n                        return d + '/' + M + '/' + y + ' ' + h + m;\n                    case 'dd/MM/yyyy hhmmss':\n                        return d + '/' + M + '/' + y + ' ' + h + m + s;\n                    case 'dd/MM/yyyy hh:mm':\n                        return d + '/' + M + '/' + y + ' ' + h + ':' + m;\n                    case 'dd/MM/yyyy hh:mm:ss':\n                        return d + '/' + M + '/' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'dd. MM. yyyy hh':\n                        return d + '. ' + M + '. ' + y + ' ' + h;\n                    case 'dd. MM. yyyy hhmm':\n                        return d + '. ' + M + '. ' + y + ' ' + h + m;\n                    case 'dd. MM. yyyy hhmmss':\n                        return d + '. ' + M + '. ' + y + ' ' + h + m + s;\n                    case 'dd. MM. yyyy hh:mm':\n                        return d + '. ' + M + '. ' + y + ' ' + h + ':' + m;\n                    case 'dd. MM. yyyy hh:mm:ss':\n                        return d + '. ' + M + '. ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'dd MMMM yyyy hh':\n                        return d + ' ' + MMMM + ' ' + y + ' ' + h;\n                    case 'dd MMMM yyyy hhmm':\n                        return d + ' ' + MMMM + ' ' + y + ' ' + h + m;\n                    case 'dd MMMM yyyy hhmmss':\n                        return d + ' ' + MMMM + ' ' + y + ' ' + h + m + s;\n                    case 'dd MMMM yyyy hh:mm':\n                        return d + ' ' + MMMM + ' ' + y + ' ' + h + ':' + m;\n                    case 'dd MMMM yyyy hh:mm:ss':\n                        return d + ' ' + MMMM + ' ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'dd MMM yyyy hh':\n                        return d + ' ' + MMM + ' ' + y + ' ' + h;\n                    case 'dd MMM yyyy hhmm':\n                        return d + ' ' + MMM + ' ' + y + ' ' + h + m;\n                    case 'dd MMM yyyy hhmmss':\n                        return d + ' ' + MMM + ' ' + y + ' ' + h + m + s;\n                    case 'dd MMM yyyy hh:mm':\n                        return d + ' ' + MMM + ' ' + y + ' ' + h + ':' + m;\n                    case 'dd MMM yyyy hh:mm:ss':\n                        return d + ' ' + MMM + ' ' + y + ' ' + h + ':' + m + ':' + s;\n            \n                    default:\n                        throw new Error(`ER0010 Invalid format.\\n=>${JSON.stringify(format)}`);\n                }\n            },\n            /**\n             * Returns the day of the week for a given date.\n             *\n             * - Accepts a `DateObject` or a string representation of a date.\n             * - Uses `CustomOption.dayOfWeekFormat` as the default format.\n             * - Supports different formats for output:\n             *   - `'d'` → Numeric day of the week (`0-6`, where `0 = Sunday`).\n             *   - `'dy'` → Abbreviated English name (`\"Sun\", \"Mon\", ..., \"Sat\"`).\n             *   - `'day'` → Full English name (`\"Sunday\", \"Monday\", ..., \"Saturday\"`).\n             *   - `'kdy'` → Abbreviated Korean name (`\"일\", \"월\", ..., \"토\"`).\n             *   - `'kday'` → Full Korean name (`\"일요일\", \"월요일\", ..., \"토요일\"`).\n             * - Throws an error if the input date is invalid.\n             *\n             * @param date The date to evaluate.\n             * @param dayType The format of the output (optional). Default: `'d'`\n             * @returns The day of the week in the specified format.\n             *\n             * @throws Error if the provided date is invalid.\n             *\n             * @example\n             * getDayOfWeek(\"2025-02-05\", \"d\"); // \"3\" (Wednesday)\n             * getDayOfWeek(\"2025-02-05\", \"dy\"); // \"Wed\"\n             * getDayOfWeek(\"2025-02-05\", \"day\"); // \"Wednesday\"\n             * getDayOfWeek(\"2025-02-05\", \"kdy\"); // \"수\"\n             * getDayOfWeek(\"2025-02-05\", \"kday\"); // \"수요일\"\n             */\n            getDayOfWeek(date: DateObject | string, dayType: string = customOption.utils.dayOfWeekFormat): string {\n                const dateObj: DateObject = hison.utils.isObject(date) ? date as DateObject : hison.utils.getDateObject(date as string);\n                if (!hison.utils.isDate(dateObj)) throw new Error(`ER0011 Invalid format.\\n=>${JSON.stringify(date)}`);\n                if (dateObj.y === null || dateObj.M === null || dateObj.d === null) {\n                    throw new Error(`ER0011 Invalid format.\\n=>${JSON.stringify(date)}`);\n                }\n                const d = new Date(dateObj.y, dateObj.M - 1, dateObj.d);\n                const dayOfWeek = d.getDay();\n                switch (dayType.toLowerCase()) {\n                    case 'd':\n                        return dayOfWeek.toString();    //0 ~ 6\n                    case 'dy':\n                        return DayOfWeekShortName[dayOfWeek];\n                    case 'day':\n                        return DayOfWeekFullName[dayOfWeek];\n                    case 'kdy':\n                        return DayOfWeekShortNameKR[dayOfWeek];\n                    case 'kday':\n                        return DayOfWeekFullNameKR[dayOfWeek];\n                    default:\n                        return dayOfWeek.toString();\n                }\n            },\n            /**\n             * Returns the last day of the month for a given date.\n             *\n             * - Accepts a `DateObject` or a string representation of a date.\n             * - If the input is a `DateObject`, it uses the month and year from the object.\n             * - If the input is a string, it assumes the first day of the given month unless a full date is provided.\n             * - Determines the last day of the specified month by computing the last day of the next month minus one.\n             * - Throws an error if the input date is invalid.\n             *\n             * @param date The date or month to evaluate.\n             * @returns The last day of the month as a number.\n             *\n             * @throws Error if the provided date is invalid.\n             *\n             * @example\n             * getLastDay(\"2025-02\"); // 28 (for February 2025)\n             * getLastDay(\"2024-02\"); // 29 (leap year February)\n             * getLastDay({ y: 2025, M: 5, d: 15 }); // 31 (May has 31 days)\n             * getLastDay(\"2025-07-10\"); // 31 (July has 31 days)\n             */\n            getLastDay(date: DateObject | string): number {\n                let dateObj: DateObject;\n                if (hison.utils.isObject(date)) {\n                    dateObj = hison.utils.deepCopyObject(date);\n                    dateObj.d = 1;\n                }\n                else {\n                    if ((date as string).includes('-')) {\n                        date = date + '-01'\n                    }\n                    else if ((date as string).includes('/')) {\n                        date = date + '/01'\n                    }\n                    else {\n                        date = date + '01'\n                    }\n                    dateObj = hison.utils.getDateObject(date);\n                }\n                if (!hison.utils.isDate(dateObj)) throw new Error(`ER0012 Invalid format.\\n=>${JSON.stringify(date)}`);\n                if (dateObj.y === null || dateObj.M === null) {\n                    throw new Error(`ER0012 Invalid format.\\n=>${JSON.stringify(date)}`);\n                }\n                const nextMonthFirstDay = new Date(dateObj.y, dateObj.M, 1);\n                nextMonthFirstDay.setDate(0);\n                return nextMonthFirstDay.getDate();\n            },\n            /**\n             * Returns the current system year in the specified format.\n             *\n             * - Uses `CustomOption.yearFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'yyyy'` → Full year (`\"2025\"`)\n             *   - `'yy'` → Last two digits of the year (`\"25\"`)\n             * - If an unsupported format is provided, it defaults to `'yyyy'`.\n             *\n             * @param format The desired output format (optional). Default: `'yyyy'`\n             * @returns The current year as a string in the specified format.\n             *\n             * @example\n             * getSysYear(); // \"2025\" (default format)\n             * getSysYear(\"yyyy\"); // \"2025\"\n             * getSysYear(\"yy\"); // \"25\"\n             */\n            getSysYear(format: string = customOption.utils.yearFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'yy':\n                        return currentDate.getFullYear().toString().substring(2);\n                    default:\n                        return currentDate.getFullYear().toString();\n                }\n            },\n            /**\n             * Returns the current system month in the specified format.\n             *\n             * - Uses `CustomOption.monthFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'M'` → Numeric month without leading zero (`\"2\"` for February).\n             *   - `'MM'` → Numeric month with leading zero (`\"02\"` for February).\n             *   - `'MMMM'` → Full month name (`\"February\"`).\n             *   - `'MMM'` → Abbreviated month name (`\"Feb\"`).\n             * - If an unsupported format is provided, it defaults to `'M'`.\n             *\n             * @param format The desired output format (optional). Default: `'M'`\n             * @returns The current month as a string in the specified format.\n             *\n             * @example\n             * getSysMonth(); // \"2\" (default format for February)\n             * getSysMonth(\"MM\"); // \"02\"\n             * getSysMonth(\"MMMM\"); // \"February\"\n             * getSysMonth(\"MMM\"); // \"Feb\"\n             */\n            getSysMonth(format: string = customOption.utils.monthFormat): string {\n                const currentDate = new Date();\n                const sysMonth = currentDate.getMonth() + 1;\n                switch (format.toLowerCase()) {\n                    case 'mm':\n                        return sysMonth.toString().padStart(2, '0');\n                    case 'mmmm':\n                        return hison.utils.getMonthName(sysMonth);\n                    case 'mmm':\n                        return hison.utils.getMonthName(sysMonth, false);\n                    default:\n                        return sysMonth.toString();\n                }\n            },\n            /**\n             * Returns the current system year and month in the specified format.\n             *\n             * - Uses `CustomOption.yearMonthFormat` as the default format.\n             * - Delegates formatting to `getDateWithFormat()` using the first day of the current month.\n             * - Common formats include:\n             *   - `'yyyy-MM'` → `\"2025-02\"`\n             *   - `'yyyy/MM'` → `\"2025/02\"`\n             *   - `'MMMM yyyy'` → `\"February 2025\"`\n             *   - `'MMM yyyy'` → `\"Feb 2025\"`\n             *\n             * @param format The desired output format (optional). Default: `'yyyy-MM'`\n             * @returns The current year and month as a formatted string.\n             *\n             * @example\n             * getSysYearMonth(); // \"2025-02\" (default format for February 2025)\n             * getSysYearMonth(\"yyyy/MM\"); // \"2025/02\"\n             * getSysYearMonth(\"MMMM yyyy\"); // \"February 2025\"\n             * getSysYearMonth(\"MMM yyyy\"); // \"Feb 2025\"\n             */\n            getSysYearMonth(format: string = customOption.utils.yearMonthFormat): string {\n                const currentDate = new Date();\n                return hison.utils.getDateWithFormat( {y : currentDate.getFullYear(), M : currentDate.getMonth() + 1, d : 1 }, format);\n            },\n            /**\n             * Returns the current system day of the month in the specified format.\n             *\n             * - Uses `CustomOption.dayFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'d'` → Day without leading zero (`\"5\"` for the 5th day of the month).\n             *   - `'dd'` → Day with leading zero (`\"05\"` for the 5th day of the month).\n             * - If an unsupported format is provided, it defaults to `'d'`.\n             *\n             * @param format The desired output format (optional). Default: `'d'`\n             * @returns The current day of the month as a string in the specified format.\n             *\n             * @example\n             * getSysDay(); // \"5\" (default format for the 5th day)\n             * getSysDay(\"dd\"); // \"05\"\n             */\n            getSysDay(format: string = customOption.utils.dayFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'dd':\n                        return currentDate.getDate().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getDate().toString();\n                }\n            },\n            /**\n             * Returns the current system day of the week in the specified format.\n             *\n             * - Uses `CustomOption.dayOfWeekFormat` as the default format.\n             * - Delegates formatting to `getDayOfWeek()`, which supports:\n             *   - `'d'` → Numeric day of the week (`0-6`, where `0 = Sunday`).\n             *   - `'dy'` → Abbreviated English name (`\"Sun\", \"Mon\", ..., \"Sat\"`).\n             *   - `'day'` → Full English name (`\"Sunday\", \"Monday\", ..., \"Saturday\"`).\n             *   - `'kdy'` → Abbreviated Korean name (`\"일\", \"월\", ..., \"토\"`).\n             *   - `'kday'` → Full Korean name (`\"일요일\", \"월요일\", ..., \"토요일\"`).\n             *\n             * @param format The desired output format (optional). Default: `'d'`\n             * @returns The current day of the week in the specified format.\n             *\n             * @example\n             * getSysDayOfWeek(); // \"3\" (default format, Wednesday)\n             * getSysDayOfWeek(\"dy\"); // \"Wed\"\n             * getSysDayOfWeek(\"day\"); // \"Wednesday\"\n             * getSysDayOfWeek(\"kdy\"); // \"수\"\n             * getSysDayOfWeek(\"kday\"); // \"수요일\"\n             */\n            getSysDayOfWeek(format: string = customOption.utils.dayOfWeekFormat): string {\n                const currentDate = new Date();\n                return hison.utils.getDayOfWeek({ y : currentDate.getFullYear(), M : currentDate.getMonth() + 1, d : currentDate.getDate()}, format);\n            },\n            /**\n             * Returns the current system hour in the specified format.\n             *\n             * - Uses `CustomOption.hourFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'h'` → Hour without leading zero (`\"5\"` for 5 AM/PM).\n             *   - `'hh'` → Hour with leading zero (`\"05\"` for 5 AM/PM).\n             * - If an unsupported format is provided, it defaults to `'h'`.\n             *\n             * @param format The desired output format (optional). Default: `'h'`\n             * @returns The current hour as a string in the specified format.\n             *\n             * @example\n             * getSysHour(); // \"5\" (default format)\n             * getSysHour(\"hh\"); // \"05\"\n             */\n            getSysHour(format: string = customOption.utils.hourFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'hh':\n                        return currentDate.getHours().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getHours().toString();\n                }\n            },\n            /**\n             * Returns the current system hour and minute in the specified format.\n             *\n             * - Uses `CustomOption.hourMinuteFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'hhmm'` → Compact format without separators (`\"1430\"` for 2:30 PM).\n             *   - `'hh:mm'` → Standard format with a colon separator (`\"14:30\"` for 2:30 PM).\n             * - If an unsupported format is provided, it defaults to `'hh:mm'`.\n             *\n             * @param format The desired output format (optional). Default: `'hh:mm'`\n             * @returns The current hour and minute as a string in the specified format.\n             *\n             * @example\n             * getSysHourMinute(); // \"14:30\" (default format)\n             * getSysHourMinute(\"hhmm\"); // \"1430\"\n             */\n            getSysHourMinute(format: string = customOption.utils.hourMinuteFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'hhmm':\n                        return currentDate.getHours().toString().padStart(2, '0') + '' + currentDate.getMinutes().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getHours().toString().padStart(2, '0') + ':' + currentDate.getMinutes().toString().padStart(2, '0');\n                }\n            },\n            /**\n             * Returns the current system minute in the specified format.\n             *\n             * - Uses `CustomOption.minuteFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'m'` → Minute without leading zero (`\"5\"` for the 5th minute).\n             *   - `'mm'` → Minute with leading zero (`\"05\"` for the 5th minute).\n             * - If an unsupported format is provided, it defaults to `'m'`.\n             *\n             * @param format The desired output format (optional). Default: `'m'`\n             * @returns The current minute as a string in the specified format.\n             *\n             * @example\n             * getSysMinute(); // \"5\" (default format)\n             * getSysMinute(\"mm\"); // \"05\"\n             */\n            getSysMinute(format: string = customOption.utils.minuteFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'mm':\n                        return currentDate.getMinutes().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getMinutes().toString();\n                }\n            },\n            /**\n             * Returns the current system second in the specified format.\n             *\n             * - Uses `CustomOption.secondFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'s'` → Second without leading zero (`\"5\"` for the 5th second).\n             *   - `'ss'` → Second with leading zero (`\"05\"` for the 5th second).\n             * - If an unsupported format is provided, it defaults to `'s'`.\n             *\n             * @param format The desired output format (optional). Default: `'s'`\n             * @returns The current second as a string in the specified format.\n             *\n             * @example\n             * getSysSecond(); // \"5\" (default format)\n             * getSysSecond(\"ss\"); // \"05\"\n             */\n            getSysSecond(format: string = customOption.utils.secondFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'ss':\n                        return currentDate.getSeconds().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getSeconds().toString();\n                }\n            },\n            /**\n             * Returns the current system time in the specified format.\n             *\n             * - Uses `CustomOption.timeFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'hhmmss'` → Compact format without separators (`\"143015\"` for 2:30:15 PM).\n             *   - `'hh:mm:ss'` → Standard format with colons (`\"14:30:15\"` for 2:30:15 PM).\n             * - If an unsupported format is provided, it defaults to `'hh:mm:ss'`.\n             *\n             * @param format The desired output format (optional). Default: `'hh:mm:ss'`\n             * @returns The current time as a string in the specified format.\n             *\n             * @example\n             * getSysTime(); // \"14:30:15\" (default format)\n             * getSysTime(\"hhmmss\"); // \"143015\"\n             */\n            getSysTime(format: string = customOption.utils.timeFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'hhmmss':\n                        return currentDate.getHours().toString().padStart(2, '0') + currentDate.getMinutes().toString().padStart(2, '0') + currentDate.getSeconds().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getHours().toString().padStart(2, '0') + ':' + currentDate.getMinutes().toString().padStart(2, '0') + ':' + currentDate.getSeconds().toString().padStart(2, '0');\n                }\n            },\n            /**\n             * Returns the current system date and time in the specified format.\n             *\n             * - Uses `CustomOption.datetimeFormat` as the default format.\n             * - Delegates formatting to `getDateWithFormat()`, which supports various formats, including:\n             *   - `'yyyy-MM-dd hh:mm:ss'` → `\"2025-02-05 14:30:15\"`\n             *   - `'yyyy/MM/dd'` → `\"2025/02/05\"`\n             *   - `'MMMM dd, yyyy'` → `\"February 5, 2025\"`\n             * - If no format is specified, it defaults to the full datetime format.\n             *\n             * @param format The desired output format (optional). Default: `'yyyy-MM-dd hh:mm:ss'`\n             * @returns The current date and time as a formatted string.\n             *\n             * @example\n             * getSysDate(); // \"2025-02-05 14:30:15\" (default format)\n             * getSysDate(\"yyyy/MM/dd\"); // \"2025/02/05\"\n             * getSysDate(\"MMMM dd, yyyy\"); // \"February 5, 2025\"\n             */\n            getSysDate(format: string = customOption.utils.datetimeFormat): string {\n                const currentDate = new Date();\n                return hison.utils.getDateWithFormat(\n                    {\n                        y:currentDate.getFullYear(),\n                        M:currentDate.getMonth() + 1,\n                        d:currentDate.getDate(),\n                        h:currentDate.getHours(),\n                        m:currentDate.getMinutes(),\n                        s:currentDate.getSeconds(),\n                    }\n                    , format);\n            },\n            /**\n             * Rounds a number up to the nearest integer or specified decimal place.\n             *\n             * - If `precision` is `0`, it rounds up to the nearest whole number.\n             * - If `precision` is greater than `0`, it rounds up to the specified number of decimal places.\n             * - If `precision` is less than `0`, it rounds up to the nearest multiple of `10^precision`.\n             *\n             * @param num The number to be rounded up.\n             * @param precision The number of decimal places to retain (default: `0`).\n             * @returns The rounded-up number.\n             *\n             * @example\n             * getCeil(12.34); // 13\n             * getCeil(12.34, 1); // 12.4\n             * getCeil(12.34, 2); // 12.34\n             * getCeil(1250, -2); // 1300\n             */\n            getCeil(num: number, precision: number = 0): number {\n                num = hison.utils.getToNumber(num);\n                precision = Math.trunc(hison.utils.getToNumber(precision));\n                const factor = Math.pow(10, precision);\n                return Math.ceil(num * factor) / factor;\n            },\n            /**\n             * Rounds a number down to the nearest integer or specified decimal place.\n             *\n             * - If `precision` is `0`, it rounds down to the nearest whole number.\n             * - If `precision` is greater than `0`, it rounds down to the specified number of decimal places.\n             * - If `precision` is less than `0`, it rounds down to the nearest multiple of `10^precision`.\n             *\n             * @param num The number to be rounded down.\n             * @param precision The number of decimal places to retain (default: `0`).\n             * @returns The rounded-down number.\n             *\n             * @example\n             * getFloor(12.89); // 12\n             * getFloor(12.89, 1); // 12.8\n             * getFloor(12.89, 2); // 12.89\n             * getFloor(1299, -2); // 1200\n             */\n            getFloor(num: number, precision: number = 0): number {\n                num = hison.utils.getToNumber(num);\n                precision = Math.trunc(hison.utils.getToNumber(precision));\n                const factor = Math.pow(10, precision);\n                return Math.floor(num * factor) / factor;\n            },\n            /**\n             * Rounds a number to the nearest integer or specified decimal place.\n             *\n             * - If `precision` is `0`, it rounds to the nearest whole number.\n             * - If `precision` is greater than `0`, it rounds to the specified number of decimal places.\n             * - If `precision` is less than `0`, it rounds to the nearest multiple of `10^precision`.\n             *\n             * @param num The number to be rounded.\n             * @param precision The number of decimal places to retain (default: `0`).\n             * @returns The rounded number.\n             *\n             * @example\n             * getRound(12.49); // 12\n             * getRound(12.5); // 13\n             * getRound(12.345, 2); // 12.35\n             * getRound(1250, -2); // 1300\n             */\n            getRound(num: number, precision: number = 0): number {\n                num = hison.utils.getToNumber(num);\n                precision = Math.trunc(hison.utils.getToNumber(precision));\n                const factor = Math.pow(10, precision);\n                return Math.round(num * factor) / factor;\n            },\n            /**\n             * Truncates a number to the specified decimal place without rounding.\n             *\n             * - If `precision` is `0`, it removes the decimal part, keeping only the integer.\n             * - If `precision` is greater than `0`, it truncates the number at the specified decimal places.\n             * - If `precision` is less than `0`, it truncates to the nearest multiple of `10^precision`.\n             *\n             * @param num The number to be truncated.\n             * @param precision The number of decimal places to retain (default: `0`).\n             * @returns The truncated number.\n             *\n             * @example\n             * getTrunc(12.89); // 12\n             * getTrunc(12.89, 1); // 12.8\n             * getTrunc(12.89, 2); // 12.89\n             * getTrunc(1299, -2); // 1200\n             */\n            getTrunc(num: number, precision: number = 0): number {\n                num = hison.utils.getToNumber(num);\n                precision = Math.trunc(hison.utils.getToNumber(precision));\n                const factor = Math.pow(10, precision);\n                return Math.trunc(num * factor) / factor;\n            },\n            /**\n             * Calculates the byte length of a given string based on character encoding.\n             *\n             * - Uses UTF-8 encoding rules to determine the byte size of each character.\n             * - Character byte sizes are determined as follows:\n             *   - `charCode <= 0x7F` → 1 byte (ASCII characters).\n             *   - `charCode <= 0x7FF` → `CustomOption.LESSOREQ_0X7FF_BYTE` bytes. Default: 2\n             *   - `charCode <= 0xFFFF` → `CustomOption.LESSOREQ_0XFFFF_BYTE` bytes. Default: 3\n             *   - `charCode > 0xFFFF` → `CustomOption.GREATER_0XFFFF_BYTE` bytes. Default: 4\n             *\n             * @param str The input string.\n             * @returns The total byte length of the string.\n             *\n             * @example\n             * getByteLength(\"Hello\"); // 5 (each ASCII character is 1 byte)\n             * getByteLength(\"안녕하세요\"); // 15 (each Korean character is 3 bytes)\n             * getByteLength(\"𐍈\"); // 4 (UTF-16 surrogate pair)\n             */\n            getByteLength(str: string): number {\n                str = hison.utils.getToString(str);\n                let byteLength = 0;\n                for (let i = 0; i < str.length; i++) {\n                    const charCode = str.charCodeAt(i);\n                    if (charCode <= 0x7F) {\n                        byteLength += 1;\n                    } else if (charCode <= 0x7FF) {\n                        byteLength += customOption.utils.LESSOREQ_0X7FF_BYTE;\n                    } else if (charCode <= 0xFFFF) {\n                        byteLength += customOption.utils.LESSOREQ_0XFFFF_BYTE;\n                    } else {\n                        byteLength += customOption.utils.GREATER_0XFFFF_BYTE;\n                    }\n                }\n                return byteLength;\n            },\n            /**\n             * Truncates a string to fit within a specified byte length.\n             *\n             * - Uses UTF-8 encoding rules to calculate byte size.\n             * - Truncates the string at the point where the total byte length exceeds `cutByte`.\n             * - Character byte sizes are determined as follows:\n             *   - `charCode <= 0x7F` → 1 byte (ASCII characters).\n             *   - `charCode <= 0x7FF` → `CustomOption.LESSOREQ_0X7FF_BYTE` bytes.\n             *   - `charCode <= 0xFFFF` → `CustomOption.LESSOREQ_0XFFFF_BYTE` bytes.\n             *   - `charCode > 0xFFFF` → `CustomOption.GREATER_0XFFFF_BYTE` bytes.\n             *\n             * @param str The input string to be truncated.\n             * @param cutByte The maximum allowed byte length.\n             * @returns The truncated string that fits within the given byte length.\n             *\n             * @example\n             * getCutByteLength(\"Hello, World!\", 5); // \"Hello\"\n             * getCutByteLength(\"안녕하세요\", 6); // \"안녕\" (each Korean character is 3 bytes)\n             * getCutByteLength(\"𐍈𐍈𐍈\", 4); // \"𐍈\" (each surrogate pair character is 4 bytes)\n             */\n            getCutByteLength(str: string, cutByte: number): string {\n                str = hison.utils.getToString(str);\n                cutByte = hison.utils.getToNumber(cutByte);\n                let byteLength = 0;\n                let cutIndex = str.length;\n                for (let i = 0; i < str.length; i++) {\n                    const charCode = str.charCodeAt(i);\n                    if (charCode <= 0x7F) {\n                        byteLength += 1;\n                    } else if (charCode <= 0x7FF) {\n                        byteLength += customOption.utils.LESSOREQ_0X7FF_BYTE;\n                    } else if (charCode <= 0xFFFF) {\n                        byteLength += customOption.utils.LESSOREQ_0XFFFF_BYTE;\n                    } else {\n                        byteLength += customOption.utils.GREATER_0XFFFF_BYTE;\n                    }\n                    if (byteLength > cutByte) {\n                        cutIndex = i;\n                        break;\n                    }\n                }\n                return str.substring(0, cutIndex);\n            },\n            /**\n             * Adjusts a string to fit a specified length by evenly distributing spaces between characters.\n             *\n             * - If the string's length is already greater than or equal to `length`, it is returned as is.\n             * - Spaces are distributed as evenly as possible between characters to reach the desired length.\n             * - If the spacing is not evenly divisible, extra spaces are added starting from the left.\n             *\n             * @param str The input string.\n             * @param length The target total length of the formatted string.\n             * @returns A string with evenly distributed spaces to match the specified length.\n             *\n             * @example\n             * getStringLenForm(\"Hi\", 5); // \"H  i\"\n             * getStringLenForm(\"Hello\", 10); // \"H  e  l  l  o\"\n             * getStringLenForm(\"A\", 3); // \"A  \"\n             */\n            getStringLenForm(str: string, length: number): string {\n                str = hison.utils.getToString(str);\n                length = hison.utils.getToNumber(length);\n                const strLength = str.length;\n                if (strLength >= length) {\n                    return str;\n                }\n                const totalSpaces = length - strLength;\n                const gaps = strLength - 1;\n                const spacePerGap = Math.floor(totalSpaces / gaps);\n                const extraSpaces = totalSpaces % gaps;\n                let result = '';\n                for (let i = 0; i < gaps; i++) {\n                    result += str[i];\n                    result += ' '.repeat(spacePerGap + (i < extraSpaces ? 1 : 0));\n                }\n                result += str[strLength - 1];\n                return result;\n            },\n            /**\n             * Left-pads a string with a specified padding string until it reaches the desired length.\n             *\n             * - If the original string's length is already greater than or equal to `length`, it is returned as is.\n             * - The `padStr` is repeated as needed to fill the remaining space.\n             * - If `padStr` does not evenly divide into the required padding length, it may be truncated.\n             *\n             * @param str The original string.\n             * @param padStr The string used for padding.\n             * @param length The desired total length of the padded string.\n             * @returns The left-padded string.\n             *\n             * @example\n             * getLpad(\"123\", \"0\", 5); // \"00123\"\n             * getLpad(\"abc\", \"-\", 6); // \"---abc\"\n             * getLpad(\"test\", \"XY\", 10); // \"XYXYXYtest\"\n             */\n            getLpad(str: string, padStr: string, length: number): string {\n                str = hison.utils.getToString(str);\n                padStr = hison.utils.getToString(padStr);\n                length = hison.utils.getToNumber(length);\n                if (str.length >= length) return str.substring(str.length, length - 1);\n                const pad = padStr.repeat((length - str.length) / padStr.length);\n                return pad + str;\n            },\n            /**\n             * Right-pads a string with a specified padding string until it reaches the desired length.\n             *\n             * - If the original string's length is already greater than or equal to `length`, it is truncated to fit.\n             * - The `padStr` is repeated as needed to fill the remaining space.\n             * - If `padStr` does not evenly divide into the required padding length, it may be truncated.\n             *\n             * @param str The original string.\n             * @param padStr The string used for padding.\n             * @param length The desired total length of the padded string.\n             * @returns The right-padded string.\n             *\n             * @example\n             * getRpad(\"123\", \"0\", 5); // \"12300\"\n             * getRpad(\"abc\", \"-\", 6); // \"abc---\"\n             * getRpad(\"test\", \"XY\", 10); // \"testXYXYXY\"\n             */\n            getRpad(str: string, padStr: string, length: number): string {\n                str = hison.utils.getToString(str);\n                padStr = hison.utils.getToString(padStr);\n                length = hison.utils.getToNumber(length);\n                if (str.length >= length) return str.substring(0, length);\n                const pad = padStr.repeat((length - str.length) / padStr.length);\n                return str + pad;\n            },\n            /**\n             * Removes leading and trailing whitespace from a string.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Uses JavaScript's built-in `trim()` method to remove whitespace.\n             *\n             * @param str The input string.\n             * @returns The trimmed string without leading or trailing spaces.\n             *\n             * @example\n             * getTrim(\"  Hello World  \"); // \"Hello World\"\n             * getTrim(\"\\tTest String\\n\"); // \"Test String\"\n             * getTrim(\"   \"); // \"\" (empty string)\n             */\n            getTrim(str: string): string {\n                str = hison.utils.getToString(str);\n                return str.trim();\n            },\n            /**\n             * Replaces all occurrences of a target substring within a string with a specified replacement.\n             *\n             * - Converts all inputs to strings before processing.\n             * - Uses `split()` and `join()` to replace all instances of `targetStr` with `replaceStr`.\n             * - If `replaceStr` is not provided, occurrences of `targetStr` are removed.\n             *\n             * @param str The original string.\n             * @param targetStr The substring to be replaced.\n             * @param replaceStr The string to replace occurrences of `targetStr` (default: `''`).\n             * @returns A new string with all occurrences of `targetStr` replaced.\n             *\n             * @example\n             * getReplaceAll(\"hello world\", \"o\", \"O\"); // \"hellO wOrld\"\n             * getReplaceAll(\"banana\", \"a\", \"\"); // \"bnn\"\n             * getReplaceAll(\"2025-02-05\", \"-\", \"/\"); // \"2025/02/05\"\n             */\n            getReplaceAll(str: string, targetStr: string, replaceStr: string = ''): string {\n                str = hison.utils.getToString(str);\n                targetStr = hison.utils.getToString(targetStr);\n                replaceStr = hison.utils.getToString(replaceStr);\n                return str.split(targetStr).join(replaceStr);\n            },\n            /**\n             * Formats a number according to a specified format pattern.\n             *\n             * - Uses `CustomOption.numberFormat` as the default format if none is provided.\n             * - Supports various number formatting patterns, including:\n             *   - `\"#,###\"` → `\"1,234\"` (comma-separated thousands).\n             *   - `\"#,##0\"` → `\"1,234\"` (ensures at least one digit).\n             *   - `\".##\"` → `\"0.1\"` (no grouping).\n             *   - `\".00\"` → `\"0.10\"` (ensures at least one digit).\n             * - Supports decimal formatting and percentage notation (`\"%\"`).\n             * - Throws an error if the input is not a valid number or if the format is invalid.\n             *\n             * @param value The number to format.\n             * @param format The desired format pattern (optional). Default: `'#,##0.##'`\n             * @returns The formatted number as a string.\n             *\n             * @throws Error if the input value is not numeric or the format is invalid.\n             *\n             * @example\n             * getNumberFormat(1234); // \"1,234\" (default format)\n             * getNumberFormat(1234.5678, \"#,###.00\"); // \"1,234.56\"\n             * getNumberFormat(0.25, \"#,##0%\"); // \"25%\" (percentage conversion)\n             * getNumberFormat(-1234, \"#,###\"); // \"-1,234\"\n             */\n            getNumberFormat(value: number, format?: string): string {\n                value = hison.utils.getToNumber(value);\n                format = hison.utils.getToString(format);\n\n                const oriValue = value;\n                if (!hison.utils.isNumeric(value)) {\n                    throw new Error(`ER0021 Invalid number\\n=>${JSON.stringify(oriValue)}`);\n                }\n                format = format ? format : customOption.utils.numberFormat;\n                const regex = /^(.*?)([#0,.]+)(.*?)$/;\n                const matches = format.match(regex);\n        \n                if (!matches) {\n                    throw new Error(`ER0022 Invalid format\\n=>${JSON.stringify(format)}`);\n                }\n        \n                const prefix = matches[1];\n                const numberFormat = matches[2];\n                const suffix = matches[3];\n                const intergerFormat = numberFormat.split('.')[0];\n                const decimalFormat = numberFormat.split('.').length > 1 ? numberFormat.split('.')[1] : '';\n        \n                if (suffix === '%' || suffix === ' %') value = value * 100;\n        \n                let numStr = hison.utils.getToString(value);\n                const isNegative = numStr[0] === '-';\n                numStr = isNegative ? numStr.substring(1) : numStr;\n                let interger = numStr.split('.')[0];\n                let decimal = numStr.split('.').length > 1 ? numStr.split('.')[1] : '';\n                \n                let result: string;\n        \n                decimal = hison.utils.getToFloat('0.' + decimal)\n                        .toLocaleString('en',{\n                            minimumFractionDigits: decimalFormat.lastIndexOf('0') + 1,\n                            maximumFractionDigits: decimalFormat.length\n                            });\n                if (decimal === '0') decimal = '';\n                else decimal = decimal.substring(1);\n        \n                switch (intergerFormat) {\n                    case '#,###':\n                        if (hison.utils.getToNumber(interger) === 0) {\n                            result = decimal;\n                        }\n                        else {\n                            interger = hison.utils.getToFloat(interger).toLocaleString('en');\n                            result = interger + decimal;\n                        }\n                        break;\n                    case '#,##0':\n                        interger = hison.utils.getToFloat(interger).toLocaleString('en');\n                        result = interger + decimal;\n                        break;\n                    case '#':\n                        if (hison.utils.getToNumber(interger) === 0) {\n                            result = decimal;\n                        }\n                        else {\n                            result = interger + decimal;\n                        }\n                        break;\n                    case '0':\n                        result = interger + decimal;\n                        break;\n                    default:\n                        throw new Error(`ER0023 Invalid format\\n=>${JSON.stringify(format)}`);\n                }\n                result = isNegative ? '-' + result : result;\n                return prefix + result + suffix;\n            },\n            /**\n             * Removes all non-numeric characters from a string, leaving only digits.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Uses a regular expression to remove any character that is not a digit (`0-9`).\n             *\n             * @param str The input string.\n             * @returns A new string containing only numeric characters.\n             *\n             * @example\n             * getRemoveExceptNumbers(\"abc123def456\"); // \"123456\"\n             * getRemoveExceptNumbers(\"Phone: (555) 123-4567\"); // \"5551234567\"\n             * getRemoveExceptNumbers(\"No numbers here!\"); // \"\"\n             */\n            getRemoveExceptNumbers(str: string): string {\n                str = hison.utils.getToString(str);\n                return str.replace(/[^0-9]/g, '');\n            },\n            /**\n             * Removes all numeric characters from a string, leaving only non-numeric characters.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Uses a regular expression to remove any digit (`0-9`).\n             *\n             * @param str The input string.\n             * @returns A new string containing only non-numeric characters.\n             *\n             * @example\n             * getRemoveNumbers(\"abc123def456\"); // \"abcdef\"\n             * getRemoveNumbers(\"Phone: (555) 123-4567\"); // \"Phone: () -\"\n             * getRemoveNumbers(\"123456\"); // \"\" (all numbers removed)\n             */\n            getRemoveNumbers(str: string): string {\n                str = hison.utils.getToString(str);\n                return str.replace(/[0-9]/g, '');\n            },\n            /**\n             * Reverses the characters in a given string.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Splits the string into an array of characters, reverses the order, and joins them back.\n             *\n             * @param str The input string.\n             * @returns The reversed string.\n             *\n             * @example\n             * getReverse(\"hello\"); // \"olleh\"\n             * getReverse(\"12345\"); // \"54321\"\n             * getReverse(\"A B C\"); // \"C B A\"\n             */\n            getReverse(str: string): string {\n                str = hison.utils.getToString(str);\n                return str.split('').reverse().join('');\n            },\n            /**\n             * Converts the given value to a boolean.\n             *\n             * - Numeric values: `0` is `false`, any other number is `true`.\n             * - Boolean values: Returned as is.\n             * - String values: Returns `true` if the string matches predefined truthy values (`\"true\"`, `\"yes\"`, `\"checked\"`, etc.).\n             * - Other types: Returns `false`.\n             *\n             * @param value The value to be converted.\n             * @returns `true` if the value represents a truthy value, otherwise `false`.\n             *\n             * @example\n             * getToBoolean(1); // true\n             * getToBoolean(0); // false\n             * getToBoolean(\"yes\"); // true\n             * getToBoolean(\"false\"); // false\n             * getToBoolean(true); // true\n             * getToBoolean(null); // false\n             */\n            getToBoolean(value: any): boolean {\n                if (hison.utils.isNumeric(value)) {\n                    return Number(value) != 0;\n                }\n                else if (typeof value === 'boolean'){\n                    return value\n                }\n                else if (typeof value === 'string'){\n                    return ['t','true','y','yes','check','c','checked','selected','참'].indexOf(value.toLowerCase()) >= 0;\n                }\n                else {\n                    return false;\n                }\n            },\n            /**\n             * Converts the given value to a number.\n             *\n             * - If the value is numeric, it is returned as a number.\n             * - If the value is not a valid number, `impossibleValue` is returned instead.\n             *\n             * @param value The value to be converted.\n             * @param impossibleValue The fallback value if conversion fails (default: `0`).\n             * @returns The numeric representation of the value, or `impossibleValue` if conversion fails.\n             *\n             * @example\n             * getToNumber(\"123\"); // 123\n             * getToNumber(\"12.34\"); // 12.34\n             * getToNumber(\"abc\", -1); // -1 (fallback value)\n             * getToNumber(null, 100); // 100 (fallback value)\n             */\n            getToNumber(value: any, impossibleValue: number = 0): number {\n                return hison.utils.getToFloat(value, impossibleValue);\n            },\n            /**\n             * Converts the given value to a floating-point number.\n             *\n             * - If the value is numeric, it is converted to a float and returned.\n             * - If the value is not a valid number, `impossibleValue` is returned instead.\n             *\n             * @param value The value to be converted.\n             * @param impossibleValue The fallback value if conversion fails (default: `0`).\n             * @returns The floating-point representation of the value, or `impossibleValue` if conversion fails.\n             *\n             * @example\n             * getToFloat(\"123.45\"); // 123.45\n             * getToFloat(42); // 42\n             * getToFloat(\"abc\", -1); // -1 (fallback value)\n             * getToFloat(null, 100.5); // 100.5 (fallback value)\n             */\n            getToFloat(value: any, impossibleValue: number = 0): number {\n                if (!hison.utils.isNumeric(value)) {\n                    return impossibleValue;\n                }\n                return parseFloat(value);\n            },\n            /**\n             * Converts the given value to an integer.\n             *\n             * - If the value is numeric, it is converted to an integer using `Math.trunc()`.\n             * - If the value is not a valid number, `impossibleValue` is returned instead.\n             *\n             * @param value The value to be converted.\n             * @param impossibleValue The fallback value if conversion fails (default: `0`).\n             * @returns The integer representation of the value, or `impossibleValue` if conversion fails.\n             *\n             * @example\n             * getToInteger(\"123.45\"); // 123\n             * getToInteger(42.9); // 42\n             * getToInteger(\"abc\", -1); // -1 (fallback value)\n             * getToInteger(null, 100); // 100 (fallback value)\n             */\n            getToInteger(value: any, impossibleValue: number = 0): number {\n                if (!hison.utils.isNumeric(value)) {\n                    return Math.trunc(impossibleValue);\n                }\n                return Math.trunc(parseInt(value, 10));\n            },\n            /**\n             * Converts the given value to a string.\n             *\n             * - If the value is already a string, it is returned as is.\n             * - If the value is a number, boolean, or bigint, it is converted to a string.\n             * - If the value is a symbol, its description is returned.\n             * - If the value is `null`, `undefined`, or an unsupported type, `impossibleValue` is returned.\n             *\n             * @param str The value to be converted.\n             * @param impossibleValue The fallback value if conversion fails (default: `\"\"`).\n             * @returns The string representation of the value, or `impossibleValue` if conversion fails.\n             *\n             * @example\n             * getToString(123); // \"123\"\n             * getToString(true); // \"true\"\n             * getToString(Symbol(\"test\")); // \"test\"\n             * getToString(null, \"N/A\"); // \"N/A\" (fallback value)\n             */\n            getToString(str: any, impossibleValue: string = ''): string {\n                if (typeof str === 'string') {\n                } else if (typeof str === 'number' || typeof str === 'boolean' || typeof str === 'bigint') {\n                    str = String(str);\n                } else if (typeof str === 'symbol') {\n                    str = (str as Symbol).description;\n                } else {\n                    str = impossibleValue;\n                }\n                return str;\n            },\n            //etc\n            /**\n             * Returns a default value if the given value is `null` or `undefined`.\n             *\n             * - If `val` is `null` or `undefined`, `defaultValue` is returned.\n             * - Otherwise, `val` is returned as is.\n             *\n             * @param val The value to check.\n             * @param defaultValue The default value to return if `val` is `null` or `undefined`.\n             * @returns The original value if not `null` or `undefined`, otherwise the `defaultValue`.\n             *\n             * @example\n             * nvl(null, \"default\"); // \"default\"\n             * nvl(undefined, 100); // 100\n             * nvl(\"Hello\", \"default\"); // \"Hello\"\n             * nvl(0, \"fallback\"); // 0 (not null or undefined, so returned as is)\n             */\n            nvl(val: any, defaultValue: any): any {\n                return (val === null || val === undefined) ? defaultValue : val;\n            },\n            /**\n             * Extracts the file extension from a given filename or file path.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Splits the string by `.` and returns the last segment as the file extension.\n             * - If no extension is found, an empty string is returned.\n             *\n             * @param str The filename or file path.\n             * @returns The file extension as a string, or an empty string if no extension exists.\n             *\n             * @example\n             * getFileExtension(\"document.txt\"); // \"txt\"\n             * getFileExtension(\"archive.tar.gz\"); // \"gz\"\n             * getFileExtension(\"/path/to/file\"); // \"\" (no extension)\n             */\n            getFileExtension(str: string): string {\n                str = hison.utils.getToString(str);\n            \n                const extension = str.split('.').pop();\n                if (extension === str) {\n                    return '';\n                }\n                return extension ? extension : '';\n            },\n            /**\n             * Extracts the filename (without extension) from a given file path or filename.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Extracts the last part of the path after the last `/` (or full filename if no path exists).\n             * - Removes the file extension by cutting the string at the last `.` if present.\n             *\n             * @param str The full file path or filename.\n             * @returns The filename without the extension.\n             *\n             * @example\n             * getFileName(\"/path/to/document.txt\"); // \"document\"\n             * getFileName(\"archive.tar.gz\"); // \"archive.tar\"\n             * getFileName(\"file_without_extension\"); // \"file_without_extension\"\n             */\n            getFileName(str: string): string {\n                str = hison.utils.getToString(str);\n            \n                const fileName = str.split('/').pop();\n                if(!fileName) return '';\n                const lastDotIndex = fileName.lastIndexOf('.');\n            \n                if (lastDotIndex === -1) return fileName;\n                return fileName.substring(0, lastDotIndex);\n            },\n            /**\n             * Decodes a Base64-encoded string into a human-readable format.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Uses `atob()` to decode the Base64 string.\n             * - Decodes percent-encoded UTF-8 characters to properly restore special characters.\n             *\n             * @param str The Base64-encoded string.\n             * @returns The decoded string.\n             *\n             * @example\n             * getDecodeBase64(\"SGVsbG8gd29ybGQh\"); // \"Hello world!\"\n             * getDecodeBase64(\"44GT44KT44Gr44Gh44Gv\"); // \"こんにちは\" (Japanese \"Hello\")\n             */\n            getDecodeBase64(str: string): string {\n                str = hison.utils.getToString(str);\n                return decodeURIComponent(Array.prototype.map.call(atob(str), function(c) {\n                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n                }).join(''));\n            },\n            /**\n             * Encodes a string into Base64 format.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Uses `encodeURIComponent()` to properly handle special characters.\n             * - Encodes the string to Base64 using `btoa()`.\n             *\n             * @param str The input string to be encoded.\n             * @returns The Base64-encoded string.\n             *\n             * @example\n             * getEncodeBase64(\"Hello world!\"); // \"SGVsbG8gd29ybGQh\"\n             * getEncodeBase64(\"こんにちは\"); // \"44GT44KT44Gr44Gh44Gv\" (Japanese \"Hello\")\n             */\n            getEncodeBase64(str: string): string {\n                str = hison.utils.getToString(str);\n                return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(_, p1:string) {\n                    return String.fromCharCode(parseInt(p1, 16));\n                }));\n            },\n            /**\n             * Creates a deep copy of an object or array, preserving nested structures.\n             *\n             * - Handles `Object` and `Array` types recursively.\n             * - Supports cloning custom objects implementing `getIsDataWrapper()` or `getIsDataModel()`.\n             * - Prevents infinite loops by tracking previously copied references.\n             * - If the object is `null` or not an object, it is returned as is.\n             *\n             * @param object The object or array to be deep copied.\n             * @param visited An optional array to track visited references and prevent circular references.\n             * @returns A deep copy of the input object or array.\n             *\n             * @example\n             * const obj = { a: 1, b: { c: 2 } };\n             * const copy = deepCopyObject(obj);\n             * copy.b.c = 3;\n             * console.log(obj.b.c); // 2 (original object remains unchanged)\n             *\n             * const arr = [1, [2, 3]];\n             * const arrCopy = deepCopyObject(arr);\n             * arrCopy[1][0] = 99;\n             * console.log(arr[1][0]); // 2 (original array remains unchanged)\n             */\n            deepCopyObject(object: any, visited?: { source: any, copy: any }[]): any {\n                if (object === null || typeof object !== 'object') {\n                    return object;\n                }\n                if (object instanceof Response) {\n                    return object.clone();\n                }\n                if (object.constructor !== Object && object.constructor !== Array) {\n                    if ((object && object.getIsDataWrapper && object.getIsDataWrapper())\n                        ||(object && object.getIsDataModel && object.getIsDataModel())\n                    ) {\n                        return object.clone();\n                    } else {\n                        return object;\n                    }\n                }\n                if (!visited) visited = [];\n                for (let i = 0; i < visited.length; i++) {\n                    if (visited[i].source === object) {\n                        return visited[i].copy;\n                    }\n                }\n                let copy: any;\n                if (Array.isArray(object)) {\n                    copy = [];\n                    visited.push({ source: object, copy: copy });\n            \n                    for (let j = 0; j < object.length; j++) {\n                        copy[j] = hison.utils.deepCopyObject(object[j], visited);\n                    }\n                } else {\n                    copy = {};\n                    visited.push({ source: object, copy: copy });\n            \n                    for (let key in object) {\n                        if (object.hasOwnProperty(key)) {\n                            copy[key] = hison.utils.deepCopyObject(object[key], visited);\n                        }\n                    }\n                }\n                return copy;\n            },\n        };\n        shield = {\n            /**\n             * Executes security mechanisms for the given `Hison` object to enforce access restrictions and prevent unauthorized modifications.\n             *\n             * This function applies multiple layers of security, including:\n             * - **Object Freezing**: Prevents modification of the `Hison` object.\n             * - **Access Control by URL and IP**: Restricts access based on predefined security settings.\n             * - **Developer Tool Restrictions**: Prevents unauthorized debugging or tampering.\n             * - **Back Navigation Prevention**: Blocks browser back navigation if enabled.\n             *\n             * @param hison The main `Hison` object to be processed and optionally frozen for immutability.\n             *\n             * @throws Error If `hison` is not provided or is not a valid `Hison` instance.\n             *\n             * @remarks\n             * This function is designed to enhance security by enforcing strict runtime protections.\n             * It utilizes configuration settings from `customOption.shield` to determine the applied security policies.\n             *\n             * ---\n             * ### Security Features & Execution Flow\n             *\n             * ### 1. **Validation of `hison` Parameter**\n             * - If `hison` is not provided, an error is thrown:  \n             *   `\"Invalid arguments. Provide an object or a key-value pair.\"`\n             * - Ensures that the input is a valid `Hison` instance before executing security functions.\n             *\n             * ### 2. **Object Freezing (`isFreeze`)**\n             * - If `customOption.shield.isFreeze` is `true`, the `Hison` object is **deeply frozen**.\n             * - Uses the `deepFreeze()` function to recursively apply `Object.freeze()`, preventing any modifications.\n             *\n             * ### 3. **Access Control by URL (`shieldURL`)**\n             * - If `customOption.shield.shieldURL` is set:\n             *   - Ensures the current URL matches `shieldURL`. \n             *   - If the URL does not match, execution stops immediately.\n             *\n             * ### 4. **IP-Based Access Control (`exposeIpList`)**\n             * - If the request is **not from `localhost`**, it performs IP verification:\n             *   - Fetches the user's IP from `/ajax/getIp`.\n             *   - Compares the retrieved IP against `customOption.shield.exposeIpList`.\n             *   - If the IP is **not** in the list, additional restrictions are applied:\n             *     - **Back Navigation is Blocked** if `isPossibleGoBack` is `false`.\n             *     - **Developer Tools are Restricted** if `isPossibleOpenDevTool` is `false`.\n             *\n             * ### 5. **Back Navigation Prevention (`isPossibleGoBack`)**\n             * - If `customOption.shield.isPossibleGoBack` is `false`:\n             *   - Overrides the browser's back button functionality using `history.pushState()`.\n             *   - Registers an event listener to **prevent back navigation**.\n             *\n             * ### 6. **Developer Tool Restrictions (`isPossibleOpenDevTool`)**\n             * - If `customOption.shield.isPossibleOpenDevTool` is `false`:\n             *   - Blocks `F12` keypress to prevent opening developer tools.\n             *   - Uses `debugger` trick and event listeners (`resize`, `mousemove`, `focus`, `blur`) to detect dev tools.\n             *   - Displays a warning message and prevents further execution if dev tools are detected.\n             *\n             * ---\n             * ### Related Methods\n             * - `hison.setShieldURL(url: string)`\n             * - `hison.setExposeIpList(ipList: string[])`\n             * - `hison.setIsFreeze(state: boolean)`\n             * - `hison.setIsPossibleGoBack(state: boolean)`\n             * - `hison.setIsPossibleOpenDevTool(state: boolean)`\n             *\n             * @example\n             * // Execute security features for the Hison instance\n             * shield.excute(hison);\n             */\n            excute(hison: Hison) {\n                if (!hison) throw new Error(\"Invalid argument: 'hison' is required.\");\n                if (!hison.shield.isHison) throw new Error(\"Invalid argument: 'hison' must be an instance of Hison.\");\n\n                const deepFreeze = function(object: any) {\n                    const propNames = Object.getOwnPropertyNames(object);\n                \n                    propNames.forEach(function(name) {\n                        const prop = object[name];\n                \n                        if (typeof prop == 'object' && prop !== null) {\n                            deepFreeze(prop);\n                        }\n                    });\n                    \n                    return Object.freeze(object);\n                };\n                const shieldFuncGetIp = function(func: Function) {\n                    const httpRequest = new XMLHttpRequest();\n                    httpRequest.onreadystatechange = () => {\n                        if (httpRequest.readyState === XMLHttpRequest.DONE) {\n                            if (httpRequest.status === 200) {\n                                const result = httpRequest.response;\n                                func(result);\n                            } else {\n                                func(null);\n                            }\n                        }\n                    };\n                    httpRequest.open('get', '/ajax/getIp');\n                    httpRequest.responseType = 'json';\n                    httpRequest.send();\n                }\n                const shieldFuncCreateBlockDevMode = function() {\n                    const msg = 'Developer mode is not available.';\n                    document.onkeydown = function(event) {\n                        if (event.key === 'F12') {\n                            alert(msg);\n                            event.preventDefault();\n                            return false;\n                        }\n                    };\n                    \n                    function detectDevTool(allow?: any) {\n                        if (isNaN(+allow)) allow = 100;\n                        const start = +new Date();\n                        debugger;\n                        const end = +new Date();\n                        if (isNaN(start) || isNaN(end) || end - start > allow) {\n                            alert(msg);\n                            document.write(msg);\n                        }\n                    }\n                    \n                    window.addEventListener('load', detectDevTool);\n                    window.addEventListener('resize', detectDevTool);\n                    window.addEventListener('mousemove', detectDevTool);\n                    window.addEventListener('focus', detectDevTool);\n                    window.addEventListener('blur', detectDevTool);\n                }\n\n                if (customOption.shield.isFreeze) {\n                    deepFreeze(hison);\n                }\n                \n                if (location.href.indexOf('localhost') < 0){\n                    if (customOption.shield.shieldURL && location.href.indexOf(customOption.shield.shieldURL) < 0 ){\n                        return;\n                    }\n    \n                    shieldFuncGetIp(function(response: any) {\n                        const ip = response && response.ip ? response.ip : '';\n                        if (ip && customOption.shield.exposeIpList.indexOf(ip) >= 0) {\n                            return;\n                        }\n    \n                        if (!customOption.shield.isPossibleGoBack) {\n                            history.pushState(null, document.title, location.href);\n                            window.addEventListener('popstate', function() {\n                                history.pushState(null, document.title, location.href);\n                            });\n                        }\n                        \n                        if (!customOption.shield.isPossibleOpenDevTool) {\n                            shieldFuncCreateBlockDevMode();\n                            return;\n                        }\n                    });\n                }\n            }\n        };\n        data = {\n            /**\n             * The `DataWrapper` class provides a flexible key-value storage container\n             * within the `hisondev` solution. It allows storing various data types,\n             * including string value and `DataModel` instances.\n             *\n             * ### Core Features:\n             * - **Key-Value Storage:**\n             *   - Supports dynamic insertion and retrieval of key-value pairs.\n             *   - Ensures that keys are always strings.\n             * - **Integration with `DataModel`:**\n             *   - Allows storing `DataModel` instances under specific keys.\n             *   - Provides methods to retrieve `DataModel` instances safely.\n             * - **Serialization & Cloning:**\n             *   - Supports deep cloning of stored data.\n             *   - Provides JSON serialization for structured data handling.\n             * - **Validation & Type Safety:**\n             *   - Ensures type safety for values stored in `DataWrapper`.\n             *   - Throws errors when attempting to insert invalid types.\n             *\n             * ### Data Integrity & Deep Copying:\n             * - Uses `hison.utils.deepCopyObject()` to ensure stored objects are immutable.\n             * - Prevents unintended modifications by returning cloned values.\n             *\n             * ### Example Usage:\n             * ```typescript\n             * // Creating a DataWrapper with key-value pairs\n             * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n             * console.log(dataWrapper.getString(\"name\")); // Output: \"Alice\"\n             *\n             * // Storing a DataModel instance\n             * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n             * dataWrapper.putDataModel(\"users\", dataModel);\n             * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n             *\n             * // Serializing the DataWrapper to JSON\n             * console.log(dataWrapper.getSerialized());\n             * ```\n             */\n            DataWrapper : class implements InterfaceDataWrapper {\n                /**\n                 * Creates an instance of `DataWrapper`, which serves as a key-value storage container.\n                 * It allows storing primitive values and `DataModel` instances with flexible key-value mappings.\n                 *\n                 * ### Parameters\n                 * - `keyOrObject` **(Record<string, InterfaceDataModel<any> | string> | string, optional)**: \n                 *   This parameter can be:\n                 *   - An **object** where each key is mapped to either a `DataModel` instance or a string.\n                 *   - A **single string key**, when paired with the `value` parameter.\n                 * - `value` **(`InterfaceDataModel<any> | string`, optional)**: The value associated with \n                 *   the provided key, required only when `keyOrObject` is a string.\n                 *\n                 * ### Behavior\n                 * - If an **object** is provided, all key-value pairs from the object are stored in the `DataWrapper`.\n                 * - If a **string and value** are provided, a single key-value pair is stored.\n                 * - If neither condition is met, an error is thrown.\n                 *\n                 * ### Returns\n                 * - A new `DataWrapper` instance with the specified key-value pairs stored.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * // Creating a DataWrapper with an object\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: \"25\" });\n                 * console.log(dataWrapper.getString(\"name\")); // Output: \"Alice\"\n                 *\n                 * // Storing a DataModel inside DataWrapper\n                 * const userModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * const modelWrapper = new hison.data.DataWrapper(\"users\", userModel);\n                 * console.log(modelWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n                 * ```\n                 *\n                 * @constructor\n                 * @param {Record<string, InterfaceDataModel<any> | string> | string} [keyOrObject] The initial data \n                 *     for storage, either as an object or a single key.\n                 * @param {InterfaceDataModel<any> | string} [value] The value to be associated with a single key.\n                 * @throws {Error} If the provided arguments do not match the expected format.\n                 */\n                constructor(keyOrObject?: Record<string, InterfaceDataModel<any> | string> | string, value?: InterfaceDataModel<any> | string) {\n                    this._data = {};\n                    if (keyOrObject === undefined) return;\n                    if (typeof keyOrObject === 'object' && keyOrObject !== null) {\n                        for (let key in keyOrObject) {\n                            this._put(key, keyOrObject[key]);\n                        }\n                    } else if (typeof keyOrObject === 'string' && value !== undefined) {\n                        this._put(keyOrObject, value);\n                    } else {\n                        throw new Error('Invalid arguments. Provide an object or a key-value pair.');\n                    }\n                }\n                private _data: Record<string, InterfaceDataModel<any> | string | null>;\n                private _isDataWrapper = true;\n                private _put = (key: string, value: any) => {\n                    if (typeof key !== 'string') {\n                        throw new Error('Keys must always be strings.');\n                    } else if (typeof value === 'string') {\n                        this._data[key] = value;\n                    } else if (typeof value === 'number' || typeof value === 'boolean' || typeof value === 'bigint') {\n                        this._data[key] = String(value);\n                    } else if (typeof value === 'symbol') {\n                        this._data[key] = value.description ? value.description : null;\n                    } else if (value === null) {\n                        this._data[key] = null;\n                    } else if (value === undefined) {\n                        throw new Error('You can not put a value of undefined type.');\n                    } else if (typeof value === 'object') {\n                        if (!value || !value.getIsDataModel || !value.getIsDataModel()) {\n                            throw new Error('Please insert only values convertible to string or of data-model type.');\n                        }\n                        this._data[key] = value.clone();\n                    } else {\n                        throw new Error('Please insert only values convertible to string or of data-model type.');\n                    }\n                };\n                /**\n                 * Checks whether the current instance is a `DataWrapper`.\n                 * This method is primarily used for type verification.\n                 *\n                 * ### Returns\n                 * - **`boolean`**: Returns `true` if the instance is a `DataWrapper`, otherwise `false`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ key: \"value\" });\n                 * console.log(dataWrapper.getIsDataWrapper()); // Output: true\n                 * ```\n                 *\n                 * @returns {boolean} `true` if the instance is a `DataWrapper`, otherwise `false`.\n                 */\n                getIsDataWrapper = (): boolean => {\n                    return this._isDataWrapper;\n                };\n                /**\n                 * Creates and returns a deep copy of the current `DataWrapper` instance.\n                 * This method ensures that all stored key-value pairs are fully cloned, \n                 * preventing unintended modifications between the original and copied instances.\n                 *\n                 * ### Implementation Details\n                 * - Uses `hison.utils.deepCopyObject()` to recursively copy nested objects and arrays.\n                 * - Supports cloning `DataModel` instances stored within the `DataWrapper`.\n                 * - Prevents circular references by tracking previously copied objects.\n                 * - Ensures that modifications in the cloned instance do not affect the original instance.\n                 *\n                 * ### Returns\n                 * - **`DataWrapper`**: A new `DataWrapper` instance containing a deep copy of the original data.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * const clonedWrapper = dataWrapper.clone();\n                 * \n                 * console.log(clonedWrapper.getString(\"name\")); // Output: \"Alice\"\n                 * console.log(clonedWrapper !== dataWrapper);   // Output: true (Cloned instance is independent)\n                 *\n                 * // Deep copy verification\n                 * const originalNested = new hison.data.DataModel([{ id: 1, value: \"Test\" }]);\n                 * const dataWrapperWithModel = new hison.data.DataWrapper({ nested: originalNested });\n                 * const clonedWrapperWithModel = dataWrapperWithModel.clone();\n                 * \n                 * console.log(clonedWrapperWithModel.getDataModel(\"nested\") !== originalNested); // Output: true\n                 * ```\n                 *\n                 * @returns {InterfaceDataWrapper} A new `DataWrapper` instance with a deep copy of the stored data.\n                 */\n                clone = (): InterfaceDataWrapper | null => {\n                    const newData: Record<string, any> = {};\n                    for (let key in this._data) {\n                        newData[key] = hison.utils.deepCopyObject(this._data[key]);\n                    }\n                    return new hison.data.DataWrapper(newData);\n                };\n                /**\n                 * Removes all stored key-value pairs in the `DataWrapper`, resetting it to an empty state.\n                 * \n                 * ### Behavior\n                 * - Clears the internal storage by setting `_data` to an empty object.\n                 * - Returns the same `DataWrapper` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`DataWrapper`**: The current instance after clearing all stored data.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ key1: \"value1\", key2: \"value2\" });\n                 * console.log(dataWrapper.size()); // Output: 2\n                 * \n                 * dataWrapper.clear();\n                 * console.log(dataWrapper.size()); // Output: 0\n                 * ```\n                 *\n                 * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after clearing all data.\n                 */\n                clear = (): InterfaceDataWrapper => {\n                    this._data = {};\n                    return this;\n                };\n                /**\n                 * Serializes the `DataWrapper` into a JSON string representation.\n                 * Converts stored `DataModel` instances into their row data format for proper serialization.\n                 *\n                 * ### Behavior\n                 * - Iterates through all key-value pairs in the `DataWrapper`.\n                 * - If a value is a `DataModel`, it is converted to an array of rows using `getRows()`.\n                 * - Other values are stored as-is.\n                 * - The final object is serialized into a JSON string.\n                 *\n                 * ### Returns\n                 * - **`string`**: A JSON string representation of the `DataWrapper` contents.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * const dataWrapper = new hison.data.DataWrapper({ users: dataModel, status: \"active\" });\n                 * \n                 * console.log(dataWrapper.getSerialized());\n                 * // Output: '{\"users\":[{\"id\":1,\"name\":\"Alice\"}],\"status\":\"active\"}'\n                 * ```\n                 *\n                 * @returns {string} JSON string representation of the stored data.\n                 */\n                getSerialized = (): string => {\n                    const data: Record<string, any> = {};\n                    \n                    for (let key in this._data) {\n                        if (this._data.hasOwnProperty(key)) {\n                            if (this._data[key] &&\n                                (this._data[key] as InterfaceDataModel<any>).getIsDataModel &&\n                                (this._data[key] as InterfaceDataModel<any>).getIsDataModel()\n                            ) {\n                                data[key] = (this._data[key] as InterfaceDataModel<any>).getRows();\n                            } else {\n                                data[key] = this._data[key];\n                            }\n                        }\n                    }\n                    return JSON.stringify(data);\n                };\n                /**\n                 * Retrieves the value associated with the specified key from the `DataWrapper`.\n                 * If the value exists, a deep copy is returned to prevent unintended modifications.\n                 *\n                 * ### Generic Type `<T>`\n                 * - `T` represents the shape of the `DataModel` rows.\n                 * - If `T` is not specified, it defaults to `Record<string, any>`, allowing dynamic structures.\n                 *\n                 * ### Parameters\n                 * - `key` **(string)**: The key associated with the value to retrieve.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - If the key exists and contains a `DataModel<T>`, returns a deep copy of the stored `DataModel<T>`.\n                 * - If the key exists but is a string, returns the stored string value.\n                 * - If the key does not exist, returns `null`.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T> | string | null`**: \n                 *   - A deep copy of the `DataModel<T>` if stored under the key.\n                 *   - The string value if a string was stored under the key.\n                 *   - `null` if the key does not exist.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 * }\n                 *\n                 * const dataWrapper = new hison.data.DataWrapper();\n                 *\n                 * // Storing a string value\n                 * dataWrapper.put(\"message\", \"Hello\");\n                 * console.log(dataWrapper.get(\"message\")); // Output: \"Hello\"\n                 *\n                 * // Storing a DataModel with a defined type\n                 * const userModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * dataWrapper.put(\"users\", userModel);\n                 *\n                 * // Retrieving with type inference\n                 * const users = dataWrapper.get<User>(\"users\");\n                 * console.log(users?.getRowCount()); // Output: 2\n                 * console.log(users?.getValue(0, \"name\").toUpperCase()); // Output: \"ALICE\"\n                 *\n                 * // Attempting to retrieve a non-existent key\n                 * console.log(dataWrapper.get(\"nonExistentKey\")); // Output: null\n                 * ```\n                 *\n                 * @param {string} key The key to retrieve the associated value.\n                 * @returns {InterfaceDataModel<T = Record<string, any>> | string | null} A deep copy of the stored value, or `null` if the key is not found.\n                 */\n                get = <T = Record<string, any>>(key: string): InterfaceDataModel<T> | string | null => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    return this._data[key] ? hison.utils.deepCopyObject(this._data[key]) : null;\n                };\n                /**\n                 * Retrieves the string value associated with the specified key from the `DataWrapper`.\n                 * Ensures that the retrieved value is explicitly a string before returning it.\n                 *\n                 * ### Parameters\n                 * - `key` **(string)**: The key associated with the string value to retrieve.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Throws an error if the value associated with `key` is not a string.\n                 * - Returns the string value if it exists; otherwise, returns `null`.\n                 *\n                 * ### Returns\n                 * - **`string | null`**: The associated string value, or `null` if the key is not found.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ status: \"active\", count: 5 });\n                 * \n                 * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\n                 * console.log(dataWrapper.getString(\"nonExistentKey\")); // Output: null\n                 *\n                 * // Throws an error: \"The data does not contain the specified string value.\"\n                 * console.log(dataWrapper.getString(\"count\"));\n                 * ```\n                 *\n                 * @param {string} key The key associated with the string value.\n                 * @returns {string | null} The associated string value, or `null` if not found.\n                 * @throws {Error} If the key is not a string or if the stored value is not a string.\n                 */\n                getString = (key: string): string | null => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    if (typeof this._data[key] !== 'string') throw new Error('The data does not contain the specified string value.');\n                    return this._data[key] ? this._data[key] as string : null;\n                };\n                /**\n                 * Retrieves the `DataModel<T>` instance associated with the specified key from the `DataWrapper`.\n                 * Ensures that the retrieved value is a valid `DataModel<T>` before returning a cloned copy.\n                 *\n                 * ### Generic Type `<T>`\n                 * - `T` represents the shape of each row in the `DataModel<T>`.\n                 * - If `T` is not specified, it defaults to `Record<string, any>`, allowing dynamic structures.\n                 *\n                 * ### Parameters\n                 * - `key` **(string)**: The key associated with the `DataModel<T>` instance to retrieve.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Throws an error if the value associated with `key` is not a valid `DataModel<T>` instance.\n                 * - Returns a deep-cloned copy of the `DataModel<T>` to maintain data integrity.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: A cloned `DataModel<T>` instance retrieved from the `DataWrapper`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 * }\n                 * \n                 * const userModel = new hison.data.DataModel<User>([{ id: 1, name: \"Alice\" }]);\n                 * const dataWrapper = new hison.data.DataWrapper();\n                 * dataWrapper.put(\"users\", userModel);\n                 * \n                 * // Retrieving with type inference\n                 * const clonedDataModel = dataWrapper.getDataModel<User>(\"users\");\n                 * console.log(clonedDataModel.getRowCount()); // Output: 1\n                 * console.log(clonedDataModel.getValue(0, \"name\").toUpperCase()); // Output: \"ALICE\"\n                 *\n                 * // Throws an error: \"The data does not contain the specified data-model value.\"\n                 * console.log(dataWrapper.getDataModel(\"nonExistentKey\"));\n                 * ```\n                 *\n                 * @param {string} key The key associated with the `DataModel<T>` instance.\n                 * @returns {InterfaceDataModel<T>} A cloned `DataModel<T>` instance retrieved from the `DataWrapper`.\n                 * @throws {Error} If the key is not a string or if the stored value is not a valid `DataModel<T>`.\n                 */\n                getDataModel = <T = Record<string, any>>(key: string): InterfaceDataModel<T> => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    if (!this._data[key] || !(this._data[key] as InterfaceDataModel<T>).getIsDataModel || !(this._data[key] as InterfaceDataModel<T>).getIsDataModel()) throw new Error('The data does not contain the specified data-model value.');\n                    return (this._data[key] as InterfaceDataModel<T>).clone();\n                };\n                /**\n                 * Inserts or updates a key-value pair in the `DataWrapper`.\n                 * Allows storing primitive values, strings, and `DataModel` instances.\n                 *\n                 * ### Parameters\n                 * - `key` **(string)**: The key under which the value will be stored.\n                 * - `value` **(any)**: The value to be stored. Can be a string, number, boolean, `DataModel`, or other valid types.\n                 *\n                 * ### Behavior\n                 * - Calls the internal `_put()` method to validate and store the value.\n                 * - If the key already exists, its value is updated.\n                 * - Returns the current `DataWrapper` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`DataWrapper`**: The current instance after inserting/updating the value.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper();\n                 * \n                 * // Storing a string value\n                 * dataWrapper.put(\"status\", \"active\");\n                 * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\n                 * \n                 * // Storing a DataModel instance\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * dataWrapper.put(\"users\", dataModel);\n                 * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n                 * ```\n                 *\n                 * @param {string} key The key under which the value is stored.\n                 * @param {any} value The value to store.\n                 * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\n                 */\n                put = (key: string, value: any): InterfaceDataWrapper => {\n                    this._put(key, value);\n                    return this;\n                };\n                /**\n                 * Inserts or updates a key-value pair in the `DataWrapper`, ensuring that the value is a string-convertible type.\n                 * Only accepts primitive types (`string`, `number`, `boolean`, `bigint`, `symbol`) or `null`.\n                 *\n                 * ### Parameters\n                 * - `key` **(string)**: The key under which the value will be stored.\n                 * - `value` **(string | number | boolean | bigint | symbol | null)**: The value to be stored, \n                 *   restricted to types that can be converted to a string.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Throws an error if `value` is not of a valid type.\n                 * - Calls the internal `_put()` method to store the value.\n                 * - Returns the current `DataWrapper` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`DataWrapper`**: The current instance after inserting/updating the value.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper();\n                 * \n                 * // Storing a string value\n                 * dataWrapper.putString(\"status\", \"active\");\n                 * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\n                 *\n                 * // Storing a number (converted to string internally)\n                 * dataWrapper.putString(\"count\", 10);\n                 * console.log(dataWrapper.getString(\"count\")); // Output: \"10\"\n                 *\n                 * // Throws an error: \"Please insert only values convertible to string type.\"\n                 * dataWrapper.putString(\"invalid\", { key: \"value\" });\n                 * ```\n                 *\n                 * @param {string} key The key under which the value is stored.\n                 * @param {string | number | boolean | bigint | symbol | null} value The value to store.\n                 * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\n                 * @throws {Error} If `key` is not a string or `value` is not a valid type.\n                 */\n                putString = (key: string, value: string | number | boolean | bigint | symbol | null): InterfaceDataWrapper => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    if (typeof value !== 'string'\n                        && typeof value !== 'number'\n                        && typeof value !== 'boolean'\n                        && typeof value !== 'bigint'\n                        && typeof value !== 'symbol'\n                        && value !== null) {\n                        throw new Error('Please insert only values convertible to string type.');\n                    }\n                    this._put(key, value);\n                    return this;\n                };\n                /**\n                 * Inserts or updates a `DataModel` instance in the `DataWrapper`.\n                 * Ensures that the stored value is a valid `DataModel`.\n                 *\n                 * ### Parameters\n                 * - `key` **(string)**: The key under which the `DataModel` will be stored.\n                 * - `value` **(`DataModel`)**: The `DataModel` instance to be stored.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Throws an error if `value` is not a valid `DataModel` instance.\n                 * - Calls the internal `_put()` method to store the `DataModel`.\n                 * - Returns the current `DataWrapper` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`DataWrapper`**: The current instance after inserting/updating the `DataModel`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper();\n                 * \n                 * // Creating and storing a DataModel\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * dataWrapper.putDataModel(\"users\", dataModel);\n                 * \n                 * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n                 *\n                 * // Throws an error: \"Please insert only values of data-model type.\"\n                 * dataWrapper.putDataModel(\"invalid\", \"not a DataModel\");\n                 * ```\n                 *\n                 * @param {string} key The key under which the `DataModel` is stored.\n                 * @param {InterfaceDataModel<any>} value The `DataModel` instance to store.\n                 * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\n                 * @throws {Error} If `key` is not a string or `value` is not a valid `DataModel`.\n                 */\n                putDataModel = (key: string, value: InterfaceDataModel<any>): InterfaceDataWrapper => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    if (value === null || !value.getIsDataModel || !value.getIsDataModel()) {\n                        throw new Error('Please insert only values of data-model type.');\n                    }\n                    this._put(key, value);\n                    return this;\n                };\n                /**\n                 * Converts the `DataWrapper` instance into a standard JavaScript object.\n                 * If the stored values include `DataModel` instances, they are converted into object representations.\n                 *\n                 * ### Behavior\n                 * - Iterates through all key-value pairs in the `DataWrapper`.\n                 * - If a value is a `DataModel`, it is converted using `getObject()`.\n                 * - Other values are returned as-is.\n                 * - Returns a plain JavaScript object representation of the `DataWrapper`.\n                 *\n                 * ### Returns\n                 * - **`Record<string, any>`**: A plain object containing all stored key-value pairs.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * const dataWrapper = new hison.data.DataWrapper({ users: dataModel, status: \"active\" });\n                 * \n                 * console.log(dataWrapper.getObject());\n                 * // Output: { users: { cols: [\"id\", \"name\"], rows: [{ id: 1, name: \"Alice\" }] }, status: \"active\" }\n                 * ```\n                 *\n                 * @returns {Record<string, any>} A plain object representation of the `DataWrapper` instance.\n                 */\n                getObject = (): Record<string, any> => {\n                    const result: Record<string, any> = {};\n                    for(let key in this._data) {\n                        if (this._data[key] && (this._data[key] as InterfaceDataModel<any>).getIsDataModel && (this._data[key] as InterfaceDataModel<any>).getIsDataModel()) {\n                            result[key] = (this._data[key] as InterfaceDataModel<any>).getObject();\n                        } else {\n                            result[key] = this._data[key];\n                        }\n                    }\n                    return result;\n                };\n                /**\n                 * Checks whether the `DataWrapper` contains a specified key.\n                 *\n                 * ### Parameters\n                 * - `key` **(string)**: The key to check for existence in the `DataWrapper`.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Uses `hasOwnProperty()` to determine if the key exists in the stored data.\n                 *\n                 * ### Returns\n                 * - **`boolean`**: `true` if the key exists, otherwise `false`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * \n                 * console.log(dataWrapper.containsKey(\"name\")); // Output: true\n                 * console.log(dataWrapper.containsKey(\"nonExistentKey\")); // Output: false\n                 * ```\n                 *\n                 * @param {string} key The key to check for existence.\n                 * @returns {boolean} `true` if the key exists, otherwise `false`.\n                 * @throws {Error} If `key` is not a string.\n                 */\n                containsKey = (key: string): boolean => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    return this._data.hasOwnProperty(key);\n                };\n                /**\n                 * Checks whether the `DataWrapper` is empty (i.e., contains no key-value pairs).\n                 *\n                 * ### Behavior\n                 * - Determines emptiness by checking if the number of stored keys is `0`.\n                 *\n                 * ### Returns\n                 * - **`boolean`**: `true` if the `DataWrapper` contains no data, otherwise `false`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper();\n                 * console.log(dataWrapper.isEmpty()); // Output: true\n                 * \n                 * dataWrapper.put(\"status\", \"active\");\n                 * console.log(dataWrapper.isEmpty()); // Output: false\n                 * ```\n                 *\n                 * @returns {boolean} `true` if the `DataWrapper` contains no data, otherwise `false`.\n                 */\n                isEmpty = (): boolean => {\n                    return Object.keys(this._data).length === 0;\n                };\n                /**\n                 * Removes a key-value pair from the `DataWrapper` if the key exists and returns the removed value.\n                 *\n                 * ### Parameters\n                 * - `key` **(string)**: The key to be removed from the `DataWrapper`.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Checks if the key exists using `hasOwnProperty()`.\n                 * - If the key exists, retrieves the associated value and deletes the key.\n                 * - Returns the removed value, which can be either a `DataModel` or a `string`.\n                 * - If the key does not exist, returns `null`.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T> | string | null`**:\n                 *   - The removed value if the key existed.\n                 *   - `null` if the key was not found in the `DataWrapper`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: \"25\" });\n                 * \n                 * console.log(dataWrapper.containsKey(\"name\")); // Output: true\n                 * \n                 * const removedValue = dataWrapper.remove(\"name\");\n                 * console.log(removedValue); // Output: \"Alice\"\n                 * console.log(dataWrapper.containsKey(\"name\")); // Output: false\n                 *\n                 * const nonExistentValue = dataWrapper.remove(\"nonExistentKey\");\n                 * console.log(nonExistentValue); // Output: null\n                 * ```\n                 *\n                 * @param {string} key The key to remove from the `DataWrapper`.\n                 * @returns {InterfaceDataModel<T> | string | null} The removed value if it existed, otherwise `null`.\n                 * @throws {Error} If `key` is not a string.\n                 */\n                remove = <T = Record<string, any>>(key: string): InterfaceDataModel<T> | string | null => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    let result: InterfaceDataModel<T> | string | null = null;\n                    if (this._data.hasOwnProperty(key)) {\n                        result = this._data[key];\n                        delete this._data[key];\n                    }\n                    return result;\n                };\n                /**\n                 * Returns the number of key-value pairs stored in the `DataWrapper`.\n                 *\n                 * ### Behavior\n                 * - Counts the number of keys present in the internal data storage.\n                 *\n                 * ### Returns\n                 * - **`number`**: The total number of stored key-value pairs.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * console.log(dataWrapper.size()); // Output: 2\n                 * \n                 * dataWrapper.put(\"status\", \"active\");\n                 * console.log(dataWrapper.size()); // Output: 3\n                 * ```\n                 *\n                 * @returns {number} The number of stored key-value pairs in the `DataWrapper`.\n                 */\n                size = (): number => {\n                    return Object.keys(this._data).length;\n                };\n                /**\n                 * Retrieves an array of all keys stored in the `DataWrapper`.\n                 *\n                 * ### Behavior\n                 * - Returns a list of all keys currently stored in the `DataWrapper`.\n                 * - If the `DataWrapper` is empty, returns an empty array.\n                 *\n                 * ### Returns\n                 * - **`string[]`**: An array containing all stored keys.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * console.log(dataWrapper.keys()); // Output: [\"name\", \"age\"]\n                 * \n                 * dataWrapper.clear();\n                 * console.log(dataWrapper.keys()); // Output: []\n                 * ```\n                 *\n                 * @returns {string[]} An array of keys stored in the `DataWrapper`.\n                 */\n                keys = (): string[] => {\n                    return Object.keys(this._data);\n                };\n                /**\n                 * Retrieves an array of all values stored in the `DataWrapper`.\n                 * Ensures that stored values are returned as deep copies to prevent unintended modifications.\n                 *\n                 * ### Behavior\n                 * - Iterates through all key-value pairs in the `DataWrapper`.\n                 * - Uses `hison.utils.deepCopyObject()` to return deep copies of stored values.\n                 * - If the `DataWrapper` is empty, returns an empty array.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<any>[] | string[]`**: An array containing deep copies of all stored values.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * console.log(dataWrapper.values()); // Output: [\"Alice\", 25]\n                 * \n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * dataWrapper.put(\"users\", dataModel);\n                 * console.log(dataWrapper.values()); // Output: [\"Alice\", 25, <cloned DataModel>]\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel<any>[] | string[]} An array of deep-copied values stored in the `DataWrapper`.\n                 */\n                values = (): InterfaceDataModel<any>[] | string[] => {\n                    const values:InterfaceDataModel<any>[] | string[] = [];\n                    for (let key in this._data) {\n                        if (this._data.hasOwnProperty(key)) {\n                            values.push(hison.utils.deepCopyObject(this._data[key]));\n                        }\n                    }\n                    return values;\n                };\n            },\n            /**\n             * The `InterfaceDataModel<T>` interface defines the structure for managing tabular data within the `hisondev` solution.\n             * It is designed to store, manipulate, and retrieve data efficiently while ensuring type consistency and validation.\n             *\n             * ### Generic Type `<T>`\n             * - `T` represents the shape of each row in the `DataModel`.\n             * - By specifying `T`, developers can enforce type safety for row values.\n             * - If no type is provided, `T` defaults to `Record<string, any>`, allowing dynamic structures.\n             * \n             * ### Core Features:\n             * - **Column and Row Management:**\n             *   - Supports dynamic addition and removal of columns and rows.\n             *   - Ensures column consistency when inserting data.\n             * - **Validation and Formatting:**\n             *   - Allows setting a `DataModelValidator` to check column values.\n             *   - Supports `DataModelFormatter` to format column values uniformly.\n             * - **Filtering and Searching:**\n             *   - Provides methods to filter rows based on conditions (`filterRows()`, `searchRows()`).\n             *   - Allows searching rows and modifying data accordingly (`searchAndModify()`).\n             * - **Sorting and Structuring:**\n             *   - Supports ascending, descending, and reverse sorting on both columns and rows.\n             * - **Serialization and Cloning:**\n             *   - Enables deep copying of the entire `DataModel<T>`.\n             *   - Provides `getSerialized()` to retrieve a JSON string of the model.\n             * - **Integration with `DataWrapper`**\n             *   - `DataWrapper` is an instance for storing `DataModel<T>`.\n             *\n             * ### Data Consistency and Validation:\n             * - Uses `_deepCopy()` to ensure stored objects are immutable.\n             * - Prevents invalid data types using `_getValidRowValue()`.\n             * - Ensures uniform column data types to maintain consistency.\n             *\n             * ### Example Usage:\n             * ```typescript\n             * interface User {\n             *     id: number;\n             *     name: string;\n             *     age: number;\n             * }\n             * \n             * // Creating a DataModel with a defined type\n             * const dataModel: InterfaceDataModel<User> = new hison.data.DataModel<User>([\n             *     { id: 1, name: \"Alice\", age: 25 },\n             *     { id: 2, name: \"Bob\", age: 30 }\n             * ]);\n             * \n             * // Add a new column (TypeScript enforces type constraints)\n             * dataModel.addColumn(\"gender\");\n             * \n             * // Set a default value for a column\n             * dataModel.setColumnSameValue(\"gender\", \"Unknown\");\n             * \n             * // Apply a formatting function to the age column\n             * dataModel.setColumnSameFormat(\"age\", (value) => `${value} years old`);\n             * \n             * // Get filtered rows where age is greater than 25\n             * const filtered = dataModel.filterRows(row => row.age > 25);\n             * console.log(filtered);\n             * ```\n             *\n             * ### Related Functions:\n             * - `hison.setConvertValue()`: Sets the conversion logic for special values before insertion.\n             */\n            DataModel : class<T extends Record<string, any> = Record<string, any>> implements InterfaceDataModel<T> {\n                /**\n                 * Creates a `DataModel<T>` instance, which manages a structured table-like data format.\n                 * The instance allows for efficient row and column management.\n                 *\n                 * ### Generic Type `<T>`\n                 * - `T` represents the structure of each row in the `DataModel<T>`.\n                 * - If no type is provided, `T` defaults to `Record<string, any>`, allowing flexible structures.\n                 *\n                 * ### Parameters\n                 * - `data` **(T[] | T, optional)**: The initial dataset, which can be:\n                 *   - An **array of objects (`T[]`)**, where each object represents a row and its keys represent columns.\n                 *   - A **single object (`T`)**, representing a single-row initialization.\n                 *   - An **array of strings**, which initializes column names (if `T` is `Record<string, any>`).\n                 *\n                 * ### Behavior\n                 * - If no data is provided, an empty `DataModel<T>` is created.\n                 * - Calls `_put(data)`, which processes the input and initializes `_cols` and `_rows` accordingly.\n                 *\n                 * ### Returns\n                 * - **`DataModel<T>`**: A new instance containing structured tabular data.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 * }\n                 * \n                 * // Creating a DataModel with an array of objects (rows)\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 *\n                 * console.log(dataModel.getRowCount()); // Output: 2\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 *\n                 * // Creating a DataModel with a single object (one row)\n                 * const singleRowModel = new hison.data.DataModel<User>({ id: 1, name: \"Alice\" });\n                 * console.log(singleRowModel.getRowCount()); // Output: 1\n                 * ```\n                 *\n                 * @constructor\n                 * @param {T[] | T} [data] The initial dataset, which can be an array of objects, an array of column names, or a single object.\n                 */\n                constructor(data?: T[] | T) {\n                    if (!data) return;\n                    this._put(data);\n                }\n                private _cols: string[] = [];\n                private _rows: T[] = [];\n                private _isDataModel = true;\n                private _deepCopy = (object: any, visited?: { source: any, copy: any }[]): any => {\n                    if (object === null || typeof object !== 'object') {\n                        return object;\n                    }\n                    if (object.constructor !== Object && object.constructor !== Array) {\n                        const convertValue = customOption.data.convertValue(object);\n                        return convertValue !== undefined ? convertValue : object;\n                    }\n                    if (!visited) visited = [];\n                    for (let i = 0; i < visited.length; i++) {\n                        if (visited[i].source === object) {\n                            return visited[i].copy;\n                        }\n                    }\n                    let copy: any;\n                    if (Array.isArray(object)) {\n                        copy = [];\n                        visited.push({ source: object, copy: copy });\n                \n                        for (let j = 0; j < object.length; j++) {\n                            copy[j] = this._deepCopy(object[j], visited);\n                        }\n                    } else {\n                        copy = {};\n                        visited.push({ source: object, copy: copy });\n                \n                        for (let key in object) {\n                            if (object.hasOwnProperty(key)) {\n                                copy[key] = this._deepCopy(object[key], visited);\n                            }\n                        }\n                    }\n                    return copy;\n                };\n                private _isPositiveIntegerIncludingZero = (value: string | number | bigint): boolean => {\n                    if (typeof value !== 'number' && typeof value !== 'string' && typeof value !== 'bigint') {\n                        return false;\n                    }\n                    value = String(value);\n                    const intNum = parseInt(value, 10);\n                    const floatNum = parseFloat(value);\n                    if (intNum !== floatNum || isNaN(intNum) || intNum < 0) {\n                        return false;\n                    }\n                    return true;\n                };\n                private _getValidRowIndex = (rowIndex: number): number => {\n                    if (!this._isPositiveIntegerIncludingZero(rowIndex)) {\n                        throw new Error('Invalid number type. It should be a number or a string that can be converted to a number.');\n                    }\n                    const index = Number(rowIndex);\n                    if (index < 0 || index >= this._rows.length) {\n                        throw new Error(`Invalid rowIndex value. It should be within the range of the rows.\\nrange: between 0 and ${this._rows.length - 1}\\ninsert rowIndex : ${index}`);\n                    }\n                    return index;\n                }\n                private _isConvertibleString = (value: any): boolean => {\n                    if (value === undefined) throw new Error('You can not put a value of undefined type.');\n                    if (value === null) return true;\n                    if (['string','number','boolean','bigint','symbol'].indexOf(typeof value) >= 0) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                };\n                private _hasColumn = (column: string): boolean => {\n                    return this._cols.indexOf(column) >= 0\n                };\n                private _checkColumn = (column: string) => {\n                    if (!this._hasColumn(column)) {\n                        throw new Error('The column does not exist. column : ' + column);\n                    }\n                };\n                private _checkValidFunction = (func: Function) => {\n                    if (!func || typeof func !== 'function') {\n                        throw new Error('Please insert the valid function.');\n                    }\n                };\n                private _checkBoolean = (value: boolean) => {\n                    if (typeof value !== 'boolean') {\n                        throw new Error('Please pass an boolean as a parameter.');\n                    }\n                };\n                private _checkOriginObject = (value: Object) => {\n                    if (value.constructor !== Object) {\n                        throw new Error('Please pass an object with its own key-value pairs as a parameter.');\n                    }\n                };\n                private _checkArray = (value: any[]) => {\n                    if (value.constructor !== Array) {\n                        throw new Error('Please pass an array.');\n                    }\n                };\n                private _getColumnType = (rowIndex: number, col: string): string => {\n                    if (rowIndex === 0) return 'null';\n                    for(let index = rowIndex - 1; index >= 0; index--) {\n                        if (this._rows[index][col]) {\n                            if (typeof this._rows[index][col] === 'object') {\n                                return this._rows[index][col].constructor;\n                            }\n                            return typeof this._rows[index][col];\n                        }\n                    }\n                    return 'null';\n                };\n                private _makeValue = (value: any): any => {\n                    let result = value;\n                    /*if (typeof value === 'string') {\n                        result = value;\n                    } else if (typeof value === 'number' || typeof value === 'boolean' || typeof value === 'bigint') {\n                        result = String(value);\n                    } else if (typeof value === 'symbol') {\n                        result = value.description;\n                    } else if (value === null) {\n                        result = null;\n                    } else */if (typeof value === 'object') {\n                        if ((value && value.getIsDataWrapper && value.getIsDataWrapper())\n                            || (value && value.getIsDataModel && value.getIsDataModel())\n                        ) {\n                            throw new Error('You cannot insert a datawrapper or datamodel within a datamodel.');\n                        }\n                        result = this._deepCopy(value);\n                    }\n                    return result;\n                };\n                private _getValidColValue = (value: string): string => {\n                    value = this._makeValue(value);\n                    if (!this._isConvertibleString(value)) {\n                        throw new Error('Only strings can be inserted into columns.');\n                    }\n                    if (!value) {\n                        throw new Error('Column cannot be null.');\n                    }\n                    return value;\n                }\n                private _getValidRowValue = (rowIndex: number, col: string, value: any): any => {\n                    value = this._makeValue(value);\n                    const chkType = this._getColumnType(rowIndex, col);\n                    if (chkType !== 'null' && value !== null) {\n                        if (typeof value === 'object') {\n                            if (value.constructor !== chkType) {\n                                throw new Error('Data of the same type must be inserted into the same column. column : ' + col);\n                            }\n                        } else {\n                            if (typeof value !== 'object' && typeof value !== chkType) {\n                                throw new Error('Data of the same type must be inserted into the same column. column : ' + col);\n                            }\n                        }\n                    }\n                    return value;\n                }\n                private _addCol = (value: string) => {\n                    value = this._getValidColValue(value);\n                    if (this._cols.indexOf(value) === -1) {\n                        this._cols.push(value);\n                    } else {\n                        throw new Error('There are duplicate columns to add. column : ' + value);\n                    }\n                }\n                private _addRow = (rowIndex: number, row: T) => {\n                    if (!row) {\n                        throw new Error('Please insert vaild object');\n                    }\n                    if (row.constructor !== Object) {\n                        throw new Error('Please insert object with their own key-value pairs.');\n                    }\n                    if (Object.keys(row).length === 0) return;\n                    if (this._cols.length === 0) {\n                        for (const key in row) {\n                            this._addCol(key);\n                        }\n                    }\n                    const tempRow: any = {};\n                    for(const col of this._cols) {\n                        if (row.hasOwnProperty(col)) {\n                            tempRow[col] = this._getValidRowValue(rowIndex, col, row[col]);\n                        }\n                        else {\n                            tempRow[col] = null;\n                        }\n                    }\n                    this._rows.push(tempRow as T);\n                }\n                private _put = (data: Record<string, any>[] | Record<string, any>) => {\n                    let rowIndex = this._rows.length;\n                    if (Array.isArray(data)) {\n                        if (data.length === 0) return;\n                        if (this._isConvertibleString(data[0])) {\n                            for(const col of data) {\n                                this._addCol(col);\n                            }\n                            return;\n                        } else {\n                            for(const row of data) {\n                                this._addRow(rowIndex, row);\n                                rowIndex++;\n                            }\n                            return;\n                        }\n                    } else if (typeof data === 'object') {\n                        if (data && (data as InterfaceDataWrapper).getIsDataWrapper && (data as InterfaceDataWrapper).getIsDataWrapper()) {\n                            throw new Error('You cannot construct a datamodel with datawrapper.');\n                        } else if (data && (data as InterfaceDataModel<T>).getIsDataModel && (data as InterfaceDataModel<T>).getIsDataModel()){\n                            for(const row of (data as InterfaceDataModel<T>).getRows() ) {\n                                this._addRow(rowIndex, row as T);\n                                rowIndex++;\n                            }\n                            return;\n                        } else if (data.constructor === Object) {\n                            this._addRow(rowIndex, data as T);\n                            return;\n                        }\n                    }\n                    throw new Error('Please insert array contains objects with their own key-value pairs, array contains strings or only object of key-value pairs.');\n                };\n                private _getNullColumnFirstRowIndex = (column: string): number => {\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    for(let i = 0; i < this._rows.length; i++) {\n                        if (this._rows[i][column] === null) return i;\n                    }\n                    return -1;\n                };\n                private _getDuplColumnFirstRowIndex = (column: string): number => {\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    const checkedValues: string[] = [];\n                    for(let i = 0; i < this._rows.length; i++) {\n                        if (checkedValues.includes(JSON.stringify(this._rows[i][column]))) {\n                            return i;\n                        }\n                        if (this._rows[i][column] !== null) {\n                            checkedValues.push(JSON.stringify(this._rows[i][column]));\n                        }\n                    }\n                    return -1;\n                };\n                private _getInValidColumnFirstRowIndex = (column: string, validator: DataModelValidator): number => {\n                    this._checkValidFunction(validator);\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    \n                    for(let i = 0; i < this._rows.length; i++) {\n                        if (!validator(this._rows[i][column])) {\n                            return i;\n                        }\n                    }\n                    return -1;\n                };\n                /**\n                 * Checks whether the current instance is a `DataModel`.\n                 * This method is primarily used for type verification.\n                 *\n                 * ### Returns\n                 * - **`boolean`**: Returns `true` if the instance is a `DataModel`, otherwise `false`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * console.log(dataModel.getIsDataModel()); // Output: true\n                 * ```\n                 *\n                 * @returns {boolean} `true` if the instance is a `DataModel`, otherwise `false`.\n                 */\n                getIsDataModel = (): boolean => {\n                    return this._isDataModel;\n                };\n                /**\n                 * Creates and returns a deep copy of the current `DataModel` instance.\n                 * The cloned instance contains independent copies of all stored rows, \n                 * ensuring that modifications in the cloned instance do not affect the original instance.\n                 *\n                 * ### Behavior\n                 * - Uses the internal `_rows` data to initialize a new `DataModel` instance.\n                 * - Ensures that all row data is duplicated to maintain data integrity.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: A new `DataModel` instance containing a copy of the original rows.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * const clonedModel = dataModel.clone();\n                 * \n                 * console.log(clonedModel.getRowCount()); // Output: 1\n                 * console.log(clonedModel !== dataModel); // Output: true (Cloned instance is independent)\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel<T>} A new `DataModel` instance with a copy of the stored rows.\n                 */\n                clone = (): InterfaceDataModel<T> => {\n                    return new hison.data.DataModel<T>(this._rows);\n                };\n                /**\n                 * Removes all stored rows and columns from the `DataModel`, resetting it to an empty state.\n                 * \n                 * ### Behavior\n                 * - Clears the `_cols` array, removing all column definitions.\n                 * - Clears the `_rows` array, removing all stored data.\n                 * - Returns the same `DataModel` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: The current instance after clearing all stored data.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * console.log(dataModel.getRowCount()); // Output: 1\n                 * \n                 * dataModel.clear();\n                 * console.log(dataModel.getRowCount()); // Output: 0\n                 * console.log(dataModel.getColumns());  // Output: []\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel<T>} The current `DataModel` instance after clearing all data.\n                 */\n                clear = (): InterfaceDataModel<T> => {\n                    this._cols = [];\n                    this._rows = [];\n                    return this;\n                };\n                /**\n                 * Serializes the `DataModel` instance into a JSON string representation.\n                 * Converts the stored row data into a JSON format for easy storage or transmission.\n                 *\n                 * ### Behavior\n                 * - Uses `JSON.stringify()` to serialize the `_rows` array.\n                 * - Column definitions (`_cols`) are not included in the serialized output.\n                 *\n                 * ### Returns\n                 * - **`string`**: A JSON string representation of the stored row data.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getSerialized());\n                 * // Output: '[{\"id\":1,\"name\":\"Alice\"},{\"id\":2,\"name\":\"Bob\"}]'\n                 * ```\n                 *\n                 * @returns {string} JSON string representation of the stored row data.\n                 */\n                getSerialized = (): string => {\n                    return JSON.stringify(this._rows);\n                };\n                /**\n                 * Checks whether the `DataModel` has defined columns.\n                 * This method determines if the `DataModel` has been initialized with at least one column.\n                 *\n                 * ### Behavior\n                 * - Returns `true` if `_cols` contains at least one column.\n                 * - Returns `false` if no columns have been defined.\n                 *\n                 * ### Returns\n                 * - **`boolean`**: `true` if columns are defined, otherwise `false`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n                 * console.log(dataModel.isDeclare()); // Output: true\n                 * \n                 * const emptyModel = new hison.data.DataModel();\n                 * console.log(emptyModel.isDeclare()); // Output: false\n                 * ```\n                 *\n                 * @returns {boolean} `true` if columns are defined, otherwise `false`.\n                 */\n                isDeclare = (): boolean => {\n                    return this._cols.length > 0;\n                };\n                /**\n                 * Retrieves an array of all column names defined in the `DataModel`.\n                 * Returns a deep copy of the `_cols` array to prevent unintended modifications.\n                 *\n                 * ### Behavior\n                 * - Uses `_deepCopy()` to return a copy of `_cols`, ensuring data integrity.\n                 * - If no columns are defined, returns an empty array.\n                 *\n                 * ### Returns\n                 * - **`string[]`**: An array of column names.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 * \n                 * const emptyModel = new hison.data.DataModel();\n                 * console.log(emptyModel.getColumns()); // Output: []\n                 * ```\n                 *\n                 * @returns {string[]} An array containing the column names.\n                 */\n                getColumns = (): string[] => {\n                    return this._deepCopy(this._cols);\n                };\n                /**\n                 * Retrieves an array of all values in the specified column.\n                 * Ensures that returned values are deep copies to prevent unintended modifications.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The column name from which to retrieve values.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `column` is not a valid key in `T`.\n                 * - Throws an error if the specified column does not exist.\n                 * - Iterates through all rows and extracts the values of the specified column.\n                 * - Uses `_deepCopy()` to return deep copies of the values.\n                 * - The return type is inferred as `T[K][]`, maintaining strong type safety.\n                 *\n                 * ### Returns\n                 * - **`T[K][]`**: An array containing all values from the specified column.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: string;\n                 *     age: number;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: \"U1\", age: 25 },\n                 *     { id: \"U2\", age: 30 }\n                 * ]);\n                 * \n                 * const ids = dataModel.getColumnValues(\"id\");  // Inferred as string[]\n                 * console.log(ids); // Output: [\"U1\", \"U2\"]\n                 * \n                 * const ages = dataModel.getColumnValues(\"age\"); // Inferred as number[]\n                 * console.log(ages); // Output: [25, 30]\n                 * \n                 * // Throws an error: \"The column does not exist.\"\n                 * // console.log(dataModel.getColumnValues(\"name\"));\n                 * ```\n                 *\n                 * @param {K} column The column name from which to retrieve values.\n                 * @returns {T[K][]} An array of values from the specified column.\n                 * @throws {Error} If the column is invalid or does not exist.\n                 */\n                getColumnValues = <K extends keyof T>(column: K): T[K][] => {\n                    column = this._getValidColValue(column as string) as K;\n                    this._checkColumn(column as string);\n                    const result = [];\n                    for(const row of this._rows) {\n                        result.push(this._deepCopy(row[column]));\n                    }\n                    return result;\n                };\n                /**\n                 * Adds a new column to the `DataModel`.\n                 * Ensures that all existing rows include the new column with a default value of `null`.\n                 *\n                 * ### Parameters\n                 * - `column` **(string)**: The name of the column to be added.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `column` is not a valid string.\n                 * - Calls `_addCol(column)` to validate and add the column.\n                 * - Iterates through `_rows` and ensures each row includes the new column, assigning `null` if missing.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ⚠ **Note:** If `T` is explicitly defined, TypeScript does not recognize dynamically added columns.\n                 * To modify columns dynamically, use `DataModel` with its default type `Record<string, any>`.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: The current instance after adding the new column.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 * \n                 * dataModel.addColumn(\"age\");\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n                 * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\", age: null }\n                 * ```\n                 *\n                 * @param {string} column The name of the column to add.\n                 * @returns {InterfaceDataModel<T>} The current `DataModel` instance after adding the column.\n                 * @throws {Error} If the column is invalid or already exists.\n                 */\n                addColumn = (column: string): InterfaceDataModel<T> => {\n                    this._addCol(column);\n                    for(const row of this._rows) {\n                        if (!row.hasOwnProperty(column)) {\n                            (row as Record<string, any>)[column] = null;\n                        }\n                    }\n                    return this;\n                };\n                /**\n                 * Adds multiple new columns to the `DataModel`.\n                 * Ensures that all existing rows include the newly added columns with a default value of `null`.\n                 *\n                 * ### Parameters\n                 * - `columns` **(string[])**: An array of column names to be added.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `columns` is not an array.\n                 * - Iterates through the provided column names and calls `_addCol(column)` to validate and add each column.\n                 * - Ensures that all existing rows include the new columns, assigning `null` if missing.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ⚠ **Note:** If `T` is explicitly defined, TypeScript does not recognize dynamically added columns.\n                 * To modify columns dynamically, use `DataModel` with its default type `Record<string, any>`.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: The current instance after adding the new columns.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 * \n                 * dataModel.addColumns([\"age\", \"email\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\", \"email\"]\n                 * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\", age: null, email: null }\n                 * ```\n                 *\n                 * @param {string[]} columns An array of column names to add.\n                 * @returns {InterfaceDataModel<T>} The current `DataModel` instance after adding the columns.\n                 * @throws {Error} If `columns` is not an array or contains invalid column names.\n                 */\n                addColumns = (columns: string[]): InterfaceDataModel<T> => {\n                    if (!Array.isArray(columns)) {\n                        throw new Error('Only array contains strings can be inserted into columns.');\n                    }\n                    for(const column of columns) {\n                        this._addCol(column);\n                        for(const row of this._rows) {\n                            if (!row.hasOwnProperty(column)) {\n                                (row as Record<string, any>)[column] = null;\n                            }\n                        }\n                    }\n                    return this;\n                };\n                /**\n                 * Sets the same value for all rows in the specified column.\n                 * If the column does not exist, it is created before assigning values.\n                 * \n                 * Supports type safety when `T` is defined, while allowing dynamic usage when `T = Record<string, any>`.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The name of the column to update, constrained to keys of `T` if defined.\n                 * - `value` **(`T[K]`)**: The value to be assigned to all rows in the specified column.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `value` is `undefined`.\n                 * - Calls `_getValidColValue(column)` to validate the column name.\n                 * - If the column does not exist, `_addCol(column)` is called to add it.\n                 * - Iterates through all rows and assigns the specified value using `_getValidRowValue()`.\n                 * - Ensures type consistency when `T` is specified.\n                 * - Allows any column name when `T = Record<string, any>`.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The current `DataModel` instance after setting the column values.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 *     status?: string;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * // Set the same value for all rows in the \"status\" column\n                 * dataModel.setColumnSameValue(\"status\", \"active\");\n                 * console.log(dataModel.getColumnValues(\"status\")); // Output: [\"active\", \"active\"]\n                 * \n                 * // If the column does not exist, it is created automatically\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"status\"]\n                 * \n                 * // With default `Record<string, any>`, dynamic columns can be added without strict typing\n                 * const flexibleModel = new hison.data.DataModel();\n                 * flexibleModel.setColumnSameValue(\"newField\", 123);\n                 * ```\n                 *\n                 * @param {K} column The name of the column to set the value for.\n                 * @param {T[K]} value The value to assign to all rows in the column.\n                 * @returns {InterfaceDataModel<T>} The current `DataModel<T>` instance after updating the column.\n                 * @throws {Error} If `value` is `undefined` or if the column name is invalid.\n                 */\n                setColumnSameValue = <K extends keyof T>(column: K, value: T[K]): InterfaceDataModel<T> => {\n                    if (value === undefined) throw new Error('You can not put a value of undefined type.');\n                    column = this._getValidColValue(column as string) as K;\n                    if (!this._hasColumn(column as string)) this._addCol(column as string);\n                    let rowIndex = 0;\n                    for(const row of this._rows) {\n                        (row as Record<string, any>)[column as string] = this._getValidRowValue(rowIndex, column as string, value);\n                        rowIndex++;\n                    }\n                    return this;\n                };\n                /**\n                 * Applies a formatting function to all values in the specified column.\n                 * Ensures type safety when `T` is specified, while maintaining flexibility for dynamic structures.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The name of the column to format, constrained to keys of `T` if defined.\n                 * - `formatter` **(`DataModelFormatter`)**: A function that transforms each value in the column.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `formatter` is not a valid function.\n                 * - Validates `column` using `_getValidColValue(column)`.\n                 * - Throws an error if the column does not exist.\n                 * - Iterates through all rows and applies `formatter` to each value in the column.\n                 * - Ensures that the formatted values remain valid using `_getValidRowValue()`.\n                 * - Allows any string as `column` if `T = Record<string, any>`.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The current `DataModel` instance after formatting the column.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface Product {\n                 *     id: number;\n                 *     price: number;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<Product>([\n                 *     { id: 1, price: 1000 },\n                 *     { id: 2, price: 2000 }\n                 * ]);\n                 * \n                 * // Format the \"price\" column by adding a currency symbol\n                 * dataModel.setColumnSameFormat(\"price\", value => `$${value}`);\n                 * console.log(dataModel.getColumnValues(\"price\")); // Output: [\"$1000\", \"$2000\"]\n                 * \n                 * // With default `Record<string, any>`, any column can be formatted dynamically\n                 * const flexibleModel = new hison.data.DataModel();\n                 * flexibleModel.setColumnSameFormat(\"randomColumn\", value => `formatted-${value}`);\n                 * ```\n                 *\n                 * @param {K} column The name of the column to format.\n                 * @param {DataModelFormatter} formatter A function that transforms each value in the column.\n                 * @returns {InterfaceDataModel<T>} The current `DataModel<T>` instance after formatting the column.\n                 * @throws {Error} If `formatter` is not a function or if the column does not exist.\n                 */\n                setColumnSameFormat = <K extends keyof T>(column: K, formatter: DataModelFormatter): InterfaceDataModel<T> => {\n                    this._checkValidFunction(formatter);\n                    column = this._getValidColValue(column as string) as K;\n                    this._checkColumn(column as string);\n                    let rowIndex = 0;\n                    for(const row of this._rows) {\n                        (row as Record<string, any>)[column as string] = this._getValidRowValue(rowIndex, column as string, formatter(row[column]));\n                        rowIndex++;\n                    }\n                    return this;\n                };\n                /**\n                 * Retrieves a deep copy of the row at the specified index.\n                 * Ensures that modifications to the returned row do not affect the original data.\n                 *\n                 * ### Parameters\n                 * - `rowIndex` **(number)**: The index of the row to retrieve.\n                 *\n                 * ### Behavior\n                 * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n                 * - Uses `_deepCopy()` to return a copy of the row, preventing unintended modifications.\n                 *\n                 * ### Returns\n                 * - **`T`**: A deep copy of the row data as an object.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\" }\n                 *\n                 * // Throws an error if the index is out of bounds\n                 * // console.log(dataModel.getRow(10));\n                 * ```\n                 *\n                 * @param {number} rowIndex The index of the row to retrieve.\n                 * @returns {T} A deep copy of the row data.\n                 * @throws {Error} If `rowIndex` is out of bounds.\n                 */\n                getRow = (rowIndex: number): T => {\n                    return this._deepCopy(this._rows[this._getValidRowIndex(rowIndex)]);\n                };\n                /**\n                 * Retrieves the row at the specified index as a new `DataModel` instance.\n                 * Converts the row object into a `DataModel` for further structured operations.\n                 *\n                 * ### Parameters\n                 * - `rowIndex` **(number)**: The index of the row to retrieve.\n                 *\n                 * ### Behavior\n                 * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n                 * - Initializes a new `DataModel` using the retrieved row data.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: A new `DataModel` instance containing the specified row.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * const rowDataModel = dataModel.getRowAsDataModel(0);\n                 * console.log(rowDataModel.getRowCount()); // Output: 1\n                 * console.log(rowDataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 *\n                 * // Throws an error if the index is out of bounds\n                 * // console.log(dataModel.getRowAsDataModel(10));\n                 * ```\n                 *\n                 * @param {number} rowIndex The index of the row to retrieve.\n                 * @returns {InterfaceDataModel<T>} A new `DataModel` instance containing the row data.\n                 * @throws {Error} If `rowIndex` is out of bounds.\n                 */\n                getRowAsDataModel = (rowIndex: number): InterfaceDataModel<T> => {\n                    return new hison.data.DataModel<T>(this._rows[this._getValidRowIndex(rowIndex)]);\n                };\n                /**\n                 * Adds a new row to the `DataModel<T>` at the specified index or appends it to the end.\n                 * If no parameters are provided, an empty row is added.\n                 *\n                 * ### Generic Type `<T>`\n                 * - `T` represents the structure of each row in the `DataModel<T>`.\n                 * - If no type is provided, `T` defaults to `Record<string, any>`, allowing flexible row structures.\n                 *\n                 * ### Parameters\n                 * - `rowIndexOrRow` **(number | T, optional)**: The index at which to insert the row, or the row data to insert.\n                 * - `row` **(T, optional)**: The row data to insert (only required when `rowIndexOrRow` is a number).\n                 *\n                 * ### Behavior\n                 * - If **no parameters** are provided, an empty row is appended.\n                 * - If **only a number is provided**, an empty row is inserted at that index.\n                 * - If **only an object (`T`) is provided**, it is inserted as a new row at the end.\n                 * - If **both a number and an object are provided**, the row is inserted at the specified index.\n                 * - Throws an error if attempting to add a row without first defining columns.\n                 *\n                 * ### Returns\n                 * - **`DataModel<T>`**: The current instance after adding the new row.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\"id\", \"name\"]);\n                 * \n                 * // Add an empty row\n                 * dataModel.addRow();\n                 * console.log(dataModel.getRowCount()); // Output: 1\n                 * console.log(dataModel.getRow(0)); // Output: { id: null, name: null }\n                 * \n                 * // Add a row with data\n                 * dataModel.addRow({ id: 1, name: \"Alice\" });\n                 * console.log(dataModel.getRow(1)); // Output: { id: 1, name: \"Alice\" }\n                 * \n                 * // Insert a row at index 1\n                 * dataModel.addRow(1, { id: 2, name: \"Bob\" });\n                 * console.log(dataModel.getRow(1)); // Output: { id: 2, name: \"Bob\" }\n                 * \n                 * // Throws an error: \"Please define the column first.\"\n                 * // new hison.data.DataModel<User>().addRow();\n                 * ```\n                 *\n                 * @param {number | T} [rowIndexOrRow] The index at which to insert the row, or the row data.\n                 * @param {T} [row] The row data to insert (only required if `rowIndexOrRow` is a number).\n                 * @returns {InterfaceDataModel<T>} The current `DataModel<T>` instance after adding the row.\n                 * @throws {Error} If columns are not defined or parameters are invalid.\n                 */\n                addRow = (rowIndexOrRow?: number | T, row?: T): InterfaceDataModel<T> => {\n                    if (rowIndexOrRow === undefined && row === undefined) {\n                        if (this._cols.length <= 0) {\n                            throw new Error('Please define the column first.');\n                        }\n                        const emptyRow: Record<string, any> = {};\n                        for (const col of this._cols) {\n                            emptyRow[col] = null;\n                        }\n                        this._rows.push(emptyRow as T);\n                    } else if (typeof rowIndexOrRow === 'number' && row === undefined) {\n                        if (this._cols.length <= 0) {\n                            throw new Error('Please define the column first.');\n                        }\n                        const validIndex = rowIndexOrRow >= this._rows.length ? this._rows.length : this._getValidRowIndex(rowIndexOrRow);\n                        const emptyRow: Record<string, any> = {};\n                        for (const col of this._cols) {\n                            emptyRow[col] = null;\n                        }\n                        this._rows.splice(validIndex, 0, emptyRow as T);\n                    } else if (typeof rowIndexOrRow === 'object' && row === undefined) {\n                        this._addRow(this._rows.length, rowIndexOrRow);\n                    } else if (typeof rowIndexOrRow === 'number' && typeof row === 'object') {\n                        const validIndex = rowIndexOrRow >= this._rows.length ? this._rows.length : this._getValidRowIndex(rowIndexOrRow);\n                        this._addRow(validIndex, row);\n                        const newRow: Record<string, any> | undefined = this._rows.pop();\n                        if(newRow) this._rows.splice(validIndex, 0, newRow as T);\n                    } else {\n                        throw new Error('Invalid parameters for addRow method.');\n                    }\n                    return this;\n                };\n                /**\n                 * Retrieves a deep copy of a range of rows from the `DataModel`.\n                 * Ensures that modifications to the returned rows do not affect the original data.\n                 *\n                 * ### Generic Type `<T>`\n                 * - `T` represents the structure of each row in the `DataModel`.\n                 * - By specifying `T`, developers can enforce type safety when retrieving rows.\n                 * - If no type is provided, `T` defaults to `Record<string, any>`, allowing flexible data structures.\n                 *\n                 * ### Parameters\n                 * - `startRow` **(number, optional, default = `0`)**: The starting index of the row range.\n                 * - `endRow` **(number, optional, default = `null`)**: The ending index of the row range (inclusive).\n                 *\n                 * ### Behavior\n                 * - Calls `_getValidRowIndex(startRow)` and `_getValidRowIndex(endRow)` to validate row indices.\n                 * - If `endRow` is `null`, retrieves rows from `startRow` to the last row.\n                 * - Uses `_deepCopy()` to ensure the returned rows are independent copies.\n                 *\n                 * ### Returns\n                 * - **`T[]`**: An array of deep-copied row objects, ensuring type safety.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRows()); \n                 * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n                 * \n                 * console.log(dataModel.getRows(1, 2)); \n                 * // Output: [{ id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n                 * \n                 * // Throws an error if startRow or endRow is out of bounds\n                 * // console.log(dataModel.getRows(5));\n                 * ```\n                 *\n                 * @param {number} [startRow=0] The starting index of the row range.\n                 * @param {number} [endRow=null] The ending index of the row range (inclusive).\n                 * @returns {T[]} An array of deep-copied rows, preserving type safety.\n                 * @throws {Error} If `startRow` or `endRow` is out of bounds.\n                 */\n                getRows = (startRow: number = 0, endRow: number | null = null): T[] => {\n                    const sRow = this._getValidRowIndex(startRow);\n                    if(sRow === 0 && endRow === null) return this._deepCopy(this._rows);\n                    const eRow = endRow ? this._getValidRowIndex(endRow) : this._rows.length;\n                    const result = [];\n                    for(let i = sRow; i <= eRow; i++) {\n                        if(!this._rows[i]) break;\n                        result.push(this._deepCopy(this._rows[i]));\n                    }\n                    return result;\n                };\n                /**\n                 * Retrieves a range of rows as a new `DataModel` instance.\n                 * Ensures that the returned `DataModel` contains independent copies of the selected rows.\n                 *\n                 * ### Parameters\n                 * - `startRow` **(number, optional, default = `0`)**: The starting index of the row range.\n                 * - `endRow` **(number, optional, default = `null`)**: The ending index of the row range (inclusive).\n                 *\n                 * ### Behavior\n                 * - Calls `_getValidRowIndex(startRow)` and `_getValidRowIndex(endRow)` to validate row indices.\n                 * - If `startRow` is `0` and `endRow` is `null`, returns a clone of the entire `DataModel`.\n                 * - Uses `_deepCopy()` to ensure the returned rows are independent.\n                 * - Returns a new `DataModel` containing the selected rows.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: A new `DataModel` instance containing the selected row range.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * const newModel = dataModel.getRowsAsDataModel(1, 2);\n                 * console.log(newModel.getRowCount()); // Output: 2\n                 * console.log(newModel.getRow(0)); // Output: { id: 2, name: \"Bob\" }\n                 *\n                 * // Retrieves all rows as a new DataModel\n                 * const clonedModel = dataModel.getRowsAsDataModel();\n                 * console.log(clonedModel.getRowCount()); // Output: 3\n                 * ```\n                 *\n                 * @param {number} [startRow=0] The starting index of the row range.\n                 * @param {number} [endRow=null] The ending index of the row range (inclusive).\n                 * @returns {InterfaceDataModel<T>} A new `DataModel` instance containing the selected rows.\n                 * @throws {Error} If `startRow` or `endRow` is out of bounds.\n                 */\n                getRowsAsDataModel = (startRow: number = 0, endRow: number | null = null): InterfaceDataModel<T> => {\n                    const sRow = this._getValidRowIndex(startRow);\n                    if(sRow === 0 && endRow === null) return this.clone();\n                    const eRow = endRow ? this._getValidRowIndex(endRow) : this._rows.length;\n                    const result = [];\n                    for(let i = sRow; i <= eRow; i++) {\n                        if(!this._rows[i]) break;\n                        result.push(this._deepCopy(this._rows[i]));\n                    }\n                    return new hison.data.DataModel<T>(result);\n                };\n                /**\n                 * Adds multiple rows to the `DataModel`.\n                 * Each row is validated and inserted into the existing dataset.\n                 *\n                 * ### Generic Type `<T>`\n                 * - `T` represents the structure of each row in the `DataModel`.\n                 * - By specifying `T`, developers can enforce type safety for inserted rows.\n                 * - If no type is provided, `T` defaults to `Record<string, any>`, allowing flexible data structures.\n                 *\n                 * ### Parameters\n                 * - `rows` **(`T[]`)**: An array of row objects to be added.\n                 *\n                 * ### Behavior\n                 * - Calls `_put(rows)` to process and insert the provided rows.\n                 * - Ensures that column structures are maintained.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The current instance after adding the new rows.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\"id\", \"name\"]);\n                 * \n                 * // Add multiple rows\n                 * dataModel.addRows([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRowCount()); // Output: 2\n                 * console.log(dataModel.getRow(1)); // Output: { id: 2, name: \"Bob\" }\n                 * ```\n                 *\n                 * @param {T[]} rows An array of row objects to add.\n                 * @returns {InterfaceDataModel<T>} The current `DataModel<T>` instance after adding the rows.\n                 * @throws {Error} If `rows` contain invalid data.\n                 */\n                addRows = (rows: T[]): InterfaceDataModel<T> => {\n                    this._put(rows);\n                    return this;\n                };\n                /**\n                 * Converts the `DataModel` instance into a structured JavaScript object.\n                 * The returned object includes column definitions, row data, and metadata.\n                 *\n                 * ### Behavior\n                 * - Uses `_deepCopy()` to ensure the returned data is independent of the original `DataModel`.\n                 * - The returned object contains:\n                 *   - `cols`: An array of column names (`keyof T`).\n                 *   - `rows`: An array of row objects (`T[]`).\n                 *   - `colCount`: The total number of columns.\n                 *   - `rowCount`: The total number of rows.\n                 *   - `isDeclare`: A boolean indicating whether columns are explicitly defined.\n                 *\n                 * ### Returns\n                 * - **`{ cols: (keyof T)[], rows: T[], colCount: number, rowCount: number, isDeclare: boolean }`**:\n                 *   A structured object representing the `DataModel`.\n                 *\n                 * ⚠ **Note:** If `T` is explicitly defined, `cols` will reflect only the known keys of `T`.\n                 * If `T` is the default `Record<string, any>`, `cols` may include dynamically added columns.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getObject());\n                 * // Output:\n                 * // {\n                 * //   cols: [\"id\", \"name\"],\n                 * //   rows: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }],\n                 * //   colCount: 2,\n                 * //   rowCount: 2,\n                 * //   isDeclare: true\n                 * // }\n                 * ```\n                 *\n                 * @returns {{ cols: (keyof T)[]; rows: T[], colCount: number, rowCount: number, isDeclare: boolean }}\n                 *          A structured object representing the `DataModel` structure.\n                 */\n                getObject = (): { cols: (keyof T)[]; rows: T[]; colCount: number; rowCount: number; isDeclare: boolean; } => {\n                    const copyCol = this._deepCopy(this._cols);\n                    const copyRow = this._deepCopy(this._rows);\n                    const result = {\n                        cols: copyCol,\n                        rows: copyRow,\n                        colCount: copyCol.length,\n                        rowCount: copyRow.length,\n                        isDeclare: this.isDeclare(),\n                    };\n                    return result;\n                };\n                /**\n                 * Retrieves a deep copy of the value at the specified row index and column name.\n                 * Ensures type safety when `T` is specified, while maintaining flexibility for dynamic structures.\n                 *\n                 * ### Parameters\n                 * - `rowIndex` **(number)**: The index of the row to retrieve the value from.\n                 * - `column` **(K)**: The column name, constrained to the keys of `T` if defined.\n                 *\n                 * ### Behavior\n                 * - Validates `column` and `rowIndex` before accessing the value.\n                 * - Returns a deep copy to prevent unintended modifications.\n                 * - Allows any string as `column` if `T = Record<string, any>`.\n                 *\n                 * ### Returns\n                 * - **`T[K]`**: A deep copy of the value stored at the specified row and column.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: string;\n                 *     age: number;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: \"U1\", age: 25 },\n                 *     { id: \"U2\", age: 30 }\n                 * ]);\n                 * \n                 * console.log(dataModel.getValue(0, \"age\")); // Output: 25 (type: number)\n                 * console.log(dataModel.getValue(0, \"id\"));  // Output: \"U1\" (type: string)\n                 * \n                 * // With default `Record<string, any>`, any column can be accessed.\n                 * const flexibleModel = new hison.data.DataModel();\n                 * console.log(flexibleModel.getValue(0, \"randomColumn\")); // No TypeScript error\n                 * ```\n                 *\n                 * @param {number} rowIndex The row index to retrieve the value from.\n                 * @param {K} column The column name to retrieve the value from.\n                 * @returns {T[K]} A deep copy of the value stored at the specified row and column.\n                 * @throws {Error} If `rowIndex` or `column` is invalid.\n                 */\n                getValue = <K extends keyof T>(rowIndex: number, column: K): T[K] => {\n                    column = this._getValidColValue(column as string) as K;\n                    this._checkColumn(column as string);\n                    return this._deepCopy(this._rows[this._getValidRowIndex(rowIndex)][column]);\n                };\n                /**\n                 * Sets a value at the specified row index and column name.\n                 * Ensures that the value is valid and maintains data integrity.\n                 *\n                 * ### Parameters\n                 * - `rowIndex` **(number)**: The index of the row where the value should be set.\n                 * - `column` **(K)**: The name of the column where the value should be stored.\n                 * - `value` **(T[K])**: The value to be assigned, ensuring type safety.\n                 *\n                 * ### Behavior\n                 * - Throws an error if `value` is `undefined`.\n                 * - Calls `_getValidColValue(column)` to validate the column name.\n                 * - Throws an error if the specified column does not exist.\n                 * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n                 * - Calls `_getValidRowValue(rowIndex, column, value)` to ensure the value is properly formatted.\n                 * - Updates the value at the specified row and column.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ### Type Safety\n                 * - Uses `<K extends keyof T>` to ensure that `column` is a valid key of `T`.\n                 * - The `value` type is inferred as `T[K]`, preventing type mismatches.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The current instance after updating the value.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * dataModel.setValue(0, \"name\", \"Charlie\");\n                 * console.log(dataModel.getValue(0, \"name\")); // Output: \"Charlie\"\n                 *\n                 * // Throws an error if trying to set `undefined`\n                 * // dataModel.setValue(1, \"name\", undefined);\n                 *\n                 * // Throws an error if the column does not exist\n                 * // dataModel.setValue(0, \"age\", 25);\n                 * ```\n                 *\n                 * @param {number} rowIndex The index of the row where the value should be set.\n                 * @param {K} column The column name where the value should be stored.\n                 * @param {T[K]} value The value to assign, ensuring type safety.\n                 * @returns {InterfaceDataModel<T>} The current `DataModel` instance after updating the value.\n                 * @throws {Error} If `value` is `undefined` or if `rowIndex` or `column` is invalid.\n                 */\n                setValue = <K extends keyof T>(rowIndex: number, column: K, value: T[K]): InterfaceDataModel<T> => {\n                    if (value === undefined) throw new Error('You can not put a value of undefined type.');\n                    column = this._getValidColValue(column as string) as K;\n                    this._checkColumn(column as string);\n                    this._rows[this._getValidRowIndex(rowIndex)][column] = this._getValidRowValue(rowIndex, column as string, value);\n                    return this;\n                };\n                /**\n                 * Removes a column from the `DataModel`, deleting its values from all rows.\n                 * Ensures that the column exists before attempting removal.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The name of the column to remove, ensuring type safety.\n                 *\n                 * ### Behavior\n                 * - Calls `_getValidColValue(column)` to validate the column name.\n                 * - Throws an error if the specified column does not exist.\n                 * - Iterates through all rows and removes the specified column.\n                 * - Updates `_cols` to exclude the removed column.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 * \n                 * ⚠ **Note:** If `T` is explicitly defined, TypeScript does not recognize dynamically removed columns.\n                 * To modify columns dynamically, use `DataModel` with its default type `Record<string, any>`.\n                 * \n                 * ### Type Safety\n                 * - Uses `<K extends keyof T>` to ensure that `column` is a valid key of `T`.\n                 * - Prevents attempts to remove a column that does not exist in the defined type.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The current instance after removing the column.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string;\n                 *   age: number;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 }\n                 * ]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n                 * \n                 * dataModel.removeColumn(\"age\");\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 *\n                 * // Throws an error if the column does not exist\n                 * // dataModel.removeColumn(\"salary\");\n                 * ```\n                 *\n                 * @param {K} column The name of the column to remove, ensuring type safety.\n                 * @returns {InterfaceDataModel<T>} The current `DataModel` instance after removing the column.\n                 * @throws {Error} If `column` is invalid or does not exist.\n                 */\n                removeColumn = <K extends keyof T>(column: K): InterfaceDataModel<T> => {\n                    column = this._getValidColValue(column as string) as K;\n                    this._checkColumn(column as string);\n                    for(const row of this._rows) {\n                        delete row[column]\n                    }\n                    this._cols = this._cols.filter(oriColumn => oriColumn !== column as string);\n                    return this;\n                };\n                /**\n                 * Removes multiple columns from the `DataModel`, deleting their values from all rows.\n                 * Ensures that each specified column exists before attempting removal.\n                 *\n                 * ### Parameters\n                 * - `columns` **(K[])**: An array of column names to remove, ensuring type safety.\n                 *\n                 * ### Behavior\n                 * - Uses `<K extends keyof T>` to enforce that `columns` contain only valid keys of `T`.\n                 * - Iterates through the `columns` array and calls `removeColumn(column)` for each entry.\n                 * - If any column does not exist, `removeColumn` will throw an error.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 * \n                 * ⚠ **Note:** If `T` is explicitly defined, TypeScript does not recognize dynamically removed columns.\n                 * To modify columns dynamically, use `DataModel` with its default type `Record<string, any>`.\n                 * \n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The current instance after removing the specified columns.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string;\n                 *   age: number;\n                 *   city: string;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\", age: 25, city: \"New York\" },\n                 *     { id: 2, name: \"Bob\", age: 30, city: \"Los Angeles\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\", \"city\"]\n                 * \n                 * dataModel.removeColumns([\"age\", \"city\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 *\n                 * // Throws an error if a column does not exist\n                 * // dataModel.removeColumns([\"salary\", \"bonus\"]);\n                 * ```\n                 *\n                 * @param {K[]} columns An array of column names to remove, ensuring type safety.\n                 * @returns {InterfaceDataModel<T>} The current `DataModel` instance after removing the columns.\n                 * @throws {Error} If any column does not exist.\n                 */\n                removeColumns = <K extends keyof T>(columns: K[]): InterfaceDataModel<T> => {\n                    for(const column of columns) {\n                        this.removeColumn(column);\n                    }\n                    return this;\n                };\n                /**\n                 * Removes a row from the `DataModel` at the specified index and returns the removed row.\n                 * Ensures that the row index is valid before removal.\n                 *\n                 * ### Parameters\n                 * - `rowIndex` **(number, optional, default = `0`)**: The index of the row to remove.\n                 *\n                 * ### Behavior\n                 * - Uses `<T>` to ensure that the returned row matches the structure of `T`.\n                 * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n                 * - Uses `splice()` to remove the row from `_rows` and returns the removed row.\n                 *\n                 * ### Returns\n                 * - **`T`**: The removed row object, ensuring type safety based on `T`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRowCount()); // Output: 3\n                 * \n                 * const removedRow = dataModel.removeRow(1);\n                 * console.log(removedRow); // Output: { id: 2, name: \"Bob\" }\n                 * console.log(dataModel.getRowCount()); // Output: 2\n                 *\n                 * // Throws an error if rowIndex is out of bounds\n                 * // dataModel.removeRow(10);\n                 * ```\n                 *\n                 * @param {number} [rowIndex=0] The index of the row to remove.\n                 * @returns {T} The removed row object, with type safety enforced.\n                 * @throws {Error} If `rowIndex` is out of bounds.\n                 */\n                removeRow = (rowIndex: number = 0): T => {\n                    return this._rows.splice(this._getValidRowIndex(rowIndex), 1)[0];\n                };\n                /**\n                 * Retrieves the total number of columns in the `DataModel`.\n                 *\n                 * ### Behavior\n                 * - Returns the length of the `_cols` array, which represents the column definitions.\n                 *\n                 * ### Returns\n                 * - **`number`**: The total number of columns in the `DataModel`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\", \"age\"]);\n                 * console.log(dataModel.getColumnCount()); // Output: 3\n                 * \n                 * dataModel.removeColumn(\"age\");\n                 * console.log(dataModel.getColumnCount()); // Output: 2\n                 * ```\n                 *\n                 * @returns {number} The number of columns in the `DataModel`.\n                 */\n                getColumnCount = (): number => {\n                    return this._cols.length;\n                };\n                /**\n                 * Retrieves the total number of rows in the `DataModel`.\n                 *\n                 * ### Behavior\n                 * - Returns the length of the `_rows` array, which represents the stored data rows.\n                 *\n                 * ### Returns\n                 * - **`number`**: The total number of rows in the `DataModel`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRowCount()); // Output: 2\n                 * \n                 * dataModel.addRow({ id: 3, name: \"Charlie\" });\n                 * console.log(dataModel.getRowCount()); // Output: 3\n                 * ```\n                 *\n                 * @returns {number} The number of rows in the `DataModel`.\n                 */\n                getRowCount = (): number => {\n                    return this._rows.length;\n                };\n                /**\n                 * Checks whether the `DataModel` contains a specified column.\n                 * Uses `<K extends keyof T>` to ensure type safety when checking column names.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The column name to check, constrained to keys of `T`.\n                 *\n                 * ### Behavior\n                 * - Ensures type safety by restricting `column` to valid keys of `T`.\n                 * - Calls `_hasColumn(column)` to determine if the column exists.\n                 * - Returns `true` if the column is found in `_cols`, otherwise `false`.\n                 *\n                 * ### Returns\n                 * - **`boolean`**: `true` if the column exists, otherwise `false`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\"id\", \"name\"]);\n                 * \n                 * console.log(dataModel.hasColumn(\"name\")); // Output: true\n                 * console.log(dataModel.hasColumn(\"age\"));  // TypeScript Error: Argument of type '\"age\"' is not assignable to parameter of type '\"id\" | \"name\"'.\n                 * ```\n                 *\n                 * @param {K} column The column name to check, constrained to keys of `T`.\n                 * @returns {boolean} `true` if the column exists, otherwise `false`.\n                 */\n                hasColumn = <K extends keyof T>(column: K): boolean => {\n                    return this._hasColumn(column as string);\n                };\n                /**\n                 * Restricts the `DataModel` to only the specified columns by removing all other columns.\n                 * Uses `<K extends keyof T>` to enforce type safety when specifying valid columns.\n                 *\n                 * ### Parameters\n                 * - `columns` **(K[])**: An array of column names to retain, constrained to keys of `T`.\n                 *\n                 * ### Behavior\n                 * - Ensures type safety by allowing only existing keys of `T` as valid columns.\n                 * - Identifies and removes columns that are **not** included in the provided `columns` list.\n                 * - Calls `removeColumns()` to eliminate those columns from the dataset.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 * \n                 * ⚠ **Note:** If `T` is explicitly defined, TypeScript does not recognize dynamically removed columns.\n                 * To modify columns dynamically, use `DataModel` with its default type `Record<string, any>`.\n                 * \n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The modified `DataModel` instance with only the specified columns retained.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string;\n                 *   age: number;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 }\n                 * ]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n                 * \n                 * // Keep only \"id\" and \"name\" columns\n                 * dataModel.setValidColumns([\"id\", \"name\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 *\n                 * // TypeScript Error: Argument of type '\"salary\"' is not assignable to parameter of type '\"id\" | \"name\" | \"age\"'.\n                 * // dataModel.setValidColumns([\"id\", \"salary\"]);\n                 * ```\n                 *\n                 * @param {K[]} columns An array of column names to retain, constrained to keys of `T`.\n                 * @returns {InterfaceDataModel<T>} The modified `DataModel` instance with only the specified columns retained.\n                 */\n                setValidColumns = <K extends keyof T>(columns: K[]): InterfaceDataModel<T> => {\n                    columns = this._cols.filter(oriColumn => !columns.includes(oriColumn as K)) as K[];\n                    this.removeColumns(columns);\n                    return this;\n                };\n                /**\n                 * Checks whether a specified column contains only non-null values.\n                 * Uses `<K extends keyof T>` to ensure type safety when specifying the column.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The name of the column to check, constrained to keys of `T`.\n                 *\n                 * ### Behavior\n                 * - Ensures type safety by restricting `column` to existing keys of `T`.\n                 * - Calls `_getNullColumnFirstRowIndex(column)` to find the first occurrence of a `null` value in the column.\n                 * - If no `null` values are found, returns `true`; otherwise, returns `false`.\n                 *\n                 * ### Returns\n                 * - **`boolean`**: `true` if the column has no `null` values, otherwise `false`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string | null;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: null },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.isNotNullColumn(\"id\"));   // Output: true\n                 * console.log(dataModel.isNotNullColumn(\"name\")); // Output: false\n                 *\n                 * // TypeScript Error: Argument of type '\"age\"' is not assignable to parameter of type '\"id\" | \"name\"'.\n                 * // console.log(dataModel.isNotNullColumn(\"age\"));\n                 * ```\n                 *\n                 * @param {K} column The column name to check, constrained to keys of `T`.\n                 * @returns {boolean} `true` if the column has no `null` values, otherwise `false`.\n                 * @throws {Error} If `column` does not exist.\n                 */\n                isNotNullColumn = <K extends keyof T>(column: K): boolean => {\n                    return this._getNullColumnFirstRowIndex(column as string) === -1;\n                };\n                /**\n                 * Finds and returns the first row where the specified column contains a `null` value.\n                 * Uses `<K extends keyof T>` to enforce type safety on the column name.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The column name to check, constrained to keys of `T`.\n                 *\n                 * ### Behavior\n                 * - Ensures type safety by restricting `column` to existing keys of `T`.\n                 * - Calls `_getNullColumnFirstRowIndex(column)` to locate the first occurrence of a `null` value.\n                 * - If no `null` values are found, returns `null`.\n                 * - If a `null` value is found, retrieves and returns the corresponding row using `getRow()`.\n                 *\n                 * ### Returns\n                 * - **`T | null`**: The first row where the column has a `null` value, or `null` if none exist.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string | null;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: null },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.findFirstRowNullColumn(\"name\"));\n                 * // Output: { id: 2, name: null }\n                 * \n                 * console.log(dataModel.findFirstRowNullColumn(\"id\"));\n                 * // Output: null (no null values in the \"id\" column)\n                 *\n                 * // TypeScript Error: Argument of type '\"age\"' is not assignable to parameter of type '\"id\" | \"name\"'.\n                 * // console.log(dataModel.findFirstRowNullColumn(\"age\"));\n                 * ```\n                 *\n                 * @param {K} column The column name to check for `null` values.\n                 * @returns {T | null} The first row where the column has a `null` value, or `null` if none exist.\n                 * @throws {Error} If `column` does not exist.\n                 */\n                findFirstRowNullColumn = <K extends keyof T>(column: K): T | null => {\n                    const nullColumnFirstRowIndex = this._getNullColumnFirstRowIndex(column as string);\n                    if (nullColumnFirstRowIndex === -1) {\n                        return null\n                    } else {\n                        return this.getRow(nullColumnFirstRowIndex);\n                    }\n                };\n                /**\n                 * Checks whether a specified column contains only unique values (i.e., no duplicate values).\n                 * Uses `<K extends keyof T>` to enforce type safety on the column name.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The column name to check, constrained to keys of `T`.\n                 *\n                 * ### Behavior\n                 * - Ensures type safety by restricting `column` to existing keys of `T`.\n                 * - Calls `_getDuplColumnFirstRowIndex(column)` to find the first occurrence of a duplicate value in the column.\n                 * - If no duplicates are found, returns `true`; otherwise, returns `false`.\n                 *\n                 * ### Returns\n                 * - **`boolean`**: `true` if the column has no duplicate values, otherwise `false`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Alice\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.isNotDuplColumn(\"id\")); // Output: true\n                 * console.log(dataModel.isNotDuplColumn(\"name\")); // Output: false\n                 *\n                 * // TypeScript Error: Argument of type '\"age\"' is not assignable to parameter of type '\"id\" | \"name\"'.\n                 * // console.log(dataModel.isNotDuplColumn(\"age\"));\n                 * ```\n                 *\n                 * @param {K} column The column name to check for duplicate values.\n                 * @returns {boolean} `true` if the column has no duplicate values, otherwise `false`.\n                 * @throws {Error} If `column` does not exist.\n                 */\n                isNotDuplColumn = <K extends keyof T>(column: K): boolean => {\n                    return this._getDuplColumnFirstRowIndex(column as string) === -1;\n                };\n                /**\n                 * Finds and returns the first row where the specified column contains a duplicate value.\n                 * Uses `<K extends keyof T>` to ensure that the column exists in `T`, enforcing type safety.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The column name to check for duplicate values, constrained to keys of `T`.\n                 *\n                 * ### Behavior\n                 * - Ensures type safety by restricting `column` to existing keys of `T`.\n                 * - Calls `_getDuplColumnFirstRowIndex(column)` to locate the first occurrence of a duplicate value.\n                 * - If no duplicate values are found, returns `null`.\n                 * - If a duplicate value is found, retrieves and returns the corresponding row using `getRow()`.\n                 *\n                 * ### Returns\n                 * - **`T | null`**: The first row where the column has a duplicate value, or `null` if no duplicates exist.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   name: string;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Alice\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.findFirstRowDuplColumn(\"name\"));\n                 * // Output: { id: 3, name: \"Alice\" } (the second occurrence of \"Alice\")\n                 * \n                 * console.log(dataModel.findFirstRowDuplColumn(\"id\"));\n                 * // Output: null (no duplicate values in the \"id\" column)\n                 *\n                 * // TypeScript Error: Argument of type '\"age\"' is not assignable to parameter of type '\"id\" | \"name\"'.\n                 * // console.log(dataModel.findFirstRowDuplColumn(\"age\"));\n                 * ```\n                 *\n                 * @param {K} column The column name to check for duplicate values.\n                 * @returns {T | null} The first row where the column has a duplicate value, or `null` if none exist.\n                 * @throws {Error} If `column` does not exist.\n                 */\n                findFirstRowDuplColumn = <K extends keyof T>(column: K): T | null => {\n                    const duplColumnFirstRowIndex = this._getDuplColumnFirstRowIndex(column as string);\n                    if (duplColumnFirstRowIndex === -1) {\n                        return null\n                    } else {\n                        return this.getRow(duplColumnFirstRowIndex);\n                    }\n                };\n                /**\n                 * Checks whether all values in the specified column satisfy a given validation function.\n                 * Uses `<K extends keyof T>` to ensure type safety for column selection.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The column name to validate, constrained to keys of `T`.\n                 * - `validator` **(`DataModelValidator`)**: A function that takes a value as input and returns `true` if the value is valid.\n                 *\n                 * ### Behavior\n                 * - Ensures type safety by restricting `column` to existing keys of `T`.\n                 * - Calls `_getInValidColumnFirstRowIndex(column, validator)` to check for invalid values.\n                 * - If no invalid values are found, returns `true`; otherwise, returns `false`.\n                 *\n                 * ### Returns\n                 * - **`boolean`**: `true` if all values in the column are valid, otherwise `false`.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   age: number;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, age: 25 },\n                 *     { id: 2, age: 30 },\n                 *     { id: 3, age: \"invalid\" as any }\n                 * ]);\n                 * \n                 * // Check if all values in \"age\" column are valid numbers\n                 * console.log(dataModel.isValidValue(\"age\", value => typeof value === \"number\"));\n                 * // Output: false\n                 * \n                 * console.log(dataModel.isValidValue(\"id\", value => typeof value === \"number\"));\n                 * // Output: true\n                 *\n                 * // TypeScript Error: Argument of type '\"name\"' is not assignable to parameter of type '\"id\" | \"age\"'.\n                 * // console.log(dataModel.isValidValue(\"name\", value => typeof value === \"string\"));\n                 * ```\n                 *\n                 * @param {K} column The column name to validate.\n                 * @param {DataModelValidator} validator A function that checks if a value is valid.\n                 * @returns {boolean} `true` if all values in the column are valid, otherwise `false`.\n                 * @throws {Error} If `column` does not exist or `validator` is not a function.\n                 */\n                isValidValue = <K extends keyof T>(column: K, vaildator: DataModelValidator): boolean => {\n                    return this._getInValidColumnFirstRowIndex(column as string, vaildator) === -1;\n                };\n                /**\n                 * Finds and returns the first row where the specified column contains an invalid value based on a given validation function.\n                 * Uses `<K extends keyof T>` to ensure type safety for column selection.\n                 *\n                 * ### Parameters\n                 * - `column` **(K)**: The column name to validate, constrained to keys of `T`.\n                 * - `validator` **(`DataModelValidator`)**: A function that takes a value as input and returns `true` if the value is valid.\n                 *\n                 * ### Behavior\n                 * - Ensures type safety by restricting `column` to existing keys of `T`.\n                 * - Calls `_getInValidColumnFirstRowIndex(column, validator)` to locate the first occurrence of an invalid value in the column.\n                 * - If no invalid values are found, returns `null`.\n                 * - If an invalid value is found, retrieves and returns the corresponding row using `getRow()`.\n                 *\n                 * ### Returns\n                 * - **`T | null`**: The first row where the column has an invalid value, or `null` if all values are valid.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *   id: number;\n                 *   age: number;\n                 * }\n                 *\n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, age: 25 },\n                 *     { id: 2, age: \"invalid\" as any },\n                 *     { id: 3, age: 30 }\n                 * ]);\n                 * \n                 * // Find the first row where \"age\" contains a non-numeric value\n                 * console.log(dataModel.findFirstRowInvalidValue(\"age\", value => typeof value === \"number\"));\n                 * // Output: { id: 2, age: \"invalid\" }\n                 * \n                 * console.log(dataModel.findFirstRowInvalidValue(\"id\", value => typeof value === \"number\"));\n                 * // Output: null (all values in \"id\" are valid)\n                 *\n                 * // TypeScript Error: Argument of type '\"name\"' is not assignable to parameter of type '\"id\" | \"age\"'.\n                 * // console.log(dataModel.findFirstRowInvalidValue(\"name\", value => typeof value === \"string\"));\n                 * ```\n                 *\n                 * @param {K} column The column name to validate.\n                 * @param {DataModelValidator} validator A function that checks if a value is valid.\n                 * @returns {T | null} The first row with an invalid value, or `null` if all values are valid.\n                 * @throws {Error} If `column` does not exist or `validator` is not a function.\n                 */\n                findFirstRowInvalidValue = <K extends keyof T>(column: K, vaildator: DataModelValidator): T | null => {\n                    const inValidColumnFirstRowIndex = this._getInValidColumnFirstRowIndex(column as string, vaildator);\n                    if (inValidColumnFirstRowIndex === -1) {\n                        return null\n                    } else {\n                        return this.getRow(inValidColumnFirstRowIndex);\n                    }\n                };\n                /**\n                 * Searches for rows that match a given condition and returns their indexes.\n                 * Allows both positive and negative filtering based on the `isNegative` flag.\n                 *\n                 * ### Parameters\n                 * - `condition` **(`Record<K, T[K]>`)**: An object representing the key-value conditions to match.\n                 * - `isNegative` **(`boolean`, optional, default = `false`)**: If `true`, returns indexes of rows that **do not** match the condition.\n                 *\n                 * ### Behavior\n                 * - Ensures `condition` is a valid object using `_checkOriginObject(condition)`.\n                 * - Validates `isNegative` as a boolean using `_checkBoolean(isNegative)`.\n                 * - Iterates through `_rows` to check if each row meets the condition.\n                 * - Uses `JSON.stringify()` for deep comparison of values.\n                 * - If `isNegative` is `false`, adds matching row indexes to the result.\n                 * - If `isNegative` is `true`, adds **non-matching** row indexes to the result.\n                 *\n                 * ### Type Safety\n                 * - The generic type `<K extends keyof T>` ensures that `condition` keys must exist in `T`.\n                 * - `T[K]` enforces that values in `condition` match the expected type of the corresponding column.\n                 *\n                 * ### Returns\n                 * - **`number[]`**: An array of indexes of rows that match (or do not match) the condition.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 *     age: number;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 25 }\n                 * ]);\n                 * \n                 * // Search for row indexes where age is 25\n                 * console.log(dataModel.searchRowIndexes({ age: 25 }));\n                 * // Output: [0, 2]\n                 * \n                 * // Search for row indexes where age is NOT 25\n                 * console.log(dataModel.searchRowIndexes({ age: 25 }, true));\n                 * // Output: [1]\n                 * ```\n                 *\n                 * @param {Record<K, T[K]>} condition The key-value condition to match.\n                 * @param {boolean} [isNegative=false] If `true`, returns indexes of rows that do **not** match the condition.\n                 * @returns {number[]} An array of indexes of rows that match or do not match the condition.\n                 * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n                 */\n                searchRowIndexes = <K extends keyof T>(condition: Record<K, T[K]>, isNegative: boolean = false): number[] => {\n                    const _this = this;\n                    _this._checkOriginObject(condition);\n                    _this._checkBoolean(isNegative);\n                    const matched: number[] = [];\n                    _this._rows.forEach(function(row, index) {\n                        let matchesCondition = true;\n                        for (const key in condition) {\n                            _this._checkColumn(key);\n                            if ((JSON.stringify(row[key]) !== JSON.stringify(condition[key]))) {\n                                matchesCondition = false;\n                                break;\n                            }\n                        }\n                        if (isNegative) {\n                            if (!matchesCondition) matched.push(index);\n                        } else {\n                            if (matchesCondition) matched.push(index);\n                        }\n                    });\n                    return matched;\n                };\n                /**\n                 * Searches for rows that match a given condition and returns them as an array.\n                 * Allows both positive and negative filtering based on the `isNegative` flag.\n                 *\n                 * ### Parameters\n                 * - `condition` **(`Record<K, T[K]>`)**: An object representing the key-value conditions to match.\n                 * - `isNegative` **(`boolean`, optional, default = `false`)**: If `true`, returns rows that **do not** match the condition.\n                 *\n                 * ### Behavior\n                 * - Ensures `condition` is a valid object using `_checkOriginObject(condition)`.\n                 * - Validates `isNegative` as a boolean using `_checkBoolean(isNegative)`.\n                 * - Iterates through `_rows`, checking if each row meets the condition.\n                 * - Uses `JSON.stringify()` for deep comparison of values.\n                 * - If `isNegative` is `false`, adds matching rows to the result.\n                 * - If `isNegative` is `true`, adds **non-matching** rows to the result.\n                 * - Returns a deep copy of the matched rows to ensure immutability.\n                 *\n                 * ### Type Safety\n                 * - The generic type `<K extends keyof T>` ensures that `condition` keys must exist in `T`.\n                 * - `T[K]` enforces that values in `condition` match the expected type of the corresponding column.\n                 *\n                 * ### Returns\n                 * - **`T[]`**: An array of deep-copied rows that match (or do not match) the condition.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 *     age: number;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 25 }\n                 * ]);\n                 * \n                 * // Search for rows where age is 25\n                 * console.log(dataModel.searchRows({ age: 25 }));\n                 * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\n                 * \n                 * // Search for rows where age is NOT 25\n                 * console.log(dataModel.searchRows({ age: 25 }, true));\n                 * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\n                 * ```\n                 *\n                 * @param {Record<K, T[K]>} condition The key-value condition to match.\n                 * @param {boolean} [isNegative=false] If `true`, returns rows that do **not** match the condition.\n                 * @returns {T[]} An array of deep-copied rows that match or do not match the condition.\n                 * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n                 */\n                searchRows = <K extends keyof T>(condition: Record<K, T[K]>, isNegative: boolean = false): T[] => {\n                    const _this = this;\n                    _this._checkOriginObject(condition);\n                    _this._checkBoolean(isNegative);\n                    const matched: T[] = [];\n                    _this._rows.forEach(function(row) {\n                        let matchesCondition = true;\n                        for (const key in condition) {\n                            _this._checkColumn(key);\n                            if ((JSON.stringify(row[key]) !== JSON.stringify(condition[key]))) {\n                                matchesCondition = false;\n                                break;\n                            }\n                        }\n                        if (isNegative) {\n                            if (!matchesCondition) matched.push(_this._deepCopy(row));\n                        } else {\n                            if (matchesCondition) matched.push(_this._deepCopy(row));\n                        }\n                    });\n                    return matched;\n                };\n                /**\n                 * Searches for rows that match a given condition and returns them as a new `DataModel` instance.\n                 * Allows both positive and negative filtering based on the `isNegative` flag.\n                 *\n                 * ### Parameters\n                 * - `condition` **(`Record<K, T[K]>`)**: An object representing the key-value conditions to match.\n                 * - `isNegative` **(`boolean`, optional, default = `false`)**: If `true`, returns rows that **do not** match the condition.\n                 *\n                 * ### Behavior\n                 * - Ensures `condition` is a valid object using `_checkOriginObject(condition)`.\n                 * - Validates `isNegative` as a boolean using `_checkBoolean(isNegative)`.\n                 * - Iterates through `_rows`, checking if each row meets the condition.\n                 * - Uses `JSON.stringify()` for deep comparison of values.\n                 * - If `isNegative` is `false`, adds matching rows to the result.\n                 * - If `isNegative` is `true`, adds **non-matching** rows to the result.\n                 * - Returns a new `DataModel<T>` containing the filtered rows.\n                 *\n                 * ### Type Safety\n                 * - The generic type `<K extends keyof T>` ensures that `condition` keys must exist in `T`.\n                 * - `T[K]` enforces that values in `condition` match the expected type of the corresponding column.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: A new `DataModel<T>` instance containing the matched rows.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 *     age: number;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 25 }\n                 * ]);\n                 * \n                 * // Search for rows where age is 25 and return them as a new DataModel\n                 * const filteredModel = dataModel.searchRowsAsDataModel({ age: 25 });\n                 * console.log(filteredModel.getRowCount()); // Output: 2\n                 * console.log(filteredModel.getRows());\n                 * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\n                 * \n                 * // Search for rows where age is NOT 25\n                 * const excludedModel = dataModel.searchRowsAsDataModel({ age: 25 }, true);\n                 * console.log(excludedModel.getRows());\n                 * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\n                 * ```\n                 *\n                 * @param {Record<K, T[K]>} condition The key-value condition to match.\n                 * @param {boolean} [isNegative=false] If `true`, returns rows that do **not** match the condition.\n                 * @returns {InterfaceDataModel<T>} A new `DataModel<T>` instance containing the matched rows.\n                 * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n                 */\n                searchRowsAsDataModel = <K extends keyof T>(condition: Record<K, T[K]>, isNegative: boolean = false): InterfaceDataModel<T> => {\n                    const _this = this;\n                    _this._checkOriginObject(condition);\n                    _this._checkBoolean(isNegative);\n                    const matched: T[] = [];\n                    _this._rows.forEach(function(row) {\n                        let matchesCondition = true;\n                        for (const key in condition) {\n                            _this._checkColumn(key);\n                            if ((JSON.stringify(row[key]) !== JSON.stringify(condition[key]))) {\n                                matchesCondition = false;\n                                break;\n                            }\n                        }\n                        if (isNegative) {\n                            if (!matchesCondition) matched.push(row);\n                        } else {\n                            if (matchesCondition) matched.push(row);\n                        }\n                    });\n                    return new hison.data.DataModel(matched);\n                };\n                /**\n                 * Searches for rows that match a given condition and **modifies** the original `DataModel` \n                 * by removing matched or unmatched rows. Unlike `searchRowsAsDataModel`, this method directly \n                 * updates the existing dataset instead of returning a new instance.\n                 *\n                 * ### Parameters\n                 * - `condition` **(`Record<K, T[K]>`)**: An object representing the key-value conditions to match.\n                 * - `isNegative` **(`boolean`, optional, default = `false`)**: \n                 *   - If `false` (default), removes rows that **do not** match the condition.\n                 *   - If `true`, removes rows that **do** match the condition.\n                 *\n                 * ### Behavior\n                 * - Ensures `condition` is a valid object using `_checkOriginObject(condition)`.\n                 * - Validates `isNegative` as a boolean using `_checkBoolean(isNegative)`.\n                 * - Iterates through `_rows`, checking if each row meets the condition.\n                 * - Uses `JSON.stringify()` for deep comparison of values.\n                 * - Removes rows based on the `isNegative` flag:\n                 *   - If `false`, keeps only matching rows.\n                 *   - If `true`, removes matching rows.\n                 * - Returns the modified `DataModel<T>` instance for method chaining.\n                 *\n                 * ### Type Safety\n                 * - The generic type `<K extends keyof T>` ensures that `condition` keys must exist in `T`.\n                 * - `T[K]` enforces that values in `condition` match the expected type of the corresponding column.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The modified `DataModel<T>` instance after removing specified rows.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 *     age: number;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 25 }\n                 * ]);\n                 * \n                 * // Keep only rows where age is 25\n                 * dataModel.searchAndModify({ age: 25 });\n                 * console.log(dataModel.getRows());\n                 * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\n                 * \n                 * // Remove rows where age is 25\n                 * dataModel.searchAndModify({ age: 25 }, true);\n                 * console.log(dataModel.getRows());\n                 * // Output: []\n                 * ```\n                 *\n                 * @param {Record<K, T[K]>} condition The key-value condition to match.\n                 * @param {boolean} [isNegative=false] If `true`, removes rows that **match** the condition; otherwise, removes rows that **do not** match the condition.\n                 * @returns {InterfaceDataModel<T>} The modified `DataModel<T>` instance after removing specified rows.\n                 * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n                 */\n                searchAndModify = <K extends keyof T>(condition: Record<K, T[K]>, isNegative: boolean = false): InterfaceDataModel<T> => {\n                    const _this = this;\n                    _this._checkOriginObject(condition);\n                    _this._checkBoolean(isNegative);\n                    for (let i = 0; i < _this._rows.length; i++ ){\n                        let matchesCondition = true;\n                        for (const key in condition) {\n                            _this._checkColumn(key);\n                            if ((JSON.stringify(_this._rows[i][key]) !== JSON.stringify(condition[key]))) {\n                                matchesCondition = false;\n                                break;\n                            }\n                        }\n                        if (isNegative) {\n                            if (matchesCondition) {\n                                _this._rows.splice(i, 1);\n                                i--;\n                            }\n                        } else {\n                            if (!matchesCondition) {\n                                _this._rows.splice(i, 1);\n                                i--;\n                            }\n                        }\n                    }\n                    return _this;\n                };\n                /**\n                 * Filters rows in the `DataModel` based on a custom filtering function and returns their indexes.\n                 * Allows for efficiently identifying row positions that match a given condition.\n                 *\n                 * ### Parameters\n                 * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\n                 *\n                 * ### Behavior\n                 * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n                 * - Iterates through `_rows`, applying the filter function to each row.\n                 * - Collects the indexes of rows that satisfy the filter condition.\n                 *\n                 * ### Returns\n                 * - **`number[]`**: An array of indexes of rows that match the filter condition.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 22 }\n                 * ]);\n                 * \n                 * // Get indexes of rows where age is greater than 25\n                 * const rowIndexes = dataModel.filterRowIndexes(row => row.age > 25);\n                 * console.log(rowIndexes); // Output: [1]\n                 * ```\n                 *\n                 * @param {DataModelFillter} filter A function that determines whether a row should be included.\n                 * @returns {number[]} An array of indexes of rows that match the filter condition.\n                 * @throws {Error} If `filter` is not a valid function.\n                 */\n                filterRowIndexes = (filter: DataModelFillter): number[] => {\n                    const _this = this;\n                    _this._checkValidFunction(filter);\n                    const matched: number[] = [];\n                    _this._rows.forEach(function(row: Record<string, any>, index) {\n                        if (filter(row)) {\n                            matched.push(index);\n                        }\n                    });\n                    return matched;\n                };\n                /**\n                 * Filters rows in the `DataModel` based on a custom filtering function.\n                 * Returns an array of rows that satisfy the provided filter condition.\n                 *\n                 * ### Parameters\n                 * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\n                 *\n                 * ### Behavior\n                 * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n                 * - Iterates through `_rows`, applying the filter function to each row.\n                 * - Uses `_deepCopy()` to ensure the returned rows are independent copies.\n                 * - Returns an array of matching rows.\n                 *\n                 * ### Returns\n                 * - **`T[]`**: An array of deep-copied rows that match the filter condition.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 22 }\n                 * ]);\n                 * \n                 * // Filter rows where age is greater than 25\n                 * const filteredRows = dataModel.filterRows(row => row.age > 25);\n                 * console.log(filteredRows);\n                 * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\n                 * ```\n                 *\n                 * @param {DataModelFillter} filter A function that determines whether a row should be included.\n                 * @returns {T[]} An array of deep-copied rows that match the filter condition.\n                 * @throws {Error} If `filter` is not a valid function.\n                 */\n                filterRows = (filter: DataModelFillter): T[] => {\n                    const _this = this;\n                    _this._checkValidFunction(filter);\n                    const matched: T[] = [];\n                    _this._rows.forEach(function(row) {\n                        if (filter(row)) {\n                            matched.push(_this._deepCopy(row));\n                        }\n                    });\n                    return matched;\n                };\n                /**\n                 * Filters rows in the `DataModel` based on a custom filtering function and returns a new `DataModel` containing the matched rows.\n                 * Allows for extracting a subset of the dataset while preserving the structured format.\n                 *\n                 * ### Parameters\n                 * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\n                 *\n                 * ### Behavior\n                 * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n                 * - Iterates through `_rows`, applying the filter function to each row.\n                 * - Collects rows that satisfy the filter condition.\n                 * - Returns a new `DataModel` instance containing the filtered rows.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: A new `DataModel` instance containing the filtered rows.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 22 }\n                 * ]);\n                 * \n                 * // Create a new DataModel containing only rows where age is greater than 25\n                 * const filteredDataModel = dataModel.filterRowsAsDataModel(row => row.age > 25);\n                 * console.log(filteredDataModel.getRowCount()); // Output: 1\n                 * console.log(filteredDataModel.getRow(0)); // Output: { id: 2, name: \"Bob\", age: 30 }\n                 * ```\n                 *\n                 * @param {DataModelFillter} filter A function that determines whether a row should be included.\n                 * @returns {InterfaceDataModel<T>} A new `DataModel` instance containing the filtered rows.\n                 * @throws {Error} If `filter` is not a valid function.\n                 */\n                filterRowsAsDataModel = (filter: DataModelFillter): InterfaceDataModel<T> => {\n                    const _this = this;\n                    _this._checkValidFunction(filter);\n                    const matched: T[] = [];\n                    _this._rows.forEach(function(row) {\n                        if (filter(row)) {\n                            matched.push(row);\n                        }\n                    });\n                    return new hison.data.DataModel(matched);\n                };\n                /**\n                 * Filters rows in the `DataModel` based on a custom filtering function and **modifies** the original `DataModel` by removing unmatched rows.\n                 * This method directly updates the existing dataset instead of returning a new instance.\n                 *\n                 * ### Parameters\n                 * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be retained.\n                 *\n                 * ### Behavior\n                 * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n                 * - Iterates through `_rows`, applying the filter function to each row.\n                 * - Removes rows that do **not** satisfy the filter condition.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with only the filtered rows.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 22 }\n                 * ]);\n                 * \n                 * // Remove all rows where age is 25 or below\n                 * dataModel.filterAndModify(row => row.age > 25);\n                 * \n                 * console.log(dataModel.getRowCount()); // Output: 1\n                 * console.log(dataModel.getRow(0)); // Output: { id: 2, name: \"Bob\", age: 30 }\n                 * ```\n                 *\n                 * @param {DataModelFillter} filter A function that determines whether a row should be retained.\n                 * @returns {InterfaceDataModel<T>} The modified `DataModel` instance after removing unmatched rows.\n                 * @throws {Error} If `filter` is not a valid function.\n                 */\n                filterAndModify = (filter: DataModelFillter): InterfaceDataModel<T> => {\n                    const _this = this;\n                    _this._checkValidFunction(filter);\n                    for (let i = 0; i < _this._rows.length; i++ ){\n                        if (!filter(_this._rows[i])) {\n                            _this._rows.splice(i, 1);\n                            i--;\n                        }\n                    }\n                    return _this;\n                };\n                /**\n                 * Reorders the columns in the `DataModel` based on the specified order.\n                 * Ensures that all existing columns are included, maintaining the defined structure.\n                 *\n                 * ### Parameters\n                 * - `columns` **(`K[]`)**: An array of column names in the desired order.\n                 *\n                 * ### Behavior\n                 * - Calls `_checkArray(columns)` to validate the input as an array.\n                 * - Ensures that each column in `columns` exists in the `DataModel` using `_checkColumn(column)`.\n                 * - Constructs a new column order by placing unspecified columns at the end.\n                 * - Updates `_cols` with the new column order.\n                 * - Returns the modified `DataModel<T>` instance for method chaining.\n                 *\n                 * ### Type Safety\n                 * - Uses `<K extends keyof T>` to ensure that `columns` only contain valid keys of `T`.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The modified `DataModel<T>` instance with reordered columns.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 *     age: number;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\"id\", \"name\", \"age\"]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n                 * \n                 * // Change column order\n                 * dataModel.setColumnSorting([\"age\", \"name\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"age\", \"name\", \"id\"]\n                 * ```\n                 *\n                 * @param {K[]} columns An array of column names in the desired order.\n                 * @returns {InterfaceDataModel<T>} The modified `DataModel<T>` instance with reordered columns.\n                 * @throws {Error} If `columns` is not an array or contains invalid column names.\n                 */\n                setColumnSorting = <K extends keyof T>(columns: K[]): InterfaceDataModel<T> => {\n                    this._checkArray(columns);\n                    const newColumns = [];\n                    for(let column of columns) {\n                        column = this._getValidColValue(column as string) as K;\n                        this._checkColumn(column as string);\n                        newColumns.push(column);\n                    }\n                    for(const column of this._cols) {\n                        if (!newColumns.includes(column)) {\n                            newColumns.push(column)\n                        }\n                    }\n                    this._cols = newColumns;\n                    return this;\n                };\n                /**\n                 * Sorts the columns of the `DataModel` in ascending (A-Z) order.\n                 * The sorting is applied alphabetically based on column names.\n                 *\n                 * ### Behavior\n                 * - Calls the native `Array.sort()` method on `_cols` to rearrange columns in ascending order.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with columns sorted in ascending order.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"name\", \"id\", \"age\"]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\n                 * \n                 * dataModel.sortColumnAscending();\n                 * console.log(dataModel.getColumns()); // Output: [\"age\", \"id\", \"name\"]\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel<T>} The modified `DataModel` instance with columns sorted in ascending order.\n                 */\n                sortColumnAscending = (): InterfaceDataModel<T> => {\n                    this._cols.sort();\n                    return this;\n                };\n                /**\n                 * Sorts the columns of the `DataModel` in descending (Z-A) order.\n                 * The sorting is applied alphabetically based on column names.\n                 *\n                 * ### Behavior\n                 * - Calls the native `Array.sort()` method on `_cols` with a custom comparator to sort columns in descending order.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with columns sorted in descending order.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"name\", \"id\", \"age\"]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\n                 * \n                 * dataModel.sortColumnDescending();\n                 * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel<T>} The modified `DataModel` instance with columns sorted in descending order.\n                 */\n                sortColumnDescending = (): InterfaceDataModel<T> => {\n                    this._cols.sort(function(a, b) {\n                        if (a > b) {\n                            return -1;\n                        }\n                        if (a < b) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n                    return this;\n                };\n                /**\n                 * Reverses the order of columns in the `DataModel`.\n                 * The column order is flipped without sorting alphabetically.\n                 *\n                 * ### Behavior\n                 * - Calls the native `Array.reverse()` method on `_cols` to reverse the column order.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with reversed column order.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\", \"age\"]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n                 * \n                 * dataModel.sortColumnReverse();\n                 * console.log(dataModel.getColumns()); // Output: [\"age\", \"name\", \"id\"]\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel<T>} The modified `DataModel` instance with reversed column order.\n                 */\n                sortColumnReverse = (): InterfaceDataModel<T> => {\n                    this._cols.reverse();\n                    return this;\n                };\n                /**\n                 * Sorts the rows of the `DataModel` in ascending order based on the specified column.\n                 * Optionally supports integer-based sorting for numerical values.\n                 *\n                 * ### Parameters\n                 * - `column` **(`K`)**: The column name to sort by.\n                 * - `isIntegerOrder` **(`boolean`, optional, default = `false`)**: If `true`, treats values as integers for sorting.\n                 *\n                 * ### Behavior\n                 * - Validates `column` using `_getValidColValue(column)`.\n                 * - Ensures `column` exists in the `DataModel` with `_checkColumn(column)`.\n                 * - Validates `isIntegerOrder` using `_checkBoolean(isIntegerOrder)`.\n                 * - Uses `Array.sort()` to sort rows in ascending order.\n                 * - Places `null` values at the end of the sorted list.\n                 * - Converts object values to JSON strings for sorting consistency.\n                 * - If `isIntegerOrder` is `true`, parses values as integers before sorting.\n                 * - Throws an error if a non-numeric value is encountered in integer sorting mode.\n                 *\n                 * ### Type Safety\n                 * - Uses `<K extends keyof T>` to ensure `column` is a valid key of `T`.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The modified `DataModel<T>` instance with rows sorted in ascending order.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 3, name: \"Charlie\" },\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * // Sort rows by \"id\" in ascending order\n                 * dataModel.sortRowAscending(\"id\");\n                 * console.log(dataModel.getRows());\n                 * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n                 * \n                 * // Sort rows numerically by \"id\"\n                 * dataModel.sortRowAscending(\"id\", true);\n                 * ```\n                 *\n                 * @param {K} column The column name to sort by.\n                 * @param {boolean} [isIntegerOrder=false] If `true`, treats values as integers for sorting.\n                 * @returns {InterfaceDataModel<T>} The modified `DataModel<T>` instance with rows sorted in ascending order.\n                 * @throws {Error} If `column` is invalid or contains non-numeric values in integer mode.\n                 */\n                sortRowAscending = <K extends keyof T>(column: K, isIntegerOrder: boolean = false): InterfaceDataModel<T> => {\n                    column = this._getValidColValue(column as string) as K;\n                    this._checkColumn(column as string);\n                    this._checkBoolean(isIntegerOrder);\n                    this._rows.sort(function(a, b) {\n                        let valueA: any = a[column];\n                        let valueB: any = b[column];\n                        if (valueA === null || valueB === null) {\n                            return valueA === null ? 1 : -1;\n                        }\n                        if (typeof valueA === 'object' || typeof valueB === 'object') {\n                            valueA = JSON.stringify(valueA);\n                            valueB = JSON.stringify(valueB);\n                        }\n                        if (isIntegerOrder) {\n                            valueA = parseInt(valueA, 10);\n                            valueB = parseInt(valueB, 10);\n                            if (isNaN(valueA) || isNaN(valueB)) {\n                                throw new Error('Cannot sort rows: non-integer value encountered.');\n                            }\n                        }\n                        if (valueA < valueB) {\n                            return -1;\n                        }\n                        if (valueA > valueB) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n                    return this;\n                };\n                /**\n                 * Sorts the rows of the `DataModel` in descending order based on the specified column.\n                 * Optionally supports integer-based sorting for numerical values.\n                 *\n                 * ### Parameters\n                 * - `column` **(`K`)**: The column name to sort by.\n                 * - `isIntegerOrder` **(`boolean`, optional, default = `false`)**: If `true`, treats values as integers for sorting.\n                 *\n                 * ### Behavior\n                 * - Validates `column` using `_getValidColValue(column)`.\n                 * - Ensures `column` exists in the `DataModel` with `_checkColumn(column)`.\n                 * - Validates `isIntegerOrder` using `_checkBoolean(isIntegerOrder)`.\n                 * - Uses `Array.sort()` to sort rows in descending order.\n                 * - Places `null` values at the beginning of the sorted list.\n                 * - Converts object values to JSON strings for sorting consistency.\n                 * - If `isIntegerOrder` is `true`, parses values as integers before sorting.\n                 * - Throws an error if a non-numeric value is encountered in integer sorting mode.\n                 *\n                 * ### Type Safety\n                 * - Uses `<K extends keyof T>` to ensure `column` is a valid key of `T`.\n                 *\n                 * ### Returns\n                 * - **`InterfaceDataModel<T>`**: The modified `DataModel<T>` instance with rows sorted in descending order.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 * }\n                 * \n                 * const dataModel = new hison.data.DataModel<User>([\n                 *     { id: 3, name: \"Charlie\" },\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * // Sort rows by \"id\" in descending order\n                 * dataModel.sortRowDescending(\"id\");\n                 * console.log(dataModel.getRows());\n                 * // Output: [{ id: 3, name: \"Charlie\" }, { id: 2, name: \"Bob\" }, { id: 1, name: \"Alice\" }]\n                 * \n                 * // Sort rows numerically by \"id\"\n                 * dataModel.sortRowDescending(\"id\", true);\n                 * ```\n                 *\n                 * @param {K} column The column name to sort by.\n                 * @param {boolean} [isIntegerOrder=false] If `true`, treats values as integers for sorting.\n                 * @returns {InterfaceDataModel<T>} The modified `DataModel<T>` instance with rows sorted in descending order.\n                 * @throws {Error} If `column` is invalid or contains non-numeric values in integer mode.\n                 */\n                sortRowDescending = <K extends keyof T>(column: K, isIntegerOrder: boolean = false): InterfaceDataModel<T> => {\n                    column = this._getValidColValue(column as string) as K;\n                    this._checkColumn(column as string);\n                    this._checkBoolean(isIntegerOrder);\n                    this._rows.sort(function(a, b) {\n                        let valueA: any = a[column];\n                        let valueB: any = b[column];\n                        if (valueA === null || valueB === null) {\n                            return valueA === null ? -1 : 1;\n                        }\n                        if (typeof valueA === 'object' || typeof valueB === 'object') {\n                            valueA = JSON.stringify(valueA);\n                            valueB = JSON.stringify(valueB);\n                        }\n                        if (isIntegerOrder) {\n                            valueA = parseInt(valueA, 10);\n                            valueB = parseInt(valueB, 10);\n                            if (isNaN(valueA) || isNaN(valueB)) {\n                                throw new Error('Cannot sort rows: non-integer value encountered.');\n                            }\n                        }\n                        if (valueA < valueB) {\n                            return 1;\n                        }\n                        if (valueA > valueB) {\n                            return -1;\n                        }\n                        return 0;\n                    });\n                    return this;\n                };\n                /**\n                 * Reverses the order of rows in the `DataModel`.\n                 * This method flips the row order without sorting by a specific column.\n                 *\n                 * ### Behavior\n                 * - Calls the native `Array.reverse()` method on `_rows` to reverse the row order.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ### Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with reversed row order.\n                 *\n                 * ### Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRows());\n                 * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n                 * \n                 * dataModel.sortRowReverse();\n                 * console.log(dataModel.getRows());\n                 * // Output: [{ id: 3, name: \"Charlie\" }, { id: 2, name: \"Bob\" }, { id: 1, name: \"Alice\" }]\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel<T>} The modified `DataModel` instance with reversed row order.\n                 */\n                sortRowReverse = (): InterfaceDataModel<T> => {\n                    this._rows.reverse();\n                    return this;\n                };\n            },\n        };\n        link = {\n            /**\n             * **`CachingModule` - A module for API response caching and real-time WebSocket updates.**\n             *\n             * The `CachingModule` provides a caching mechanism for API responses using an **LRU (Least Recently Used) strategy** \n             * while integrating **WebSocket communication** for real-time data updates.\n             *\n             * ### **Key Features**\n             * - **LRU Cache for API Responses**: Stores API responses with a configurable limit, reducing redundant network requests.\n             * - **WebSocket Support**: Maintains a persistent WebSocket connection for real-time data updates.\n             * - **Cache Management Methods**: Supports cache operations (`get`, `put`, `remove`, `clear`, etc.).\n             * - **Event-Driven Communication**: Allows event listeners (`onopen`, `onmessage`, `onclose`, `onerror`) for WebSocket handling.\n             * - **Flexible Configuration**: Uses `CustomOption` settings for cache limits and WebSocket parameters.\n             * - **Validation Methods**: Ensures proper data types for cache keys and event listeners.\n             *\n             * ### **How It Works**\n             * - **API responses are stored in an LRUCache instance**, avoiding redundant network calls.\n             * - **When a WebSocket connection is established**, data updates can be received in real-time.\n             * - **Cache data can be accessed and managed using `get`, `put`, `remove`, and `clear` methods.**\n             * - **WebSocket event handlers can be set up for real-time notifications.**\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Create a CachingModule instance with a cache limit of 20\n             * const cachingModule = new hison.link.CachingModule(20);\n             * \n             * // Store API response in the cache\n             * cachingModule.put(\"users\", fetch(\"/api/users\").then(response => response.json()));\n             * \n             * // Retrieve cached data\n             * cachingModule.get(\"users\").then(data => console.log(data));\n             * \n             * // Register WebSocket event handlers\n             * cachingModule.onopen = () => console.log(\"WebSocket Connected\");\n             * cachingModule.onmessage = event => console.log(\"New Message:\", event.data);\n             * ```\n             *\n             * ### **Internal Structure**\n             * - **Uses `LRUCache`** to manage cached responses with a defined limit.\n             * - **Maintains a WebSocket connection** to receive real-time data updates.\n             * - **Supports configurable options via `CustomOption`**, such as WebSocket endpoint and cache size.\n             * - **Provides utility methods** for cache validation, data retrieval, and event handling.\n             *\n             * ### **Related Components**\n             * - **`LRUCache`**: Handles the caching logic for API responses.\n             * - **`WebSocket`**: Establishes a real-time connection for live data updates.\n             * - **`CustomOption`**: Provides configurable options for WebSocket and cache settings.\n             * - **`ApiLink`**: Uses this module to fetch and store API responses efficiently.\n             *\n             * ### **Return Value**\n             * - This module **returns an instance of `CachingModule`**, which allows cache operations and WebSocket event management.\n             *\n             * ### **Typical Use Cases**\n             * - **Reducing unnecessary API calls** by storing frequently accessed responses.\n             * - **Receiving real-time updates** from the server without polling.\n             * - **Efficiently managing API response data** in web applications.\n             * - **Supporting offline or low-latency scenarios** by using cached responses.\n             */\n            CachingModule: class implements InterfaceCachingModule {\n                /**\n                 * **Creates an instance of `CachingModule`, initializing an LRU cache and a WebSocket connection.**\n                 *\n                 * The constructor sets up the **WebSocket connection** for real-time updates and \n                 * **instantiates an `LRUCache`** to manage API response caching.\n                 *\n                 * ### **Parameters**\n                 * - `cachingLimit` *(optional, number)* - The maximum number of items the cache can store.  \n                 *   - **Default:** `customOption.cachingLimit`\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Establishes a WebSocket connection** using the protocol, domain, and endpoint specified in `CustomOption`.\n                 * 2. **Configures WebSocket event handlers** (`onopen`, `onmessage`, `onclose`, `onerror`).\n                 * 3. **Creates an LRUCache instance** with the specified caching limit.\n                 * 4. **Marks this instance as a valid caching module** using `_isCachingModule = true`.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating a caching module with a default caching limit\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Creating a caching module with a custom limit of 50 entries\n                 * const customCachingModule = new hison.link.CachingModule(50);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_webSocket`** *(WebSocket)* - The WebSocket connection instance.\n                 * - **`_LRUCache`** *(LRUCache)* - The LRU-based cache for storing API responses.\n                 * - **`_isCachingModule`** *(boolean)* - A flag indicating whether this instance is a caching module.\n                 *\n                 * @param {number} [cachingLimit=customOption.link.cachingLimit] - The maximum number of cached responses.\n                 */\n                constructor(cachingLimit: number = customOption.link.cachingLimit) {\n                    this._webSocket = new WebSocket(customOption.link.webSocketProtocol + customOption.link.domain + customOption.link.webSocketEndPoint);\n                    this._webSocket.onopen = function() {};\n                    this._webSocket.onmessage = function() {};\n                    this._webSocket.onclose = function() {};\n                    this._webSocket.onerror = function() {};\n                    this._LRUCache = new LRUCache(cachingLimit);\n                    this._isCachingModule = true;\n                };\n                private _webSocket: WebSocket;\n                private _LRUCache: LRUCache;\n                private _isCachingModule: boolean;\n                private _checkTypeString = (str: string) => {\n                    if(typeof str !== 'string') {\n                        throw new Error('key is only a string.');\n                    }\n                }\n                private _checkTypeFunction = (func: Function | null) => {\n                    if (func && typeof func !== 'function') {\n                        throw new Error('Please enter only the function.');\n                    }\n                }\n                private _checkWebSocketConnection = (): number => {\n                    if (this._webSocket.readyState === WebSocket.OPEN) {\n                        return 1;\n                    } else if (this._webSocket.readyState === WebSocket.CONNECTING) {\n                        return 0;\n                    } else {\n                        return -1;\n                    }\n                };\n                /**\n                 * **Checks whether this instance is a valid caching module.**\n                 *\n                 * This method returns a boolean flag indicating whether the current instance \n                 * is recognized as a `CachingModule`. This is useful for validating whether \n                 * an instance supports caching functionalities.\n                 *\n                 * ### **Return Value**\n                 * - `true` if this instance is a caching module.\n                 * - `false` if caching is not enabled.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * console.log(cachingModule.getIsCachingModule()); // true\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_isCachingModule`** *(boolean)* - Stores the module's caching capability status.\n                 *\n                 * @returns {boolean} `true` if this instance is a caching module.\n                 */\n                getIsCachingModule = (): boolean => {\n                    return this._isCachingModule;\n                };\n                /**\n                 * **Checks if the cache contains a specific key.**\n                 *\n                 * This method verifies if the specified `key` exists in the LRU cache. It ensures \n                 * that the key is a valid string and then delegates the check to the underlying \n                 * `LRUCache` instance.\n                 *\n                 * ### **Parameters**\n                 * - `key` *(string)* - The key to check in the cache.\n                 *\n                 * ### **Return Value**\n                 * - `true` if the cache contains the specified key.\n                 * - `false` if the key is not found in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * console.log(cachingModule.hasKey(\"user123\")); // true\n                 * console.log(cachingModule.hasKey(\"user456\")); // false\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`_checkTypeString(key)`** - Ensures the key is a valid string before performing the cache check.\n                 * - **`_LRUCache.hasKey(key)`** - The internal method that checks the existence of the key in the cache.\n                 *\n                 * @param {string} key - The key to check in the cache.\n                 * @returns {boolean} `true` if the cache contains the key, otherwise `false`.\n                 */\n                hasKey = (key: string): boolean => {\n                    this._checkTypeString(key);\n                    return this._LRUCache.hasKey(key);\n                };\n                /**\n                 * **Retrieves cached data for a given key.**\n                 *\n                 * Fetches the cached API response associated with `key`, returning a promise.\n                 * If the key does not exist in the cache, `null` is returned.\n                 *\n                 * ### **Parameters**\n                 * - `key` *(string)* - The cache key to retrieve.\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(T)* - The cached API response.\n                 *   - `response` *(Response)* - The original HTTP response.\n                 * - Returns `null` if the key does not exist.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store API response in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * \n                 * // Retrieve cached data\n                 * cachingModule.get(\"user123\").then(data => console.log(data));\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`put(key, value)`** - Stores API responses in the cache.\n                 * - **`hasKey(key)`** - Checks if a key exists in the cache.\n                 * - **`remove(key)`** - Removes a key from the cache.\n                 *\n                 * @param {string} key - The cache key to retrieve.\n                 * @returns {Promise<{ data: T; response: Response }>} | null\n                 */\n                get = <T = any>(key: string): Promise<{ data: T; response: Response; }> | null => {\n                    this._checkTypeString(key);\n                    return this._LRUCache.get(key);\n                };\n                /**\n                 * **Stores API response data in the cache.**\n                 *\n                 * This method saves the provided `value` (API response) in the cache with the specified `key`.\n                 * Before storing the data, it validates that the `key` is a string.\n                 *\n                 * ### **Parameters**\n                 * - `key` *(string)* - The cache key under which the response will be stored.\n                 * - `value` *(Promise<{ data: any; response: Response }>)*\n                 *   - A promise resolving to an object containing:\n                 *     - `data` *(any)* - The API response data.\n                 *     - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ### **Behavior**\n                 * - If the `key` already exists, the old value is **replaced** with the new one.\n                 * - If the cache reaches its limit, the **least recently used (LRU) entry is removed**.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store an API response in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`get(key)`** - Retrieves cached data for a given key.\n                 * - **`hasKey(key)`** - Checks if a key exists in the cache.\n                 * - **`remove(key)`** - Removes a specific key from the cache.\n                 *\n                 * @param {string} key - The cache key under which the response will be stored.\n                 * @param {Promise<{ data: any; response: Response }>} value - The API response to be cached.\n                 */\n                put = (key: string, value: Promise<{ data: any; response: Response; }>) => {\n                    this._checkTypeString(key);\n                    this._LRUCache.put(key, value);\n                };\n                /**\n                 * **Removes a key from the cache and returns its value.**\n                 *\n                 * Retrieves the cached response for `key` before deleting it.  \n                 * If the key does not exist, returns `null`.\n                 *\n                 * ### **Parameters**\n                 * - `key` *(string)* - The cache key to remove.\n                 *\n                 * ### **Behavior**\n                 * - Ensures `key` is a valid string before proceeding.\n                 * - Fetches the cached data for `key`, if available.\n                 * - Deletes the key from the cache.\n                 * - Returns the cached data before deletion, or `null` if not found.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store an API response in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * \n                 * // Remove and retrieve cached data\n                 * cachingModule.remove(\"user123\").then(data => console.log(data));\n                 * \n                 * // Verify key removal\n                 * console.log(cachingModule.hasKey(\"user123\")); // false\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`put(key, value)`** - Stores API responses in the cache.\n                 * - **`get(key)`** - Retrieves cached data for a given key.\n                 * - **`clear()`** - Removes all cached entries.\n                 *\n                 * @param {string} key - The cache key to remove.\n                 * @returns {Promise<{ data: T; response: Response; }> | null} The cached response before removal, or `null` if not found.\n                 */\n                remove = <T = any>(key: string): Promise<{ data: T; response: Response; }> | null => {\n                    this._checkTypeString(key);\n                    const result = this._LRUCache.get(key);\n                    this._LRUCache.remove(key);\n                    return result;\n                };\n                /**\n                 * **Retrieves all cached data as a key-value object.**\n                 *\n                 * Returns the entire cache as a `Record<string, Promise<{ data: T; response: Response }>>`,  \n                 * where each key corresponds to a cached API response.\n                 *\n                 * ### **Return Value**\n                 * - A `Record<string, Promise<{ data: T; response: Response }>>`, where:\n                 *   - `key` *(string)* - The cache key.\n                 *   - `value` *(Promise<{ data: T; response: Response }>>)* - A promise resolving to:\n                 *     - `data` *(T)* - The API response data.\n                 *     - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store multiple API responses in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\n                 * \n                 * // Retrieve all cached data\n                 * console.log(cachingModule.getAll());\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`put(key, value)`** - Stores API responses in the cache.\n                 * - **`get(key)`** - Retrieves cached data for a given key.\n                 * - **`getKeys()`** - Retrieves all cache keys.\n                 * - **`clear()`** - Removes all cached entries.\n                 *\n                 * @returns {Record<string, Promise<{ data: T; response: Response }>>} An object containing all cached responses.\n                 */\n                getAll = <T = any>(): Record<string, Promise<{ data: T; response: Response; }>>  => {\n                    return this._LRUCache.getAll();\n                };\n                /**\n                 * **Retrieves all cache keys.**\n                 *\n                 * This method returns an array of all keys currently stored in the cache.\n                 *\n                 * ### **Return Value**\n                 * - An array of strings representing the cache keys.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store multiple API responses in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\n                 * \n                 * // Retrieve all cache keys\n                 * console.log(cachingModule.getKeys()); // [\"user123\", \"posts\"]\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`put(key, value)`** - Stores API responses in the cache.\n                 * - **`get(key)`** - Retrieves cached data for a given key.\n                 * - **`getAll()`** - Retrieves all cached data as a key-value object.\n                 * - **`clear()`** - Removes all cached entries.\n                 *\n                 * @returns {string[]} An array of cache keys.\n                 */\n                getKeys = (): string[] => {\n                    return this._LRUCache.getKeys();\n                };\n                /**\n                 * **Clears all cached data.**\n                 *\n                 * This method removes all entries from the cache, resetting it to an empty state.\n                 *\n                 * ### **Behavior**\n                 * - All cached responses are permanently deleted.\n                 * - The cache size is reset to zero.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store multiple API responses in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\n                 * \n                 * // Clear all cached data\n                 * cachingModule.clear();\n                 * \n                 * // Verify that the cache is empty\n                 * console.log(cachingModule.getKeys()); // []\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`put(key, value)`** - Stores API responses in the cache.\n                 * - **`get(key)`** - Retrieves cached data for a given key.\n                 * - **`getAll()`** - Retrieves all cached data as a key-value object.\n                 * - **`getKeys()`** - Retrieves all cache keys.\n                 *\n                 * @returns {void}\n                 */\n                clear = () => {\n                    this._LRUCache.clear();\n                };\n                /**\n                 * **Registers an event handler for the WebSocket `open` event.**\n                 *\n                 * This method assigns a custom event handler to be executed when the WebSocket connection is successfully opened.\n                 *\n                 * ### **Parameters**\n                 * - `func` *(function | null)* - A callback function to handle the WebSocket `open` event.\n                 *   - If `null` is provided, the event handler is cleared.\n                 *\n                 * ### **Behavior**\n                 * - Ensures that the provided function is valid before assigning it as the event handler.\n                 * - When the WebSocket connection is established, the specified function is invoked.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Register a WebSocket open event handler\n                 * cachingModule.onopen = (event) => {\n                 *     console.log(\"WebSocket connected:\", event);\n                 * };\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\n                 * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n                 * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n                 *\n                 * @param {(this: WebSocket, ev: Event) => any | null} func - The event handler function for the WebSocket `open` event.\n                 */\n                onopen = (func: ((this: WebSocket, ev: Event) => any) | null) => {\n                    this._checkTypeFunction(func);\n                    this._webSocket.onopen = func;\n                };\n                /**\n                 * **Registers an event handler for the WebSocket `message` event.**\n                 *\n                 * This method assigns a custom event handler to be executed whenever a message is received \n                 * through the WebSocket connection.\n                 *\n                 * ### **Parameters**\n                 * - `func` *(function | null)* - A callback function to handle incoming WebSocket messages.\n                 *   - If `null` is provided, the event handler is cleared.\n                 *\n                 * ### **Behavior**\n                 * - Ensures that the provided function is valid before assigning it as the event handler.\n                 * - When a message is received, the specified function is invoked with the event data.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Register a WebSocket message event handler\n                 * cachingModule.onmessage = (event) => {\n                 *     console.log(\"Received WebSocket message:\", event.data);\n                 * };\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n                 * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n                 * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n                 *\n                 * @param {(this: WebSocket, ev: MessageEvent) => any | null} func - The event handler function for WebSocket messages.\n                 */\n                onmessage = (func: ((this: WebSocket, ev: MessageEvent) => any) | null) => {\n                    this._checkTypeFunction(func);\n                    this._webSocket.onmessage = func;\n                };\n                /**\n                 * **Registers an event handler for the WebSocket `close` event.**\n                 *\n                 * This method assigns a custom event handler to be executed when the WebSocket connection is closed.\n                 *\n                 * ### **Parameters**\n                 * - `func` *(function | null)* - A callback function to handle the WebSocket `close` event.\n                 *   - If `null` is provided, the event handler is cleared.\n                 *\n                 * ### **Behavior**\n                 * - Ensures that the provided function is valid before assigning it as the event handler.\n                 * - When the WebSocket connection is closed, the specified function is invoked with the event data.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Register a WebSocket close event handler\n                 * cachingModule.onclose = (event) => {\n                 *     console.log(\"WebSocket closed:\", event);\n                 * };\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n                 * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\n                 * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n                 *\n                 * @param {(this: WebSocket, ev: CloseEvent) => any | null} func - The event handler function for WebSocket disconnection.\n                 */\n                onclose = (func: ((this: WebSocket, ev: CloseEvent) => any) | null) => {\n                    this._checkTypeFunction(func);\n                    this._webSocket.onclose = func;\n                };\n                /**\n                 * **Registers an event handler for the WebSocket `error` event.**\n                 *\n                 * This method assigns a custom event handler to be executed when a WebSocket error occurs.\n                 *\n                 * ### **Parameters**\n                 * - `func` *(function | null)* - A callback function to handle WebSocket errors.\n                 *   - If `null` is provided, the event handler is cleared.\n                 *\n                 * ### **Behavior**\n                 * - Ensures that the provided function is valid before assigning it as the event handler.\n                 * - When an error occurs in the WebSocket connection, the specified function is invoked with the event data.\n                 * - **Note:** The implementation currently assigns the function to `onclose` instead of `onerror`,\n                 *   which may require correction.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Register a WebSocket error event handler\n                 * cachingModule.onerror = (event) => {\n                 *     console.error(\"WebSocket error:\", event);\n                 * };\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n                 * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\n                 * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n                 *\n                 * @param {(this: WebSocket, ev: Event) => any | null} func - The event handler function for WebSocket errors.\n                 */\n                onerror = (func: ((this: WebSocket, ev: Event) => any) | null) => {\n                    this._checkTypeFunction(func);\n                    this._webSocket.onclose = func;\n                };\n                /**\n                 * **Checks the current state of the WebSocket connection.**\n                 *\n                 * This method returns an integer representing the current status of the WebSocket connection.\n                 *\n                 * ### **Return Value**\n                 * - `1` → The WebSocket connection is open.\n                 * - `0` → The WebSocket connection is in the process of connecting.\n                 * - `-1` → The WebSocket connection is closed or unavailable.\n                 *\n                 * ### **Behavior**\n                 * - Internally calls `_checkWebSocketConnection()` to determine the WebSocket state.\n                 * - Useful for monitoring connection status and handling reconnection logic if needed.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Check WebSocket connection status\n                 * const status = cachingModule.isWebSocketConnection();\n                 * console.log(status); // Output: 1 (open), 0 (connecting), or -1 (closed)\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n                 * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n                 * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n                 *\n                 * @returns {number} The WebSocket connection status (`1`: open, `0`: connecting, `-1`: closed).\n                 */\n                isWebSocketConnection = (): number => {\n                    return this._checkWebSocketConnection();\n                };\n            },\n            /**\n             * **`ApiGet<T>` - A generic class for handling HTTP GET requests within the `hison.link` module.**\n             *\n             * The `ApiGet<T>` class is responsible for sending HTTP GET requests to a specified API resource.\n             * It allows defining a **custom response type** using the generic parameter `T`, providing strong typing for API responses.\n             * \n             * ### **Key Features**\n             * - **Executes HTTP GET requests** using `ApiLink`.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows defining the expected response type** via the generic parameter `T` (default: `InterfaceDataWrapper`).\n             *\n             * ### **How It Works**\n             * - When instantiated, `ApiGet<T>` stores the API resource path and an optional `CachingModule` instance.\n             * - The `call()` method triggers a GET request and returns a `Promise<{ data: T; response: Response } | null>`.\n             * - If caching is enabled, previously stored responses may be returned instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Default usage (response type: InterfaceDataWrapper)\n             * const apiGet = new hison.link.ApiGet(\"/users\");\n             * apiGet.call().then(response => {\n             *     console.log(response?.data); // Type: InterfaceDataWrapper\n             * });\n             *\n             * // Specifying a custom response type (User[])\n             * interface User {\n             *     id: number;\n             *     name: string;\n             * }\n             * const apiGetUsers = new hison.link.ApiGet<User[]>(\"/users\");\n             * apiGetUsers.call().then(response => {\n             *     console.log(response?.data); // Type: User[]\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiGet = new hison.link.ApiGet<User[]>(\"/users\", cachingModule);\n             * \n             * // Handling request events\n             * cachedApiGet.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"GET request completed!\", data);\n             * });\n             * ```\n             *\n             * ### **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-based request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ### **Return Value**\n             * - This class returns an instance of `ApiGet<T>`, which provides methods for executing GET requests and managing request events.\n             *\n             * ### **Typical Use Cases**\n             * - **Fetching data from a REST API** with strong type support.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             *\n             * @template T - The expected response data type (default: `InterfaceDataWrapper`).\n             */\n            ApiGet: class<T = InterfaceDataWrapper> implements InterfaceApiGet<T> {\n                /**\n                 * **Creates an instance of `ApiGet`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making GET requests to a specified resource path.\n                 *\n                 * ### **Parameters**\n                 * - `resourcePath` *(optional, string)* - The API resource path for the GET request.\n                 *   - **Default:** `''` (empty string)\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 2. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 3. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 4. **Stores the API resource path.**\n                 *    - Defines the endpoint for the GET request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiGet instance without caching\n                 * const apiGet = new hison.link.ApiGet(\"/users\");\n                 * \n                 * // Creating an ApiGet instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiGet = new hison.link.ApiGet(\"/users\", cachingModule);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_resourcePath`** *(string)* - Stores the API resource path.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} [resourcePath=''] - The API resource path.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 */\n                constructor(resourcePath: string = '', cachingModule: InterfaceCachingModule | null = null) {\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._resourcePath = resourcePath;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _resourcePath: string;\n                /**\n                 * **Executes an HTTP GET request to the specified resource path.**\n                 *\n                 * This method sends a GET request using `ApiLink`, optionally applying caching if a `CachingModule` is provided.\n                 * It **invokes a pre-request hook** (`hison.setBeforeGetRequest`) and **emits a request-start event**\n                 * (`\"requestStarted_GET\"`) before execution.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or query parameters.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Pre-Request Handling**\n                 * - **`hison.setBeforeGetRequest((resourcePath, options) => {})`**\n                 *   - A customizable hook executed **before sending the GET request**.\n                 *   - If it returns `false`, the request is **prevented from execution**.\n                 *   - **Use Case:** Validating request parameters or implementing conditional request logic.\n                 *\n                 * ### **Event Emission**\n                 * - **`\"requestStarted_GET\"` Event**\n                 *   - This event is emitted **before the GET request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(T)* - The API response data, **typed according to the generic parameter `T`**.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ### **Behavior**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If the data is not cached, it makes an HTTP GET request to `_resourcePath`.\n                 * - Before executing the request:\n                 *   - The **before-request hook (`beforeGetRequest`)** is checked.\n                 *   - The **event `\"requestStarted_GET\"`** is emitted.\n                 * - Once the request is completed, the response is returned and optionally stored in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Default usage (response type: InterfaceDataWrapper)\n                 * const apiGet = new hison.link.ApiGet(\"/users\");\n                 * apiGet.call().then(response => {\n                 *     console.log(response?.data); // Type: InterfaceDataWrapper\n                 * });\n                 * \n                 * // Specifying a custom response type (User[])\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 * }\n                 * const apiGetUsers = new hison.link.ApiGet<User[]>(\"/users\");\n                 * apiGetUsers.call().then(response => {\n                 *     console.log(response?.data); // Type: User[]\n                 * });\n                 *\n                 * // Handling request events\n                 * apiGetUsers.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"GET request completed!\", data);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @template T - The expected response data type.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: T; response: Response } | null>} A promise resolving to the API response.\n                 */\n                call = (options: Record<string, any> = {}): Promise<{ data: T; response: Response; } | null> => {\n                    return this._apiLink.get(this._resourcePath, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified resource path.**\n                 *\n                 * This method retrieves only the headers from the specified resource without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ### **Behavior**\n                 * - The method delegates the request execution to `ApiLink.head()`.\n                 * - The response body is **not** included in the result, only headers are returned.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiGet = new hison.link.ApiGet(\"/users\");\n                 * \n                 * // Sending a HEAD request\n                 * apiGet.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiGet.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(options)`** - Sends a GET request to retrieve full response data.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(this._resourcePath, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified resource path.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified resource \n                 * without performing an actual data operation.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n                 *\n                 * ### **Behavior**\n                 * - The method delegates the request execution to `ApiLink.options()`.\n                 * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiGet = new hison.link.ApiGet(\"/users\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiGet.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiGet.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(options)`** - Sends a GET request to retrieve full response data.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._resourcePath, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a GET request.\n                 *\n                 * ### **Parameters**\n                 * - `eventName` *(string)* - The name of the event to listen for.\n                 * - `eventFunc` *(function)* - The callback function to be executed when the event occurs.\n                 *\n                 * ### **Supported Events**\n                 * - `\"requestStarted_GET\"` - Triggered when a GET request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiGet = new hison.link.ApiGet(\"/users\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiGet.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"GET request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiGet.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"GET request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(options)`** - Sends a GET request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('GET', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPost<T>` - A class for handling HTTP POST requests within the `hison.link` module.**\n             *\n             * The `ApiPost<T>` class is responsible for sending HTTP POST requests to a specified service command.\n             * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n             * The response type can be customized using the generic parameter `T`, with a default type of `InterfaceDataWrapper`.\n             *\n             * ### **Key Features**\n             * - **Executes HTTP POST requests** using `ApiLink`.\n             * - **Encapsulates request data in `DataWrapper`**, ensuring structured payloads with a `cmd` field for service routing.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** to monitor request execution.\n             * - **Flexible response typing** via **`T`**, allowing the user to define the expected response data structure.\n             *\n             * ### **How It Works**\n             * - When instantiated, `ApiPost<T>` requires a `serviceCmd` that specifies the business logic endpoint.\n             * - The `call()` method sends a POST request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiPost (default response type: InterfaceDataWrapper)\n             * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a POST request\n             * apiPost.call(requestData).then(response => {\n             *     console.log(response.data); // Type: InterfaceDataWrapper\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPost = new hison.link.ApiPost(\"UserService.createUser\", cachingModule);\n             *\n             * // Specifying a custom response type\n             * interface CreateUserResponse {\n             *     userId: number;\n             *     username: string;\n             * }\n             * const apiPostTyped = new hison.link.ApiPost<CreateUserResponse>(\"UserService.createUser\");\n             *\n             * apiPostTyped.call(requestData).then(response => {\n             *     console.log(response.data.userId); // Type: number\n             *     console.log(response.data.username); // Type: string\n             * });\n             *\n             * // Handling request events\n             * cachedApiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"POST request completed!\", data);\n             * });\n             * ```\n             *\n             * ### **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ### **Return Value**\n             * - This class returns an instance of `ApiPost<T>`, which provides methods for executing POST requests and managing request events.\n             * - The response type **defaults to `InterfaceDataWrapper`** but can be customized by specifying a different type `T`.\n             *\n             * ### **Typical Use Cases**\n             * - **Sending data to a REST API** with structured payloads.\n             * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             *\n             * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\n             */\n            ApiPost: class<T = InterfaceDataWrapper> implements InterfaceApiPost<T> {\n                /**\n                 * **Creates an instance of `ApiPost`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making POST requests to a specified service command.\n                 *\n                 * ### **Parameters**\n                 * - `serviceCmd` *(string, required)* - The **service command** that determines the target business logic on the server.\n                 *   - **Example:** `\"UserService.createUser\"`\n                 *   - If no `serviceCmd` is provided, an error is thrown.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 2. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 3. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 4. **Stores the `serviceCmd`.**\n                 *    - Defines the service endpoint for the POST request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPost instance without caching\n                 * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n                 *\n                 * // Creating an ApiPost instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPost = new hison.link.ApiPost(\"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_serviceCmd`** *(string)* - Stores the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} serviceCmd - The service command defining the target API action.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `serviceCmd` is not provided.\n                 */\n                constructor(serviceCmd: string | null = null, cachingModule: InterfaceCachingModule | null = null) {\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                /**\n                 * **Executes an HTTP POST request to the specified service command.**\n                 *\n                 * This method sends a POST request using `ApiLink`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ### **Parameters**\n                 * - `requestData` *(T | InterfaceDataWrapper, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object matching `T`, it is automatically processed as JSON.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Pre-Request Handling**\n                 * - **`hison.setBeforePostRequst((requestData, options) => {})`**\n                 *   - A customizable hook executed **before sending the POST request**.\n                 *   - If it returns `false`, the request is **prevented from execution**.\n                 *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n                 *\n                 * ### **Event Emission**\n                 * - **`\"requestStarted_POST\"` Event**\n                 *   - This event is emitted **before the POST request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(T)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ### **Behavior**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If the data is not cached, it makes an HTTP POST request to `_serviceCmd`.\n                 * - Before executing the request:\n                 *   - The **before-request hook (`beforePostRequst`)** is checked.\n                 *   - The **event `\"requestStarted_POST\"`** is emitted.\n                 * - Once the request is completed, the response is returned and optionally stored in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Defining a custom response type\n                 * interface CreateUserResponse {\n                 *     userId: number;\n                 *     username: string;\n                 * }\n                 * \n                 * // Creating an instance of ApiPost with a custom response type\n                 * const apiPost = new hison.link.ApiPost<CreateUserResponse>(\"UserService.createUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Customizing the before-request hook to modify data before sending\n                 * customOption.link.beforePostRequst = (requestData, options) => {\n                 *     requestData.putString(\"timestamp\", Date.now().toString());\n                 *     return true;\n                 * };\n                 * \n                 * // Listening to the \"requestStarted_POST\" event\n                 * apiPost.onEventEmit(\"requestStarted_POST\", (requestData, options) => {\n                 *     console.log(\"POST request started with data:\", requestData);\n                 * });\n                 * \n                 * // Sending a POST request\n                 * apiPost.call(requestData).then(response => {\n                 *     console.log(response.data.userId); // Type: number\n                 *     console.log(response.data.username); // Type: string\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\n                 * @param {T | InterfaceDataWrapper} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: T; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: T; response: Response; } | null> => {\n                    return this._apiLink.post(requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the API controller path.**\n                 *\n                 * This method retrieves only the headers from the API without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n                 * - The response body is **not** included in the result; only headers are returned.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPost.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPost.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the API controller path.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n                 * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n                 *\n                 * ### **Behavior**\n                 * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n                 * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPost.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPost.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a POST request.\n                 *\n                 * ### **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ### **Supported Events**\n                 * - `\"requestStarted_POST\"` - Triggered when a POST request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"POST\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"POST request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPost.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"POST request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('POST', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPut<T>` - A class for handling HTTP PUT requests within the `hison.link` module.**\n             *\n             * The `ApiPut` class is responsible for sending HTTP PUT requests to a specified service command.\n             * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n             *\n             * ### **Key Features**\n             * - **Executes HTTP PUT requests** using `ApiLink`.\n             * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             * - **Supports generic response types (`T`)** to enable type-safe API responses.\n             *\n             * ### **How It Works**\n             * - When instantiated, `ApiPut<T>` requires a `serviceCmd` that specifies the business logic endpoint.\n             * - The `call()` method sends a PUT request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Defining a custom response type\n             * interface UpdateUserResponse {\n             *     success: boolean;\n             *     updatedUserId: number;\n             * }\n             *\n             * // Creating an instance of ApiPut with a custom response type\n             * const apiPut = new hison.link.ApiPut<UpdateUserResponse>(\"UserService.updateUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a PUT request\n             * apiPut.call(requestData).then(response => {\n             *     console.log(response.data.success); // Type: boolean\n             *     console.log(response.data.updatedUserId); // Type: number\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPut = new hison.link.ApiPut<UpdateUserResponse>(\"UserService.updateUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPut.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"PUT request completed!\", data);\n             * });\n             * ```\n             *\n             * ### **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ### **Return Value**\n             * - This class returns an instance of `ApiPut<T>`, providing methods for executing PUT requests and managing request events.\n             * - The `T` type parameter allows users to define the expected response structure.\n             *\n             * ### **Typical Use Cases**\n             * - **Sending data to a REST API** with structured payloads.\n             * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             *\n             * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\n             */\n            ApiPut: class<T = InterfaceDataWrapper> implements InterfaceApiPut<T> {\n                /**\n                 * **Creates an instance of `ApiPut`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making PUT requests to a specified service command.\n                 *\n                 * ### **Parameters**\n                 * - `serviceCmd` *(string, required)* - The **service command** that determines the target business logic on the server.\n                 *   - **Example:** `\"UserService.createUser\"`\n                 *   - If no `serviceCmd` is provided, an error is thrown.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 2. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 3. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 4. **Stores the `serviceCmd`.**\n                 *    - Defines the service endpoint for the PUT request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPut instance without caching\n                 * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n                 *\n                 * // Creating an ApiPut instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPut = new hison.link.ApiPut(\"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_serviceCmd`** *(string)* - Stores the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} serviceCmd - The service command defining the target API action.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `serviceCmd` is not provided.\n                 */\n                constructor(serviceCmd: string | null = null, cachingModule: InterfaceCachingModule | null = null) {\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                /**\n                 * **Executes an HTTP PUT request to the specified service command with a generic response type.**\n                 *\n                 * This method sends a PUT request using `ApiLink`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ### **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Pre-Request Handling**\n                 * - **`hison.setBeforePutRequest((requestData, options) => {})`**\n                 *   - A customizable hook executed **before sending the PUT request**.\n                 *   - If it returns `false`, the request is **prevented from execution**.\n                 *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n                 *\n                 * ### **Event Emission**\n                 * - **`\"requestStarted_PUT\"` Event**\n                 *   - This event is emitted **before the PUT request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(T)* - The API response data, strongly typed based on the generic `T`.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ### **Behavior**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If the data is not cached, it makes an HTTP PUT request to `_serviceCmd`.\n                 * - Before executing the request:\n                 *   - The **before-request hook (`beforePutRequest`)** is checked.\n                 *   - The **event `\"requestStarted_PUT\"`** is emitted.\n                 * - Once the request is completed, the response is returned and optionally stored in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Defining a custom response type\n                 * interface UpdateUserResponse {\n                 *     success: boolean;\n                 *     updatedUserId: number;\n                 * }\n                 *\n                 * // Creating an instance of ApiPut with a custom response type\n                 * const apiPut = new hison.link.ApiPut<UpdateUserResponse>(\"UserService.updateUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Customizing the before-request hook to modify data before sending\n                 * customOption.link.beforePutRequest = (requestData, options) => {\n                 *     requestData.putString(\"timestamp\", Date.now().toString());\n                 *     return true;\n                 * };\n                 * \n                 * // Listening to the \"requestStarted_PUT\" event\n                 * apiPut.onEventEmit(\"requestStarted_PUT\", (requestData, options) => {\n                 *     console.log(\"PUT request started with data:\", requestData);\n                 * });\n                 * \n                 * // Sending a PUT request with a typed response\n                 * apiPut.call(requestData).then(response => {\n                 *     console.log(response.data.success); // Type: boolean\n                 *     console.log(response.data.updatedUserId); // Type: number\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: T; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: T; response: Response; } | null> => {\n                    return this._apiLink.put(requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the API controller path.**\n                 *\n                 * This method retrieves only the headers from the API without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n                 * - The response body is **not** included in the result; only headers are returned.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPut.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPut.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the API controller path.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n                 * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PUT\", \"OPTIONS\"]`).\n                 *\n                 * ### **Behavior**\n                 * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n                 * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPut.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"PUT\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPut.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a PUT request.\n                 *\n                 * ### **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ### **Supported Events**\n                 * - `\"requestStarted_PUT\"` - Triggered when a PUT request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PUT\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPut.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"PUT request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPut.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"PUT request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('PUT', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPatch` - A class for handling HTTP PATCH requests within the `hison.link` module.**\n             *\n             * The `ApiPatch` class is responsible for sending HTTP PATCH requests to a specified service command.\n             * It supports **strongly typed responses** using generics (`T`), allowing precise response data handling.\n             *\n             * ### **Key Features**\n             * - **Executes HTTP PATCH requests** using `ApiLink`.\n             * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             * - **Utilizes generics (`T`)** to enable type-safe response handling.\n             *\n             * ### **How It Works**\n             * - When instantiated, `ApiPatch` requires a `serviceCmd` that specifies the business logic endpoint.\n             * - The `call<T>()` method sends a PATCH request and expects a response of type `T`.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Defining a custom response type\n             * interface UpdateUserResponse {\n             *     success: boolean;\n             *     updatedFields: string[];\n             * }\n             *\n             * // Creating an instance of ApiPatch with a custom response type\n             * const apiPatch = new hison.link.ApiPatch<UpdateUserResponse>(\"UserService.updateUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a PATCH request with a typed response\n             * apiPatch.call(requestData).then(response => {\n             *     console.log(response.data.success); // Type: boolean\n             *     console.log(response.data.updatedFields); // Type: string[]\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPatch = new hison.link.ApiPatch(\"UserService.updateUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPatch.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"PATCH request completed!\", data);\n             * });\n             * ```\n             *\n             * ### **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ### **Return Value**\n             * - This class returns an instance of `ApiPatch<T>`, providing methods for executing PATCH requests and managing request events.\n             *\n             * ### **Typical Use Cases**\n             * - **Applying partial updates** to a REST API.\n             * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             *\n             * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\n             */\n            ApiPatch: class<T = InterfaceDataWrapper> implements InterfaceApiPatch<T> {\n                /**\n                 * **Creates an instance of `ApiPatch`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making PATCH requests to a specified service command.\n                 *\n                 * ### **Parameters**\n                 * - `serviceCmd` *(string, required)* - The **service command** that determines the target business logic on the server.\n                 *   - **Example:** `\"UserService.createUser\"`\n                 *   - If no `serviceCmd` is provided, an error is thrown.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 2. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 3. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 4. **Stores the `serviceCmd`.**\n                 *    - Defines the service endpoint for the PATCH request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPatch instance without caching\n                 * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n                 *\n                 * // Creating an ApiPatch instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPatch = new hison.link.ApiPatch(\"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_serviceCmd`** *(string)* - Stores the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} serviceCmd - The service command defining the target API action.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `serviceCmd` is not provided.\n                 */\n                constructor(serviceCmd: string | null = null, cachingModule: InterfaceCachingModule | null = null) {\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                /**\n                 * **Executes an HTTP PATCH request to the specified service command.**\n                 *\n                 * This method sends a PATCH request using `ApiLink`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions. The response type is determined by\n                 * the **generic type `T`**, allowing for precise response handling.\n                 *\n                 * ### **Parameters**\n                 * - `requestData` *(T, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Pre-Request Handling**\n                 * - **`hison.setBeforePatchRequest((requestData, options) => {})`**\n                 *   - A customizable hook executed **before sending the PATCH request**.\n                 *   - If it returns `false`, the request is **prevented from execution**.\n                 *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n                 *\n                 * ### **Event Emission**\n                 * - **`\"requestStarted_PATCH\"` Event**\n                 *   - This event is emitted **before the PATCH request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(T)* - The API response data, strongly typed based on the generic type.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ### **Behavior**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If the data is not cached, it makes an HTTP PATCH request to `_serviceCmd`.\n                 * - Before executing the request:\n                 *   - The **before-request hook (`beforePatchRequest`)** is checked.\n                 *   - The **event `\"requestStarted_PATCH\"`** is emitted.\n                 * - Once the request is completed, the response is returned and optionally stored in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Define a response type\n                 * interface UpdateUserResponse {\n                 *     success: boolean;\n                 *     updatedFields: string[];\n                 * }\n                 *\n                 * // Creating an ApiPatch instance with a typed response\n                 * const apiPatch = new hison.link.ApiPatch<UpdateUserResponse>(\"UserService.updateUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Customizing the before-request hook to modify data before sending\n                 * customOption.link.beforePatchRequest = (requestData, options) => {\n                 *     requestData.putString(\"timestamp\", Date.now().toString());\n                 *     return true;\n                 * };\n                 * \n                 * // Listening to the \"requestStarted_PATCH\" event\n                 * apiPatch.onEventEmit(\"requestStarted_PATCH\", (requestData, options) => {\n                 *     console.log(\"PATCH request started with data:\", requestData);\n                 * });\n                 * \n                 * // Sending a PATCH request with a typed response\n                 * apiPatch.call(requestData).then(response => {\n                 *     console.log(response.data.success); // Type: boolean\n                 *     console.log(response.data.updatedFields); // Type: string[]\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\n                 * @param {T} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: T; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: T; response: Response; } | null> => {\n                    return this._apiLink.patch(requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the API controller path.**\n                 *\n                 * This method retrieves only the headers from the API without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n                 * - The response body is **not** included in the result; only headers are returned.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPatch.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPatch.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the API controller path.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n                 * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PATCH\", \"OPTIONS\"]`).\n                 *\n                 * ### **Behavior**\n                 * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n                 * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPatch.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"PATCH\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPatch.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a PATCH request.\n                 *\n                 * ### **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ### **Supported Events**\n                 * - `\"requestStarted_PATCH\"` - Triggered when a PATCH request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PATCH\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPatch.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"PATCH request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPatch.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"PATCH request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('PATCH', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiDelete<T>` - A class for handling HTTP DELETE requests within the `hison.link` module.**\n             *\n             * The `ApiDelete` class is responsible for sending HTTP DELETE requests to a specified service command.\n             * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n             *\n             * ### **Key Features**\n             * - **Executes HTTP DELETE requests** using `ApiLink`.\n             * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             * - **Supports generic response types (`T`)**, allowing for **strongly typed responses**.\n             *\n             * ### **How It Works**\n             * - When instantiated, `ApiDelete<T>` requires a `serviceCmd` that specifies the business logic endpoint.\n             * - The `call()` method sends a DELETE request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             * - The **generic type `T` defines the response data structure**, ensuring **type safety**.\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Define a response type\n             * interface DeleteUserResponse {\n             *     success: boolean;\n             *     deletedId: string;\n             * }\n             *\n             * // Creating an instance of ApiDelete with a typed response\n             * const apiDelete = new hison.link.ApiDelete<DeleteUserResponse>(\"UserService.deleteUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"userId\", \"12345\");\n             * \n             * // Sending a DELETE request\n             * apiDelete.call(requestData).then(response => {\n             *     console.log(response.data.success); // Type: boolean\n             *     console.log(response.data.deletedId); // Type: string\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiDelete = new hison.link.ApiDelete(\"UserService.deleteUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiDelete.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"DELETE request completed!\", data);\n             * });\n             * ```\n             *\n             * ### **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ### **Return Value**\n             * - This class returns an instance of `ApiDelete<T>`, providing methods for executing DELETE requests and managing request events.\n             *\n             * ### **Typical Use Cases**\n             * - **Deleting data from a REST API** in a structured and type-safe way.\n             * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             *\n             * @template T - The expected response data type (defaults to `InterfaceDataWrapper`).\n             */\n            ApiDelete: class<T = InterfaceDataWrapper> implements InterfaceApiDelete<T> {\n                /**\n                 * **Creates an instance of `ApiDelete`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making DELETE requests to a specified service command.\n                 *\n                 * ### **Parameters**\n                 * - `serviceCmd` *(string, required)* - The **service command** that determines the target business logic on the server.\n                 *   - **Example:** `\"UserService.createUser\"`\n                 *   - If no `serviceCmd` is provided, an error is thrown.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 2. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 3. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 4. **Stores the `serviceCmd`.**\n                 *    - Defines the service endpoint for the DELETE request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiDelete instance without caching\n                 * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n                 *\n                 * // Creating an ApiDelete instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiDelete = new hison.link.ApiDelete(\"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_serviceCmd`** *(string)* - Stores the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} serviceCmd - The service command defining the target API action.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `serviceCmd` is not provided.\n                 */\n                constructor(serviceCmd: string | null = null, cachingModule: InterfaceCachingModule | null = null) {\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                /**\n                 * **Executes an HTTP DELETE request to the specified service command.**\n                 *\n                 * This method sends a DELETE request using `ApiLink`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ### **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Pre-Request Handling**\n                 * - **`hison.setBeforeDeleteRequest((requestData, options) => {})`**\n                 *   - A customizable hook executed **before sending the DELETE request**.\n                 *   - If it returns `false`, the request is **prevented from execution**.\n                 *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n                 *\n                 * ### **Event Emission**\n                 * - **`\"requestStarted_DELETE\"` Event**\n                 *   - This event is emitted **before the DELETE request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(`T`)* - The API response data, **strongly typed based on `T`**.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ### **Behavior**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If the data is not cached, it makes an HTTP DELETE request to `_serviceCmd`.\n                 * - Before executing the request:\n                 *   - The **before-request hook (`beforeDeleteRequest`)** is checked.\n                 *   - The **event `\"requestStarted_DELETE\"`** is emitted.\n                 * - Once the request is completed, the response is returned and optionally stored in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * interface DeleteUserResponse {\n                 *     success: boolean;\n                 *     deletedId: string;\n                 * }\n                 *\n                 * const apiDelete = new hison.link.ApiDelete<DeleteUserResponse>(\"UserService.deleteUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"userId\", \"12345\");\n                 * \n                 * // Customizing the before-request hook to modify data before sending\n                 * customOption.link.beforeDeleteRequest = (requestData, options) => {\n                 *     requestData.putString(\"timestamp\", Date.now().toString());\n                 *     return true;\n                 * };\n                 * \n                 * // Listening to the \"requestStarted_DELETE\" event\n                 * apiDelete.onEventEmit(\"requestStarted_DELETE\", (requestData, options) => {\n                 *     console.log(\"DELETE request started with data:\", requestData);\n                 * });\n                 * \n                 * // Sending a DELETE request\n                 * apiDelete.call(requestData).then(response => {\n                 *     console.log(response.data.success); // Type: boolean\n                 *     console.log(response.data.deletedId); // Type: string\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: T; response: Response } | null>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: T; response: Response; } | null> => {\n                    return this._apiLink.delete(requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the API controller path.**\n                 *\n                 * This method retrieves only the headers from the API without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n                 * - The response body is **not** included in the result; only headers are returned.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiDelete.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiDelete.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the API controller path.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n                 * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"DELETE\", \"OPTIONS\"]`).\n                 *\n                 * ### **Behavior**\n                 * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n                 * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiDelete.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"DELETE\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiDelete.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a DELETE request.\n                 *\n                 * ### **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ### **Supported Events**\n                 * - `\"requestStarted_DELETE\"` - Triggered when a DELETE request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"DELETE\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiDelete.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"DELETE request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiDelete.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"DELETE request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('DELETE', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiGetUrl` - A class for handling HTTP GET requests to a specified URL.**\n             *\n             * The `ApiGetUrl` class is responsible for sending HTTP GET requests to a provided URL.\n             * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n             *\n             * ### **Key Features**\n             * - **Executes HTTP GET requests** using `ApiLink`.\n             * - **Accepts a direct URL** instead of using a predefined API resource path.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             * - **Supports generic response types (`T`)** with a default value of `any` to accommodate diverse API responses.\n             *\n             * ### **How It Works**\n             * - When instantiated, `ApiGetUrl` requires a valid URL.\n             * - The `call()` method triggers a GET request to the specified URL.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             * - The response data type can be explicitly defined using `T` (default: `any`).\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiGetUrl without caching\n             * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n             * \n             * // Sending a GET request\n             * apiGetUrl.call().then(response => {\n             *     console.log(response.data); // Response data (any type by default)\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\", cachingModule);\n             * \n             * // Handling request events\n             * cachedApiGetUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"GET request completed!\", data);\n             * });\n             * \n             * // Defining a specific response type using generics\n             * interface UserResponse {\n             *     id: number;\n             *     name: string;\n             *     email: string;\n             * }\n             * const typedApiGetUrl = new hison.link.ApiGetUrl<UserResponse>(\"https://api.example.com/user/1\");\n             * \n             * typedApiGetUrl.call().then(response => {\n             *     console.log(response.data.name); // `name` is inferred as a string\n             * });\n             * ```\n             *\n             * ### **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ### **Return Value**\n             * - This class returns an instance of `ApiGetUrl`, which provides methods for executing GET requests to a specific URL.\n             * - The response type is determined by the generic parameter `T` (default: `any`).\n             *\n             * ### **Typical Use Cases**\n             * - **Fetching data from an external API** by specifying a full URL.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             * - **Explicitly defining the response structure** using TypeScript generics.\n             */\n            ApiGetUrl: class<T = any> implements InterfaceApiGetUrl<T> {\n                /**\n                 * **Creates an instance of `ApiGetUrl`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making GET requests to a specified URL.\n                 *\n                 * ### **Parameters**\n                 * - `url` *(string, required)* - The full URL to which the GET request will be sent.\n                 *   - If no `url` is provided, an error is thrown (`\"Please enter the request URL.\"`).\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Validates the `url`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the request URL.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `url`.**\n                 *    - Defines the endpoint for the GET request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiGetUrl instance without caching\n                 * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n                 * \n                 * // Creating an ApiGetUrl instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\", cachingModule);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_url`** *(string)* - Stores the URL for the request.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} url - The full URL for the GET request.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `url` is not provided.\n                 */\n                constructor(url: string, cachingModule: InterfaceCachingModule | null = null) {\n                    if (!url) throw new Error('Please enter the request URL.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._url = url;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _url: string;\n                /**\n                 * **Executes an HTTP GET request to the specified URL.**\n                 *\n                 * This method sends a GET request using `ApiLink.getURL()`, optionally applying caching if a `CachingModule` is provided.\n                 * It also **emits a request-start event** (`\"requestStarted_GET\"`) before execution.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, `Record<string, any>`)* - Additional request options such as headers or query parameters.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Pre-Request Handling**\n                 * - **Event Emission: `\"requestStarted_GET\"`**\n                 *   - This event is emitted **before the GET request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ### **Caching Mechanism**\n                 * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n                 * - If cached data is found, it is returned **without making a new network request**.\n                 * - If no cached data exists, a new GET request is executed, and the response may be stored in the cache.\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - **`data: T`** - The API response data, where `T` is a generic type (default: `any`).\n                 *   - **`response: Response`** - The original HTTP response object.\n                 *   - Returns `null` if the request fails or is prevented by an event hook.\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.getURL(this._url, options)`, which:\n                 *   - Emits `\"requestStarted_GET\"` before making the request.\n                 *   - Checks if the requested data is cached and returns it if available.\n                 *   - If not cached, makes an HTTP GET request to `_url`.\n                 *   - Returns the response and optionally stores it in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n                 * \n                 * // Listening to the \"requestStarted_GET\" event\n                 * apiGetUrl.onEventEmit(\"requestStarted_GET\", (url, options) => {\n                 *     console.log(`GET request started for: ${url}`);\n                 * });\n                 * \n                 * // Sending a GET request with inferred response type (`any` by default)\n                 * apiGetUrl.call().then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * \n                 * // Defining a specific response type\n                 * interface User {\n                 *     id: number;\n                 *     name: string;\n                 *     email: string;\n                 * }\n                 * const typedApiGetUrl = new hison.link.ApiGetUrl<User>(\"https://api.example.com/user/1\");\n                 * \n                 * typedApiGetUrl.call().then(response => {\n                 *     console.log(response.data.name); // `name` is inferred as a string\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: T; response: Response } | null>} A promise resolving to the API response.\n                 */\n                call = (options: Record<string, any> = {}): Promise<{ data: T; response: Response; } | null> => {\n                    return this._apiLink.getURL(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified URL.**\n                 *\n                 * This method retrieves only the headers from the specified URL without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.head(this._url, options)`, which:\n                 *   - Sends an HTTP HEAD request to `_url`.\n                 *   - Extracts and returns the response headers.\n                 *   - Does **not** include the response body.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n                 * \n                 * // Sending a HEAD request\n                 * apiGetUrl.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiGetUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(options)`** - Sends a GET request to retrieve full response data.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified URL.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified URL \n                 * without performing an actual data operation. It is useful for checking which \n                 * HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.options(this._url, options)`, which:\n                 *   - Sends an HTTP OPTIONS request to `_url`.\n                 *   - Extracts the `Allow` header from the response.\n                 *   - Parses and returns the list of permitted HTTP methods.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiGetUrl.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiGetUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(options)`** - Sends a GET request to retrieve full response data.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._url, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a GET request to a specified URL.\n                 *\n                 * ### **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ### **Supported Events**\n                 * - `\"requestStarted_GET\"` - Triggered when a GET request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"GET\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiGetUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"GET request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiGetUrl.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"GET request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(options)`** - Sends a GET request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('GET', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPostUrl` - A class for handling HTTP POST requests to a specified URL.**\n             *\n             * The `ApiPostUrl` class is responsible for sending HTTP POST requests to a provided URL.\n             * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n             *\n             * ### **Key Features**\n             * - **Executes HTTP POST requests** using `ApiLink`.\n             * - **Accepts a direct URL** instead of using a predefined service command.\n             * - **Supports an optional `serviceCmd` parameter**, allowing structured routing on the server.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             * - **Uses a generic type `T` (default: `any`)** to specify the expected response data format.\n             *\n             * ### **How It Works**\n             * - When instantiated, `ApiPostUrl` requires a valid URL and an optional `serviceCmd`.\n             * - The `call()` method sends a POST request with the provided request data.\n             * - If caching is enabled, previously stored responses may be returned instead of making a new request.\n             * - Event listeners can be attached to track request execution and completion.\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiPostUrl for a direct POST request\n             * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a POST request\n             * apiPostUrl.call(requestData).then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with a service command for structured routing\n             * const apiPostUrlWithCmd = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n             * \n             * // Sending a POST request with service command\n             * apiPostUrlWithCmd.call(requestData).then(response => {\n             *     console.log(response.data);\n             * });\n             * \n             * // Creating an instance with caching enabled\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPostUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"POST request completed!\", data);\n             * });\n             * ```\n             *\n             * ### **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ### **Return Value**\n             * - This class returns an instance of `ApiPostUrl`, providing methods for executing POST requests to a specific URL.\n             * - The response data type is determined by `T`, with a default of `any`.\n             *\n             * ### **Typical Use Cases**\n             * - **Sending data to an external API** using a full URL.\n             * - **Passing a `serviceCmd` for structured request routing**.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             *\n             * ### **Type-Safe Example**\n             * ```typescript\n             * interface UserResponse {\n             *     id: number;\n             *     name: string;\n             *     email: string;\n             * }\n             * \n             * const typedApiPostUrl = new hison.link.ApiPostUrl<UserResponse>(\"https://api.example.com/users\");\n             * \n             * typedApiPostUrl.call(requestData).then(response => {\n             *     console.log(response.data.name); // `name` is inferred as a string\n             * });\n             * ```\n             */\n            ApiPostUrl: class<T = any> implements InterfaceApiPostUrl<T> {\n                /**\n                 * **Creates an instance of `ApiPostUrl`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making POST requests to a specified URL.\n                 *\n                 * ### **Parameters**\n                 * - `url` *(string, required)* - The full URL to which the POST request will be sent.\n                 *   - If no `url` is provided, an error is thrown (`\"Please enter the request URL.\"`).\n                 * - `serviceCmd` *(optional, string)* - A **service command** that can be used to specify \n                 *   business logic on the server.\n                 *   - **Default:** `''` (empty string)\n                 *   - If provided, this is included in the request payload for structured routing.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Validates the `url`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the request URL.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `url` and `serviceCmd`.**\n                 *    - Defines the endpoint and optional service command for the POST request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPostUrl instance without caching\n                 * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 *\n                 * // Creating an ApiPostUrl instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_url`** *(string)* - Stores the URL for the request.\n                 * - **`_serviceCmd`** *(string)* - Specifies the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} url - The full URL for the POST request.\n                 * @param {string} [serviceCmd=''] - An optional service command for structured request routing.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `url` is not provided.\n                 */\n                constructor(url: string, serviceCmd: string = '', cachingModule: InterfaceCachingModule | null = null) {\n                    if (!url) throw new Error('Please enter the request URL.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._url = url;\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                private _url: string;\n                /**\n                 * **Executes an HTTP POST request to the specified URL with an optional service command.**\n                 *\n                 * This method sends a POST request using `ApiLink.postURL()`, encapsulating request data and invoking\n                 * necessary pre-request hooks and event emissions. The response type is determined by the generic `T` (default: `any`).\n                 *\n                 * ### **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Pre-Request Handling**\n                 * - **`\"requestStarted_POST\"` Event**\n                 *   - This event is emitted **before the POST request is executed**.\n                 *   - It includes the `serviceCmd`, request options, and request data.\n                 *   - Useful for logging, request tracking, or debugging.\n                 *\n                 * ### **Caching Mechanism**\n                 * - If a `CachingModule` is provided, it checks if the requested data is available in the cache.\n                 * - If cached data is found, it is returned **without making a new network request**.\n                 * - If no cached data exists, a new POST request is executed, and the response may be stored in the cache.\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(T)* - The API response data (typed based on the provided generic `T`, default: `any`).\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 * - If an error occurs, it returns `null`.\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.postURL(this._url, requestData, this._serviceCmd, options)`, which:\n                 *   - Emits `\"requestStarted_POST\"` before making the request.\n                 *   - Checks if the requested data is cached and returns it if available.\n                 *   - If not cached, makes an HTTP POST request to `_url` with the provided `serviceCmd`.\n                 *   - Returns the response and optionally stores it in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an instance of ApiPostUrl with a service command\n                 * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Listening to the \"requestStarted_POST\" event\n                 * apiPostUrl.onEventEmit(\"requestStarted_POST\", (serviceCmd, options, requestData) => {\n                 *     console.log(`POST request started for service: ${serviceCmd}`, requestData);\n                 * });\n                 * \n                 * // Sending a POST request\n                 * apiPostUrl.call(requestData).then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ### **Type-Safe Example**\n                 * ```typescript\n                 * interface UserResponse {\n                 *     id: number;\n                 *     name: string;\n                 *     email: string;\n                 * }\n                 * \n                 * const apiPostUrl = new hison.link.ApiPostUrl<UserResponse>(\"https://api.example.com/users\");\n                 * \n                 * apiPostUrl.call(requestData).then(response => {\n                 *     if (response) {\n                 *         console.log(response.data.name); // `name` is inferred as a string\n                 *     }\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: T; response: Response; } | null>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: T; response: Response; } | null> => {\n                    return this._apiLink.postURL(this._url, requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified URL.**\n                 *\n                 * This method retrieves only the headers from the specified URL without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.headURL(this._url, options)`, which:\n                 *   - Sends an HTTP HEAD request to `_url`.\n                 *   - Extracts and returns the response headers.\n                 *   - Does **not** include the response body.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPostUrl.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPostUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.headURL(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified URL.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified URL \n                 * without performing an actual data operation. It is useful for checking which \n                 * HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.options(this._url, options)`, which:\n                 *   - Sends an HTTP OPTIONS request to `_url`.\n                 *   - Extracts the `Allow` header from the response.\n                 *   - Parses and returns the list of permitted HTTP methods.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPostUrl.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPostUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._url, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a POST request to a specified URL.\n                 *\n                 * ### **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ### **Supported Events**\n                 * - `\"requestStarted_POST\"` - Triggered when a POST request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"POST\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPostUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"POST request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPostUrl.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"POST request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('POST', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPutUrl` - A class for handling HTTP PUT requests to a specified URL.**\n             *\n             * The `ApiPutUrl` class is responsible for sending HTTP PUT requests to a provided URL.\n             * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n             * This class supports a generic type `T`, allowing users to define the expected response type.\n             *\n             * ### **Key Features**\n             * - **Executes HTTP PUT requests** using `ApiLink.putURL()`.\n             * - **Accepts a direct URL** instead of using a predefined service command.\n             * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             * - **Provides type safety for response data** using a generic `T` (default: `any`).\n             *\n             * ### **How It Works**\n             * - When instantiated, `ApiPutUrl` requires a valid URL and an optional `serviceCmd`.\n             * - The `call()` method sends a PUT request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiPutUrl\n             * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.updateUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a PUT request\n             * apiPutUrl.call(requestData).then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.updateUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPutUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"PUT request completed!\", data);\n             * });\n             * ```\n             *\n             * ### **Type-Safe Example**\n             * ```typescript\n             * interface UpdateUserResponse {\n             *     success: boolean;\n             *     message: string;\n             * }\n             *\n             * const apiPutUrl = new hison.link.ApiPutUrl<UpdateUserResponse>(\"https://api.example.com/users\", \"UserService.updateUser\");\n             * \n             * apiPutUrl.call(requestData).then(response => {\n             *     if (response) {\n             *         console.log(response.data.message); // `message` is inferred as a string\n             *     }\n             * });\n             * ```\n             *\n             * ### **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ### **Return Value**\n             * - A `Promise` resolving to an object containing:\n             *   - `data` *(T)* - The API response data (typed based on the provided generic `T`, default: `any`).\n             *   - `response` *(Response)* - The original HTTP response object.\n             * - If an error occurs, it returns `null`.\n             *\n             * ### **Typical Use Cases**\n             * - **Sending data to an external API** using a full URL.\n             * - **Passing a `serviceCmd` for structured request routing**.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiPutUrl: class<T = any> implements InterfaceApiPutUrl {\n                /**\n                 * **Creates an instance of `ApiPutUrl`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making PUT requests to a specified URL.\n                 *\n                 * ### **Parameters**\n                 * - `url` *(string, required)* - The full URL to which the PUT request will be sent.\n                 *   - If no `url` is provided, an error is thrown (`\"Please enter the request URL.\"`).\n                 * - `serviceCmd` *(optional, string)* - A **service command** that can be used to specify \n                 *   business logic on the server.\n                 *   - **Default:** `''` (empty string)\n                 *   - If provided, this is included in the request payload for structured routing.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Validates the `url`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the request URL.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `url` and `serviceCmd`.**\n                 *    - Defines the endpoint and optional service command for the PUT request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPutUrl instance without caching\n                 * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 *\n                 * // Creating an ApiPutUrl instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_url`** *(string)* - Stores the URL for the request.\n                 * - **`_serviceCmd`** *(string)* - Specifies the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} url - The full URL for the PUT request.\n                 * @param {string} [serviceCmd=''] - An optional service command for structured request routing.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `url` is not provided.\n                 */\n                constructor(url: string, serviceCmd: string = '', cachingModule: InterfaceCachingModule | null = null) {\n                    if (!url) throw new Error('Please enter the request URL.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._url = url;\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                private _url: string;\n                /**\n                 * **Executes an HTTP PUT request to the specified URL with an optional service command.**\n                 *\n                 * This method sends a PUT request using `ApiLink.putURL()`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ### **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers, timeout settings, etc.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Pre-Request Handling**\n                 * - **`\"requestStarted_PUT\"` Event**\n                 *   - This event is emitted **before the PUT request is executed**.\n                 *   - Includes the `serviceCmd`, request options, and request data.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ### **Caching Mechanism**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If cached data is found, it is returned **without making a new network request**.\n                 * - If no cached data exists, a new PUT request is executed, and the response may be stored in the cache.\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(T)* - The API response data (typed based on the provided generic `T`, default: `any`).\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 * - If an error occurs, it returns `null`.\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.putURL(this._url, requestData, this._serviceCmd, options)`, which:\n                 *   - Emits `\"requestStarted_PUT\"` before making the request.\n                 *   - Checks if the requested data is cached and returns it if available.\n                 *   - If not cached, makes an HTTP PUT request to `_url` with the provided `serviceCmd`.\n                 *   - Returns the response and optionally stores it in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.updateUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Listening to the \"requestStarted_PUT\" event\n                 * apiPutUrl.onEventEmit(\"requestStarted_PUT\", (serviceCmd, options, requestData) => {\n                 *     console.log(`PUT request started for service: ${serviceCmd}`, requestData);\n                 * });\n                 * \n                 * // Sending a PUT request\n                 * apiPutUrl.call(requestData).then(response => {\n                 *     if (response) {\n                 *         console.log(response.data); // Response data\n                 *     }\n                 * });\n                 * ```\n                 *\n                 * ### **Type-Safe Example**\n                 * ```typescript\n                 * interface UpdateUserResponse {\n                 *     success: boolean;\n                 *     message: string;\n                 * }\n                 *\n                 * const apiPutUrl = new hison.link.ApiPutUrl<UpdateUserResponse>(\"https://api.example.com/users\", \"UserService.updateUser\");\n                 * \n                 * apiPutUrl.call(requestData).then(response => {\n                 *     if (response) {\n                 *         console.log(response.data.message); // `message` is inferred as a string\n                 *     }\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: T; response: Response } | null>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: T; response: Response; } | null> => {\n                    return this._apiLink.putURL(this._url, requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified URL.**\n                 *\n                 * This method retrieves only the headers from the specified URL without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.headURL(this._url, options)`, which:\n                 *   - Sends an HTTP HEAD request to `_url`.\n                 *   - Extracts and returns the response headers.\n                 *   - Does **not** include the response body.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPutUrl.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPutUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.headURL(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified URL.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified URL \n                 * without performing an actual data operation. It is useful for checking which \n                 * HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PUT\", \"OPTIONS\"]`).\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.options(this._url, options)`, which:\n                 *   - Sends an HTTP OPTIONS request to `_url`.\n                 *   - Extracts the `Allow` header from the response.\n                 *   - Parses and returns the list of permitted HTTP methods.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPutUrl.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"PUT\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPutUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._url, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a PUT request to a specified URL.\n                 *\n                 * ### **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ### **Supported Events**\n                 * - `\"requestStarted_PUT\"` - Triggered when a PUT request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PUT\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPutUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"PUT request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPutUrl.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"PUT request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('PUT', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPatchUrl` - A class for handling HTTP PATCH requests to a specified URL.**\n             *\n             * The `ApiPatchUrl` class is responsible for sending HTTP PATCH requests to a provided URL.\n             * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n             *\n             * ### **Key Features**\n             * - **Executes HTTP PATCH requests** using `ApiLink`.\n             * - **Accepts a direct URL** instead of using a predefined service command.\n             * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             *\n             * ### **How It Works**\n             * - When instantiated, `ApiPatchUrl` requires a valid URL and an optional `serviceCmd`.\n             * - The `call()` method sends a PATCH request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ### **Return Value**\n             * - A `Promise` resolving to an object containing:\n             *   - `data` *(T)* - The API response data (typed based on the provided generic `T`, default: `any`).\n             *   - `response` *(Response)* - The original HTTP response object.\n             * - If an error occurs, it returns `null`.\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiPatchUrl\n             * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.updateUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a PATCH request\n             * apiPatchUrl.call(requestData).then(response => {\n             *     if (response) {\n             *         console.log(response.data); // Response data\n             *     }\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.updateUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPatchUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"PATCH request completed!\", data);\n             * });\n             * ```\n             *\n             * ### **Type-Safe Example**\n             * ```typescript\n             * interface UpdateUserResponse {\n             *     success: boolean;\n             *     message: string;\n             * }\n             *\n             * const apiPatchUrl = new hison.link.ApiPatchUrl<UpdateUserResponse>(\"https://api.example.com/users\", \"UserService.updateUser\");\n             * \n             * apiPatchUrl.call(requestData).then(response => {\n             *     if (response) {\n             *         console.log(response.data.message); // `message` is inferred as a string\n             *     }\n             * });\n             * ```\n             *\n             * ### **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ### **Typical Use Cases**\n             * - **Sending data to an external API** using a full URL.\n             * - **Passing a `serviceCmd` for structured request routing**.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiPatchUrl: class<T = any> implements InterfaceApiPatchUrl<T> {\n                /**\n                 * **Creates an instance of `ApiPatchUrl`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making PATCH requests to a specified URL.\n                 *\n                 * ### **Parameters**\n                 * - `url` *(string, required)* - The full URL to which the PATCH request will be sent.\n                 *   - If no `url` is provided, an error is thrown (`\"Please enter the request URL.\"`).\n                 * - `serviceCmd` *(optional, string)* - A **service command** that can be used to specify \n                 *   business logic on the server.\n                 *   - **Default:** `''` (empty string)\n                 *   - If provided, this is included in the request payload for structured routing.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Validates the `url`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the request URL.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `url` and `serviceCmd`.**\n                 *    - Defines the endpoint and optional service command for the PATCH request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPatchUrl instance without caching\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 *\n                 * // Creating an ApiPatchUrl instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_url`** *(string)* - Stores the URL for the request.\n                 * - **`_serviceCmd`** *(string)* - Specifies the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} url - The full URL for the PATCH request.\n                 * @param {string} [serviceCmd=''] - An optional service command for structured request routing.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `url` is not provided.\n                 */\n                constructor(url: string, serviceCmd: string = '', cachingModule: InterfaceCachingModule | null = null) {\n                    if (!url) throw new Error('Please enter the request URL.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._url = url;\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                private _url: string;\n                /**\n                 * **Executes an HTTP PATCH request to the specified URL with an optional service command.**\n                 *\n                 * This method sends a PATCH request using `ApiLink.patchURL()`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ### **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Pre-Request Handling**\n                 * - **`\"requestStarted_PATCH\"` Event**\n                 *   - This event is emitted **before the PATCH request is executed**.\n                 *   - It includes the `serviceCmd`, request options, and request data.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ### **Caching Mechanism**\n                 * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n                 * - If cached data is found, it is returned **without making a new network request**.\n                 * - If no cached data exists, a new PATCH request is executed, and the response may be stored in the cache.\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(T)* - The API response data, typed based on the provided generic `T` (default: `any`).\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 * - If an error occurs, it returns `null`.\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.patchURL(this._url, requestData, this._serviceCmd, options)`, which:\n                 *   - Emits `\"requestStarted_PATCH\"` before making the request.\n                 *   - Checks if the requested data is cached and returns it if available.\n                 *   - If not cached, makes an HTTP PATCH request to `_url` with the provided `serviceCmd`.\n                 *   - Returns the response and optionally stores it in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.updateUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Listening to the \"requestStarted_PATCH\" event\n                 * apiPatchUrl.onEventEmit(\"requestStarted_PATCH\", (serviceCmd, options, requestData) => {\n                 *     console.log(`PATCH request started for service: ${serviceCmd}`, requestData);\n                 * });\n                 * \n                 * // Sending a PATCH request\n                 * apiPatchUrl.call(requestData).then(response => {\n                 *     if (response) {\n                 *         console.log(response.data); // Response data\n                 *     }\n                 * });\n                 * ```\n                 *\n                 * ### **Type-Safe Example**\n                 * ```typescript\n                 * interface UpdateUserResponse {\n                 *     success: boolean;\n                 *     message: string;\n                 * }\n                 *\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl<UpdateUserResponse>(\"https://api.example.com/users\", \"UserService.updateUser\");\n                 * \n                 * apiPatchUrl.call(requestData).then(response => {\n                 *     if (response) {\n                 *         console.log(response.data.message); // `message` is inferred as a string\n                 *     }\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: T; response: Response; } | null>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: T; response: Response; } | null> => {\n                    return this._apiLink.patchURL(this._url, requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified URL.**\n                 *\n                 * This method retrieves only the headers from the specified URL without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.headURL(this._url, options)`, which:\n                 *   - Sends an HTTP HEAD request to `_url`.\n                 *   - Extracts and returns the response headers.\n                 *   - Does **not** include the response body.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPatchUrl.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPatchUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.headURL(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified URL.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified URL \n                 * without performing an actual data operation. It is useful for checking which \n                 * HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PATCH\", \"OPTIONS\"]`).\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.options(this._url, options)`, which:\n                 *   - Sends an HTTP OPTIONS request to `_url`.\n                 *   - Extracts the `Allow` header from the response.\n                 *   - Parses and returns the list of permitted HTTP methods.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPatchUrl.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"PATCH\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPatchUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._url, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a PATCH request to a specified URL.\n                 *\n                 * ### **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ### **Supported Events**\n                 * - `\"requestStarted_PATCH\"` - Triggered when a PATCH request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PATCH\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPatchUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"PATCH request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPatchUrl.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"PATCH request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('PATCH', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiDeleteUrl` - A class for handling HTTP DELETE requests to a specified URL.**\n             *\n             * The `ApiDeleteUrl` class is responsible for sending HTTP DELETE requests to a provided URL.\n             * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n             *\n             * ### **Key Features**\n             * - **Executes HTTP DELETE requests** using `ApiLink`.\n             * - **Accepts a direct URL** instead of using a predefined service command.\n             * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             * - **Supports generic response types** for type-safe API responses.\n             *\n             * ### **How It Works**\n             * - When instantiated, `ApiDeleteUrl` requires a valid URL and an optional `serviceCmd`.\n             * - The `call()` method sends a DELETE request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ### **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiDeleteUrl\n             * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.deleteUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a DELETE request\n             * apiDeleteUrl.call(requestData).then(response => {\n             *     if (response) {\n             *         console.log(response.data); // Response data\n             *     }\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.deleteUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiDeleteUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"DELETE request completed!\", data);\n             * });\n             * ```\n             *\n             * ### **Type-Safe Example**\n             * ```typescript\n             * interface DeleteResponse {\n             *     success: boolean;\n             *     message: string;\n             * }\n             *\n             * const apiDeleteUrl = new hison.link.ApiDeleteUrl<DeleteResponse>(\"https://api.example.com/users\", \"UserService.deleteUser\");\n             * \n             * apiDeleteUrl.call(requestData).then(response => {\n             *     if (response) {\n             *         console.log(response.data.message); // `message` is inferred as a string\n             *     }\n             * });\n             * ```\n             *\n             * ### **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ### **Return Value**\n             * - **A `Promise` resolving to an object with the following properties:**\n             *   - `data` *(T)* - The API response data, where `T` is the specified generic type (default: `any`).\n             *   - `response` *(Response)* - The original HTTP response object.\n             * - If an error occurs, it returns `null`.\n             *\n             * ### **Typical Use Cases**\n             * - **Sending data to an external API** using a full URL.\n             * - **Passing a `serviceCmd` for structured request routing**.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiDeleteUrl: class<T = any> implements InterfaceApiDeleteUrl<T> {\n                /**\n                 * **Creates an instance of `ApiDeleteUrl`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making DELETE requests to a specified URL.\n                 *\n                 * ### **Parameters**\n                 * - `url` *(string, required)* - The full URL to which the DELETE request will be sent.\n                 *   - If no `url` is provided, an error is thrown (`\"Please enter the request URL.\"`).\n                 * - `serviceCmd` *(optional, string)* - A **service command** that can be used to specify \n                 *   business logic on the server.\n                 *   - **Default:** `''` (empty string)\n                 *   - If provided, this is included in the request payload for structured routing.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ### **Initialization Process**\n                 * 1. **Validates the `url`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the request URL.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `url` and `serviceCmd`.**\n                 *    - Defines the endpoint and optional service command for the DELETE request.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiDeleteUrl instance without caching\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 *\n                 * // Creating an ApiDeleteUrl instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ### **Related Properties**\n                 * - **`_url`** *(string)* - Stores the URL for the request.\n                 * - **`_serviceCmd`** *(string)* - Specifies the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} url - The full URL for the DELETE request.\n                 * @param {string} [serviceCmd=''] - An optional service command for structured request routing.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `url` is not provided.\n                 */\n                constructor(url: string, serviceCmd: string = '', cachingModule: InterfaceCachingModule | null = null) {\n                    if (!url) throw new Error('Please enter the request URL.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._url = url;\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                private _url: string;\n                /**\n                 * **Executes an HTTP DELETE request to the specified URL with an optional service command.**\n                 *\n                 * This method sends a DELETE request using `ApiLink.deleteURL()`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ### **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, `Record<string, any>`)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Pre-Request Handling**\n                 * - **`\"requestStarted_DELETE\"` Event**\n                 *   - This event is emitted **before the DELETE request is executed**.\n                 *   - It includes the `serviceCmd`, request options, and request data.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ### **Caching Mechanism**\n                 * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n                 * - If cached data is found, it is returned **without making a new network request**.\n                 * - If no cached data exists, a new DELETE request is executed, and the response may be stored in the cache.\n                 *\n                 * ### **Return Value**\n                 * - **A `Promise` resolving to an object with the following properties:**\n                 *   - `data` *(T)* - The API response data, where `T` is the specified generic type (default: `any`).\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 * - If an error occurs, it returns `null`.\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.deleteURL(this._url, requestData, this._serviceCmd, options)`, which:\n                 *   - Emits `\"requestStarted_DELETE\"` before making the request.\n                 *   - Checks if the requested data is cached and returns it if available.\n                 *   - If not cached, makes an HTTP DELETE request to `_url` with the provided `serviceCmd`.\n                 *   - Returns the response and optionally stores it in the cache.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.deleteUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Listening to the \"requestStarted_DELETE\" event\n                 * apiDeleteUrl.onEventEmit(\"requestStarted_DELETE\", (serviceCmd, options, requestData) => {\n                 *     console.log(`DELETE request started for service: ${serviceCmd}`, requestData);\n                 * });\n                 * \n                 * // Sending a DELETE request\n                 * apiDeleteUrl.call(requestData).then(response => {\n                 *     if (response) {\n                 *         console.log(response.data); // Response data\n                 *     }\n                 * });\n                 * ```\n                 *\n                 * ### **Type-Safe Example**\n                 * ```typescript\n                 * interface DeleteResponse {\n                 *     success: boolean;\n                 *     message: string;\n                 * }\n                 *\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl<DeleteResponse>(\"https://api.example.com/users\", \"UserService.deleteUser\");\n                 * \n                 * apiDeleteUrl.call(requestData).then(response => {\n                 *     if (response) {\n                 *         console.log(response.data.message); // `message` is inferred as a string\n                 *     }\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: T; response: Response; } | null>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: T; response: Response; } | null> => {\n                    return this._apiLink.deleteURL(this._url, requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified URL.**\n                 *\n                 * This method retrieves only the headers from the specified URL without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.headURL(this._url, options)`, which:\n                 *   - Sends an HTTP HEAD request to `_url`.\n                 *   - Extracts and returns the response headers.\n                 *   - Does **not** include the response body.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiDeleteUrl.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiDeleteUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.headURL(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified URL.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified URL \n                 * without performing an actual data operation. It is useful for checking which \n                 * HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ### **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ### **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"DELETE\", \"OPTIONS\"]`).\n                 *\n                 * ### **Behavior**\n                 * - Calls `this._apiLink.options(this._url, options)`, which:\n                 *   - Sends an HTTP OPTIONS request to `_url`.\n                 *   - Extracts the `Allow` header from the response.\n                 *   - Parses and returns the list of permitted HTTP methods.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiDeleteUrl.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"DELETE\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiDeleteUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._url, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a DELETE request to a specified URL.\n                 *\n                 * ### **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ### **Supported Events**\n                 * - `\"requestStarted_DELETE\"` - Triggered when a DELETE request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ### **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"DELETE\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ### **Example Usage**\n                 * ```typescript\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiDeleteUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"DELETE request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiDeleteUrl.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"DELETE request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ### **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('DELETE', eventName, eventFunc);\n                };\n            },\n        };\n    };\n    \n    const customOption = new CustomOption();\n    const hison = new HisonCore();\n    return {\n        setDateFormat(str: string) {customOption.utils.dateFormat = str;},\n        setTimeFormat(str: string) {customOption.utils.timeFormat = str;},\n        setDatetimeFormat(str: string) {customOption.utils.datetimeFormat = str;},\n        setYearFormat(str: string) {customOption.utils.yearFormat = str;},\n        setMonthFormat(str: string) {customOption.utils.monthFormat = str;},\n        setMonthNameFormat(str: string) {customOption.utils.monthNameFormat = str;},\n        setYearMonthFormat(str: string) {customOption.utils.yearMonthFormat = str;},\n        setDayFormat(str: string) {customOption.utils.dayFormat = str;},\n        setDayOfWeekFormat(str: string) {customOption.utils.dayOfWeekFormat = str;},\n        setHourFormat(str: string) {customOption.utils.hourFormat = str;},\n        setHourMinuteFormat(str: string) {customOption.utils.hourMinuteFormat = str;},\n        setMinuteFormat(str: string) {customOption.utils.minuteFormat = str;},\n        setSecondFormat(str: string) {customOption.utils.secondFormat = str;},\n        setNumberFormat(str: string) {customOption.utils.numberFormat = str;},\n        setCharByteLess2047(num: number) {customOption.utils.LESSOREQ_0X7FF_BYTE = num;},\n        setCharByteLess65535(num: number) {customOption.utils.LESSOREQ_0XFFFF_BYTE = num;},\n        setCharByteGreater65535(num: number) {customOption.utils.GREATER_0XFFFF_BYTE = num;},\n        getDateFormat(): string {return customOption.utils.dateFormat;},\n        getTimeFormat(): string {return customOption.utils.timeFormat;},\n        getDatetimeFormat(): string {return customOption.utils.datetimeFormat;},\n        getYearFormat(): string {return customOption.utils.yearFormat;},\n        getMonthFormat(): string {return customOption.utils.monthFormat;},\n        getMonthNameFormat(): string {return customOption.utils.monthNameFormat;},\n        getYearMonthFormat(): string {return customOption.utils.yearMonthFormat;},\n        getDayFormat(): string {return customOption.utils.dayFormat;},\n        getDayOfWeekFormat(): string {return customOption.utils.dayOfWeekFormat;},\n        getHourFormat(): string {return customOption.utils.hourFormat;},\n        getHourMinuteFormat(): string {return customOption.utils.hourMinuteFormat;},\n        getMinuteFormat(): string {return customOption.utils.minuteFormat;},\n        getSecondFormat(): string {return customOption.utils.secondFormat;},\n        getNumberFormat(): string {return customOption.utils.numberFormat;},\n        getCharByteLess2047(): number {return customOption.utils.LESSOREQ_0X7FF_BYTE;},\n        getCharByteLess65535(): number {return customOption.utils.LESSOREQ_0XFFFF_BYTE;},\n        getCharByteGreater65535(): number {return customOption.utils.GREATER_0XFFFF_BYTE;},\n        setShieldURL(str: string) {customOption.shield.shieldURL = str;},\n        setExposeIpList(arr: string[]) {customOption.shield.exposeIpList = arr;},\n        setIsFreeze(bool: boolean) {customOption.shield.isFreeze = bool;},\n        setIsPossibleGoBack(bool: boolean) {customOption.shield.isPossibleGoBack = bool;},\n        setIsPossibleOpenDevTool(bool: boolean) {customOption.shield.isPossibleOpenDevTool = bool;},\n        getShieldURL(): string {return customOption.shield.shieldURL;},\n        getExposeIpList(): string[] {return customOption.shield.exposeIpList;},\n        getIsFreeze(): boolean {return customOption.shield.isFreeze;},\n        getIsPossibleGoBack(): boolean {return customOption.shield.isPossibleGoBack;},\n        getIsPossibleOpenDevTool(): boolean {return customOption.shield.isPossibleOpenDevTool;},\n        setConvertValue(func: ConvertValue) {customOption.data.convertValue = func;},\n        setProtocol(str: string) {customOption.link.protocol = str;},\n        setDomain(str: string) {customOption.link.domain = str;},\n        setControllerPath(str: string) {customOption.link.controllerPath = str;},\n        setTimeout(num: number) {customOption.link.timeout = num;},\n        setWebSocketProtocol(str: string) {customOption.link.webSocketProtocol = str;},\n        setWebSocketEndPoint(str: string) {customOption.link.webSocketEndPoint = str;},\n        setCachingLimit(num: number) {customOption.link.cachingLimit = num;},\n        getProtocol(): string {return customOption.link.protocol;},\n        getDomain(): string {return customOption.link.domain;},\n        getControllerPath(): string {return customOption.link.controllerPath;},\n        getTimeout(): number {return customOption.link.timeout;},\n        getWebSocketProtocol(): string {return customOption.link.webSocketProtocol;},\n        getWebSocketEndPoint(): string {return customOption.link.webSocketEndPoint;},\n        getCachingLimit(): number {return customOption.link.cachingLimit;},\n        setBeforeGetRequst(func: BeforeGetRequst) {customOption.link.beforeGetRequst = func;},\n        setBeforePostRequst(func: BeforePostRequst) {customOption.link.beforePostRequst = func},\n        setBeforePutRequst(func: BeforePutRequst) {customOption.link.beforePutRequst = func},\n        setBeforePatchRequst(func: BeforePatchRequst) {customOption.link.beforePatchRequst = func},\n        setBeforeDeleteRequst(func: BeforeDeleteRequst) {customOption.link.beforeDeleteRequst = func},\n        setInterceptApiResult(func: InterceptApiResult) {customOption.link.interceptApiResult = func},\n        setInterceptApiError(func: InterceptApiError) {customOption.link.interceptApiError = func},\n        utils : {\n            isAlpha(str: string): boolean { return hison.utils.isAlpha(str) },\n            isAlphaNumber(str: string): boolean { return hison.utils.isAlphaNumber(str) },\n            isNumber(str: string): boolean { return hison.utils.isNumber(str) },\n            isNumberSymbols(str: string): boolean { return hison.utils.isNumberSymbols(str) },\n            isIncludeSymbols(str: string): boolean { return hison.utils.isIncludeSymbols(str) },\n            isLowerAlpha(str: string): boolean { return hison.utils.isLowerAlpha(str) },\n            isLowerAlphaAndNumber(str: string): boolean { return hison.utils.isLowerAlphaAndNumber(str) },\n            isUpperAlpha(str: string): boolean { return hison.utils.isUpperAlpha(str) },\n            isUpperAlphaNumber(str: string): boolean { return hison.utils.isUpperAlphaNumber(str) },\n            isNumeric(num: any): boolean { return hison.utils.isNumeric(num) },\n            isInteger(num: any): boolean { return hison.utils.isInteger(num) },\n            isPositiveInteger(num: any): boolean { return hison.utils.isPositiveInteger(num) },\n            isNegativeInteger(num: any): boolean { return hison.utils.isNegativeInteger(num) },\n            isArray(arr: any): boolean { return hison.utils.isArray(arr) },\n            isObject(obj: any): boolean { return hison.utils.isObject(obj) },\n            isDate(date: DateObject | string): boolean { return hison.utils.isDate(date) },\n            isTime(time: TimeObject | string): boolean { return hison.utils.isTime(time) },\n            isDatetime(datetime: DateTimeObject | string): boolean { return hison.utils.isDatetime(datetime) },\n            isEmail(str: string): boolean { return hison.utils.isEmail(str) },\n            isURL(str: string): boolean { return hison.utils.isURL(str) },\n            isValidMask(str: string, mask: string): boolean { return hison.utils.isValidMask(str, mask) },\n            getDateObject(date: Date | string): DateObject { return hison.utils.getDateObject(date) },\n            getTimeObject(time: Date | string): TimeObject { return hison.utils.getTimeObject(time) },\n            getDatetimeObject(datetime: Date | string): DateTimeObject | null { return hison.utils.getDatetimeObject(datetime) },\n            addDate(datetime: DateTimeObject | DateObject | string, addValue?: string | number, addType?: string, format?: string): DateTimeObject | string { return hison.utils.addDate(datetime, addValue, addType, format) },\n            getDateDiff(datetime1: DateTimeObject | DateObject | string, datetime2: DateTimeObject | DateObject | string, diffType?: string): number { return hison.utils.getDateDiff(datetime1, datetime2, diffType) },\n            getMonthName(month: number | string, isFullName?: boolean): string { return hison.utils.getMonthName(month, isFullName) },\n            getDateWithFormat(datetime: DateTimeObject | DateObject | string, format?: string): string { return hison.utils.getDateWithFormat(datetime, format) },\n            getDayOfWeek(date: DateObject | string, dayType?: string): string { return hison.utils.getDayOfWeek(date, dayType) },\n            getLastDay(date: DateObject | string): number { return hison.utils.getLastDay(date) },\n            getSysYear(format?: string): string { return hison.utils.getSysYear(format) },\n            getSysMonth(format?: string): string { return hison.utils.getSysMonth(format) },\n            getSysYearMonth(format?: string): string { return hison.utils.getSysYearMonth(format) },\n            getSysDay(format?: string): string { return hison.utils.getSysDay(format) },\n            getSysDayOfWeek(format?: string): string { return hison.utils.getSysDayOfWeek(format) },\n            getSysHour(format?: string): string { return hison.utils.getSysHour(format) },\n            getSysHourMinute(format?: string): string { return hison.utils.getSysHourMinute(format) },\n            getSysMinute(format?: string): string { return hison.utils.getSysMinute(format) },\n            getSysSecond(format?: string): string { return hison.utils.getSysSecond(format) },\n            getSysTime(format?: string): string { return hison.utils.getSysTime(format) },\n            getSysDate(format?: string): string { return hison.utils.getSysDate(format) },\n            getCeil(num: number, precision?: number): number { return hison.utils.getCeil(num, precision) },\n            getFloor(num: number, precision?: number): number { return hison.utils.getFloor(num, precision) },\n            getRound(num: number, precision?: number): number { return hison.utils.getRound(num, precision) },\n            getTrunc(num: number, precision?: number): number { return hison.utils.getTrunc(num, precision) },\n            getByteLength(str: string): number { return hison.utils.getByteLength(str) },\n            getCutByteLength(str: string, cutByte: number): string { return hison.utils.getCutByteLength(str, cutByte) },\n            getStringLenForm(str: string, length: number): string { return hison.utils.getStringLenForm(str, length) },\n            getLpad(str: string, padStr: string, length: number): string { return hison.utils.getLpad(str, padStr, length) },\n            getRpad(str: string, padStr: string, length: number): string { return hison.utils.getRpad(str, padStr, length) },\n            getTrim(str: string): string { return hison.utils.getTrim(str, ) },\n            getReplaceAll(str: string, targetStr: string, replaceStr?: string): string { return hison.utils.getReplaceAll(str, targetStr, replaceStr) },\n            getNumberFormat(value: number, format?: string): string { return hison.utils.getNumberFormat(value, format) },\n            getRemoveExceptNumbers(str: string): string { return hison.utils.getRemoveExceptNumbers(str) },\n            getRemoveNumbers(str: string): string { return hison.utils.getRemoveNumbers(str) },\n            getReverse(str: string): string { return hison.utils.getReverse(str) },\n            getToBoolean(value: any): boolean { return hison.utils.getToBoolean(value) },\n            getToNumber(value: any, impossibleValue?: number): number { return hison.utils.getToNumber(value, impossibleValue) },\n            getToFloat(value: any, impossibleValue?: number): number { return hison.utils.getToFloat(value, impossibleValue) },\n            getToInteger(value: any, impossibleValue?: number): number { return hison.utils.getToInteger(value, impossibleValue) },\n            getToString(str: any, impossibleValue?: string): string { return hison.utils.getToString(str, impossibleValue) },\n            nvl(val: any, defaultValue: any): any { return hison.utils.nvl(val, defaultValue) },\n            getFileExtension(str: string): string { return hison.utils.getFileExtension(str) },\n            getFileName(str: string): string { return hison.utils.getFileName(str) },\n            getDecodeBase64(str: string): string { return hison.utils.getDecodeBase64(str) },\n            getEncodeBase64(str: string): string { return hison.utils.getEncodeBase64(str) },\n            deepCopyObject(object: any, visited?: { source: any, copy: any }[]): any { return hison.utils.deepCopyObject(object, visited) },\n        },\n        shield : {\n            isHison: true,\n            excute(hison: Hison) { hison.shield.excute(hison) },\n        },\n        data: hison.data,\n        link: hison.link,\n    }\n}\n\nexport default createHison();"],"names":["root","factory","exports","module","define","amd","this","MonthFullName","MonthShortName","DayOfWeekFullName","DayOfWeekShortName","DayOfWeekFullNameKR","DayOfWeekShortNameKR","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","limit","_removeKey","index","_keys","indexOf","splice","hasKey","_cache","value","hison","utils","deepCopyObject","push","put","remove","length","_limit","oldestKey","shift","undefined","result","getAll","keys","forEach","getKeys","clear","events","on","eventName","listener","emit","args","eventEmitter","cachingModule","_cachingModule","_getRsultDataWrapper","resultData","data","constructor","DATAWRAPPER","DataWrapper","Array","putDataModel","DataModel","_getCachingResult","resourcePath","isWebSocketConnection","customOption","link","interceptApiResult","response","_getFetch","methodName","requestPath","options","serviceCmd","requestData","getIsDataWrapper","putString","getSerialized","getIsDataModel","JSON","parse","e","stringify","isArray","cmd","fetchOptions","method","headers","body","Error","timeoutPromise","timeout","Number","isInteger","Promise","_","reject","setTimeout","fecthArr","fetch","_request","fecthInfo","cachingKey","race","then","_eventEmitter","contentType","includes","json","text","rtn","resolve","catch","error","interceptApiError","beforeGetRequst","protocol","domain","post","beforePostRequst","METHOD_NAME","controllerPath","beforePutRequst","patch","beforePatchRequst","delete","beforeDeleteRequst","head","url","ok","status","allowHeader","split","map","trim","getURL","postURL","putURL","patchURL","deleteURL","headURL","optionsURL","onEventEmit","eventFunc","requestEventName","getIsCachingModule","isAlpha","str","test","isAlphaNumber","isNumber","isNumberSymbols","isIncludeSymbols","isLowerAlpha","isLowerAlphaAndNumber","isUpperAlpha","isUpperAlphaNumber","isNumeric","num","isNaN","isFinite","isPositiveInteger","isNegativeInteger","arr","isObject","isDate","date","dateObj","getDateObject","yyyy","getToString","y","MM","M","dd","d","getToNumber","Date","getFullYear","getMonth","getDate","err","isTime","time","timeObj","getTimeObject","hh","h","mm","m","ss","s","isValidTimePart","max","isDatetime","datetime","datetimeObj","getDatetimeObject","isEmail","isURL","urlStr","isValidMask","mask","i","char","charAt","maskChar","parseInt","year","month","day","substring","hours","minutes","seconds","dateArr","getHours","getMinutes","getSeconds","datetimeArr","assign","addDate","addValue","addType","format","dateFormat","datetimeFormat","setFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","rtnObj","getDateWithFormat","getDateDiff","datetime1","datetime2","diffType","datetimeObj1","datetimeObj2","d1","d2","Math","floor","getTime","getMonthName","isFullName","toString","padStart","MMMM","MMM","getDayOfWeek","dayType","dayOfWeekFormat","dayOfWeek","getDay","toLowerCase","getLastDay","nextMonthFirstDay","getSysYear","yearFormat","currentDate","getSysMonth","monthFormat","sysMonth","getSysYearMonth","yearMonthFormat","getSysDay","dayFormat","getSysDayOfWeek","getSysHour","hourFormat","getSysHourMinute","hourMinuteFormat","getSysMinute","minuteFormat","getSysSecond","secondFormat","getSysTime","timeFormat","getSysDate","getCeil","precision","trunc","factor","pow","ceil","getFloor","getRound","round","getTrunc","getByteLength","byteLength","charCode","charCodeAt","LESSOREQ_0X7FF_BYTE","LESSOREQ_0XFFFF_BYTE","GREATER_0XFFFF_BYTE","getCutByteLength","cutByte","cutIndex","getStringLenForm","strLength","totalSpaces","gaps","spacePerGap","extraSpaces","repeat","getLpad","padStr","getRpad","getTrim","getReplaceAll","targetStr","replaceStr","join","getNumberFormat","oriValue","matches","numberFormat","match","prefix","suffix","intergerFormat","decimalFormat","numStr","isNegative","interger","decimal","getToFloat","toLocaleString","minimumFractionDigits","lastIndexOf","maximumFractionDigits","getRemoveExceptNumbers","replace","getRemoveNumbers","getReverse","reverse","getToBoolean","impossibleValue","parseFloat","getToInteger","String","description","nvl","val","defaultValue","getFileExtension","extension","pop","getFileName","fileName","lastDotIndex","getDecodeBase64","decodeURIComponent","atob","c","slice","getEncodeBase64","btoa","encodeURIComponent","p1","fromCharCode","object","visited","Response","clone","source","copy","j","shield","excute","isHison","func","httpRequest","deepFreeze","getOwnPropertyNames","name","freeze","isFreeze","location","href","shieldURL","ip","exposeIpList","isPossibleGoBack","history","pushState","document","title","window","addEventListener","isPossibleOpenDevTool","msg","detectDevTool","allow","start","end","alert","write","onkeydown","event","preventDefault","shieldFuncCreateBlockDevMode","XMLHttpRequest","onreadystatechange","readyState","DONE","open","responseType","send","keyOrObject","_isDataWrapper","_put","_data","newData","getRows","getString","getDataModel","getObject","containsKey","isEmpty","size","values","_cols","_rows","_isDataModel","_deepCopy","convertValue","_isPositiveIntegerIncludingZero","intNum","_getValidRowIndex","rowIndex","_isConvertibleString","_hasColumn","column","_checkColumn","_checkValidFunction","_checkBoolean","_checkOriginObject","_checkArray","_getColumnType","col","_makeValue","_getValidColValue","_getValidRowValue","chkType","_addCol","_addRow","row","tempRow","_getNullColumnFirstRowIndex","_getDuplColumnFirstRowIndex","checkedValues","_getInValidColumnFirstRowIndex","validator","isDeclare","getColumns","getColumnValues","addColumn","addColumns","columns","setColumnSameValue","setColumnSameFormat","formatter","getRow","getRowAsDataModel","addRow","rowIndexOrRow","emptyRow","validIndex","newRow","startRow","endRow","sRow","eRow","getRowsAsDataModel","addRows","rows","copyCol","copyRow","cols","colCount","rowCount","getValue","setValue","removeColumn","filter","oriColumn","removeColumns","removeRow","getColumnCount","getRowCount","hasColumn","setValidColumns","isNotNullColumn","findFirstRowNullColumn","nullColumnFirstRowIndex","isNotDuplColumn","findFirstRowDuplColumn","duplColumnFirstRowIndex","isValidValue","vaildator","findFirstRowInvalidValue","inValidColumnFirstRowIndex","searchRowIndexes","condition","_this","matched","matchesCondition","searchRows","searchRowsAsDataModel","searchAndModify","filterRowIndexes","filterRows","filterRowsAsDataModel","filterAndModify","setColumnSorting","newColumns","sortColumnAscending","sort","sortColumnDescending","a","b","sortColumnReverse","sortRowAscending","isIntegerOrder","valueA","valueB","sortRowDescending","sortRowReverse","CachingModule","cachingLimit","_checkTypeString","_checkTypeFunction","_checkWebSocketConnection","_webSocket","WebSocket","OPEN","CONNECTING","_isCachingModule","_LRUCache","onopen","onmessage","onclose","onerror","webSocketProtocol","webSocketEndPoint","LRUCache","ApiGet","_apiLink","_resourcePath","EventEmitter","ApiLink","ApiPost","_serviceCmd","ApiPut","ApiPatch","ApiDelete","ApiGetUrl","_url","ApiPostUrl","ApiPutUrl","ApiPatchUrl","ApiDeleteUrl","monthNameFormat","requestDw","setDateFormat","setTimeFormat","setDatetimeFormat","setYearFormat","setMonthFormat","setMonthNameFormat","setYearMonthFormat","setDayFormat","setDayOfWeekFormat","setHourFormat","setHourMinuteFormat","setMinuteFormat","setSecondFormat","setNumberFormat","setCharByteLess2047","setCharByteLess65535","setCharByteGreater65535","getDateFormat","getTimeFormat","getDatetimeFormat","getYearFormat","getMonthFormat","getMonthNameFormat","getYearMonthFormat","getDayFormat","getDayOfWeekFormat","getHourFormat","getHourMinuteFormat","getMinuteFormat","getSecondFormat","getCharByteLess2047","getCharByteLess65535","getCharByteGreater65535","setShieldURL","setExposeIpList","setIsFreeze","bool","setIsPossibleGoBack","setIsPossibleOpenDevTool","getShieldURL","getExposeIpList","getIsFreeze","getIsPossibleGoBack","getIsPossibleOpenDevTool","setConvertValue","setProtocol","setDomain","setControllerPath","setWebSocketProtocol","setWebSocketEndPoint","setCachingLimit","getProtocol","getDomain","getControllerPath","getTimeout","getWebSocketProtocol","getWebSocketEndPoint","getCachingLimit","setBeforeGetRequst","setBeforePostRequst","setBeforePutRequst","setBeforePatchRequst","setBeforeDeleteRequst","setInterceptApiResult","setInterceptApiError","HisonCore"],"sourceRoot":""}
