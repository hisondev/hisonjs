{"version":3,"file":"hisonjs.bundle.js","mappings":"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","sources":["webpack://hisonjs/webpack/universalModuleDefinition","webpack://hisonjs/webpack/bootstrap","webpack://hisonjs/webpack/runtime/define property getters","webpack://hisonjs/webpack/runtime/hasOwnProperty shorthand","webpack://hisonjs/./src/hisonjs.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hisonjs\"] = factory();\n\telse\n\t\troot[\"hisonjs\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * The `Hison` object serves as the central interface for the `hisondev` solution, \n * providing a comprehensive set of tools for handling configuration, security, \n * data manipulation, and communication.\n *\n * The `Hison` object is designed to streamline development by offering:\n * - **Configuration Management**: Modify settings dynamically using setter methods.\n * - **Security Features**: Control access, enforce restrictions, and prevent unauthorized modifications.\n * - **Utility Functions**: Validate and process data using `hison.utils`.\n * - **Data Handling**: Utilize structured models for data storage and transformation.\n * - **Communication Support**: Simplify API requests with promise-based networking.\n *\n * ## Core Modules\n *\n * The `Hison` solution consists of the following primary components:\n *\n * - **hison.utils**: Provides various utility functions for data validation, formatting, and conversion.\n * - **hison.shield**: Implements security measures, including access control and developer tool restrictions.\n * - **hison.data**: Offers structured storage and transformation via `DataWrapper` and `DataModel`.\n * - **hison.link**: Enables promise-based communication and API request handling.\n *\n * ---\n * ## Object Creation and Encapsulation\n * - The `Hison` object is instantiated via the `createHison()` function, encapsulating its implementation within a closure.\n * - This design pattern ensures that internal states remain private while exposing necessary functionalities.\n * - The returned object includes a set of methods that allow developers to interact with `Hison` safely and efficiently.\n *\n * ---\n * ## Customization and Configuration\n *\n * `Hison` provides setter methods to modify `CustomOption` properties, allowing developers to configure behavior dynamically.\n *\n * ### Example: Updating Date and Time Formats\n * ```typescript\n * hison.setDateFormat(\"MM/dd/yyyy\");\n * hison.setTimeFormat(\"HH:mm:ss\");\n * hison.setDatetimeFormat(\"MM/dd/yyyy HH:mm\");\n * ```\n *\n * ### Example: Adjusting Character Encoding Byte Sizes\n * ```typescript\n * hison.setCharByteLess2047(3);\n * hison.setCharByteLess65535(4);\n * hison.setCharByteGreater65535(5);\n * ```\n *\n * These configurations ensure compatibility with different project requirements, encoding formats, and locale settings.\n *\n * ---\n * ## Security Features\n *\n * The `hison.shield` module provides multiple layers of security, including:\n * - **Object Freezing** (`setIsFreeze(true)`) to prevent modifications.\n * - **Access Control by URL** (`setShieldURL(url)`) to restrict unauthorized entry.\n * - **IP-Based Access Restrictions** (`setExposeIpList(ipList)`) for controlled access.\n * - **Developer Tool Blocking** (`setIsPossibleOpenDevTool(false)`) to prevent debugging exploits.\n *\n * Example:\n * ```typescript\n * hison.setIsFreeze(true);\n * hison.setShieldURL(\"https://secure.example.com\");\n * hison.setExposeIpList([\"192.168.1.1\", \"10.0.0.2\"]);\n * ```\n *\n * ---\n * ## Utility Functions (`hison.utils`)\n *\n * The `utils` module offers a variety of helper functions for validation, formatting, and data manipulation:\n *\n * ### String Validation & Manipulation\n * ```typescript\n * hison.utils.isAlpha(\"HelloWorld\"); // true\n * hison.utils.getLpad(\"123\", \"0\", 5); // \"00123\"\n * ```\n *\n * ### Number Formatting & Rounding\n * ```typescript\n * hison.utils.getRound(12.3456, 2); // 12.35\n * hison.utils.getNumberFormat(1234.5678, \"#,###.00\"); // \"1,234.57\"\n * ```\n *\n * ### Date Processing\n * ```typescript\n * hison.utils.getDateWithFormat(\"2025-02-05\", \"MMMM dd, yyyy\"); // \"February 5, 2025\"\n * ```\n *\n * ---\n * ## Data Handling (`hison.data`)\n *\n * The `data` module provides structured storage via `DataWrapper` and `DataModel`:\n *\n * ```typescript\n * const wrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n * console.log(wrapper.getString(\"name\")); // \"Alice\"\n *\n * const model = new hison.data.DataModel([\n *     { id: 1, name: \"Alice\" },\n *     { id: 2, name: \"Bob\" }\n * ]);\n * console.log(model.getValue(0, \"name\")); // \"Alice\"\n * ```\n *\n * ---\n * ## API Communication (`hison.link`)\n *\n * The `link` module simplifies API interactions with promise-based requests:\n *\n * ```typescript\n * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n * apiPost.call(new hison.data.DataWrapper({ username: \"Alice\" })).then(response => {\n *     console.log(response.data);\n * });\n * ```\n *\n * The `hison.link` module also supports caching and WebSocket integration.\n *\n * ---\n * ## Summary\n *\n * The `Hison` object provides a robust and flexible framework for managing configurations, security, utilities, structured data, and communication.\n * It is designed to improve development efficiency while offering customization and security controls.\n */\ninterface Hison {\n    //====================================================================================\n    //option utils\n    //====================================================================================\n    /**\n     * Sets the default format for displaying dates.\n     *\n     * This method updates the `dateFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting date values.\n     *\n     * - The new format will be applied globally to all date-related operations.\n     * - Default value: `'yyyy-MM-dd'`\n     * - Example output after setting format: `'02/04/2025'` (for `'MM/dd/yyyy'`)\n     *\n     * ## Related Property\n     * - **`dateFormat`**: Defines the default date format.\n     *   - Default: `'yyyy-MM-dd'`\n     *   - Example output: `'2025-02-04'`\n     *\n     * @param str The new date format string.\n     */\n    setDateFormat(str: string): void;\n    /**\n     * Sets the default format for displaying time.\n     *\n     * This method updates the `timeFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting time values.\n     *\n     * - The new format will be applied globally to all time-related operations.\n     * - Default value: `'hh:mm:ss'`\n     * - Example output after setting format: `'14:30'` (for `'HH:mm'`)\n     *\n     * ## Related Property\n     * - **`timeFormat`**: Defines the default time format.\n     *   - Default: `'hh:mm:ss'`\n     *   - Example output: `'14:30:15'`\n     *\n     * @param str The new time format string.\n     */\n    setTimeFormat(str: string): void;\n    /**\n     * Sets the default format for displaying date and time.\n     *\n     * This method updates the `datetimeFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting datetime values.\n     *\n     * - The new format will be applied globally to all datetime-related operations.\n     * - Default value: `'yyyy-MM-dd hh:mm:ss'`\n     * - Example output after setting format: `'02/04/2025 14:30'` (for `'MM/dd/yyyy HH:mm'`)\n     *\n     * ## Related Property\n     * - **`datetimeFormat`**: Defines the default date-time format.\n     *   - Default: `'yyyy-MM-dd hh:mm:ss'`\n     *   - Example output: `'2025-02-04 14:30:15'`\n     *\n     * @param str The new datetime format string.\n     */\n    setDatetimeFormat(str: string): void;\n    /**\n     * Sets the default format for displaying the year.\n     *\n     * This method updates the `yearFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting year values.\n     *\n     * - The new format will be applied globally to all year-related operations.\n     * - Default value: `'yyyy'`\n     * - Example output after setting format: `'25'` (for `'yy'`)\n     *\n     * ## Related Property\n     * - **`yearFormat`**: Defines the default year format.\n     *   - Default: `'yyyy'`\n     *   - Example output: `'2025'`\n     *\n     * @param str The new year format string.\n     */\n    setYearFormat(str: string): void;\n    /**\n     * Sets the default format for displaying the month.\n     *\n     * This method updates the `monthFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting month values.\n     *\n     * - The new format will be applied globally to all month-related operations.\n     * - Default value: `'M'`\n     * - Example output after setting format: `'02'` (for `'MM'`)\n     *\n     * ## Related Property\n     * - **`monthFormat`**: Defines the default month format.\n     *   - Default: `'M'`\n     *   - Example output: `'2'` (for February)\n     *\n     * @param str The new month format string.\n     */\n    setMonthFormat(str: string): void;\n    /**\n     * Sets the default format for displaying the full month name.\n     *\n     * This method updates the `monthNameFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting month names.\n     *\n     * - The new format will be applied globally to all month-related operations.\n     * - Default value: `'MMMM'`\n     * - Example output after setting format: `'Feb'` (for `'MMM'`)\n     *\n     * ## Related Property\n     * - **`monthNameFormat`**: Defines the default full month name format.\n     *   - Default: `'MMMM'`\n     *   - Example output: `'February'`\n     *\n     * @param str The new full month name format string.\n     */\n    setMonthNameFormat(str: string): void;\n    /**\n     * Sets the default format for displaying year and month.\n     *\n     * This method updates the `yearMonthFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting year-month values.\n     *\n     * - The new format will be applied globally to all year-month-related operations.\n     * - Default value: `'yyyy-MM'`\n     * - Example output after setting format: `'02/2025'` (for `'MM/yyyy'`)\n     *\n     * ## Related Property\n     * - **`yearMonthFormat`**: Defines the default year and month format.\n     *   - Default: `'yyyy-MM'`\n     *   - Example output: `'2025-02'`\n     *\n     * @param str The new year-month format string.\n     */\n    setYearMonthFormat(str: string): void;\n    /**\n     * Sets the default format for displaying the day of the month.\n     *\n     * This method updates the `dayFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting day values.\n     *\n     * - The new format will be applied globally to all day-related operations.\n     * - Default value: `'d'`\n     * - Example output after setting format: `'04'` (for `'dd'`)\n     *\n     * ## Related Property\n     * - **`dayFormat`**: Defines the default day format.\n     *   - Default: `'d'`\n     *   - Example output: `'4'` (for the 4th day of the month)\n     *\n     * @param str The new day format string.\n     */\n    setDayFormat(str: string): void;\n    /**\n     * Sets the default format for displaying the day of the week.\n     *\n     * This method updates the `dayOfWeekFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting day-of-week values.\n     *\n     * - The new format will be applied globally to all day-of-week-related operations.\n     * - Default value: `'d'`\n     * - Example output after setting format: `'Wed'` (for `'EEE'`)\n     *\n     * ## Related Property\n     * - **`dayOfWeekFormat`**: Defines the default day-of-week format.\n     *   - Default: `'d'`\n     *   - Example output: `'3'` (where 3 represents Wednesday depending on locale settings)\n     *\n     * @param str The new day-of-week format string.\n     */\n    setDayOfWeekFormat(str: string): void;\n    /**\n     * Sets the default format for displaying the hour.\n     *\n     * This method updates the `hourFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting hour values.\n     *\n     * - The new format will be applied globally to all hour-related operations.\n     * - Default value: `'h'`\n     * - Example output after setting format: `'14'` (for `'HH'`)\n     *\n     * ## Related Property\n     * - **`hourFormat`**: Defines the default hour format.\n     *   - Default: `'h'`\n     *   - Example output: `'2'` (for 2 AM or 2 PM, depending on the time format setting)\n     *\n     * @param str The new hour format string.\n     */\n    setHourFormat(str: string): void;\n    /**\n     * Sets the default format for displaying the hour and minute.\n     *\n     * This method updates the `hourMinuteFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting time values.\n     *\n     * - The new format will be applied globally to all hour-minute-related operations.\n     * - Default value: `'hh:mm'`\n     * - Example output after setting format: `'14:30'` (for `'HH:mm'`)\n     *\n     * ## Related Property\n     * - **`hourMinuteFormat`**: Defines the default hour-minute format.\n     *   - Default: `'hh:mm'`\n     *   - Example output: `'02:30'` (for 2:30 AM or PM, depending on the time format setting)\n     *\n     * @param str The new hour-minute format string.\n     */\n    setHourMinuteFormat(str: string): void;\n    /**\n     * Sets the default format for displaying the minute.\n     *\n     * This method updates the `minuteFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting minute values.\n     *\n     * - The new format will be applied globally to all minute-related operations.\n     * - Default value: `'m'`\n     * - Example output after setting format: `'05'` (for `'mm'`)\n     *\n     * ## Related Property\n     * - **`minuteFormat`**: Defines the default minute format.\n     *   - Default: `'m'`\n     *   - Example output: `'5'` (for the 5th minute of the hour)\n     *\n     * @param str The new minute format string.\n     */\n    setMinuteFormat(str: string): void;\n    /**\n     * Sets the default format for displaying the second.\n     *\n     * This method updates the `secondFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for parsing and formatting second values.\n     *\n     * - The new format will be applied globally to all second-related operations.\n     * - Default value: `'s'`\n     * - Example output after setting format: `'09'` (for `'ss'`)\n     *\n     * ## Related Property\n     * - **`secondFormat`**: Defines the default second format.\n     *   - Default: `'s'`\n     *   - Example output: `'45'` (for the 45th second of the minute)\n     *\n     * @param str The new second format string.\n     */\n    setSecondFormat(str: string): void;\n    /**\n     * Sets the default format for displaying numbers.\n     *\n     * This method updates the `numberFormat` property in `customOption`, \n     * which is used throughout the `hisondev` solution for formatting numeric values.\n     *\n     * - The new format will be applied globally to all number-related operations.\n     * - Default value: `\"#,##0.##\"`\n     * - Example output after setting format: `\"1.234,56\"` (for `\"#.###,##\"` in European style)\n     *\n     * ## Related Property\n     * - **`numberFormat`**: Defines the default number format.\n     *   - Default: `\"#,##0.##\"`\n     *   - Example output: `\"1,234.56\"` (for the number `1234.56`)\n     *\n     * @param str The new number format string.\n     */\n    setNumberFormat(str: string): void;\n    /**\n     * Sets the byte size for characters with a char code less than or equal to `0x7FF`.\n     *\n     * This method updates the `LESSOREQ_0X7FF_BYTE` property in `customOption`, \n     * which determines the number of bytes required to encode characters in this range.\n     *\n     * - The new value will be applied globally to all character encoding operations.\n     * - Default value: `2`\n     * - Example usage: `setCharByteLess2047(3);` (Changes encoding size to 3 bytes)\n     *\n     * ## Related Property\n     * - **`LESSOREQ_0X7FF_BYTE`**: Defines the byte size for `charCode <= 0x7FF`.\n     *   - Default: `2`\n     *   - Represents characters with `charCode <= 0x7FF`\n     *\n     * @param num The new byte size for characters in this range.\n     */\n    setCharByteLess2047(num: number): void;\n    /**\n     * Sets the byte size for characters with a char code less than or equal to `0xFFFF`.\n     *\n     * This method updates the `LESSOREQ_0XFFFF_BYTE` property in `customOption`, \n     * which determines the number of bytes required to encode characters in this range.\n     *\n     * - The new value will be applied globally to all character encoding operations.\n     * - Default value: `3`\n     * - Example usage: `setCharByteLess65535(4);` (Changes encoding size to 4 bytes)\n     *\n     * ## Related Property\n     * - **`LESSOREQ_0XFFFF_BYTE`**: Defines the byte size for `charCode <= 0xFFFF`.\n     *   - Default: `3`\n     *   - Represents characters with `charCode <= 0xFFFF`\n     *\n     * @param num The new byte size for characters in this range.\n     */\n    setCharByteLess65535(num: number): void;\n    /**\n     * Sets the byte size for characters with a char code greater than `0xFFFF`.\n     *\n     * This method updates the `GREATER_0XFFFF_BYTE` property in `customOption`, \n     * which determines the number of bytes required to encode characters in this range.\n     *\n     * - The new value will be applied globally to all character encoding operations.\n     * - Default value: `4`\n     * - Example usage: `setCharByteGreater65535(5);` (Changes encoding size to 5 bytes)\n     *\n     * ## Related Property\n     * - **`GREATER_0XFFFF_BYTE`**: Defines the byte size for `charCode > 0xFFFF`.\n     *   - Default: `4`\n     *   - Represents characters with `charCode > 0xFFFF`\n     *\n     * @param num The new byte size for characters in this range.\n     */\n    setCharByteGreater65535(num: number): void;\n    /**\n     * Returns the currently set default date format.\n     *\n     * This method retrieves the value of `dateFormat` from `customOption`.\n     *\n     * @returns The current date format string.\n     */\n    getDateFormat(): string;\n    /**\n     * Returns the currently set default time format.\n     *\n     * This method retrieves the value of `timeFormat` from `customOption`.\n     *\n     * @returns The current time format string.\n     */\n    getTimeFormat(): string;\n    /**\n     * Returns the currently set default datetime format.\n     *\n     * This method retrieves the value of `datetimeFormat` from `customOption`.\n     *\n     * @returns The current datetime format string.\n     */\n    getDatetimeFormat(): string;\n    /**\n     * Returns the currently set default year format.\n     *\n     * This method retrieves the value of `yearFormat` from `customOption`.\n     *\n     * @returns The current year format string.\n     */\n    getYearFormat(): string;\n    /**\n     * Returns the currently set default month format.\n     *\n     * This method retrieves the value of `monthFormat` from `customOption`.\n     *\n     * @returns The current month format format string.\n     */\n    getMonthFormat(): string;\n    /**\n     * Returns the currently set default month name format.\n     *\n     * This method retrieves the value of `monthNameFormat` from `customOption`.\n     *\n     * @returns The current month name format string.\n     */\n    getMonthNameFormat(): string;\n    /**\n     * Returns the currently set default year month format.\n     *\n     * This method retrieves the value of `yearMonthFormat` from `customOption`.\n     *\n     * @returns The current year month format string.\n     */\n    getYearMonthFormat(): string;\n    /**\n     * Returns the currently set default day format.\n     *\n     * This method retrieves the value of `dayFormat` from `customOption`.\n     *\n     * @returns The current day format string.\n     */\n    getDayFormat(): string;\n    /**\n     * Returns the currently set default day of week format.\n     *\n     * This method retrieves the value of `dayOfWeekFormat` from `customOption`.\n     *\n     * @returns The current day of week format string.\n     */\n    getDayOfWeekFormat(): string;\n    /**\n     * Returns the currently set default hour format.\n     *\n     * This method retrieves the value of `hourFormat` from `customOption`.\n     *\n     * @returns The current hour format string.\n     */\n    getHourFormat(): string;\n    /**\n     * Returns the currently set default hour minute format.\n     *\n     * This method retrieves the value of `hourMinuteFormat` from `customOption`.\n     *\n     * @returns The current hour minute format string.\n     */\n    getHourMinuteFormat(): string;\n    /**\n     * Returns the currently set default mibute format.\n     *\n     * This method retrieves the value of `minuteFormat` from `customOption`.\n     *\n     * @returns The current mibute format string.\n     */\n    getMinuteFormat(): string;\n    /**\n     * Returns the currently set default second format.\n     *\n     * This method retrieves the value of `secondFormat` from `customOption`.\n     *\n     * @returns The current second format string.\n     */\n    getSecondFormat(): string;\n    /**\n     * Returns the currently set default number format.\n     *\n     * This method retrieves the value of `numberFormat` from `customOption`.\n     *\n     * @returns The current number format string.\n     */\n    getNumberFormat(): string;\n    /**\n    * Returns the currently set byte size for characters with a char code less than or equal to `0x7FF`.\n    *\n    * This method retrieves the value of `LESSOREQ_0X7FF_BYTE` from `customOption`.\n    *\n    * @returns The byte size for `charCode <= 0x7FF`.\n    */\n    getCharByteLess2047(): number;\n    /**\n    * Returns the currently set byte size for characters with a char code less than or equal to `0xFFFF`.\n    *\n    * This method retrieves the value of `LESSOREQ_0XFFFF_BYTE` from `customOption`.\n    *\n    * @returns The byte size for `charCode <= 0xFFFF`.\n    */\n    getCharByteLess65535(): number;\n    /**\n     * Returns the currently set byte size for characters with a char code greater than `0xFFFF`.\n     *\n     * This method retrieves the value of `GREATER_0XFFFF_BYTE` from `customOption`.\n     *\n     * @returns The byte size for `charCode > 0xFFFF`.\n     */\n    getCharByteGreater65535(): number;\n\n    //====================================================================================\n    //option shield\n    //====================================================================================\n    /**\n     * Sets the security service URL used to enforce access restrictions.\n     *\n     * This method updates the `shieldURL` property in `customOption`, \n     * which is used throughout the `hisondev` solution to validate access to the system.\n     *\n     * - If set, the system verifies whether the current location matches the specified URL.\n     * - If the URL does not match, access may be restricted.\n     * - Default value: `\"\"` (empty string, meaning no restriction)\n     * - Example usage: `setShieldURL(\"https://secure.example.com\");`\n     *\n     * ## Related Property\n     * - **`shieldURL`**: Defines the security enforcement URL.\n     *   - Default: `\"\"`\n     *   - Used in `shield.excute(hison: Hison)` to validate URL access.\n     *\n     * @param str The new security service URL.\n     */\n    setShieldURL(str: string): void;\n    /**\n     * Sets the list of IP addresses that are allowed to bypass security restrictions.\n     *\n     * This method updates the `exposeIpList` property in `customOption`, \n     * which is used throughout the `hisondev` solution to define a whitelist of trusted IPs.\n     *\n     * - Only IPs in this list will be granted access when security restrictions are enabled.\n     * - Default value: `[\"0:0:0:0:0:0:0:1\"]` (allows localhost)\n     * - Example usage: `setExposeIpList([\"192.168.1.1\", \"203.0.113.45\"]);`\n     *\n     * ## Related Property\n     * - **`exposeIpList`**: Defines the list of allowed IP addresses.\n     *   - Default: `[\"0:0:0:0:0:0:0:1\"]`\n     *   - Used in `shield.excute(hison: Hison)` to verify access permissions.\n     *\n     * @param arr An array of IP addresses to be added to the whitelist.\n     */\n    setExposeIpList(arr: string[]): void;\n    /**\n     * Sets whether the `Hison` instance should be frozen to prevent modifications.\n     *\n     * This method updates the `isFreeze` property in `customOption`, \n     * which determines whether the `Hison` object and its properties should be deeply frozen.\n     *\n     * - If `true`, `Object.freeze()` is applied to prevent modifications.\n     * - Default value: `true`\n     * - Example usage: `setIsFreeze(false);` (Allows modifications to the `Hison` instance)\n     *\n     * ## Related Property\n     * - **`isFreeze`**: Determines if the `Hison` object should be frozen.\n     *   - Default: `true`\n     *   - Used in `shield.excute(hison: Hison)`, where `deepFreeze(hison)` is applied.\n     *\n     * @param bool A boolean indicating whether the `Hison` instance should be frozen.\n     */\n    setIsFreeze(bool: boolean): void;\n    /**\n     * Sets whether the browser's back navigation is allowed.\n     *\n     * This method updates the `isPossibleGoBack` property in `customOption`, \n     * which determines if users can navigate back in their browser history.\n     *\n     * - If `false`, a mechanism is implemented to prevent the user from navigating back.\n     * - Default value: `false`\n     * - Example usage: `setIsPossibleGoBack(true);` (Allows back navigation)\n     *\n     * ## Related Property\n     * - **`isPossibleGoBack`**: Determines if browser back navigation is allowed.\n     *   - Default: `false`\n     *     to disable the back button.\n     *\n     * @param bool A boolean indicating whether back navigation is allowed.\n     */\n    setIsPossibleGoBack(bool: boolean): void;\n    /**\n     * Sets whether developer tools can be opened.\n     *\n     * This method updates the `isPossibleOpenDevTool` property in `customOption`, \n     * which determines if browser developer tools should be restricted.\n     *\n     * - If `false`, an event listener is added to detect developer mode access \n     *   (e.g., F12 key, browser dev tools, resizing).\n     * - Default value: `false`\n     * - Example usage: `setIsPossibleOpenDevTool(true);` (Allows developer tools to be opened)\n     *\n     * ## Related Property\n     * - **`isPossibleOpenDevTool`**: Determines if developer tools can be opened.\n     *   - Default: `false`\n     *\n     * @param bool A boolean indicating whether developer tools can be opened.\n     */\n    setIsPossibleOpenDevTool(bool: boolean): void;\n    /**\n     * Returns the currently set security service URL.\n     *\n     * This method retrieves the value of `shieldURL` from `customOption`.\n     *\n     * @returns The current security service URL.\n     */\n    getShieldURL(): string;\n    /**\n     * Returns the list of IP addresses allowed to bypass security restrictions.\n     *\n     * This method retrieves the value of `exposeIpList` from `customOption`.\n     *\n     * @returns An array of allowed IP addresses.\n     */\n    getExposeIpList(): string[];\n    /**\n     * Returns whether the `Hison` instance is frozen to prevent modifications.\n     *\n     * This method retrieves the value of `isFreeze` from `customOption`.\n     *\n     * @returns `true` if the `Hison` instance is frozen, otherwise `false`.\n     */\n    getIsFreeze(): boolean;\n    /**\n     * Returns whether browser back navigation is allowed.\n     *\n     * This method retrieves the value of `isPossibleGoBack` from `customOption`.\n     *\n     * @returns `true` if back navigation is allowed, otherwise `false`.\n     */\n    getIsPossibleGoBack(): boolean;\n    /**\n     * Returns whether developer tools can be opened.\n     *\n     * This method retrieves the value of `isPossibleOpenDevTool` from `customOption`.\n     *\n     * @returns `true` if developer tools can be opened, otherwise `false`.\n     */\n    getIsPossibleOpenDevTool(): boolean;\n    \n    //====================================================================================\n    //option data\n    //====================================================================================\n    /**\n     * Sets the function used to convert special values before they are inserted into the `DataModel`.\n     *\n     * This method updates the `convertValue` property in `customOption`, \n     * allowing developers to define a custom transformation for specific objects like `Date` \n     * before they are stored in a `DataModel`. By default, values are inserted as-is.\n     *\n     * - The new function will be applied globally to all `DataModel` insertions.\n     * - Default behavior: Returns the input value unchanged.\n     * - Example use case: Formatting `Date` objects before storage.\n     *\n     * ## Related Property\n     * - **`convertValue`**: Defines a function for transforming special values.\n     *   - Default: Returns the value unchanged.\n     *   - Used in `DataModel._deepCopy()` to handle non-plain objects.\n     *\n     * ## Example Usage:\n     * ```typescript\n     * setConvertValue(function(value) {\n     *     if (value instanceof Date) {\n     *         let year = value.getFullYear();\n     *         let month = ('0' + (value.getMonth() + 1)).slice(-2);\n     *         let day = ('0' + value.getDate()).slice(-2);\n     *         let hour = ('0' + value.getHours()).slice(-2);\n     *         let minute = ('0' + value.getMinutes()).slice(-2);\n     *         let second = ('0' + value.getSeconds()).slice(-2);\n     *         return `${year}-${month}-${day} ${hour}:${minute}:${second}`;\n     *     }\n     *     return value;\n     * });\n     * ```\n     *\n     * ## Notes:\n     * 1. Special values not processed by `convertValue` are stored in the `DataModel` as references.\n     *    Changes to the original object will also reflect in the `DataModel`.\n     * 2. Ensure the function returns the original value for all cases not explicitly handled.\n     *    This prevents unexpected `undefined` values in the `DataModel`.\n     *\n     * @param func The function used to transform values before they are stored in `DataModel`.\n     */\n    setConvertValue(func: ConvertValue): void;\n\n    //====================================================================================\n    //option link\n    //====================================================================================\n    /**\n     * Sets the default protocol for API communication.\n     *\n     * This method updates the `protocol` property in `customOption`, \n     * which is used throughout the `hisondev` solution to construct request URLs.\n     *\n     * - The new protocol will be applied globally to all API requests.\n     * - Default value: `'http://'`\n     * - Example usage: `setProtocol(\"https://\");` (Switches API communication to HTTPS)\n     *\n     * ## Related Property\n     * - **`protocol`**: Defines the default protocol for API requests.\n     *   - Default: `'http://'`\n     *   - Used in `ApiLink` to construct full request URLs.\n     *\n     * @param str The new protocol string (e.g., `'http://'` or `'https://'`).\n     */\n    setProtocol(str: string): void;\n    /**\n     * Sets the default domain for API requests.\n     *\n     * This method updates the `domain` property in `customOption`, \n     * which is used throughout the `hisondev` solution to construct request URLs.\n     *\n     * - The new domain will be applied globally to all API requests.\n     * - Default value: `'localhost:8080'`\n     * - Example usage: `setDomain(\"api.example.com\");` (Changes the API domain to `api.example.com`)\n     *\n     * ## Related Property\n     * - **`domain`**: Defines the default domain for API requests.\n     *   - Default: `'localhost:8080'`\n     *   - Used in `ApiLink` to construct full request URLs.\n     *\n     * @param str The new domain string (e.g., `'api.example.com'` or `'192.168.1.100:3000'`).\n     */\n    setDomain(str: string): void;\n    /**\n     * Sets the default controller path for API requests.\n     *\n     * This method updates the `controllerPath` property in `customOption`, \n     * which is used throughout the `hisondev` solution to construct request URLs.\n     *\n     * - The new controller path will be applied globally to all API requests.\n     * - Default value: `'/hison-api-link'`\n     * - Example usage: `setControllerPath(\"/api/v1\");` (Changes the API path to `/api/v1`)\n     *\n     * ## Related Property\n     * - **`controllerPath`**: Defines the default API controller path.\n     *   - Default: `'/hison-api-link'`\n     *   - Used in `ApiLink` to construct full request URLs.\n     *\n     * @param str The new controller path string (e.g., `'/api'`).\n     */\n    setControllerPath(str: string): void;\n    /**\n     * Sets the default timeout duration for API requests.\n     *\n     * This method updates the `timeout` property in `customOption`, \n     * which determines the maximum time (in milliseconds) an API request can take before being aborted.\n     *\n     * - The new timeout will be applied globally to all API requests.\n     * - Default value: `10000` (10 seconds)\n     * - Example usage: `setTimeout(5000);` (Sets the timeout to 5 seconds)\n     *\n     * ## Related Property\n     * - **`timeout`**: Defines the request timeout duration in milliseconds.\n     *   - Default: `10000`\n     *\n     * @param num The new timeout duration in milliseconds.\n     */\n    setTimeout(num: number): void;\n    /**\n     * Sets the default protocol for WebSocket communication.\n     *\n     * This method updates the `webSocketProtocol` property in `customOption`, \n     * which is used throughout the `hisondev` solution to establish WebSocket connections.\n     *\n     * - The new protocol will be applied globally to all WebSocket connections.\n     * - Default value: `'ws://'`\n     * - Example usage: `setWebSocketProtocol(\"wss://\");` (Switches WebSocket communication to a secure protocol)\n     *\n     * ## Related Property\n     * - **`webSocketProtocol`**: Defines the default protocol for WebSocket connections.\n     *   - Default: `'ws://'`\n     *   - Used in `ApiLink` when initializing WebSocket communication.\n     *\n     * @param str The new WebSocket protocol string (e.g., `'ws://'` or `'wss://'`).\n     */\n    setWebSocketProtocol(str: string): void;\n    /**\n     * Sets the default WebSocket endpoint for real-time communication.\n     *\n     * This method updates the `webSocketEndPoint` property in `customOption`, \n     * which is used throughout the `hisondev` solution to establish WebSocket connections.\n     *\n     * - The new endpoint will be applied globally to all WebSocket connections.\n     * - Default value: `'hison-websocket-endpoint'`\n     * - Example usage: `setWebSocketEndPoint(\"/ws/data-stream\");` (Changes the WebSocket endpoint)\n     *\n     * ## Related Property\n     * - **`webSocketEndPoint`**: Defines the default WebSocket endpoint for API communication.\n     *   - Default: `'hison-websocket-endpoint'`\n     *   - Used in `ApiLink` when establishing WebSocket connections.\n     *\n     * @param str The new WebSocket endpoint string (e.g., `'/ws/data-stream'` or `'/ws/notifications'`).\n     */\n    setWebSocketEndPoint(str: string): void;\n    /**\n     * Sets the caching limit for stored API responses.\n     *\n     * This method updates the `cachingLimit` property in `customOption`, \n     * which determines the maximum number of cached API responses before older ones are removed.\n     *\n     * - The new caching limit will be applied globally to all API request caching.\n     * - Default value: `10`\n     * - Example usage: `setCachingLimit(20);` (Increases the caching limit to 20 responses)\n     *\n     * ## Related Property\n     * - **`cachingLimit`**: Defines the maximum number of cached API responses.\n     *   - Default: `10`\n     *\n     * @param num The new caching limit.\n     */\n    setCachingLimit(num: number): void;\n    /**\n     * Returns the currently set default protocol for API communication.\n     *\n     * This method retrieves the value of `protocol` from `customOption`.\n     *\n     * @returns The current protocol string (e.g., `'http://'` or `'https://'`).\n     */\n    getProtocol(): string;\n    /**\n     * Returns the currently set default domain for API requests.\n     *\n     * This method retrieves the value of `domain` from `customOption`.\n     *\n     * @returns The current domain string.\n     */\n    getDomain(): string;\n    /**\n     * Returns the currently set default controller path for API requests.\n     *\n     * This method retrieves the value of `controllerPath` from `customOption`.\n     *\n     * @returns The current controller path string.\n     */\n    getControllerPath(): string;\n    /**\n     * Returns the currently set timeout duration for API requests.\n     *\n     * This method retrieves the value of `timeout` from `customOption`.\n     *\n     * @returns The current timeout duration in milliseconds.\n     */\n    getTimeout(): number;\n    /**\n     * Returns the currently set default protocol for WebSocket communication.\n     *\n     * This method retrieves the value of `webSocketProtocol` from `customOption`.\n     *\n     * @returns The current WebSocket protocol string (e.g., `'ws://'` or `'wss://'`).\n     */\n    getWebSocketProtocol(): string;\n    /**\n     * Returns the currently set default WebSocket endpoint.\n     *\n     * This method retrieves the value of `webSocketEndPoint` from `customOption`.\n     *\n     * @returns The current WebSocket endpoint string.\n     */\n    getWebSocketEndPoint(): string;\n    /**\n     * Returns the currently set caching limit for stored API responses.\n     *\n     * This method retrieves the value of `cachingLimit` from `customOption`.\n     *\n     * @returns The maximum number of cached API responses.\n     */\n    getCachingLimit(): number;\n    /**\n     * Sets the hook function that executes before making a `GET` request.\n     *\n     * This method updates the `beforeGetRequst` property in `customOption`, \n     * allowing developers to intercept or modify `GET` requests before they are sent.\n     *\n     * - If the function returns `false`, the request will be canceled.\n     * - The new function will be applied globally to all `GET` requests.\n     * - Default behavior: Returns `true`, allowing the request to proceed.\n     *\n     * ## Related Property\n     * - **`beforeGetRequst`**: A hook function executed before a `GET` request.\n     *   - Default: Returns `true`\n     *   - Used in `ApiGet.call()` to determine if a request should proceed.\n     *\n     * ## Example Usage:\n     * ```typescript\n     * setBeforeGetRequst((resourcePath, options) => {\n     *     console.log(\"GET request intercepted:\", resourcePath);\n     *     return resourcePath.startsWith(\"/secure/\") ? false : true;\n     * });\n     * ```\n     *\n     * @param func A function to execute before a `GET` request. Returning `false` cancels the request.\n     */\n    setBeforeGetRequst(func: BeforeGetRequst): void;\n    /**\n     * Sets the hook function that executes before making a `POST` request.\n     *\n     * This method updates the `beforePostRequst` property in `customOption`, \n     * allowing developers to intercept or modify `POST` requests before they are sent.\n     *\n     * - If the function returns `false`, the request will be canceled.\n     * - The new function will be applied globally to all `POST` requests.\n     * - Default behavior: Returns `true`, allowing the request to proceed.\n     *\n     * ## Related Property\n     * - **`beforePostRequst`**: A hook function executed before a `POST` request.\n     *   - Default: Returns `true`\n     *   - Used in `ApiPost.call()` to determine if a request should proceed.\n     *\n     * ## Example Usage:\n     * ```typescript\n     * setBeforePostRequst((requestDw, options) => {\n     *     console.log(\"POST request intercepted:\", requestDw);\n     *     return requestDw.hasOwnProperty(\"secureData\") ? false : true;\n     * });\n     * ```\n     *\n     * @param func A function to execute before a `POST` request. Returning `false` cancels the request.\n     */\n    setBeforePostRequst(func: BeforePostRequst): void;\n    /**\n     * Sets the hook function that executes before making a `PUT` request.\n     *\n     * This method updates the `beforePutRequst` property in `customOption`, \n     * allowing developers to intercept or modify `PUT` requests before they are sent.\n     *\n     * - If the function returns `false`, the request will be canceled.\n     * - The new function will be applied globally to all `PUT` requests.\n     * - Default behavior: Returns `true`, allowing the request to proceed.\n     *\n     * ## Related Property\n     * - **`beforePutRequst`**: A hook function executed before a `PUT` request.\n     *   - Default: Returns `true`\n     *   - Used in `ApiPut.call()` to determine if a request should proceed.\n     *\n     * ## Example Usage:\n     * ```typescript\n     * setBeforePutRequst((requestDw, options) => {\n     *     console.log(\"PUT request intercepted:\", requestDw);\n     *     return requestDw.hasOwnProperty(\"readOnly\") ? false : true;\n     * });\n     * ```\n     *\n     * @param func A function to execute before a `PUT` request. Returning `false` cancels the request.\n     */\n    setBeforePutRequst(func: BeforePutRequst): void;\n    /**\n     * Sets the hook function that executes before making a `PATCH` request.\n     *\n     * This method updates the `beforePatchRequst` property in `customOption`, \n     * allowing developers to intercept or modify `PATCH` requests before they are sent.\n     *\n     * - If the function returns `false`, the request will be canceled.\n     * - The new function will be applied globally to all `PATCH` requests.\n     * - Default behavior: Returns `true`, allowing the request to proceed.\n     *\n     * ## Related Property\n     * - **`beforePatchRequst`**: A hook function executed before a `PATCH` request.\n     *   - Default: Returns `true`\n     *   - Used in `ApiPatch.call()` to determine if a request should proceed.\n     *\n     * ## Example Usage:\n     * ```typescript\n     * setBeforePatchRequst((requestDw, options) => {\n     *     console.log(\"PATCH request intercepted:\", requestDw);\n     *     return requestDw.hasOwnProperty(\"lockedField\") ? false : true;\n     * });\n     * ```\n     *\n     * @param func A function to execute before a `PATCH` request. Returning `false` cancels the request.\n     */\n    setBeforePatchRequst(func: BeforePatchRequst): void;\n    /**\n     * Sets the hook function that executes before making a `DELETE` request.\n     *\n     * This method updates the `beforeDeleteRequst` property in `customOption`, \n     * allowing developers to intercept or modify `DELETE` requests before they are sent.\n     *\n     * - If the function returns `false`, the request will be canceled.\n     * - The new function will be applied globally to all `DELETE` requests.\n     * - Default behavior: Returns `true`, allowing the request to proceed.\n     *\n     * ## Related Property\n     * - **`beforeDeleteRequst`**: A hook function executed before a `DELETE` request.\n     *   - Default: Returns `true`\n     *   - Used in `ApiDelete.call()` to determine if a request should proceed.\n     *\n     * ## Example Usage:\n     * ```typescript\n     * setBeforeDeleteRequst((requestDw, options) => {\n     *     console.log(\"DELETE request intercepted:\", requestDw);\n     *     return requestDw.hasOwnProperty(\"protected\") ? false : true;\n     * });\n     * ```\n     *\n     * @param func A function to execute before a `DELETE` request. Returning `false` cancels the request.\n     */\n    setBeforeDeleteRequst(func: BeforeDeleteRequst): void;\n    /**\n     * Sets the function that intercepts and processes API responses before returning them to the caller.\n     *\n     * This method updates the `interceptApiResult` property in `customOption`, \n     * allowing developers to handle API responses globally before they are processed.\n     *\n     * - If the function returns `false`, the response will be ignored.\n     * - The new function will be applied globally to all API responses.\n     * - Default behavior: Returns `true`, allowing the response to be processed normally.\n     *\n     * ## Related Property\n     * - **`interceptApiResult`**: A hook function executed after receiving an API response.\n     *   - Default: Returns `true`\n     *   - Used in `ApiLink._request()` to determine if the response should be processed.\n     *\n     * ## Example Usage:\n     * ```typescript\n     * setInterceptApiResult((result, response) => {\n     *     console.log(\"API response intercepted:\", result);\n     *     return response.status === 200 ? true : false;\n     * });\n     * ```\n     *\n     * @param func A function to execute after receiving an API response. Returning `false` cancels further processing.\n     */\n    setInterceptApiResult(func: InterceptApiResult): void;\n    /**\n     * Sets the function that intercepts and processes API errors before returning them to the caller.\n     *\n     * This method updates the `interceptApiError` property in `customOption`, \n     * allowing developers to handle API errors globally before they are processed.\n     *\n     * - If the function returns `false`, the error will be ignored.\n     * - The new function will be applied globally to all API error responses.\n     * - Default behavior: Returns `true`, allowing the error to be processed normally.\n     *\n     * ## Related Property\n     * - **`interceptApiError`**: A hook function executed when an API request encounters an error.\n     *   - Default: Returns `true`\n     *   - Used in `ApiLink._request()` to determine if the error should be processed.\n     *\n     * ## Example Usage:\n     * ```typescript\n     * setInterceptApiError((error) => {\n     *     console.error(\"API error intercepted:\", error);\n     *     return error.message.includes(\"timeout\") ? false : true;\n     * });\n     * ```\n     *\n     * @param func A function to execute when an API error occurs. Returning `false` cancels further error handling.\n     */\n    setInterceptApiError(func: InterceptApiError): void;\n\n    //====================================================================================\n    //utils\n    //====================================================================================\n    /**\n     * Provides a collection of utility functions for validation, formatting, and data manipulation within `Hison`.\n     *\n     * The `utils` module includes a wide range of helper functions designed to simplify working with strings, numbers,\n     * dates, and structured data. Additionally, it integrates with `CustomOption`, allowing developers to customize\n     * key configurations such as date formats, numeric precision, and byte encoding rules.\n     *\n     * ---\n     * ## Core Features & Functionality\n     *\n     * ### 1. **Configurable Utility Behaviors**\n     * - Many utility functions reference properties in `CustomOption`, which can be modified using `Hison`'s `set` methods.\n     * - Example: `getCutByteLength()` uses `customOption.GREATER_0XFFFF_BYTE`, which can be adjusted via:\n     *   ```typescript\n     *   hison.setCharByteGreater65535(5);\n     *   ```\n     * - This approach ensures adaptability to different encoding formats (e.g., UTF-8, UTF-16, UTF-32).\n     *\n     * ### 2. **String Validation & Manipulation**\n     * - **Character Type Checks**: `isAlpha()`, `isNumber()`, `isEmail()`, `isURL()` validate string content.\n     * - **String Formatting**: `getLpad()`, `getRpad()`, `getReplaceAll()` enable flexible formatting.\n     * - **Encoding & Decoding**: Supports `Base64` operations with `getEncodeBase64()` and `getDecodeBase64()`.\n     *\n     * ### 3. **Numeric Operations**\n     * - **Rounding & Truncation**: Functions like `getCeil()`, `getFloor()`, `getRound()`, and `getTrunc()` offer fine-grained control.\n     * - **Number Formatting**: `getNumberFormat()` applies formatting rules, which can be adjusted using:\n     *   ```typescript\n     *   hison.setNumberFormat(\"#,###.00\");\n     *   ```\n     * - **Type Conversion**: `getToNumber()`, `getToFloat()`, `getToInteger()` ensure safe and predictable data transformation.\n     *\n     * ### 4. **Date & Time Processing**\n     * - **Parsing & Formatting**: Converts date/time strings to structured objects (`getDateObject()`, `getTimeObject()`).\n     * - **Date Arithmetic**: Supports adding and subtracting time values (`addDate()`, `getDateDiff()`).\n     * - **System Date/Time Retrieval**: Methods like `getSysDate()`, `getSysYear()`, and `getSysDayOfWeek()` return system values.\n     * - **Customizable Formats**: Date and time formats are configurable via:\n     *   ```typescript\n     *   hison.setDateFormat(\"MM/dd/yyyy\");\n     *   hison.setTimeFormat(\"HH:mm:ss\");\n     *   ```\n     *\n     * ### 5. **Data Structure Handling**\n     * - **Object & Array Validation**: `isArray()`, `isObject()`, and `deepCopyObject()` facilitate structured data manipulation.\n     * - **File Operations**: Extract metadata with `getFileExtension()` and `getFileName()`.\n     *\n     * ---\n     * ## Integration with `CustomOption`\n     * Many methods in `hison.utils` utilize configurable properties from `CustomOption.utils`. These properties can be modified\n     * using `Hison`'s setter methods to accommodate different project requirements.\n     *\n     * ### Example: Modifying Byte Length for Encoding\n     * - The default encoding size for characters is determined by:\n     *   - `LESSOREQ_0X7FF_BYTE` (default: `2`)\n     *   - `LESSOREQ_0XFFFF_BYTE` (default: `3`)\n     *   - `GREATER_0XFFFF_BYTE` (default: `4`)\n     * - These values impact functions like `getByteLength()` and `getCutByteLength()`.\n     * - Developers can modify these settings as follows:\n     *   ```typescript\n     *   hison.setCharByteLess2047(3);\n     *   hison.setCharByteLess65535(4);\n     *   hison.setCharByteGreater65535(5);\n     *   ```\n     *\n     * ---\n     * ## Related Utility Methods\n     * - `hison.utils.isAlpha(str: string): boolean` → Checks if a string contains only alphabetic characters.\n     * - `hison.utils.getDateWithFormat(datetime: DateTimeObject | string, format: string): string` → Formats a date.\n     * - `hison.utils.getByteLength(str: string): number` → Computes byte length using configurable encoding settings.\n     * - `hison.utils.getRound(num: number, precision: number): number` → Rounds a number to a specified precision.\n     *\n     * @example\n     * // Validate a string\n     * hison.utils.isNumber(\"12345\"); // true\n     *\n     * // Format a date using a custom format\n     * hison.setDateFormat(\"MM/dd/yyyy\");\n     * hison.utils.getDateWithFormat(\"2025-02-05\", \"MM/dd/yyyy\"); // \"02/05/2025\"\n     *\n     * // Change default encoding settings\n     * hison.setCharByteGreater65535(5);\n     * console.log(hison.utils.getByteLength(\"𐍈\")); // Uses updated byte length\n     */\n    utils: {\n        /**\n         * Checks if the given string contains only alphabetic characters (A-Z, a-z).\n         *\n         * - Returns `true` if the string consists solely of alphabetic characters.\n         * - Returns `false` if the string contains numbers, symbols, or is empty.\n         *\n         * @param str The string to be checked.\n         * @returns `true` if the string contains only alphabetic characters, otherwise `false`.\n         *\n         * @example\n         * isAlpha(\"Hello\"); // true\n         * isAlpha(\"Hello123\"); // false\n         * isAlpha(\"!@#\"); // false\n         */\n        isAlpha(str: string): boolean\n        /**\n         * Checks if the given string contains only alphabetic characters (A-Z, a-z) and numbers (0-9).\n         *\n         * - Returns `true` if the string consists solely of alphabetic characters and/or numbers.\n         * - Returns `false` if the string contains symbols or is empty.\n         *\n         * @param str The string to be checked.\n         * @returns `true` if the string contains only alphabetic characters and numbers, otherwise `false`.\n         *\n         * @example\n         * isAlphaNumber(\"Hello123\"); // true\n         * isAlphaNumber(\"Hello!\"); // false\n         * isAlphaNumber(\"123\"); // true\n         */\n        isAlphaNumber(str: string): boolean\n        /**\n         * Checks if the given string contains only numeric characters (0-9).\n         *\n         * - Returns `true` if the string consists solely of numbers.\n         * - Returns `false` if the string contains letters, symbols, or is empty.\n         *\n         * @param str The string to be checked.\n         * @returns `true` if the string contains only numeric characters, otherwise `false`.\n         *\n         * @example\n         * isNumber(\"123456\"); // true\n         * isNumber(\"123a\"); // false\n         * isNumber(\"!@#\"); // false\n         */\n        isNumber(str: string): boolean\n        /**\n         * Checks if the given string contains only numeric characters (0-9) and symbols.\n         *\n         * - Returns `true` if the string consists solely of numbers and/or symbols.\n         * - Returns `false` if the string contains alphabetic characters or is empty.\n         *\n         * @param str The string to be checked.\n         * @returns `true` if the string contains only numeric characters and symbols, otherwise `false`.\n         *\n         * @example\n         * isNumberSymbols(\"123!@#\"); // true\n         * isNumberSymbols(\"123ABC\"); // false\n         * isNumberSymbols(\"!@#$%^\"); // true\n         */\n        isNumberSymbols(str: string): boolean\n        /**\n         * Checks if the given string contains any symbols.\n         *\n         * - Returns `true` if the string contains at least one symbol.\n         * - Returns `false` if the string has only alphanumeric characters or is empty.\n         *\n         * @param str The string to be checked.\n         * @returns `true` if the string contains symbols, otherwise `false`.\n         *\n         * @example\n         * isIncludeSymbols(\"Hello!\"); // true\n         * isIncludeSymbols(\"123\"); // false\n         * isIncludeSymbols(\"password@123\"); // true\n         */\n        isIncludeSymbols(str: string): boolean\n        /**\n         * Checks if the given string contains only lowercase alphabetic characters (a-z).\n         *\n         * - Returns `true` if the string consists solely of lowercase letters.\n         * - Returns `false` if the string contains uppercase letters, numbers, symbols, or is empty.\n         *\n         * @param str The string to be checked.\n         * @returns `true` if the string contains only lowercase alphabetic characters, otherwise `false`.\n         *\n         * @example\n         * isLowerAlpha(\"hello\"); // true\n         * isLowerAlpha(\"Hello\"); // false\n         * isLowerAlpha(\"hello123\"); // false\n         */\n        isLowerAlpha(str: string): boolean\n        /**\n         * Checks if the given string contains only lowercase alphabetic characters (a-z) and numbers (0-9).\n         *\n         * - Returns `true` if the string consists solely of lowercase letters and/or numbers.\n         * - Returns `false` if the string contains uppercase letters, symbols, or is empty.\n         *\n         * @param str The string to be checked.\n         * @returns `true` if the string contains only lowercase letters and numbers, otherwise `false`.\n         *\n         * @example\n         * isLowerAlphaAndNumber(\"hello123\"); // true\n         * isLowerAlphaAndNumber(\"Hello123\"); // false\n         * isLowerAlphaAndNumber(\"hello!\"); // false\n         */\n        isLowerAlphaAndNumber(str: string): boolean\n        /**\n         * Checks if the given string contains only uppercase alphabetic characters (A-Z).\n         *\n         * - Returns `true` if the string consists solely of uppercase letters.\n         * - Returns `false` if the string contains lowercase letters, numbers, symbols, or is empty.\n         *\n         * @param str The string to be checked.\n         * @returns `true` if the string contains only uppercase alphabetic characters, otherwise `false`.\n         *\n         * @example\n         * isUpperAlpha(\"HELLO\"); // true\n         * isUpperAlpha(\"Hello\"); // false\n         * isUpperAlpha(\"HELLO123\"); // false\n         */\n        isUpperAlpha(str: string): boolean\n        /**\n         * Checks if the given string contains only uppercase alphabetic characters (A-Z) and numbers (0-9).\n         *\n         * - Returns `true` if the string consists solely of uppercase letters and/or numbers.\n         * - Returns `false` if the string contains lowercase letters, symbols, or is empty.\n         *\n         * @param str The string to be checked.\n         * @returns `true` if the string contains only uppercase letters and numbers, otherwise `false`.\n         *\n         * @example\n         * isUpperAlphaNumber(\"HELLO123\"); // true\n         * isUpperAlphaNumber(\"Hello123\"); // false\n         * isUpperAlphaNumber(\"HELLO!\"); // false\n         */\n        isUpperAlphaNumber(str: string): boolean\n        /**\n         * Checks if the given value is a numeric value.\n         *\n         * - Returns `true` if the value is a finite number.\n         * - Returns `false` if the value is `NaN`, `Infinity`, or not a number.\n         *\n         * @param num The value to be checked.\n         * @returns `true` if the value is numeric, otherwise `false`.\n         *\n         * @example\n         * isNumeric(123); // true\n         * isNumeric(\"123\"); // true\n         * isNumeric(\"abc\"); // false\n         * isNumeric(Infinity); // false\n         * isNumeric(NaN); // false\n         */\n        isNumeric(num: any): boolean;\n        /**\n         * Checks if the given value is an integer.\n         *\n         * - Returns `true` if the value is a finite integer.\n         * - Returns `false` if the value is a decimal, `NaN`, `Infinity`, or not a number.\n         *\n         * @param num The value to be checked.\n         * @returns `true` if the value is an integer, otherwise `false`.\n         *\n         * @example\n         * isInteger(10); // true\n         * isInteger(\"10\"); // true\n         * isInteger(10.5); // false\n         * isInteger(\"abc\"); // false\n         * isInteger(Infinity); // false\n         */\n        isInteger(num: any): boolean;\n        /**\n         * Checks if the given value is a positive integer.\n         *\n         * - Returns `true` if the value is a finite integer greater than zero.\n         * - Returns `false` if the value is zero, a negative number, a decimal, `NaN`, `Infinity`, or not a number.\n         *\n         * @param num The value to be checked.\n         * @returns `true` if the value is a positive integer, otherwise `false`.\n         *\n         * @example\n         * isPositiveInteger(10); // true\n         * isPositiveInteger(\"10\"); // true\n         * isPositiveInteger(0); // false\n         * isPositiveInteger(-5); // false\n         * isPositiveInteger(10.5); // false\n         */\n        isPositiveInteger(num: any): boolean;\n        /**\n         * Checks if the given value is a negative integer.\n         *\n         * - Returns `true` if the value is a finite integer less than zero.\n         * - Returns `false` if the value is zero, a positive number, a decimal, `NaN`, `Infinity`, or not a number.\n         *\n         * @param num The value to be checked.\n         * @returns `true` if the value is a negative integer, otherwise `false`.\n         *\n         * @example\n         * isNegativeInteger(-10); // true\n         * isNegativeInteger(\"-10\"); // true\n         * isNegativeInteger(0); // false\n         * isNegativeInteger(5); // false\n         * isNegativeInteger(-10.5); // false\n         */\n        isNegativeInteger(num: any): boolean;\n        /**\n         * Checks if the given value is an array.\n         *\n         * - Returns `true` if the value is an array.\n         * - Returns `false` if the value is `null`, `undefined`, an object, or any other data type.\n         *\n         * @param arr The value to be checked.\n         * @returns `true` if the value is an array, otherwise `false`.\n         *\n         * @example\n         * isArray([1, 2, 3]); // true\n         * isArray(\"Hello\"); // false\n         * isArray({ key: \"value\" }); // false\n         * isArray(null); // false\n         */\n        isArray(arr: any): boolean;\n        /**\n         * Checks if the given value is a plain object.\n         *\n         * - Returns `true` if the value is a non-null object and not an array.\n         * - Returns `false` if the value is `null`, an array, or any other data type.\n         *\n         * @param obj The value to be checked.\n         * @returns `true` if the value is a plain object, otherwise `false`.\n         *\n         * @example\n         * isObject({ key: \"value\" }); // true\n         * isObject([1, 2, 3]); // false\n         * isObject(null); // false\n         * isObject(\"Hello\"); // false\n         */\n        isObject(obj: any): boolean;\n        /**\n         * Checks if the given value is a valid date.\n         *\n         * - Accepts a `DateObject` or a string representation of a date.\n         * - Returns `true` if the date is valid based on its year, month, and day.\n         * - Returns `false` if the date is improperly formatted or does not exist.\n         *\n         * @param date The value to be checked (as a `DateObject` or string).\n         * @returns `true` if the value is a valid date, otherwise `false`.\n         *\n         * @example\n         * isDate(\"2024-02-29\"); // true (valid leap year date)\n         * isDate(\"2023-02-29\"); // false (February 29 does not exist in 2023)\n         * isDate({ y: 2023, M: 12, d: 31 }); // true\n         * isDate(\"invalid-date\"); // false\n         */\n        isDate(date: DateObject | string): boolean;\n        /**\n         * Checks if the given value is a valid time.\n         *\n         * - Accepts a `TimeObject` or a string representation of a time.\n         * - Returns `true` if the time consists of valid hours, minutes, and seconds.\n         * - Returns `false` if any part of the time is invalid or improperly formatted.\n         *\n         * @param time The value to be checked (as a `TimeObject` or string).\n         * @returns `true` if the value is a valid time, otherwise `false`.\n         *\n         * @example\n         * isTime(\"14:30:59\"); // true\n         * isTime({ h: 23, m: 59, s: 59 }); // true\n         * isTime(\"25:00:00\"); // false (invalid hour)\n         * isTime(\"12:60:00\"); // false (invalid minute)\n         * isTime(\"12:30:61\"); // false (invalid second)\n         */\n        isTime(time: TimeObject | string): boolean;\n        /**\n         * Checks if the given value is a valid datetime.\n         *\n         * - Accepts a `DateTimeObject` or a string representation of a datetime.\n         * - Returns `true` if both the date and time components are valid.\n         * - Returns `false` if either the date or time is invalid or improperly formatted.\n         *\n         * @param datetime The value to be checked (as a `DateTimeObject` or string).\n         * @returns `true` if the value is a valid datetime, otherwise `false`.\n         *\n         * @example\n         * isDatetime(\"2024-02-29 14:30:59\"); // true\n         * isDatetime({ y: 2023, M: 12, d: 31, h: 23, m: 59, s: 59 }); // true\n         * isDatetime(\"2023-02-29 12:00:00\"); // false (invalid date)\n         * isDatetime(\"2024-02-28 25:00:00\"); // false (invalid time)\n         */\n        isDatetime(datetime: DateTimeObject | string): boolean;\n        /**\n         * Checks if the given string is a valid email address.\n         *\n         * - Returns `true` if the string follows the standard email format.\n         * - Returns `false` if the string does not match the email pattern.\n         *\n         * @param str The string to be checked.\n         * @returns `true` if the string is a valid email address, otherwise `false`.\n         *\n         * @example\n         * isEmail(\"user@example.com\"); // true\n         * isEmail(\"user.name@domain.co\"); // true\n         * isEmail(\"user@domain\"); // false (missing top-level domain)\n         * isEmail(\"invalid-email\"); // false\n         */\n        isEmail(str: string): boolean;\n        /**\n         * Checks if the given string is a valid URL.\n         *\n         * - Returns `true` if the string follows the standard URL format.\n         * - Returns `false` if the string does not match the URL pattern.\n         *\n         * @param urlStr The string to be checked.\n         * @returns `true` if the string is a valid URL, otherwise `false`.\n         *\n         * @example\n         * isURL(\"https://example.com\"); // true\n         * isURL(\"ftp://files.server.com\"); // true\n         * isURL(\"www.example.com\"); // false (missing protocol)\n         * isURL(\"invalid-url\"); // false\n         */\n        isURL(urlStr: string): boolean;\n        /**\n         * Checks if the given string matches the specified mask pattern.\n         *\n         * - A mask defines expected character types at each position:\n         *   - `'A'` expects an uppercase letter (A-Z).\n         *   - `'a'` expects a lowercase letter (a-z).\n         *   - `'9'` expects a numeric digit (0-9).\n         *   - Any other character in the mask must match exactly.\n         * - Returns `true` if the string fully matches the mask pattern.\n         * - Returns `false` if the string does not match the mask or has a different length.\n         *\n         * @param str The string to be validated.\n         * @param mask The mask pattern defining expected character types.\n         * @returns `true` if the string matches the mask pattern, otherwise `false`.\n         *\n         * @example\n         * isValidMask(\"ABC123\", \"AAA999\"); // true\n         * isValidMask(\"abc123\", \"AAA999\"); // false (lowercase letters don't match uppercase mask)\n         * isValidMask(\"abc-123\", \"aaa-999\"); // true\n         * isValidMask(\"abcd123\", \"aaa-999\"); // false (length mismatch)\n         */\n        isValidMask(str: string, mask: string): boolean;\n        /**\n         * Extracts and returns the year, month, and day from a given date.\n         *\n         * - If the input is a `Date` object, it extracts the year, month, and day.\n         * - If the input is a string, it attempts to parse it in formats:\n         *   - `\"YYYY-MM-DD\"`\n         *   - `\"YYYY/MM/DD\"`\n         *   - `\"YYYYMMDD\"`\n         * - If parsing fails, it returns an object with `null` values.\n         *\n         * @param date A `Date` object or a date string in a supported format.\n         * @returns An object containing the year (`y`), month (`M`), and day (`d`).\n         *\n         * @example\n         * getDateObject(\"2024-02-05\"); // { y: 2024, M: 2, d: 5 }\n         * getDateObject(\"20240205\"); // { y: 2024, M: 2, d: 5 }\n         * getDateObject(new Date(2024, 1, 5)); // { y: 2024, M: 2, d: 5 }\n         * getDateObject(\"invalid\"); // { y: null, M: null, d: null }\n         */\n        getDateObject(dateStr: Date | string): DateObject;\n        /**\n         * Extracts and returns the hours, minutes, and seconds from a given time.\n         *\n         * - If the input is a `Date` object, it extracts the hour, minute, and second.\n         * - If the input is a string, it attempts to parse it in formats:\n         *   - `\"HH:MM:SS\"`\n         *   - `\"HHMMSS\"`\n         * - If the input is a datetime string (`\"YYYY-MM-DD HH:MM:SS\"`), it extracts only the time part.\n         * - If parsing fails, it returns an object with `null` values.\n         *\n         * @param time A `Date` object or a time string in a supported format.\n         * @returns An object containing the hours (`h`), minutes (`m`), and seconds (`s`).\n         *\n         * @example\n         * getTimeObject(\"14:30:45\"); // { h: 14, m: 30, s: 45 }\n         * getTimeObject(\"143045\"); // { h: 14, m: 30, s: 45 }\n         * getTimeObject(\"2024-02-05 14:30:45\"); // { h: 14, m: 30, s: 45 }\n         * getTimeObject(new Date(2024, 1, 5, 14, 30, 45)); // { h: 14, m: 30, s: 45 }\n         * getTimeObject(\"invalid\"); // { h: null, m: null, s: null }\n         */\n        getTimeObject(str: Date | string): TimeObject;\n        /**\n         * Extracts and returns the year, month, day, hours, minutes, and seconds from a given datetime.\n         *\n         * - If the input is a `Date` object, it extracts all date and time components.\n         * - If the input is a string, it attempts to parse it in formats:\n         *   - `\"YYYY-MM-DD HH:MM:SS\"`\n         *   - `\"YYYY/MM/DD HH:MM:SS\"`\n         *   - `\"YYYYMMDDHHMMSS\"`\n         * - If the input is a date-only string (`\"YYYY-MM-DD\"`), the time defaults to `00:00:00`.\n         * - If parsing fails, it returns `null`.\n         *\n         * @param datetime A `Date` object or a datetime string in a supported format.\n         * @returns An object containing the year (`y`), month (`M`), day (`d`), hours (`h`), minutes (`m`), and seconds (`s`), or `null` if parsing fails.\n         *\n         * @example\n         * getDatetimeObject(\"2024-02-05 14:30:45\"); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\n         * getDatetimeObject(\"20240205143045\"); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\n         * getDatetimeObject(\"2024-02-05\"); // { y: 2024, M: 2, d: 5, h: 0, m: 0, s: 0 }\n         * getDatetimeObject(new Date(2024, 1, 5, 14, 30, 45)); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\n         * getDatetimeObject(\"invalid\"); // null\n         */\n        getDatetimeObject(datetime: Date | string): DateTimeObject | null;\n        /**\n         * Adds a specified amount of time to a given date or datetime.\n         *\n         * - Accepts a `DateTimeObject`, `DateObject`, or a date string.\n         * - Supports adding years (`'y'`), months (`'M'`), days (`'d'`), hours (`'h'`), minutes (`'m'`), and seconds (`'s'`).\n         * - If `addType` is omitted or invalid, it defaults to adding days.\n         * - If `format` is provided, returns a formatted string; otherwise, returns a `DateTimeObject`.\n         *\n         * @param datetime The original datetime as an object or string.\n         * @param addValue The amount to add (positive or negative).\n         * @param addType The unit of time to add (`'y'`, `'M'`, `'d'`, `'h'`, `'m'`, `'s'`).\n         * @param format Optional format string for the output. default : 'yyyy-MM-dd' or 'yyyy-MM-dd hh:mm:ss'\n         * @returns The updated datetime as an object or formatted string.\n         *\n         * @example\n         * addDate(\"2024-02-05\", 1, \"d\"); // { y: 2024, M: 2, d: 6 }\n         * addDate(\"2024-02-05\", -1, \"M\"); // { y: 2024, M: 1, d: 5 }\n         * addDate(\"2024-02-05 14:30:00\", 2, \"h\"); // { y: 2024, M: 2, d: 5, h: 16, m: 30, s: 0 }\n         * addDate(\"2024-02-05\", 1, \"d\", \"yyyy-MM-dd\"); // \"2024-02-06\"\n         */\n        addDate(datetime: DateTimeObject | string, addValue: string | number, addType?: string, format?: string): DateTimeObject | string;\n        /**\n         * Calculates the difference between two dates or datetimes.\n         *\n         * - Accepts `DateTimeObject`, `DateObject`, or a string representation of a date or datetime.\n         * - If `diffType` is specified, it returns the difference in the given unit:\n         *   - `'y'`: Years\n         *   - `'M'`: Months\n         *   - `'d'`: Days\n         *   - `'h'`: Hours\n         *   - `'m'`: Minutes\n         *   - `'s'`: Seconds\n         * - If `diffType` is omitted or invalid, it defaults to calculating the difference in days.\n         *\n         * @param datetime1 The first date or datetime.\n         * @param datetime2 The second date or datetime.\n         * @param diffType The unit of difference (`'y'`, `'M'`, `'d'`, `'h'`, `'m'`, `'s'`).\n         * @returns The difference between the two dates in the specified unit.\n         *\n         * @example\n         * getDateDiff(\"2024-02-01\", \"2024-03-01\", \"M\"); // 1\n         * getDateDiff(\"2024-02-01\", \"2025-02-01\", \"y\"); // 1\n         * getDateDiff(\"2024-02-01\", \"2024-02-10\", \"d\"); // 9\n         * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 16:30:00\", \"h\"); // 2\n         * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 14:45:00\", \"m\"); // 45\n         * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 14:00:30\", \"s\"); // 30\n         */\n        getDateDiff(datetime1: DateTimeObject | string, datetime2: DateTimeObject | string, diffType?: string): number;\n        /**\n         * Returns the full or abbreviated name of a given month.\n         *\n         * - Accepts a month number (`1-12`) or a string representation of a number.\n         * - If `isFullName` is `true`, it returns the full month name (e.g., `\"January\"`).\n         * - If `isFullName` is `false`, it returns the abbreviated month name (e.g., `\"Jan\"`).\n         * - Throws an error if the input month is outside the valid range (`1-12`).\n         *\n         * @param month The month as a number (`1-12`) or a string representing a number.\n         * @param isFullName Determines whether to return the full name (`true`) or the abbreviated name (`false`) (default: `true`).\n         * @returns The full or abbreviated month name.\n         *\n         * @throws Error if the month is not between `1` and `12`.\n         *\n         * @example\n         * getMonthName(2); // \"February\"\n         * getMonthName(\"3\", false); // \"Mar\"\n         * getMonthName(12, true); // \"December\"\n         * getMonthName(0); // Throws error: \"Month must be between 1 and 12\"\n         */\n        getMonthName(month: number | string, isFullName?: boolean): string;\n        /**\n         * Formats a given date or datetime according to the specified format.\n         *\n         * - Accepts a `DateTimeObject`, `DateObject`, or a string representation of a date/datetime.\n         * - If no format is provided, it defaults to `CustomOption.dateFormat` for dates \n         *   and `CustomOption.datetimeFormat` for datetimes.\n         * - Supports various formats such as:\n         *   - `'yyyy-MM-dd'` → `\"2025-02-05\"`\n         *   - `'yyyy/MM/dd hh:mm:ss'` → `\"2025/02/05 14:30:45\"`\n         *   - `'MMMM dd, yyyy'` → `\"February 5, 2025\"`\n         * - Throws an error if the input date is invalid.\n         *\n         * @param datetime The date or datetime to format.\n         * @param format The desired output format (optional). Default: `'yyyy-MM-dd'` or `'yyyy-MM-dd hh:mm:ss'`\n         * @returns The formatted date/time as a string.\n         *\n         * @throws Error if the provided date is invalid.\n         *\n         * @example\n         * getDateWithFormat(\"2025-02-05\", \"yyyy/MM/dd\"); // \"2025/02/05\"\n         * getDateWithFormat(\"2025-02-05 14:30:45\", \"MMMM dd, yyyy\"); // \"February 5, 2025\"\n         * getDateWithFormat({ y: 2025, M: 2, d: 5 }, \"MM-dd-yyyy\"); // \"02-05-2025\"\n         */\n        getDateWithFormat(datetime: DateTimeObject | DateObject | string, format?: string): string;\n        /**\n         * Returns the day of the week for a given date.\n         *\n         * - Accepts a `DateObject` or a string representation of a date.\n         * - Uses `CustomOption.dayOfWeekFormat` as the default format.\n         * - Supports different formats for output:\n         *   - `'d'` → Numeric day of the week (`0-6`, where `0 = Sunday`).\n         *   - `'dy'` → Abbreviated English name (`\"Sun\", \"Mon\", ..., \"Sat\"`).\n         *   - `'day'` → Full English name (`\"Sunday\", \"Monday\", ..., \"Saturday\"`).\n         *   - `'kdy'` → Abbreviated Korean name (`\"일\", \"월\", ..., \"토\"`).\n         *   - `'kday'` → Full Korean name (`\"일요일\", \"월요일\", ..., \"토요일\"`).\n         * - Throws an error if the input date is invalid.\n         *\n         * @param date The date to evaluate.\n         * @param dayType The format of the output (optional). Default: `'d'`\n         * @returns The day of the week in the specified format.\n         *\n         * @throws Error if the provided date is invalid.\n         *\n         * @example\n         * getDayOfWeek(\"2025-02-05\", \"d\"); // \"3\" (Wednesday)\n         * getDayOfWeek(\"2025-02-05\", \"dy\"); // \"Wed\"\n         * getDayOfWeek(\"2025-02-05\", \"day\"); // \"Wednesday\"\n         * getDayOfWeek(\"2025-02-05\", \"kdy\"); // \"수\"\n         * getDayOfWeek(\"2025-02-05\", \"kday\"); // \"수요일\"\n         */\n        getDayOfWeek(date: DateObject | string, dayType?: string): string;\n        /**\n         * Returns the last day of the month for a given date.\n         *\n         * - Accepts a `DateObject` or a string representation of a date.\n         * - If the input is a `DateObject`, it uses the month and year from the object.\n         * - If the input is a string, it assumes the first day of the given month unless a full date is provided.\n         * - Determines the last day of the specified month by computing the last day of the next month minus one.\n         * - Throws an error if the input date is invalid.\n         *\n         * @param date The date or month to evaluate.\n         * @returns The last day of the month as a number.\n         *\n         * @throws Error if the provided date is invalid.\n         *\n         * @example\n         * getLastDay(\"2025-02\"); // 28 (for February 2025)\n         * getLastDay(\"2024-02\"); // 29 (leap year February)\n         * getLastDay({ y: 2025, M: 5, d: 15 }); // 31 (May has 31 days)\n         * getLastDay(\"2025-07-10\"); // 31 (July has 31 days)\n         */\n        getLastDay(date: DateObject | string): number;\n        /**\n         * Returns the current system year in the specified format.\n         *\n         * - Uses `CustomOption.yearFormat` as the default format.\n         * - Supports the following formats:\n         *   - `'yyyy'` → Full year (`\"2025\"`)\n         *   - `'yy'` → Last two digits of the year (`\"25\"`)\n         * - If an unsupported format is provided, it defaults to `'yyyy'`.\n         *\n         * @param format The desired output format (optional). Default: `'yyyy'`\n         * @returns The current year as a string in the specified format.\n         *\n         * @example\n         * getSysYear(); // \"2025\" (default format)\n         * getSysYear(\"yyyy\"); // \"2025\"\n         * getSysYear(\"yy\"); // \"25\"\n         */\n        getSysYear(format?: string): string;\n        /**\n         * Returns the current system month in the specified format.\n         *\n         * - Uses `CustomOption.monthFormat` as the default format.\n         * - Supports the following formats:\n         *   - `'M'` → Numeric month without leading zero (`\"2\"` for February).\n         *   - `'MM'` → Numeric month with leading zero (`\"02\"` for February).\n         *   - `'MMMM'` → Full month name (`\"February\"`).\n         *   - `'MMM'` → Abbreviated month name (`\"Feb\"`).\n         * - If an unsupported format is provided, it defaults to `'M'`.\n         *\n         * @param format The desired output format (optional). Default: `'M'`\n         * @returns The current month as a string in the specified format.\n         *\n         * @example\n         * getSysMonth(); // \"2\" (default format for February)\n         * getSysMonth(\"MM\"); // \"02\"\n         * getSysMonth(\"MMMM\"); // \"February\"\n         * getSysMonth(\"MMM\"); // \"Feb\"\n         */\n        getSysMonth(format?: string): string;\n        /**\n         * Returns the current system year and month in the specified format.\n         *\n         * - Uses `CustomOption.yearMonthFormat` as the default format.\n         * - Delegates formatting to `getDateWithFormat()` using the first day of the current month.\n         * - Common formats include:\n         *   - `'yyyy-MM'` → `\"2025-02\"`\n         *   - `'yyyy/MM'` → `\"2025/02\"`\n         *   - `'MMMM yyyy'` → `\"February 2025\"`\n         *   - `'MMM yyyy'` → `\"Feb 2025\"`\n         *\n         * @param format The desired output format (optional). Default: `'yyyy-MM'`\n         * @returns The current year and month as a formatted string.\n         *\n         * @example\n         * getSysYearMonth(); // \"2025-02\" (default format for February 2025)\n         * getSysYearMonth(\"yyyy/MM\"); // \"2025/02\"\n         * getSysYearMonth(\"MMMM yyyy\"); // \"February 2025\"\n         * getSysYearMonth(\"MMM yyyy\"); // \"Feb 2025\"\n         */\n        getSysYearMonth(format?: string): string;\n        /**\n         * Returns the current system day of the month in the specified format.\n         *\n         * - Uses `CustomOption.dayFormat` as the default format.\n         * - Supports the following formats:\n         *   - `'d'` → Day without leading zero (`\"5\"` for the 5th day of the month).\n         *   - `'dd'` → Day with leading zero (`\"05\"` for the 5th day of the month).\n         * - If an unsupported format is provided, it defaults to `'d'`.\n         *\n         * @param format The desired output format (optional). Default: `'d'`\n         * @returns The current day of the month as a string in the specified format.\n         *\n         * @example\n         * getSysDay(); // \"5\" (default format for the 5th day)\n         * getSysDay(\"dd\"); // \"05\"\n         */\n        getSysDay(format?: string): string;\n        /**\n         * Returns the current system day of the week in the specified format.\n         *\n         * - Uses `CustomOption.dayOfWeekFormat` as the default format.\n         * - Delegates formatting to `getDayOfWeek()`, which supports:\n         *   - `'d'` → Numeric day of the week (`0-6`, where `0 = Sunday`).\n         *   - `'dy'` → Abbreviated English name (`\"Sun\", \"Mon\", ..., \"Sat\"`).\n         *   - `'day'` → Full English name (`\"Sunday\", \"Monday\", ..., \"Saturday\"`).\n         *   - `'kdy'` → Abbreviated Korean name (`\"일\", \"월\", ..., \"토\"`).\n         *   - `'kday'` → Full Korean name (`\"일요일\", \"월요일\", ..., \"토요일\"`).\n         *\n         * @param format The desired output format (optional). Default: `'d'`\n         * @returns The current day of the week in the specified format.\n         *\n         * @example\n         * getSysDayOfWeek(); // \"3\" (default format, Wednesday)\n         * getSysDayOfWeek(\"dy\"); // \"Wed\"\n         * getSysDayOfWeek(\"day\"); // \"Wednesday\"\n         * getSysDayOfWeek(\"kdy\"); // \"수\"\n         * getSysDayOfWeek(\"kday\"); // \"수요일\"\n         */\n        getSysDayOfWeek(dayType?: string): string;\n        /**\n         * Returns the current system hour in the specified format.\n         *\n         * - Uses `CustomOption.hourFormat` as the default format.\n         * - Supports the following formats:\n         *   - `'h'` → Hour without leading zero (`\"5\"` for 5 AM/PM).\n         *   - `'hh'` → Hour with leading zero (`\"05\"` for 5 AM/PM).\n         * - If an unsupported format is provided, it defaults to `'h'`.\n         *\n         * @param format The desired output format (optional). Default: `'h'`\n         * @returns The current hour as a string in the specified format.\n         *\n         * @example\n         * getSysHour(); // \"5\" (default format)\n         * getSysHour(\"hh\"); // \"05\"\n         */\n        getSysHour(format?: string): string;\n        /**\n         * Returns the current system hour and minute in the specified format.\n         *\n         * - Uses `CustomOption.hourMinuteFormat` as the default format.\n         * - Supports the following formats:\n         *   - `'hhmm'` → Compact format without separators (`\"1430\"` for 2:30 PM).\n         *   - `'hh:mm'` → Standard format with a colon separator (`\"14:30\"` for 2:30 PM).\n         * - If an unsupported format is provided, it defaults to `'hh:mm'`.\n         *\n         * @param format The desired output format (optional). Default: `'hh:mm'`\n         * @returns The current hour and minute as a string in the specified format.\n         *\n         * @example\n         * getSysHourMinute(); // \"14:30\" (default format)\n         * getSysHourMinute(\"hhmm\"); // \"1430\"\n         */\n        getSysHourMinute(format?: string): string;\n        /**\n         * Returns the current system minute in the specified format.\n         *\n         * - Uses `CustomOption.minuteFormat` as the default format.\n         * - Supports the following formats:\n         *   - `'m'` → Minute without leading zero (`\"5\"` for the 5th minute).\n         *   - `'mm'` → Minute with leading zero (`\"05\"` for the 5th minute).\n         * - If an unsupported format is provided, it defaults to `'m'`.\n         *\n         * @param format The desired output format (optional). Default: `'m'`\n         * @returns The current minute as a string in the specified format.\n         *\n         * @example\n         * getSysMinute(); // \"5\" (default format)\n         * getSysMinute(\"mm\"); // \"05\"\n         */\n        getSysMinute(format?: string): string;\n        /**\n         * Returns the current system second in the specified format.\n         *\n         * - Uses `CustomOption.secondFormat` as the default format.\n         * - Supports the following formats:\n         *   - `'s'` → Second without leading zero (`\"5\"` for the 5th second).\n         *   - `'ss'` → Second with leading zero (`\"05\"` for the 5th second).\n         * - If an unsupported format is provided, it defaults to `'s'`.\n         *\n         * @param format The desired output format (optional). Default: `'s'`\n         * @returns The current second as a string in the specified format.\n         *\n         * @example\n         * getSysSecond(); // \"5\" (default format)\n         * getSysSecond(\"ss\"); // \"05\"\n         */\n        getSysSecond(format?: string): string;\n        /**\n         * Returns the current system time in the specified format.\n         *\n         * - Uses `CustomOption.timeFormat` as the default format.\n         * - Supports the following formats:\n         *   - `'hhmmss'` → Compact format without separators (`\"143015\"` for 2:30:15 PM).\n         *   - `'hh:mm:ss'` → Standard format with colons (`\"14:30:15\"` for 2:30:15 PM).\n         * - If an unsupported format is provided, it defaults to `'hh:mm:ss'`.\n         *\n         * @param format The desired output format (optional). Default: `'hh:mm:ss'`\n         * @returns The current time as a string in the specified format.\n         *\n         * @example\n         * getSysTime(); // \"14:30:15\" (default format)\n         * getSysTime(\"hhmmss\"); // \"143015\"\n         */\n        getSysTime(format?: string): string;\n        /**\n         * Returns the current system date and time in the specified format.\n         *\n         * - Uses `CustomOption.datetimeFormat` as the default format.\n         * - Delegates formatting to `getDateWithFormat()`, which supports various formats, including:\n         *   - `'yyyy-MM-dd hh:mm:ss'` → `\"2025-02-05 14:30:15\"`\n         *   - `'yyyy/MM/dd'` → `\"2025/02/05\"`\n         *   - `'MMMM dd, yyyy'` → `\"February 5, 2025\"`\n         * - If no format is specified, it defaults to the full datetime format.\n         *\n         * @param format The desired output format (optional). Default: `'yyyy-MM-dd hh:mm:ss'`\n         * @returns The current date and time as a formatted string.\n         *\n         * @example\n         * getSysDate(); // \"2025-02-05 14:30:15\" (default format)\n         * getSysDate(\"yyyy/MM/dd\"); // \"2025/02/05\"\n         * getSysDate(\"MMMM dd, yyyy\"); // \"February 5, 2025\"\n         */\n        getSysDate(format?: string): string;\n        /**\n         * Rounds a number up to the nearest integer or specified decimal place.\n         *\n         * - If `precision` is `0`, it rounds up to the nearest whole number.\n         * - If `precision` is greater than `0`, it rounds up to the specified number of decimal places.\n         * - If `precision` is less than `0`, it rounds up to the nearest multiple of `10^precision`.\n         *\n         * @param num The number to be rounded up.\n         * @param precision The number of decimal places to retain (default: `0`).\n         * @returns The rounded-up number.\n         *\n         * @example\n         * getCeil(12.34); // 13\n         * getCeil(12.34, 1); // 12.4\n         * getCeil(12.34, 2); // 12.34\n         * getCeil(1250, -2); // 1300\n         */\n        getCeil(num: number, precision?: number): number;\n        /**\n         * Rounds a number down to the nearest integer or specified decimal place.\n         *\n         * - If `precision` is `0`, it rounds down to the nearest whole number.\n         * - If `precision` is greater than `0`, it rounds down to the specified number of decimal places.\n         * - If `precision` is less than `0`, it rounds down to the nearest multiple of `10^precision`.\n         *\n         * @param num The number to be rounded down.\n         * @param precision The number of decimal places to retain (default: `0`).\n         * @returns The rounded-down number.\n         *\n         * @example\n         * getFloor(12.89); // 12\n         * getFloor(12.89, 1); // 12.8\n         * getFloor(12.89, 2); // 12.89\n         * getFloor(1299, -2); // 1200\n         */\n        getFloor(num: number, precision?: number): number;\n        /**\n         * Rounds a number to the nearest integer or specified decimal place.\n         *\n         * - If `precision` is `0`, it rounds to the nearest whole number.\n         * - If `precision` is greater than `0`, it rounds to the specified number of decimal places.\n         * - If `precision` is less than `0`, it rounds to the nearest multiple of `10^precision`.\n         *\n         * @param num The number to be rounded.\n         * @param precision The number of decimal places to retain (default: `0`).\n         * @returns The rounded number.\n         *\n         * @example\n         * getRound(12.49); // 12\n         * getRound(12.5); // 13\n         * getRound(12.345, 2); // 12.35\n         * getRound(1250, -2); // 1300\n         */\n        getRound(num: number, precision?: number): number;\n        /**\n         * Truncates a number to the specified decimal place without rounding.\n         *\n         * - If `precision` is `0`, it removes the decimal part, keeping only the integer.\n         * - If `precision` is greater than `0`, it truncates the number at the specified decimal places.\n         * - If `precision` is less than `0`, it truncates to the nearest multiple of `10^precision`.\n         *\n         * @param num The number to be truncated.\n         * @param precision The number of decimal places to retain (default: `0`).\n         * @returns The truncated number.\n         *\n         * @example\n         * getTrunc(12.89); // 12\n         * getTrunc(12.89, 1); // 12.8\n         * getTrunc(12.89, 2); // 12.89\n         * getTrunc(1299, -2); // 1200\n         */\n        getTrunc(num: number, precision?: number): number;\n        /**\n         * Calculates the byte length of a given string based on character encoding.\n         *\n         * - Uses UTF-8 encoding rules to determine the byte size of each character.\n         * - Character byte sizes are determined as follows:\n         *   - `charCode <= 0x7F` → 1 byte (ASCII characters).\n         *   - `charCode <= 0x7FF` → `CustomOption.LESSOREQ_0X7FF_BYTE` bytes. Default: 2\n         *   - `charCode <= 0xFFFF` → `CustomOption.LESSOREQ_0XFFFF_BYTE` bytes. Default: 3\n         *   - `charCode > 0xFFFF` → `CustomOption.GREATER_0XFFFF_BYTE` bytes. Default: 4\n         *\n         * @param str The input string.\n         * @returns The total byte length of the string.\n         *\n         * @example\n         * getByteLength(\"Hello\"); // 5 (each ASCII character is 1 byte)\n         * getByteLength(\"안녕하세요\"); // 15 (each Korean character is 3 bytes)\n         * getByteLength(\"𐍈\"); // 4 (UTF-16 surrogate pair)\n         */\n        getByteLength(str: string): number;\n        /**\n         * Truncates a string to fit within a specified byte length.\n         *\n         * - Uses UTF-8 encoding rules to calculate byte size.\n         * - Truncates the string at the point where the total byte length exceeds `cutByte`.\n         * - Character byte sizes are determined as follows:\n         *   - `charCode <= 0x7F` → 1 byte (ASCII characters).\n         *   - `charCode <= 0x7FF` → `CustomOption.LESSOREQ_0X7FF_BYTE` bytes.\n         *   - `charCode <= 0xFFFF` → `CustomOption.LESSOREQ_0XFFFF_BYTE` bytes.\n         *   - `charCode > 0xFFFF` → `CustomOption.GREATER_0XFFFF_BYTE` bytes.\n         *\n         * @param str The input string to be truncated.\n         * @param cutByte The maximum allowed byte length.\n         * @returns The truncated string that fits within the given byte length.\n         *\n         * @example\n         * getCutByteLength(\"Hello, World!\", 5); // \"Hello\"\n         * getCutByteLength(\"안녕하세요\", 6); // \"안녕\" (each Korean character is 3 bytes)\n         * getCutByteLength(\"𐍈𐍈𐍈\", 4); // \"𐍈\" (each surrogate pair character is 4 bytes)\n         */\n        getCutByteLength(str: string, cutByte: number): string;\n        /**\n         * Adjusts a string to fit a specified length by evenly distributing spaces between characters.\n         *\n         * - If the string's length is already greater than or equal to `length`, it is returned as is.\n         * - Spaces are distributed as evenly as possible between characters to reach the desired length.\n         * - If the spacing is not evenly divisible, extra spaces are added starting from the left.\n         *\n         * @param str The input string.\n         * @param length The target total length of the formatted string.\n         * @returns A string with evenly distributed spaces to match the specified length.\n         *\n         * @example\n         * getStringLenForm(\"Hi\", 5); // \"H  i\"\n         * getStringLenForm(\"Hello\", 10); // \"H  e  l  l  o\"\n         * getStringLenForm(\"A\", 3); // \"A  \"\n         */\n        getStringLenForm(str: string, length: number): string;\n        /**\n         * Left-pads a string with a specified padding string until it reaches the desired length.\n         *\n         * - If the original string's length is already greater than or equal to `length`, it is returned as is.\n         * - The `padStr` is repeated as needed to fill the remaining space.\n         * - If `padStr` does not evenly divide into the required padding length, it may be truncated.\n         *\n         * @param str The original string.\n         * @param padStr The string used for padding.\n         * @param length The desired total length of the padded string.\n         * @returns The left-padded string.\n         *\n         * @example\n         * getLpad(\"123\", \"0\", 5); // \"00123\"\n         * getLpad(\"abc\", \"-\", 6); // \"---abc\"\n         * getLpad(\"test\", \"XY\", 10); // \"XYXYXYtest\"\n         */\n        getLpad(str: string, padStr: string, length: number): string;\n        /**\n         * Right-pads a string with a specified padding string until it reaches the desired length.\n         *\n         * - If the original string's length is already greater than or equal to `length`, it is truncated to fit.\n         * - The `padStr` is repeated as needed to fill the remaining space.\n         * - If `padStr` does not evenly divide into the required padding length, it may be truncated.\n         *\n         * @param str The original string.\n         * @param padStr The string used for padding.\n         * @param length The desired total length of the padded string.\n         * @returns The right-padded string.\n         *\n         * @example\n         * getRpad(\"123\", \"0\", 5); // \"12300\"\n         * getRpad(\"abc\", \"-\", 6); // \"abc---\"\n         * getRpad(\"test\", \"XY\", 10); // \"testXYXYXY\"\n         */\n        getRpad(str: string, padStr: string, length: number): string;\n        /**\n         * Removes leading and trailing whitespace from a string.\n         *\n         * - Converts the input to a string if it is not already.\n         * - Uses JavaScript's built-in `trim()` method to remove whitespace.\n         *\n         * @param str The input string.\n         * @returns The trimmed string without leading or trailing spaces.\n         *\n         * @example\n         * getTrim(\"  Hello World  \"); // \"Hello World\"\n         * getTrim(\"\\tTest String\\n\"); // \"Test String\"\n         * getTrim(\"   \"); // \"\" (empty string)\n         */\n        getTrim(str: string): string;\n        /**\n         * Replaces all occurrences of a target substring within a string with a specified replacement.\n         *\n         * - Converts all inputs to strings before processing.\n         * - Uses `split()` and `join()` to replace all instances of `targetStr` with `replaceStr`.\n         * - If `replaceStr` is not provided, occurrences of `targetStr` are removed.\n         *\n         * @param str The original string.\n         * @param targetStr The substring to be replaced.\n         * @param replaceStr The string to replace occurrences of `targetStr` (default: `''`).\n         * @returns A new string with all occurrences of `targetStr` replaced.\n         *\n         * @example\n         * getReplaceAll(\"hello world\", \"o\", \"O\"); // \"hellO wOrld\"\n         * getReplaceAll(\"banana\", \"a\", \"\"); // \"bnn\"\n         * getReplaceAll(\"2025-02-05\", \"-\", \"/\"); // \"2025/02/05\"\n         */\n        getReplaceAll(str: string, targetStr: string, replaceStr?: string): string;\n        /**\n         * Formats a number according to a specified format pattern.\n         *\n         * - Uses `CustomOption.numberFormat` as the default format if none is provided.\n         * - Supports various number formatting patterns, including:\n         *   - `\"#,###\"` → `\"1,234\"` (comma-separated thousands).\n         *   - `\"#,##0\"` → `\"1,234\"` (ensures at least one digit).\n         *   - `\".##\"` → `\"0.1\"` (no grouping).\n         *   - `\".00\"` → `\"0.10\"` (ensures at least one digit).\n         * - Supports decimal formatting and percentage notation (`\"%\"`).\n         * - Throws an error if the input is not a valid number or if the format is invalid.\n         *\n         * @param value The number to format.\n         * @param format The desired format pattern (optional). Default: `'#,##0.##'`\n         * @returns The formatted number as a string.\n         *\n         * @throws Error if the input value is not numeric or the format is invalid.\n         *\n         * @example\n         * getNumberFormat(1234); // \"1,234\" (default format)\n         * getNumberFormat(1234.5678, \"#,###.00\"); // \"1,234.56\"\n         * getNumberFormat(0.25, \"#,##0%\"); // \"25%\" (percentage conversion)\n         * getNumberFormat(-1234, \"#,###\"); // \"-1,234\"\n         */\n        getNumberFormat(value: number, format?: string): string;\n        /**\n         * Removes all non-numeric characters from a string, leaving only digits.\n         *\n         * - Converts the input to a string if it is not already.\n         * - Uses a regular expression to remove any character that is not a digit (`0-9`).\n         *\n         * @param str The input string.\n         * @returns A new string containing only numeric characters.\n         *\n         * @example\n         * getRemoveExceptNumbers(\"abc123def456\"); // \"123456\"\n         * getRemoveExceptNumbers(\"Phone: (555) 123-4567\"); // \"5551234567\"\n         * getRemoveExceptNumbers(\"No numbers here!\"); // \"\"\n         */\n        getRemoveExceptNumbers(str: string): string;\n        /**\n         * Removes all numeric characters from a string, leaving only non-numeric characters.\n         *\n         * - Converts the input to a string if it is not already.\n         * - Uses a regular expression to remove any digit (`0-9`).\n         *\n         * @param str The input string.\n         * @returns A new string containing only non-numeric characters.\n         *\n         * @example\n         * getRemoveNumbers(\"abc123def456\"); // \"abcdef\"\n         * getRemoveNumbers(\"Phone: (555) 123-4567\"); // \"Phone: () -\"\n         * getRemoveNumbers(\"123456\"); // \"\" (all numbers removed)\n         */\n        getRemoveNumbers(str: string): string;\n        /**\n         * Reverses the characters in a given string.\n         *\n         * - Converts the input to a string if it is not already.\n         * - Splits the string into an array of characters, reverses the order, and joins them back.\n         *\n         * @param str The input string.\n         * @returns The reversed string.\n         *\n         * @example\n         * getReverse(\"hello\"); // \"olleh\"\n         * getReverse(\"12345\"); // \"54321\"\n         * getReverse(\"A B C\"); // \"C B A\"\n         */\n        getReverse(str: string): string;\n        /**\n         * Converts the given value to a boolean.\n         *\n         * - Numeric values: `0` is `false`, any other number is `true`.\n         * - Boolean values: Returned as is.\n         * - String values: Returns `true` if the string matches predefined truthy values (`\"true\"`, `\"yes\"`, `\"checked\"`, etc.).\n         * - Other types: Returns `false`.\n         *\n         * @param value The value to be converted.\n         * @returns `true` if the value represents a truthy value, otherwise `false`.\n         *\n         * @example\n         * getToBoolean(1); // true\n         * getToBoolean(0); // false\n         * getToBoolean(\"yes\"); // true\n         * getToBoolean(\"false\"); // false\n         * getToBoolean(true); // true\n         * getToBoolean(null); // false\n         */\n        getToBoolean(value: any): boolean;\n        /**\n         * Converts the given value to a number.\n         *\n         * - If the value is numeric, it is returned as a number.\n         * - If the value is not a valid number, `impossibleValue` is returned instead.\n         *\n         * @param value The value to be converted.\n         * @param impossibleValue The fallback value if conversion fails (default: `0`).\n         * @returns The numeric representation of the value, or `impossibleValue` if conversion fails.\n         *\n         * @example\n         * getToNumber(\"123\"); // 123\n         * getToNumber(\"12.34\"); // 12.34\n         * getToNumber(\"abc\", -1); // -1 (fallback value)\n         * getToNumber(null, 100); // 100 (fallback value)\n         */\n        getToNumber(value: any, impossibleValue?: number): number;\n        /**\n         * Converts the given value to a floating-point number.\n         *\n         * - If the value is numeric, it is converted to a float and returned.\n         * - If the value is not a valid number, `impossibleValue` is returned instead.\n         *\n         * @param value The value to be converted.\n         * @param impossibleValue The fallback value if conversion fails (default: `0`).\n         * @returns The floating-point representation of the value, or `impossibleValue` if conversion fails.\n         *\n         * @example\n         * getToFloat(\"123.45\"); // 123.45\n         * getToFloat(42); // 42\n         * getToFloat(\"abc\", -1); // -1 (fallback value)\n         * getToFloat(null, 100.5); // 100.5 (fallback value)\n         */\n        getToFloat(value: any, impossibleValue?: number): number;\n        /**\n         * Converts the given value to an integer.\n         *\n         * - If the value is numeric, it is converted to an integer using `Math.trunc()`.\n         * - If the value is not a valid number, `impossibleValue` is returned instead.\n         *\n         * @param value The value to be converted.\n         * @param impossibleValue The fallback value if conversion fails (default: `0`).\n         * @returns The integer representation of the value, or `impossibleValue` if conversion fails.\n         *\n         * @example\n         * getToInteger(\"123.45\"); // 123\n         * getToInteger(42.9); // 42\n         * getToInteger(\"abc\", -1); // -1 (fallback value)\n         * getToInteger(null, 100); // 100 (fallback value)\n         */\n        getToInteger(value: any, impossibleValue?: number): number;\n        /**\n         * Converts the given value to a string.\n         *\n         * - If the value is already a string, it is returned as is.\n         * - If the value is a number, boolean, or bigint, it is converted to a string.\n         * - If the value is a symbol, its description is returned.\n         * - If the value is `null`, `undefined`, or an unsupported type, `impossibleValue` is returned.\n         *\n         * @param str The value to be converted.\n         * @param impossibleValue The fallback value if conversion fails (default: `\"\"`).\n         * @returns The string representation of the value, or `impossibleValue` if conversion fails.\n         *\n         * @example\n         * getToString(123); // \"123\"\n         * getToString(true); // \"true\"\n         * getToString(Symbol(\"test\")); // \"test\"\n         * getToString(null, \"N/A\"); // \"N/A\" (fallback value)\n         */\n        getToString(str: any, impossibleValue?: string): string;\n        /**\n         * Returns a default value if the given value is `null` or `undefined`.\n         *\n         * - If `val` is `null` or `undefined`, `defaultValue` is returned.\n         * - Otherwise, `val` is returned as is.\n         *\n         * @param val The value to check.\n         * @param defaultValue The default value to return if `val` is `null` or `undefined`.\n         * @returns The original value if not `null` or `undefined`, otherwise the `defaultValue`.\n         *\n         * @example\n         * nvl(null, \"default\"); // \"default\"\n         * nvl(undefined, 100); // 100\n         * nvl(\"Hello\", \"default\"); // \"Hello\"\n         * nvl(0, \"fallback\"); // 0 (not null or undefined, so returned as is)\n         */\n        nvl(val: any, defaultValue: any): any;\n        /**\n         * Extracts the file extension from a given filename or file path.\n         *\n         * - Converts the input to a string if it is not already.\n         * - Splits the string by `.` and returns the last segment as the file extension.\n         * - If no extension is found, an empty string is returned.\n         *\n         * @param str The filename or file path.\n         * @returns The file extension as a string, or an empty string if no extension exists.\n         *\n         * @example\n         * getFileExtension(\"document.txt\"); // \"txt\"\n         * getFileExtension(\"archive.tar.gz\"); // \"gz\"\n         * getFileExtension(\"/path/to/file\"); // \"\" (no extension)\n         */\n        getFileExtension(str: string): string;\n        /**\n         * Extracts the filename (without extension) from a given file path or filename.\n         *\n         * - Converts the input to a string if it is not already.\n         * - Extracts the last part of the path after the last `/` (or full filename if no path exists).\n         * - Removes the file extension by cutting the string at the last `.` if present.\n         *\n         * @param str The full file path or filename.\n         * @returns The filename without the extension.\n         *\n         * @example\n         * getFileName(\"/path/to/document.txt\"); // \"document\"\n         * getFileName(\"archive.tar.gz\"); // \"archive.tar\"\n         * getFileName(\"file_without_extension\"); // \"file_without_extension\"\n         */\n        getFileName(str: string): string;\n        /**\n         * Decodes a Base64-encoded string into a human-readable format.\n         *\n         * - Converts the input to a string if it is not already.\n         * - Uses `atob()` to decode the Base64 string.\n         * - Decodes percent-encoded UTF-8 characters to properly restore special characters.\n         *\n         * @param str The Base64-encoded string.\n         * @returns The decoded string.\n         *\n         * @example\n         * getDecodeBase64(\"SGVsbG8gd29ybGQh\"); // \"Hello world!\"\n         * getDecodeBase64(\"44GT44KT44Gr44Gh44Gv\"); // \"こんにちは\" (Japanese \"Hello\")\n         */\n        getDecodeBase64(str: string): string;\n        /**\n         * Encodes a string into Base64 format.\n         *\n         * - Converts the input to a string if it is not already.\n         * - Uses `encodeURIComponent()` to properly handle special characters.\n         * - Encodes the string to Base64 using `btoa()`.\n         *\n         * @param str The input string to be encoded.\n         * @returns The Base64-encoded string.\n         *\n         * @example\n         * getEncodeBase64(\"Hello world!\"); // \"SGVsbG8gd29ybGQh\"\n         * getEncodeBase64(\"こんにちは\"); // \"44GT44KT44Gr44Gh44Gv\" (Japanese \"Hello\")\n         */\n        getEncodeBase64(str: string): string;\n        /**\n         * Creates a deep copy of an object or array, preserving nested structures.\n         *\n         * - Handles `Object` and `Array` types recursively.\n         * - Supports cloning custom objects implementing `getIsDataWrapper()` or `getIsDataModel()`.\n         * - Prevents infinite loops by tracking previously copied references.\n         * - If the object is `null` or not an object, it is returned as is.\n         *\n         * @param object The object or array to be deep copied.\n         * @param visited An optional array to track visited references and prevent circular references.\n         * @returns A deep copy of the input object or array.\n         *\n         * @example\n         * const obj = { a: 1, b: { c: 2 } };\n         * const copy = deepCopyObject(obj);\n         * copy.b.c = 3;\n         * console.log(obj.b.c); // 2 (original object remains unchanged)\n         *\n         * const arr = [1, [2, 3]];\n         * const arrCopy = deepCopyObject(arr);\n         * arrCopy[1][0] = 99;\n         * console.log(arr[1][0]); // 2 (original array remains unchanged)\n         */\n        deepCopyObject(object: any, visited?: { source: any, copy: any }[]): any;\n    }\n    \n    //====================================================================================\n    //shield\n    //====================================================================================\n    /**\n     * Enforces security policies on the given `Hison` instance, including access restrictions and object immutability.\n     *\n     * This function applies multiple layers of security to protect the `Hison` instance and enforce security policies:\n     * - **Object Freezing**: Prevents modification of the `Hison` object.\n     * - **Access Control by URL and IP**: Restricts access based on predefined security settings.\n     * - **Developer Tool Restrictions**: Detects and prevents unauthorized debugging or tampering.\n     * - **Back Navigation Prevention**: Blocks browser back navigation if enabled.\n     *\n     * @param hison The `Hison` object to secure and optionally freeze.\n     *\n     * @throws Error If `hison` is not provided.\n     * @throws Error If `hison` is not an instance of `Hison`.\n     *\n     * @remarks\n     * This function enhances security by enforcing strict runtime protections. It utilizes configuration settings from\n     * `customOption.shield` to determine the applied security policies.\n     *\n     * ---\n     * ## Security Features & Execution Flow\n     *\n     * ### 1. **Validation of `hison` Parameter**\n     * - If `hison` is not provided, an error is thrown:  \n     *   `\"Invalid argument: 'hison' is required.\"`\n     * - Ensures that the input is a valid `Hison` instance before executing security functions.\n     * - If `hison.constructor !== Hison`, an error is thrown:  \n     *   `\"Invalid argument: 'hison' must be an instance of Hison.\"`\n     *\n     * ### 2. **Object Freezing (`isFreeze`)**\n     * - If `customOption.isFreeze` is `true`, the `Hison` object is **deeply frozen**.\n     * - Uses the `deepFreeze()` function to recursively apply `Object.freeze()`, preventing modifications.\n     *\n     * ### 3. **Access Control by URL (`shieldURL`)**\n     * - If `customOption.shieldURL` is set:\n     *   - Ensures the current URL matches `shieldURL`.\n     *   - If the URL does not match, execution stops immediately.\n     *\n     * ### 4. **IP-Based Access Control (`exposeIpList`)**\n     * - If the request is **not from `localhost`**, it performs IP verification:\n     *   - Fetches the user's IP from `/ajax/getIp`.\n     *   - Compares the retrieved IP against `customOption.exposeIpList`.\n     *   - If the IP is **not** in the list, additional restrictions are applied:\n     *     - **Back Navigation is Blocked** if `isPossibleGoBack` is `false`.\n     *     - **Developer Tools are Restricted** if `isPossibleOpenDevTool` is `false`.\n     *\n     * ### 5. **Back Navigation Prevention (`isPossibleGoBack`)**\n     * - If `customOption.isPossibleGoBack` is `false`:\n     *   - Overrides the browser's back button functionality using `history.pushState()`.\n     *   - Registers an event listener to **prevent back navigation**.\n     *\n     * ### 6. **Developer Tool Restrictions (`isPossibleOpenDevTool`)**\n     * - If `customOption.isPossibleOpenDevTool` is `false`:\n     *   - Blocks `F12` keypress to prevent opening developer tools.\n     *   - Uses `debugger` trick and event listeners (`resize`, `mousemove`, `focus`, `blur`) to detect dev tools.\n     *   - Displays a warning message and prevents further execution if dev tools are detected.\n     *\n     * ---\n     * ## Related Methods\n     * - `hison.setShieldURL(url: string)` → Sets the URL restriction for access control.\n     * - `hison.setExposeIpList(ipList: string[])` → Defines a whitelist of allowed IP addresses.\n     * - `hison.setIsFreeze(state: boolean)` → Enables or disables object freezing.\n     * - `hison.setIsPossibleGoBack(state: boolean)` → Enables or disables back navigation prevention.\n     * - `hison.setIsPossibleOpenDevTool(state: boolean)` → Enables or disables developer tool restrictions.\n     *\n     * @example\n     * // Execute security features for the Hison instance\n     * shield.excute(hison);\n     */\n    shield: {\n        /**\n         * Checks if the object is Hison.\n         */\n        isHison: boolean;\n        /**\n         * Executes the specified functionality for the given `Hison` object with additional security measures.\n         * This function applies deep freezing, IP-based shielding, and developer mode restrictions based on the provided options.\n         *\n         * @param {Hison} hison - The main object to be processed and optionally frozen for immutability.\n         *\n         * @remarks\n         * This function incorporates multiple layers of security, including:\n         * - Freezing objects to prevent tampering.\n         * - Blocking unauthorized access based on the user's IP.\n         * - Preventing the use of browser developer tools.\n         *\n         * ### Related:\n         * - hison.setShieldURL\n         * - hison.setExposeIpList\n         * - hison.setIsFreeze\n         * - hison.setIsPossibleGoBack\n         * - hison.setIsPossibleOpenDevTool\n         *\n         * #### Logic Breakdown:\n         * 1. **Object Freezing**:\n         *    - If `option.shield.isFreeze` is enabled, the `hison` object is deeply frozen using the `deepFreeze` function.\n         *    - Prevents runtime modification of the object or its nested properties.\n         *\n         * 2. **Access Control by URL and IP**:\n         *    - If not on `localhost`:\n         *        - Ensures the current URL matches `option.shield.shieldURL`.\n         *        - Fetches the user's IP via `/ajax/getIp`.\n         *        - Verifies the IP against `option.shield.exposeIpList`.\n         *        - If the IP is not allowed:\n         *            - Prevents navigating back using the browser's back button.\n         *            - Restricts developer tool access.\n         *\n         * 3. **Developer Tool Restrictions**:\n         *    - Blocks `F12` key to prevent opening developer tools.\n         *    - Detects and alerts when developer tools are opened using browser resizing, focus, or mouse events.\n         *    - Displays a warning message and halts further actions if developer tools are detected.\n         */\n        excute(hison: Hison): void;\n    };\n    \n    //====================================================================================\n    //data\n    //====================================================================================\n    /**\n     * The `hison.data` module provides core data management structures within the `hisondev` ecosystem.\n     * It includes:\n     *\n     * - **`DataWrapper`**: A key-value based data storage container.\n     * - **`DataModel`**: A structured table-like data model for handling tabular data.\n     *\n     * These components enable **efficient data storage, retrieval, validation, and transformation** \n     * while maintaining type safety and structural consistency.\n     *\n     * ## Core Features\n     *\n     * ### **1. Structured Data Management**\n     * - `DataWrapper` provides **key-value storage**, allowing easy organization of structured data.\n     * - `DataModel` offers **tabular data management**, ensuring **column consistency** across rows.\n     *\n     * ### **2. Data Transformation & Validation**\n     * - Supports **custom conversion logic** through `hison.setConvertValue()`, allowing pre-insertion transformations.\n     * - Allows setting a **`DataModelValidator`** to validate column values.\n     * - Supports **`DataModelFormatter`** for automatic column formatting.\n     *\n     * ### **3. Deep Copy & Serialization**\n     * - Ensures **data immutability** using **deep cloning** (`clone()`).\n     * - Supports **JSON serialization** for structured data transfer (`getSerialized()`).\n     *\n     * ### **4. Integration Between `DataWrapper` and `DataModel`**\n     * - `DataWrapper` can **store and retrieve** `DataModel` instances seamlessly.\n     * - Allows flexible conversion between **key-value storage** and **structured table data**.\n     *\n     * ## Example Usage\n     *\n     * ### **Using `DataWrapper` for Key-Value Storage**\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ username: \"Alice\", age: 30 });\n     * console.log(dataWrapper.getString(\"username\")); // Output: \"Alice\"\n     * ```\n     *\n     * ### **Using `DataModel` for Tabular Data**\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 }\n     * ]);\n     *\n     * // Formatting and validation\n     * dataModel.setColumnSameFormat(\"age\", (value) => `${value} years old`);\n     * dataModel.isValidValue(\"age\", value => typeof value === \"number\");\n     * ```\n     *\n     * ### **Storing `DataModel` Inside `DataWrapper`**\n     * ```typescript\n     * const usersData = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * const dataWrapper = new hison.data.DataWrapper();\n     * dataWrapper.putDataModel(\"users\", usersData);\n     * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n     * ```\n     *\n     * ## Related Functions\n     * - **`hison.setConvertValue(func)`**: \n     *   - Allows defining a **custom value transformation function** for `DataModel`.\n     *   - Useful for formatting **Date objects** or handling special types before insertion.\n     *   - Example:\n     *   ```typescript\n     *   hison.setConvertValue((value) => value instanceof Date ? value.toISOString() : value);\n     *   ```\n     */\n    data: {\n        /**\n         * The `DataWrapper` class provides a flexible key-value storage container\n         * within the `hisondev` solution. It allows storing various data types,\n         * including string value and `DataModel` instances.\n         *\n         * ## Core Features:\n         * - **Key-Value Storage:**\n         *   - Supports dynamic insertion and retrieval of key-value pairs.\n         *   - Ensures that keys are always strings.\n         * - **Integration with `DataModel`:**\n         *   - Allows storing `DataModel` instances under specific keys.\n         *   - Provides methods to retrieve `DataModel` instances safely.\n         * - **Serialization & Cloning:**\n         *   - Supports deep cloning of stored data.\n         *   - Provides JSON serialization for structured data handling.\n         * - **Validation & Type Safety:**\n         *   - Ensures type safety for values stored in `DataWrapper`.\n         *   - Throws errors when attempting to insert invalid types.\n         *\n         * ## Data Integrity & Deep Copying:\n         * - Uses `hison.utils.deepCopyObject()` to ensure stored objects are immutable.\n         * - Prevents unintended modifications by returning cloned values.\n         *\n         * ## Example Usage:\n         * ```typescript\n         * // Creating a DataWrapper with key-value pairs\n         * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n         * console.log(dataWrapper.getString(\"name\")); // Output: \"Alice\"\n         *\n         * // Storing a DataModel instance\n         * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n         * dataWrapper.putDataModel(\"users\", dataModel);\n         * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n         *\n         * // Serializing the DataWrapper to JSON\n         * console.log(dataWrapper.getSerialized());\n         * ```\n         */\n        DataWrapper: new (keyOrObject?: Record<string, any> | string, value?: any) => InterfaceDataWrapper;\n        /**\n         * The `DataModel` class provides a structured way to manage tabular data within the `hisondev` solution.\n         * It is designed to store, manipulate, and retrieve data efficiently while ensuring type consistency\n         * and validation. \n         * \n         * ## Core Features:\n         * - **Column and Row Management:**\n         *   - Supports dynamic addition and removal of columns and rows.\n         *   - Ensures column consistency when inserting data.\n         * - **Validation and Formatting:**\n         *   - Allows setting a `DataModelValidator` to check column values.\n         *   - Supports `DataModelFormatter` to format column values uniformly.\n         * - **Filtering and Searching:**\n         *   - Provides methods to filter rows based on conditions (`filterRows()`, `searchRows()`).\n         *   - Allows searching rows and modifying data accordingly (`searchAndModify()`).\n         * - **Sorting and Structuring:**\n         *   - Supports ascending, descending, and reverse sorting on both columns and rows.\n         * - **Serialization and Cloning:**\n         *   - Enables deep copying of the entire `DataModel`.\n         *   - Provides `getSerialized()` to retrieve a JSON string of the model.\n         * - **Integration with `DataWrapper`**\n         *   - DataWrapper is an instance for storing DataModel.\n         *\n         * ## Data Consistency and Validation:\n         * - Uses `_deepCopy()` to ensure stored objects are immutable.\n         * - Prevents invalid data types using `_getValidRowValue()`.\n         * - Ensures uniform column data types to maintain consistency.\n         *\n         * ## Example Usage:\n         * ```typescript\n         * const dataModel = new hison.data.DataModel([\n         *     { id: 1, name: \"Alice\", age: 25 },\n         *     { id: 2, name: \"Bob\", age: 30 }\n         * ]);\n         * \n         * // Add a new column\n         * dataModel.addColumn(\"gender\");\n         * \n         * // Set a default value for a column\n         * dataModel.setColumnSameValue(\"gender\", \"Unknown\");\n         * \n         * // Apply a formatting function to the age column\n         * dataModel.setColumnSameFormat(\"age\", (value) => `${value} years old`);\n         * \n         * // Get filtered rows where age is greater than 25\n         * const filtered = dataModel.filterRows(row => row.age > 25);\n         * console.log(filtered);\n         * ```\n         *\n         * ## Related Functions:\n         * - `hison.setConvertValue()`: Sets the conversion logic for special values before insertion.\n         *\n         */\n        DataModel: new (data?: Record<string, any>[] | Record<string, any>) => InterfaceDataModel;\n    };\n\n    //====================================================================================\n    //link\n    //====================================================================================\n    /**\n     * The `hison.link` object provides core communication modules for interacting with the hisondev platform.\n     * It serves as a central hub for API requests, caching, and WebSocket communication.\n     *\n     * ## Key Components\n     * - **`CachingModule`**: Manages API response caching using an LRU (Least Recently Used) strategy.\n     * - **`ApiGet`, `ApiPost`, `ApiPut`, `ApiPatch`, `ApiDelete`**: Handle REST API calls by encapsulating request logic.\n     * - **`ApiGetUrl`, `ApiPostUrl`, `ApiPutUrl`, `ApiPatchUrl`, `ApiDeleteUrl`**: Similar to the above, but allow direct URL-based requests.\n     *\n     * These components simplify API integration and provide caching and event-driven request handling.\n     *\n     * ## How It Works\n     * - **API requests are wrapped in `DataWrapper` instances**, which store key-value data.\n     * - **The `cmd` property in `DataWrapper` determines the service path**, directing the request to the appropriate business logic on the server.\n     * - **`CachingModule` enables response caching**, reducing redundant network calls for frequently accessed resources.\n     * - **`EventEmitter` allows developers to listen for request events**, such as completion, errors, or specific triggers.\n     *\n     * ## Example Usage\n     * ```typescript\n     * // Creating an API request\n     * const requestData = new hison.data.DataWrapper();\n     * requestData.putString(\"username\", \"Alice\");\n     * \n     * // Sending a POST request\n     * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n     * apiPost.call(requestData).then(response => {\n     *     console.log(response.data); // Response from the server\n     * });\n     *\n     * // Handling request events\n     * apiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n     *     console.log(\"Request completed!\", data);\n     * });\n     *\n     * // Using caching for a GET request\n     * const cachingModule = new hison.link.CachingModule(20); // Set cache limit to 20\n     * const apiGet = new hison.link.ApiGet(\"/users\", cachingModule);\n     * apiGet.call().then(response => {\n     *     console.log(response.data);\n     * });\n     * ```\n     *\n     * ## Internal Structure\n     * - **Uses `ApiLink` for handling network requests**.\n     * - **Utilizes `EventEmitter` for event-driven communication**.\n     * - **Supports WebSocket integration via `CachingModule`**.\n     * - **Compatible with `CustomOption` for flexible configuration**.\n     */\n    link: {\n        /**\n         * **`CachingModule` - A module for API response caching and real-time WebSocket updates.**\n         *\n         * The `CachingModule` provides a caching mechanism for API responses using an **LRU (Least Recently Used) strategy** \n         * while integrating **WebSocket communication** for real-time data updates.\n         *\n         * ## **Key Features**\n         * - **LRU Cache for API Responses**: Stores API responses with a configurable limit, reducing redundant network requests.\n         * - **WebSocket Support**: Maintains a persistent WebSocket connection for real-time data updates.\n         * - **Cache Management Methods**: Supports cache operations (`get`, `put`, `remove`, `clear`, etc.).\n         * - **Event-Driven Communication**: Allows event listeners (`onopen`, `onmessage`, `onclose`, `onerror`) for WebSocket handling.\n         * - **Flexible Configuration**: Uses `CustomOption` settings for cache limits and WebSocket parameters.\n         * - **Validation Methods**: Ensures proper data types for cache keys and event listeners.\n         *\n         * ## **How It Works**\n         * - **API responses are stored in an LRUCache instance**, avoiding redundant network calls.\n         * - **When a WebSocket connection is established**, data updates can be received in real-time.\n         * - **Cache data can be accessed and managed using `get`, `put`, `remove`, and `clear` methods.**\n         * - **WebSocket event handlers can be set up for real-time notifications.**\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Create a CachingModule instance with a cache limit of 20\n         * const cachingModule = new hison.link.CachingModule(20);\n         * \n         * // Store API response in the cache\n         * cachingModule.put(\"users\", fetch(\"/api/users\").then(response => response.json()));\n         * \n         * // Retrieve cached data\n         * cachingModule.get(\"users\").then(data => console.log(data));\n         * \n         * // Register WebSocket event handlers\n         * cachingModule.onopen = () => console.log(\"WebSocket Connected\");\n         * cachingModule.onmessage = event => console.log(\"New Message:\", event.data);\n         * ```\n         *\n         * ## **Internal Structure**\n         * - **Uses `LRUCache`** to manage cached responses with a defined limit.\n         * - **Maintains a WebSocket connection** to receive real-time data updates.\n         * - **Supports configurable options via `CustomOption`**, such as WebSocket endpoint and cache size.\n         * - **Provides utility methods** for cache validation, data retrieval, and event handling.\n         *\n         * ## **Related Components**\n         * - **`LRUCache`**: Handles the caching logic for API responses.\n         * - **`WebSocket`**: Establishes a real-time connection for live data updates.\n         * - **`CustomOption`**: Provides configurable options for WebSocket and cache settings.\n         * - **`ApiLink`**: Uses this module to fetch and store API responses efficiently.\n         *\n         * ## **Return Value**\n         * - This module **returns an instance of `CachingModule`**, which allows cache operations and WebSocket event management.\n         *\n         * ## **Typical Use Cases**\n         * - **Reducing unnecessary API calls** by storing frequently accessed responses.\n         * - **Receiving real-time updates** from the server without polling.\n         * - **Efficiently managing API response data** in web applications.\n         * - **Supporting offline or low-latency scenarios** by using cached responses.\n         */\n        CachingModule: new (cachingLimit?: number) => InterfaceCachingModule;\n        /**\n         * **`ApiGet` - A class for handling HTTP GET requests within the `hison.link` module.**\n         *\n         * The `ApiGet` class is responsible for sending HTTP GET requests to a specified API resource. \n         * It integrates with `ApiLink` to handle request execution, event emissions, and optional response caching.\n         *\n         * ## **Key Features**\n         * - **Executes HTTP GET requests** using `ApiLink`.\n         * - **Supports response caching** via an optional `CachingModule`.\n         * - **Emits request lifecycle events** using `EventEmitter`.\n         * - **Allows setting event listeners** for request completion, errors, and other key events.\n         *\n         * ## **How It Works**\n         * - When instantiated, `ApiGet` stores the API resource path and an optional `CachingModule` instance.\n         * - The `call()` method triggers a GET request to the specified resource path.\n         * - If caching is enabled, previously stored responses may be returned instead of making a new request.\n         * - Event listeners can be attached to monitor the request lifecycle.\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Creating an instance of ApiGet without caching\n         * const apiGet = new hison.link.ApiGet(\"/users\");\n         * \n         * // Sending a GET request\n         * apiGet.call().then(response => {\n         *     console.log(response.data); // Response data\n         * });\n         *\n         * // Creating an instance with caching\n         * const cachingModule = new hison.link.CachingModule(20);\n         * const cachedApiGet = new hison.link.ApiGet(\"/users\", cachingModule);\n         * \n         * // Handling request events\n         * cachedApiGet.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n         *     console.log(\"GET request completed!\", data);\n         * });\n         * ```\n         *\n         * ## **Internal Components**\n         * - **`ApiLink`**: Handles request execution and response processing.\n         * - **`EventEmitter`**: Manages event-based request handling.\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n         *\n         * ## **Return Value**\n         * - This class returns an instance of `ApiGet`, which provides methods for executing GET requests and managing request events.\n         *\n         * ## **Typical Use Cases**\n         * - **Fetching data from a REST API** with minimal setup.\n         * - **Using cached responses** to reduce redundant API calls.\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\n         */\n        ApiGet: new (resourcePath?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiGet;\n        /**\n         * **`ApiPost` - A class for handling HTTP POST requests within the `hison.link` module.**\n         *\n         * The `ApiPost` class is responsible for sending HTTP POST requests to a specified service command.\n         * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n         *\n         * ## **Key Features**\n         * - **Executes HTTP POST requests** using `ApiLink`.\n         * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n         * - **Supports response caching** via an optional `CachingModule`.\n         * - **Emits request lifecycle events** using `EventEmitter`.\n         * - **Allows event listeners** for monitoring request execution.\n         *\n         * ## **How It Works**\n         * - When instantiated, `ApiPost` requires a `serviceCmd` that specifies the business logic endpoint.\n         * - The `call()` method sends a POST request with the provided request data.\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n         * - Event listeners can be attached to monitor the request lifecycle.\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Creating an instance of ApiPost\n         * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n         *\n         * // Creating request data\n         * const requestData = new hison.data.DataWrapper();\n         * requestData.putString(\"username\", \"Alice\");\n         * \n         * // Sending a POST request\n         * apiPost.call(requestData).then(response => {\n         *     console.log(response.data); // Response data\n         * });\n         *\n         * // Creating an instance with caching\n         * const cachingModule = new hison.link.CachingModule(20);\n         * const cachedApiPost = new hison.link.ApiPost(\"UserService.createUser\", cachingModule);\n         *\n         * // Handling request events\n         * cachedApiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n         *     console.log(\"POST request completed!\", data);\n         * });\n         * ```\n         *\n         * ## **Internal Components**\n         * - **`ApiLink`**: Handles request execution and response processing.\n         * - **`EventEmitter`**: Manages event-driven request handling.\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n         *\n         * ## **Return Value**\n         * - This class returns an instance of `ApiPost`, providing methods for executing POST requests and managing request events.\n         *\n         * ## **Typical Use Cases**\n         * - **Sending data to a REST API** with structured payloads.\n         * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\n         */\n        ApiPost: new (serviceCmd: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPost;\n        /**\n         * **`ApiPut` - A class for handling HTTP PUT requests within the `hison.link` module.**\n         *\n         * The `ApiPut` class is responsible for sending HTTP PUT requests to a specified service command.\n         * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n         *\n         * ## **Key Features**\n         * - **Executes HTTP PUT requests** using `ApiLink`.\n         * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n         * - **Supports response caching** via an optional `CachingModule`.\n         * - **Emits request lifecycle events** using `EventEmitter`.\n         * - **Allows event listeners** for monitoring request execution.\n         *\n         * ## **How It Works**\n         * - When instantiated, `ApiPut` requires a `serviceCmd` that specifies the business logic endpoint.\n         * - The `call()` method sends a PUT request with the provided request data.\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n         * - Event listeners can be attached to monitor the request lifecycle.\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Creating an instance of ApiPut\n         * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n         *\n         * // Creating request data\n         * const requestData = new hison.data.DataWrapper();\n         * requestData.putString(\"username\", \"Alice\");\n         * \n         * // Sending a PUT request\n         * apiPut.call(requestData).then(response => {\n         *     console.log(response.data); // Response data\n         * });\n         *\n         * // Creating an instance with caching\n         * const cachingModule = new hison.link.CachingModule(20);\n         * const cachedApiPut = new hison.link.ApiPut(\"UserService.createUser\", cachingModule);\n         *\n         * // Handling request events\n         * cachedApiPut.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n         *     console.log(\"PUT request completed!\", data);\n         * });\n         * ```\n         *\n         * ## **Internal Components**\n         * - **`ApiLink`**: Handles request execution and response processing.\n         * - **`EventEmitter`**: Manages event-driven request handling.\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n         *\n         * ## **Return Value**\n         * - This class returns an instance of `ApiPut`, providing methods for executing PUT requests and managing request events.\n         *\n         * ## **Typical Use Cases**\n         * - **Sending data to a REST API** with structured payloads.\n         * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\n         */\n        ApiPut: new (serviceCmd: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPut;\n        /**\n         * **`ApiPatch` - A class for handling HTTP PATCH requests within the `hison.link` module.**\n         *\n         * The `ApiPatch` class is responsible for sending HTTP PATCH requests to a specified service command.\n         * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n         *\n         * ## **Key Features**\n         * - **Executes HTTP PATCH requests** using `ApiLink`.\n         * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n         * - **Supports response caching** via an optional `CachingModule`.\n         * - **Emits request lifecycle events** using `EventEmitter`.\n         * - **Allows event listeners** for monitoring request execution.\n         *\n         * ## **How It Works**\n         * - When instantiated, `ApiPatch` requires a `serviceCmd` that specifies the business logic endpoint.\n         * - The `call()` method sends a PATCH request with the provided request data.\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n         * - Event listeners can be attached to monitor the request lifecycle.\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Creating an instance of ApiPatch\n         * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n         *\n         * // Creating request data\n         * const requestData = new hison.data.DataWrapper();\n         * requestData.putString(\"username\", \"Alice\");\n         * \n         * // Sending a PATCH request\n         * apiPatch.call(requestData).then(response => {\n         *     console.log(response.data); // Response data\n         * });\n         *\n         * // Creating an instance with caching\n         * const cachingModule = new hison.link.CachingModule(20);\n         * const cachedApiPatch = new hison.link.ApiPatch(\"UserService.createUser\", cachingModule);\n         *\n         * // Handling request events\n         * cachedApiPatch.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n         *     console.log(\"PATCH request completed!\", data);\n         * });\n         * ```\n         *\n         * ## **Internal Components**\n         * - **`ApiLink`**: Handles request execution and response processing.\n         * - **`EventEmitter`**: Manages event-driven request handling.\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n         *\n         * ## **Return Value**\n         * - This class returns an instance of `ApiPatch`, providing methods for executing PATCH requests and managing request events.\n         *\n         * ## **Typical Use Cases**\n         * - **Sending data to a REST API** with structured payloads.\n         * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\n         */\n        ApiPatch: new (serviceCmd: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPatch;\n        /**\n         * **`ApiDelete` - A class for handling HTTP DELETE requests within the `hison.link` module.**\n         *\n         * The `ApiDelete` class is responsible for sending HTTP DELETE requests to a specified service command.\n         * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n         *\n         * ## **Key Features**\n         * - **Executes HTTP DELETE requests** using `ApiLink`.\n         * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n         * - **Supports response caching** via an optional `CachingModule`.\n         * - **Emits request lifecycle events** using `EventEmitter`.\n         * - **Allows event listeners** for monitoring request execution.\n         *\n         * ## **How It Works**\n         * - When instantiated, `ApiDelete` requires a `serviceCmd` that specifies the business logic endpoint.\n         * - The `call()` method sends a DELETE request with the provided request data.\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n         * - Event listeners can be attached to monitor the request lifecycle.\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Creating an instance of ApiDelete\n         * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n         *\n         * // Creating request data\n         * const requestData = new hison.data.DataWrapper();\n         * requestData.putString(\"username\", \"Alice\");\n         * \n         * // Sending a DELETE request\n         * apiDelete.call(requestData).then(response => {\n         *     console.log(response.data); // Response data\n         * });\n         *\n         * // Creating an instance with caching\n         * const cachingModule = new hison.link.CachingModule(20);\n         * const cachedApiDelete = new hison.link.ApiDelete(\"UserService.createUser\", cachingModule);\n         *\n         * // Handling request events\n         * cachedApiDelete.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n         *     console.log(\"DELETE request completed!\", data);\n         * });\n         * ```\n         *\n         * ## **Internal Components**\n         * - **`ApiLink`**: Handles request execution and response processing.\n         * - **`EventEmitter`**: Manages event-driven request handling.\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n         *\n         * ## **Return Value**\n         * - This class returns an instance of `ApiDelete`, providing methods for executing DELETE requests and managing request events.\n         *\n         * ## **Typical Use Cases**\n         * - **Sending data to a REST API** with structured payloads.\n         * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\n         */\n        ApiDelete: new (serviceCmd: string, cachingModule?: InterfaceCachingModule) => InterfaceApiDelete;\n        /**\n         * **`ApiGetUrl` - A class for handling HTTP GET requests to a specified URL.**\n         *\n         * The `ApiGetUrl` class is responsible for sending HTTP GET requests to a provided URL.\n         * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n         *\n         * ## **Key Features**\n         * - **Executes HTTP GET requests** using `ApiLink`.\n         * - **Accepts a direct URL** instead of using a predefined API resource path.\n         * - **Supports response caching** via an optional `CachingModule`.\n         * - **Emits request lifecycle events** using `EventEmitter`.\n         * - **Allows event listeners** for monitoring request execution.\n         *\n         * ## **How It Works**\n         * - When instantiated, `ApiGetUrl` requires a valid URL.\n         * - The `call()` method triggers a GET request to the specified URL.\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n         * - Event listeners can be attached to monitor the request lifecycle.\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Creating an instance of ApiGetUrl without caching\n         * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n         * \n         * // Sending a GET request\n         * apiGetUrl.call().then(response => {\n         *     console.log(response.data); // Response data\n         * });\n         *\n         * // Creating an instance with caching\n         * const cachingModule = new hison.link.CachingModule(20);\n         * const cachedApiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\", cachingModule);\n         * \n         * // Handling request events\n         * cachedApiGetUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n         *     console.log(\"GET request completed!\", data);\n         * });\n         * ```\n         *\n         * ## **Internal Components**\n         * - **`ApiLink`**: Handles request execution and response processing.\n         * - **`EventEmitter`**: Manages event-driven request handling.\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n         *\n         * ## **Return Value**\n         * - This class returns an instance of `ApiGetUrl`, which provides methods for executing GET requests to a specific URL.\n         *\n         * ## **Typical Use Cases**\n         * - **Fetching data from an external API** by specifying a full URL.\n         * - **Using cached responses** to reduce redundant API calls.\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\n         */\n        ApiGetUrl: new (url: string, cachingModule?: InterfaceCachingModule) => InterfaceApiGetUrl;\n        /**\n         * **`ApiPostUrl` - A class for handling HTTP POST requests to a specified URL.**\n         *\n         * The `ApiPostUrl` class is responsible for sending HTTP POST requests to a provided URL.\n         * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n         *\n         * ## **Key Features**\n         * - **Executes HTTP POST requests** using `ApiLink`.\n         * - **Accepts a direct URL** instead of using a predefined service command.\n         * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n         * - **Supports response caching** via an optional `CachingModule`.\n         * - **Emits request lifecycle events** using `EventEmitter`.\n         * - **Allows event listeners** for monitoring request execution.\n         *\n         * ## **How It Works**\n         * - When instantiated, `ApiPostUrl` requires a valid URL and an optional `serviceCmd`.\n         * - The `call()` method sends a POST request with the provided request data.\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n         * - Event listeners can be attached to monitor the request lifecycle.\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Creating an instance of ApiPostUrl\n         * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n         *\n         * // Creating request data\n         * const requestData = new hison.data.DataWrapper();\n         * requestData.putString(\"username\", \"Alice\");\n         * \n         * // Sending a POST request\n         * apiPostUrl.call(requestData).then(response => {\n         *     console.log(response.data); // Response data\n         * });\n         *\n         * // Creating an instance with caching\n         * const cachingModule = new hison.link.CachingModule(20);\n         * const cachedApiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n         *\n         * // Handling request events\n         * cachedApiPostUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n         *     console.log(\"POST request completed!\", data);\n         * });\n         * ```\n         *\n         * ## **Internal Components**\n         * - **`ApiLink`**: Handles request execution and response processing.\n         * - **`EventEmitter`**: Manages event-driven request handling.\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n         *\n         * ## **Return Value**\n         * - This class returns an instance of `ApiPostUrl`, which provides methods for executing POST requests to a specific URL.\n         *\n         * ## **Typical Use Cases**\n         * - **Sending data to an external API** using a full URL.\n         * - **Passing a `serviceCmd` for structured request routing**.\n         * - **Using cached responses** to reduce redundant API calls.\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\n         */\n        ApiPostUrl: new (url: string, serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPostUrl;\n        /**\n         * **`ApiPutUrl` - A class for handling HTTP PUT requests to a specified URL.**\n         *\n         * The `ApiPutUrl` class is responsible for sending HTTP PUT requests to a provided URL.\n         * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n         *\n         * ## **Key Features**\n         * - **Executes HTTP PUT requests** using `ApiLink`.\n         * - **Accepts a direct URL** instead of using a predefined service command.\n         * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n         * - **Supports response caching** via an optional `CachingModule`.\n         * - **Emits request lifecycle events** using `EventEmitter`.\n         * - **Allows event listeners** for monitoring request execution.\n         *\n         * ## **How It Works**\n         * - When instantiated, `ApiPutUrl` requires a valid URL and an optional `serviceCmd`.\n         * - The `call()` method sends a PUT request with the provided request data.\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n         * - Event listeners can be attached to monitor the request lifecycle.\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Creating an instance of ApiPutUrl\n         * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n         *\n         * // Creating request data\n         * const requestData = new hison.data.DataWrapper();\n         * requestData.putString(\"username\", \"Alice\");\n         * \n         * // Sending a PUT request\n         * apiPutUrl.call(requestData).then(response => {\n         *     console.log(response.data); // Response data\n         * });\n         *\n         * // Creating an instance with caching\n         * const cachingModule = new hison.link.CachingModule(20);\n         * const cachedApiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n         *\n         * // Handling request events\n         * cachedApiPutUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n         *     console.log(\"PUT request completed!\", data);\n         * });\n         * ```\n         *\n         * ## **Internal Components**\n         * - **`ApiLink`**: Handles request execution and response processing.\n         * - **`EventEmitter`**: Manages event-driven request handling.\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n         *\n         * ## **Return Value**\n         * - This class returns an instance of `ApiPutUrl`, which provides methods for executing PUT requests to a specific URL.\n         *\n         * ## **Typical Use Cases**\n         * - **Sending data to an external API** using a full URL.\n         * - **Passing a `serviceCmd` for structured request routing**.\n         * - **Using cached responses** to reduce redundant API calls.\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\n         */\n        ApiPutUrl: new (url: string, serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPutUrl;\n        /**\n         * **`ApiPatchUrl` - A class for handling HTTP PATCH requests to a specified URL.**\n         *\n         * The `ApiPatchUrl` class is responsible for sending HTTP PATCH requests to a provided URL.\n         * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n         *\n         * ## **Key Features**\n         * - **Executes HTTP PATCH requests** using `ApiLink`.\n         * - **Accepts a direct URL** instead of using a predefined service command.\n         * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n         * - **Supports response caching** via an optional `CachingModule`.\n         * - **Emits request lifecycle events** using `EventEmitter`.\n         * - **Allows event listeners** for monitoring request execution.\n         *\n         * ## **How It Works**\n         * - When instantiated, `ApiPatchUrl` requires a valid URL and an optional `serviceCmd`.\n         * - The `call()` method sends a PATCH request with the provided request data.\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n         * - Event listeners can be attached to monitor the request lifecycle.\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Creating an instance of ApiPatchUrl\n         * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n         *\n         * // Creating request data\n         * const requestData = new hison.data.DataWrapper();\n         * requestData.putString(\"username\", \"Alice\");\n         * \n         * // Sending a PATCH request\n         * apiPatchUrl.call(requestData).then(response => {\n         *     console.log(response.data); // Response data\n         * });\n         *\n         * // Creating an instance with caching\n         * const cachingModule = new hison.link.CachingModule(20);\n         * const cachedApiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n         *\n         * // Handling request events\n         * cachedApiPatchUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n         *     console.log(\"PATCH request completed!\", data);\n         * });\n         * ```\n         *\n         * ## **Internal Components**\n         * - **`ApiLink`**: Handles request execution and response processing.\n         * - **`EventEmitter`**: Manages event-driven request handling.\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n         *\n         * ## **Return Value**\n         * - This class returns an instance of `ApiPatchUrl`, which provides methods for executing PATCH requests to a specific URL.\n         *\n         * ## **Typical Use Cases**\n         * - **Sending data to an external API** using a full URL.\n         * - **Passing a `serviceCmd` for structured request routing**.\n         * - **Using cached responses** to reduce redundant API calls.\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\n         */\n        ApiPatchUrl: new (url: string, serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiPatchUrl;\n        /**\n         * **`ApiDeleteUrl` - A class for handling HTTP DELETE requests to a specified URL.**\n         *\n         * The `ApiDeleteUrl` class is responsible for sending HTTP DELETE requests to a provided URL.\n         * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n         *\n         * ## **Key Features**\n         * - **Executes HTTP DELETE requests** using `ApiLink`.\n         * - **Accepts a direct URL** instead of using a predefined service command.\n         * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n         * - **Supports response caching** via an optional `CachingModule`.\n         * - **Emits request lifecycle events** using `EventEmitter`.\n         * - **Allows event listeners** for monitoring request execution.\n         *\n         * ## **How It Works**\n         * - When instantiated, `ApiDeleteUrl` requires a valid URL and an optional `serviceCmd`.\n         * - The `call()` method sends a DELETE request with the provided request data.\n         * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n         * - Event listeners can be attached to monitor the request lifecycle.\n         *\n         * ## **Example Usage**\n         * ```typescript\n         * // Creating an instance of ApiDeleteUrl\n         * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n         *\n         * // Creating request data\n         * const requestData = new hison.data.DataWrapper();\n         * requestData.putString(\"username\", \"Alice\");\n         * \n         * // Sending a DELETE request\n         * apiDeleteUrl.call(requestData).then(response => {\n         *     console.log(response.data); // Response data\n         * });\n         *\n         * // Creating an instance with caching\n         * const cachingModule = new hison.link.CachingModule(20);\n         * const cachedApiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n         *\n         * // Handling request events\n         * cachedApiDeleteUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n         *     console.log(\"DELETE request completed!\", data);\n         * });\n         * ```\n         *\n         * ## **Internal Components**\n         * - **`ApiLink`**: Handles request execution and response processing.\n         * - **`EventEmitter`**: Manages event-driven request handling.\n         * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n         *\n         * ## **Return Value**\n         * - This class returns an instance of `ApiDeleteUrl`, which provides methods for executing DELETE requests to a specific URL.\n         *\n         * ## **Typical Use Cases**\n         * - **Sending data to an external API** using a full URL.\n         * - **Passing a `serviceCmd` for structured request routing**.\n         * - **Using cached responses** to reduce redundant API calls.\n         * - **Handling event-driven request monitoring** via `onEventEmit`.\n         */\n        ApiDeleteUrl: new (url: string, serviceCmd?: string, cachingModule?: InterfaceCachingModule) => InterfaceApiDeleteUrl;\n    }\n}\n//====================================================================================\n//utils interface, type\n//====================================================================================\n/**\n * Represents a date structure with year, month, and day properties.\n *\n * - `y`: The year (e.g., `2025`).\n * - `M`: The month (`1-12`).\n * - `d`: The day of the month (`1-31`).\n *\n * All properties can be `null` if no value is set.\n */\ninterface DateObject {\n    y: number | null;\n    M: number | null;\n    d: number | null;\n}\n/**\n * Represents a time structure with hours, minutes, and seconds.\n *\n * - `h`: The hour (`0-23`).\n * - `m`: The minutes (`0-59`).\n * - `s`: The seconds (`0-59`).\n *\n * All properties can be `null` if no value is set.\n */\ninterface TimeObject {\n    h: number | null;\n    m: number | null;\n    s: number | null;\n}\n/**\n * Represents a full datetime structure combining `DateObject` and `TimeObject`.\n *\n * - Includes year, month, day, hour, minute, and second properties.\n * - All properties can be `null` if no value is set.\n */\ninterface DateTimeObject extends DateObject, TimeObject {}\n/**\n * Enum representing the full names of the months (`January` to `December`).\n *\n * - Values range from `1` to `12`, corresponding to the month number.\n */\nenum MonthFullName {\n    January = 1, February, March, April, May, June, July, August, September, October, November, December\n}\n/**\n * Enum representing the abbreviated names of the months (`Jan` to `Dec`).\n *\n * - Values range from `1` to `12`, corresponding to the month number.\n */\nenum MonthShortName {\n    Jan = 1, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec\n}\n/**\n * Enum representing the full English names of the days of the week (`Sunday` to `Saturday`).\n *\n * - Values range from `0` to `6`, where `0 = Sunday`, `1 = Monday`, ..., `6 = Saturday`.\n */\nenum DayOfWeekFullName {\n    Sun = 0, Mon, Tue, Wed, Thu, Fri, Sat\n}\n/**\n * Enum representing the abbreviated English names of the days of the week (`Sun` to `Sat`).\n *\n * - Values range from `0` to `6`, where `0 = Sun`, `1 = Mon`, ..., `6 = Sat`.\n */\nenum DayOfWeekShortName {\n    Sunday = 0, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\n}\n/**\n * Enum representing the full Korean names of the days of the week (`일요일` to `토요일`).\n *\n * - Values range from `0` to `6`, where `0 = 일요일`, `1 = 월요일`, ..., `6 = 토요일`.\n */\nenum DayOfWeekFullNameKR {\n    일 = 0, 월, 화, 수, 목, 금, 토\n}\n/**\n * Enum representing the abbreviated Korean names of the days of the week (`일` to `토`).\n *\n * - Values range from `0` to `6`, where `0 = 일`, `1 = 월`, ..., `6 = 토`.\n */\nenum DayOfWeekShortNameKR {\n    일요일 = 0, 월요일, 화요일, 수요일, 목요일, 금요일, 토요일\n}\n//====================================================================================\n//shield interface, type\n//====================================================================================\n\n//====================================================================================\n//data interface, type\n//====================================================================================\n/**\n * Converts special values into a predefined format before they are inserted into the DataModel.\n * This function allows for custom handling of values like Date, or other special values, to ensure\n * they are stored in the DataModel in a consistent and predictable format. By default, it returns the value as is.\n *\n * @param {any} value - The value to be converted. This can be a special value like Date or any other value.\n * @returns {any} Returns the converted value.\n *\n * @example\n * //When set the hison.data.convertValue\n * hison.data.convertValue = function(value) {\n *     if (value instanceof Date) {\n *          let year = value.getFullYear();\n *          let month = value.getMonth() + 1;\n *          let day = value.getDate();\n *          let hour = value.getHours();\n *          let minute = value.getMinutes();\n *          let second = value.getSeconds();\n *          month = month < 10 ? '0' + month : month;\n *          day = day < 10 ? '0' + day : day;\n *          hour = hour < 10 ? '0' + hour : hour;\n *          minute = minute < 10 ? '0' + minute : minute;\n *          second = second < 10 ? '0' + second : second;\n *          return year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second;\n *     }\n *     return value;\n * };\n * //Inserting a Date object into DataModel\n * const dm = newDataModel([{key:'key1',value:new Date()},{key:'key2',value:new Date()}]);\n * //The value will be in 'yyyy-MM-dd hh:mm:ss' format\n * \n * Note: \n * 1. Special values not processed by convertValue are stored in the DataModel as references. \n *    Changes to the original object will also reflect in the DataModel.\n * 2. After customizing the handling of special values, ensure to return the object for all other cases.\n *    This ensures that undefined values are still stored in the DataModel.\n */\ninterface ConvertValue {\n    (value: any): any;\n};\n/**\n * The `DataWrapper` class provides a flexible key-value storage container\n * within the `hisondev` solution. It allows storing various data types,\n * including string value and `DataModel` instances.\n *\n * ## Core Features:\n * - **Key-Value Storage:**\n *   - Supports dynamic insertion and retrieval of key-value pairs.\n *   - Ensures that keys are always strings.\n * - **Integration with `DataModel`:**\n *   - Allows storing `DataModel` instances under specific keys.\n *   - Provides methods to retrieve `DataModel` instances safely.\n * - **Serialization & Cloning:**\n *   - Supports deep cloning of stored data.\n *   - Provides JSON serialization for structured data handling.\n * - **Validation & Type Safety:**\n *   - Ensures type safety for values stored in `DataWrapper`.\n *   - Throws errors when attempting to insert invalid types.\n *\n * ## Data Integrity & Deep Copying:\n * - Uses `hison.utils.deepCopyObject()` to ensure stored objects are immutable.\n * - Prevents unintended modifications by returning cloned values.\n *\n * ## Example Usage:\n * ```typescript\n * // Creating a DataWrapper with key-value pairs\n * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n * console.log(dataWrapper.getString(\"name\")); // Output: \"Alice\"\n *\n * // Storing a DataModel instance\n * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n * dataWrapper.putDataModel(\"users\", dataModel);\n * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n *\n * // Serializing the DataWrapper to JSON\n * console.log(dataWrapper.getSerialized());\n * ```\n */\ninterface InterfaceDataWrapper {\n    /**\n     * Checks whether the current instance is a `DataWrapper`.\n     * This method is primarily used for type verification.\n     *\n     * ## Returns\n     * - **`boolean`**: Returns `true` if the instance is a `DataWrapper`, otherwise `false`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ key: \"value\" });\n     * console.log(dataWrapper.getIsDataWrapper()); // Output: true\n     * ```\n     *\n     * @returns {boolean} `true` if the instance is a `DataWrapper`, otherwise `false`.\n     */\n    getIsDataWrapper(): boolean;\n    /**\n     * Creates and returns a deep copy of the current `DataWrapper` instance.\n     * This method ensures that all stored key-value pairs are fully cloned, \n     * preventing unintended modifications between the original and copied instances.\n     *\n     * ## Implementation Details\n     * - Uses `hison.utils.deepCopyObject()` to recursively copy nested objects and arrays.\n     * - Supports cloning `DataModel` instances stored within the `DataWrapper`.\n     * - Prevents circular references by tracking previously copied objects.\n     * - Ensures that modifications in the cloned instance do not affect the original instance.\n     *\n     * ## Returns\n     * - **`DataWrapper`**: A new `DataWrapper` instance containing a deep copy of the original data.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n     * const clonedWrapper = dataWrapper.clone();\n     * \n     * console.log(clonedWrapper.getString(\"name\")); // Output: \"Alice\"\n     * console.log(clonedWrapper !== dataWrapper);   // Output: true (Cloned instance is independent)\n     *\n     * // Deep copy verification\n     * const originalNested = new hison.data.DataModel([{ id: 1, value: \"Test\" }]);\n     * const dataWrapperWithModel = new hison.data.DataWrapper({ nested: originalNested });\n     * const clonedWrapperWithModel = dataWrapperWithModel.clone();\n     * \n     * console.log(clonedWrapperWithModel.getDataModel(\"nested\") !== originalNested); // Output: true\n     * ```\n     *\n     * @returns {InterfaceDataWrapper} A new `DataWrapper` instance with a deep copy of the stored data.\n     */\n    clone(): InterfaceDataWrapper | null;\n    /**\n     * Removes all stored key-value pairs in the `DataWrapper`, resetting it to an empty state.\n     * \n     * ## Behavior\n     * - Clears the internal storage by setting `_data` to an empty object.\n     * - Returns the same `DataWrapper` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataWrapper`**: The current instance after clearing all stored data.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ key1: \"value1\", key2: \"value2\" });\n     * console.log(dataWrapper.size()); // Output: 2\n     * \n     * dataWrapper.clear();\n     * console.log(dataWrapper.size()); // Output: 0\n     * ```\n     *\n     * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after clearing all data.\n     */\n    clear(): InterfaceDataWrapper;\n    /**\n     * Serializes the `DataWrapper` into a JSON string representation.\n     * Converts stored `DataModel` instances into their row data format for proper serialization.\n     *\n     * ## Behavior\n     * - Iterates through all key-value pairs in the `DataWrapper`.\n     * - If a value is a `DataModel`, it is converted to an array of rows using `getRows()`.\n     * - Other values are stored as-is.\n     * - The final object is serialized into a JSON string.\n     *\n     * ## Returns\n     * - **`string`**: A JSON string representation of the `DataWrapper` contents.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * const dataWrapper = new hison.data.DataWrapper({ users: dataModel, status: \"active\" });\n     * \n     * console.log(dataWrapper.getSerialized());\n     * // Output: '{\"users\":[{\"id\":1,\"name\":\"Alice\"}],\"status\":\"active\"}'\n     * ```\n     *\n     * @returns {string} JSON string representation of the stored data.\n     */\n    getSerialized(): string;\n    /**\n     * Retrieves the value associated with the specified key from the `DataWrapper`.\n     * If the value exists, a deep copy is returned to prevent unintended modifications.\n     *\n     * ## Parameters\n     * - `key` **(string)**: The key associated with the value to retrieve.\n     *\n     * ## Behavior\n     * - Throws an error if `key` is not a string.\n     * - If the key exists, returns a deep copy of the stored value.\n     * - If the key does not exist, returns `null`.\n     *\n     * ## Returns\n     * - **`DataModel | string | null`**: A deep copy of the stored value, or `null` if the key is not found.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ message: \"Hello\", users: new hison.data.DataModel([{ id: 1 }]) });\n     * \n     * console.log(dataWrapper.get(\"message\")); // Output: \"Hello\"\n     * console.log(dataWrapper.get(\"users\"));   // Output: Deep copy of the DataModel instance\n     * console.log(dataWrapper.get(\"nonExistentKey\")); // Output: null\n     * ```\n     *\n     * @param {string} key The key to retrieve the associated value.\n     * @returns {InterfaceDataModel | string | null} A deep copy of the stored value, or `null` if the key is not found.\n     */\n    get(key: string): InterfaceDataModel | string | null;\n    /**\n     * Retrieves the string value associated with the specified key from the `DataWrapper`.\n     * Ensures that the retrieved value is explicitly a string before returning it.\n     *\n     * ## Parameters\n     * - `key` **(string)**: The key associated with the string value to retrieve.\n     *\n     * ## Behavior\n     * - Throws an error if `key` is not a string.\n     * - Throws an error if the value associated with `key` is not a string.\n     * - Returns the string value if it exists; otherwise, returns `null`.\n     *\n     * ## Returns\n     * - **`string | null`**: The associated string value, or `null` if the key is not found.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ status: \"active\", count: 5 });\n     * \n     * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\n     * console.log(dataWrapper.getString(\"nonExistentKey\")); // Output: null\n     *\n     * // Throws an error: \"The data does not contain the specified string value.\"\n     * console.log(dataWrapper.getString(\"count\"));\n     * ```\n     *\n     * @param {string} key The key associated with the string value.\n     * @returns {string | null} The associated string value, or `null` if not found.\n     * @throws {Error} If the key is not a string or if the stored value is not a string.\n     */\n    getString(key: string): string | null;\n    /**\n     * Retrieves the `DataModel` instance associated with the specified key from the `DataWrapper`.\n     * Ensures that the retrieved value is a valid `DataModel` before returning a cloned copy.\n     *\n     * ## Parameters\n     * - `key` **(string)**: The key associated with the `DataModel` instance to retrieve.\n     *\n     * ## Behavior\n     * - Throws an error if `key` is not a string.\n     * - Throws an error if the value associated with `key` is not a valid `DataModel` instance.\n     * - Returns a deep-cloned copy of the `DataModel` to maintain data integrity.\n     *\n     * ## Returns\n     * - **`DataModel`**: A cloned `DataModel` instance retrieved from the `DataWrapper`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * const dataWrapper = new hison.data.DataWrapper({ users: dataModel });\n     * \n     * const clonedDataModel = dataWrapper.getDataModel(\"users\");\n     * console.log(clonedDataModel.getRowCount()); // Output: 1\n     *\n     * // Throws an error: \"The data does not contain the specified data-model value.\"\n     * console.log(dataWrapper.getDataModel(\"nonExistentKey\"));\n     * ```\n     *\n     * @param {string} key The key associated with the `DataModel` instance.\n     * @returns {InterfaceDataModel} A cloned `DataModel` instance retrieved from the `DataWrapper`.\n     * @throws {Error} If the key is not a string or if the stored value is not a valid `DataModel`.\n     */\n    getDataModel(key: string): InterfaceDataModel;\n    /**\n     * Inserts or updates a key-value pair in the `DataWrapper`.\n     * Allows storing primitive values, strings, and `DataModel` instances.\n     *\n     * ## Parameters\n     * - `key` **(string)**: The key under which the value will be stored.\n     * - `value` **(any)**: The value to be stored. Can be a string, number, boolean, `DataModel`, or other valid types.\n     *\n     * ## Behavior\n     * - Calls the internal `_put()` method to validate and store the value.\n     * - If the key already exists, its value is updated.\n     * - Returns the current `DataWrapper` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataWrapper`**: The current instance after inserting/updating the value.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper();\n     * \n     * // Storing a string value\n     * dataWrapper.put(\"status\", \"active\");\n     * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\n     * \n     * // Storing a DataModel instance\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * dataWrapper.put(\"users\", dataModel);\n     * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n     * ```\n     *\n     * @param {string} key The key under which the value is stored.\n     * @param {any} value The value to store.\n     * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\n     */\n    put(key: string, value: any): InterfaceDataWrapper;\n    /**\n     * Inserts or updates a key-value pair in the `DataWrapper`, ensuring that the value is a string-convertible type.\n     * Only accepts primitive types (`string`, `number`, `boolean`, `bigint`, `symbol`) or `null`.\n     *\n     * ## Parameters\n     * - `key` **(string)**: The key under which the value will be stored.\n     * - `value` **(string | number | boolean | bigint | symbol | null)**: The value to be stored, \n     *   restricted to types that can be converted to a string.\n     *\n     * ## Behavior\n     * - Throws an error if `key` is not a string.\n     * - Throws an error if `value` is not of a valid type.\n     * - Calls the internal `_put()` method to store the value.\n     * - Returns the current `DataWrapper` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataWrapper`**: The current instance after inserting/updating the value.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper();\n     * \n     * // Storing a string value\n     * dataWrapper.putString(\"status\", \"active\");\n     * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\n     *\n     * // Storing a number (converted to string internally)\n     * dataWrapper.putString(\"count\", 10);\n     * console.log(dataWrapper.getString(\"count\")); // Output: \"10\"\n     *\n     * // Throws an error: \"Please insert only values convertible to string type.\"\n     * dataWrapper.putString(\"invalid\", { key: \"value\" });\n     * ```\n     *\n     * @param {string} key The key under which the value is stored.\n     * @param {string | number | boolean | bigint | symbol | null} value The value to store.\n     * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\n     * @throws {Error} If `key` is not a string or `value` is not a valid type.\n     */\n    putString(key: string, value: string | number | boolean | bigint | symbol | null): InterfaceDataWrapper;\n    /**\n     * Inserts or updates a `DataModel` instance in the `DataWrapper`.\n     * Ensures that the stored value is a valid `DataModel`.\n     *\n     * ## Parameters\n     * - `key` **(string)**: The key under which the `DataModel` will be stored.\n     * - `value` **(`DataModel`)**: The `DataModel` instance to be stored.\n     *\n     * ## Behavior\n     * - Throws an error if `key` is not a string.\n     * - Throws an error if `value` is not a valid `DataModel` instance.\n     * - Calls the internal `_put()` method to store the `DataModel`.\n     * - Returns the current `DataWrapper` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataWrapper`**: The current instance after inserting/updating the `DataModel`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper();\n     * \n     * // Creating and storing a DataModel\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * dataWrapper.putDataModel(\"users\", dataModel);\n     * \n     * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n     *\n     * // Throws an error: \"Please insert only values of data-model type.\"\n     * dataWrapper.putDataModel(\"invalid\", \"not a DataModel\");\n     * ```\n     *\n     * @param {string} key The key under which the `DataModel` is stored.\n     * @param {InterfaceDataModel} value The `DataModel` instance to store.\n     * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\n     * @throws {Error} If `key` is not a string or `value` is not a valid `DataModel`.\n     */\n    putDataModel(key: string, value: InterfaceDataModel): InterfaceDataWrapper;\n    /**\n     * Converts the `DataWrapper` instance into a standard JavaScript object.\n     * If the stored values include `DataModel` instances, they are converted into object representations.\n     *\n     * ## Behavior\n     * - Iterates through all key-value pairs in the `DataWrapper`.\n     * - If a value is a `DataModel`, it is converted using `getObject()`.\n     * - Other values are returned as-is.\n     * - Returns a plain JavaScript object representation of the `DataWrapper`.\n     *\n     * ## Returns\n     * - **`Record<string, any>`**: A plain object containing all stored key-value pairs.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * const dataWrapper = new hison.data.DataWrapper({ users: dataModel, status: \"active\" });\n     * \n     * console.log(dataWrapper.getObject());\n     * // Output: { users: { cols: [\"id\", \"name\"], rows: [{ id: 1, name: \"Alice\" }] }, status: \"active\" }\n     * ```\n     *\n     * @returns {Record<string, any>} A plain object representation of the `DataWrapper` instance.\n     */\n    getObject(): Record<string, any>;\n    /**\n     * Checks whether the `DataWrapper` contains a specified key.\n     *\n     * ## Parameters\n     * - `key` **(string)**: The key to check for existence in the `DataWrapper`.\n     *\n     * ## Behavior\n     * - Throws an error if `key` is not a string.\n     * - Uses `hasOwnProperty()` to determine if the key exists in the stored data.\n     *\n     * ## Returns\n     * - **`boolean`**: `true` if the key exists, otherwise `false`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n     * \n     * console.log(dataWrapper.containsKey(\"name\")); // Output: true\n     * console.log(dataWrapper.containsKey(\"nonExistentKey\")); // Output: false\n     * ```\n     *\n     * @param {string} key The key to check for existence.\n     * @returns {boolean} `true` if the key exists, otherwise `false`.\n     * @throws {Error} If `key` is not a string.\n     */\n    containsKey(key: string): boolean;\n    /**\n     * Checks whether the `DataWrapper` is empty (i.e., contains no key-value pairs).\n     *\n     * ## Behavior\n     * - Determines emptiness by checking if the number of stored keys is `0`.\n     *\n     * ## Returns\n     * - **`boolean`**: `true` if the `DataWrapper` contains no data, otherwise `false`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper();\n     * console.log(dataWrapper.isEmpty()); // Output: true\n     * \n     * dataWrapper.put(\"status\", \"active\");\n     * console.log(dataWrapper.isEmpty()); // Output: false\n     * ```\n     *\n     * @returns {boolean} `true` if the `DataWrapper` contains no data, otherwise `false`.\n     */\n    isEmpty(): boolean;\n    /**\n     * Removes a key-value pair from the `DataWrapper` if the key exists.\n     *\n     * ## Parameters\n     * - `key` **(string)**: The key to be removed from the `DataWrapper`.\n     *\n     * ## Behavior\n     * - Throws an error if `key` is not a string.\n     * - Checks if the key exists using `hasOwnProperty()`.\n     * - If the key exists, it is deleted from the internal data storage.\n     * - Returns an object containing the updated `DataWrapper` and a boolean indicating success.\n     *\n     * ## Returns\n     * - **`{ data: DataWrapper, result: boolean }`**:\n     *   - `data`: The current `DataWrapper` instance after attempting removal.\n     *   - `result`: `true` if the key was successfully removed, otherwise `false`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n     * \n     * console.log(dataWrapper.containsKey(\"name\")); // Output: true\n     * \n     * const { data: updatedWrapper, result } = dataWrapper.remove(\"name\");\n     * console.log(result); // Output: true\n     * console.log(updatedWrapper.containsKey(\"name\")); // Output: false\n     *\n     * const { result: nonExistentResult } = dataWrapper.remove(\"nonExistentKey\");\n     * console.log(nonExistentResult); // Output: false\n     * ```\n     *\n     * @param {string} key The key to remove from the `DataWrapper`.\n     * @returns {{ data: InterfaceDataWrapper, result: boolean }} An object containing the updated `DataWrapper` and a success flag.\n     * @throws {Error} If `key` is not a string.\n     */\n    remove(key: string): { data: InterfaceDataWrapper, result: boolean };\n    /**\n     * Returns the number of key-value pairs stored in the `DataWrapper`.\n     *\n     * ## Behavior\n     * - Counts the number of keys present in the internal data storage.\n     *\n     * ## Returns\n     * - **`number`**: The total number of stored key-value pairs.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n     * console.log(dataWrapper.size()); // Output: 2\n     * \n     * dataWrapper.put(\"status\", \"active\");\n     * console.log(dataWrapper.size()); // Output: 3\n     * ```\n     *\n     * @returns {number} The number of stored key-value pairs in the `DataWrapper`.\n     */\n    size(): number;\n    /**\n     * Retrieves an array of all keys stored in the `DataWrapper`.\n     *\n     * ## Behavior\n     * - Returns a list of all keys currently stored in the `DataWrapper`.\n     * - If the `DataWrapper` is empty, returns an empty array.\n     *\n     * ## Returns\n     * - **`string[]`**: An array containing all stored keys.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n     * console.log(dataWrapper.keys()); // Output: [\"name\", \"age\"]\n     * \n     * dataWrapper.clear();\n     * console.log(dataWrapper.keys()); // Output: []\n     * ```\n     *\n     * @returns {string[]} An array of keys stored in the `DataWrapper`.\n     */\n    keys(): string[];\n    /**\n     * Retrieves an array of all values stored in the `DataWrapper`.\n     * Ensures that stored values are returned as deep copies to prevent unintended modifications.\n     *\n     * ## Behavior\n     * - Iterates through all key-value pairs in the `DataWrapper`.\n     * - Uses `hison.utils.deepCopyObject()` to return deep copies of stored values.\n     * - If the `DataWrapper` is empty, returns an empty array.\n     *\n     * ## Returns\n     * - **`any[]`**: An array containing deep copies of all stored values.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n     * console.log(dataWrapper.values()); // Output: [\"Alice\", 25]\n     * \n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * dataWrapper.put(\"users\", dataModel);\n     * console.log(dataWrapper.values()); // Output: [\"Alice\", 25, <cloned DataModel>]\n     * ```\n     *\n     * @returns {any[]} An array of deep-copied values stored in the `DataWrapper`.\n     */\n    values(): any[];\n};\n\n/**\n * The `DataModel` class provides a structured way to manage tabular data within the `hisondev` solution.\n * It is designed to store, manipulate, and retrieve data efficiently while ensuring type consistency\n * and validation. \n * \n * ## Core Features:\n * - **Column and Row Management:**\n *   - Supports dynamic addition and removal of columns and rows.\n *   - Ensures column consistency when inserting data.\n * - **Validation and Formatting:**\n *   - Allows setting a `DataModelValidator` to check column values.\n *   - Supports `DataModelFormatter` to format column values uniformly.\n * - **Filtering and Searching:**\n *   - Provides methods to filter rows based on conditions (`filterRows()`, `searchRows()`).\n *   - Allows searching rows and modifying data accordingly (`searchAndModify()`).\n * - **Sorting and Structuring:**\n *   - Supports ascending, descending, and reverse sorting on both columns and rows.\n * - **Serialization and Cloning:**\n *   - Enables deep copying of the entire `DataModel`.\n *   - Provides `getSerialized()` to retrieve a JSON string of the model.\n * - **Integration with `DataWrapper`**\n *   - DataWrapper is an instance for storing DataModel.\n *\n * ## Data Consistency and Validation:\n * - Uses `_deepCopy()` to ensure stored objects are immutable.\n * - Prevents invalid data types using `_getValidRowValue()`.\n * - Ensures uniform column data types to maintain consistency.\n *\n * ## Example Usage:\n * ```typescript\n * const dataModel = new hison.data.DataModel([\n *     { id: 1, name: \"Alice\", age: 25 },\n *     { id: 2, name: \"Bob\", age: 30 }\n * ]);\n * \n * // Add a new column\n * dataModel.addColumn(\"gender\");\n * \n * // Set a default value for a column\n * dataModel.setColumnSameValue(\"gender\", \"Unknown\");\n * \n * // Apply a formatting function to the age column\n * dataModel.setColumnSameFormat(\"age\", (value) => `${value} years old`);\n * \n * // Get filtered rows where age is greater than 25\n * const filtered = dataModel.filterRows(row => row.age > 25);\n * console.log(filtered);\n * ```\n *\n * ## Related Functions:\n * - `hison.setConvertValue()`: Sets the conversion logic for special values before insertion.\n *\n */\ninterface InterfaceDataModel {\n    /**\n     * Checks whether the current instance is a `DataModel`.\n     * This method is primarily used for type verification.\n     *\n     * ## Returns\n     * - **`boolean`**: Returns `true` if the instance is a `DataModel`, otherwise `false`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * console.log(dataModel.getIsDataModel()); // Output: true\n     * ```\n     *\n     * @returns {boolean} `true` if the instance is a `DataModel`, otherwise `false`.\n     */\n    getIsDataModel(): boolean;\n    /**\n     * Creates and returns a deep copy of the current `DataModel` instance.\n     * The cloned instance contains independent copies of all stored rows, \n     * ensuring that modifications in the cloned instance do not affect the original instance.\n     *\n     * ## Behavior\n     * - Uses the internal `_rows` data to initialize a new `DataModel` instance.\n     * - Ensures that all row data is duplicated to maintain data integrity.\n     *\n     * ## Returns\n     * - **`DataModel`**: A new `DataModel` instance containing a copy of the original rows.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * const clonedModel = dataModel.clone();\n     * \n     * console.log(clonedModel.getRowCount()); // Output: 1\n     * console.log(clonedModel !== dataModel); // Output: true (Cloned instance is independent)\n     * ```\n     *\n     * @returns {InterfaceDataModel} A new `DataModel` instance with a copy of the stored rows.\n     */\n    clone(): InterfaceDataModel;\n    /**\n     * Removes all stored rows and columns from the `DataModel`, resetting it to an empty state.\n     * \n     * ## Behavior\n     * - Clears the `_cols` array, removing all column definitions.\n     * - Clears the `_rows` array, removing all stored data.\n     * - Returns the same `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The current instance after clearing all stored data.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * console.log(dataModel.getRowCount()); // Output: 1\n     * \n     * dataModel.clear();\n     * console.log(dataModel.getRowCount()); // Output: 0\n     * console.log(dataModel.getColumns());  // Output: []\n     * ```\n     *\n     * @returns {InterfaceDataModel} The current `DataModel` instance after clearing all data.\n     */\n    clear(): InterfaceDataModel;\n    /**\n     * Serializes the `DataModel` instance into a JSON string representation.\n     * Converts the stored row data into a JSON format for easy storage or transmission.\n     *\n     * ## Behavior\n     * - Uses `JSON.stringify()` to serialize the `_rows` array.\n     * - Column definitions (`_cols`) are not included in the serialized output.\n     *\n     * ## Returns\n     * - **`string`**: A JSON string representation of the stored row data.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * console.log(dataModel.getSerialized());\n     * // Output: '[{\"id\":1,\"name\":\"Alice\"},{\"id\":2,\"name\":\"Bob\"}]'\n     * ```\n     *\n     * @returns {string} JSON string representation of the stored row data.\n     */\n    getSerialized(): string;\n    /**\n     * Checks whether the `DataModel` has defined columns.\n     * This method determines if the `DataModel` has been initialized with at least one column.\n     *\n     * ## Behavior\n     * - Returns `true` if `_cols` contains at least one column.\n     * - Returns `false` if no columns have been defined.\n     *\n     * ## Returns\n     * - **`boolean`**: `true` if columns are defined, otherwise `false`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n     * console.log(dataModel.isDeclare()); // Output: true\n     * \n     * const emptyModel = new hison.data.DataModel();\n     * console.log(emptyModel.isDeclare()); // Output: false\n     * ```\n     *\n     * @returns {boolean} `true` if columns are defined, otherwise `false`.\n     */\n    isDeclare(): boolean;\n    /**\n     * Retrieves an array of all column names defined in the `DataModel`.\n     * Returns a deep copy of the `_cols` array to prevent unintended modifications.\n     *\n     * ## Behavior\n     * - Uses `_deepCopy()` to return a copy of `_cols`, ensuring data integrity.\n     * - If no columns are defined, returns an empty array.\n     *\n     * ## Returns\n     * - **`string[]`**: An array of column names.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n     * \n     * const emptyModel = new hison.data.DataModel();\n     * console.log(emptyModel.getColumns()); // Output: []\n     * ```\n     *\n     * @returns {string[]} An array containing the column names.\n     */\n    getColumns(): string[];\n    /**\n     * Retrieves an array of all values in the specified column.\n     * Ensures that returned values are deep copies to prevent unintended modifications.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The column name from which to retrieve values.\n     *\n     * ## Behavior\n     * - Throws an error if `column` is not a valid string.\n     * - Throws an error if the specified column does not exist.\n     * - Iterates through all rows and extracts the values of the specified column.\n     * - Uses `_deepCopy()` to return deep copies of the values.\n     *\n     * ## Returns\n     * - **`any[]`**: An array containing all values from the specified column.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * console.log(dataModel.getColumnValues(\"name\")); // Output: [\"Alice\", \"Bob\"]\n     *\n     * // Throws an error: \"The column does not exist.\"\n     * console.log(dataModel.getColumnValues(\"age\"));\n     * ```\n     *\n     * @param {string} column The column name from which to retrieve values.\n     * @returns {any[]} An array of values from the specified column.\n     * @throws {Error} If the column is invalid or does not exist.\n     */\n    getColumnValues(column: string): any[];\n    /**\n     * Adds a new column to the `DataModel`.\n     * Ensures that all existing rows include the new column with a default value of `null`.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to be added.\n     *\n     * ## Behavior\n     * - Throws an error if `column` is not a valid string.\n     * - Calls `_addCol(column)` to validate and add the column.\n     * - Iterates through `_rows` and ensures each row includes the new column, assigning `null` if missing.\n     * - Returns the current `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The current instance after adding the new column.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n     * \n     * dataModel.addColumn(\"age\");\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n     * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\", age: null }\n     * ```\n     *\n     * @param {string} column The name of the column to add.\n     * @returns {InterfaceDataModel} The current `DataModel` instance after adding the column.\n     * @throws {Error} If the column is invalid or already exists.\n     */\n    addColumn(column: string): InterfaceDataModel;\n    /**\n     * Adds multiple new columns to the `DataModel`.\n     * Ensures that all existing rows include the newly added columns with a default value of `null`.\n     *\n     * ## Parameters\n     * - `columns` **(string[])**: An array of column names to be added.\n     *\n     * ## Behavior\n     * - Throws an error if `columns` is not an array.\n     * - Iterates through the provided column names and calls `_addCol(column)` to validate and add each column.\n     * - Ensures that all existing rows include the new columns, assigning `null` if missing.\n     * - Returns the current `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The current instance after adding the new columns.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n     * \n     * dataModel.addColumns([\"age\", \"email\"]);\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\", \"email\"]\n     * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\", age: null, email: null }\n     * ```\n     *\n     * @param {string[]} columns An array of column names to add.\n     * @returns {InterfaceDataModel} The current `DataModel` instance after adding the columns.\n     * @throws {Error} If `columns` is not an array or contains invalid column names.\n     */\n    addColumns(columns: string[]): InterfaceDataModel;\n    /**\n     * Sets the same value for all rows in the specified column.\n     * If the column does not exist, it is created before assigning values.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to update.\n     * - `value` **(any)**: The value to be assigned to all rows in the specified column.\n     *\n     * ## Behavior\n     * - Throws an error if `value` is `undefined`.\n     * - Calls `_getValidColValue(column)` to validate the column name.\n     * - If the column does not exist, `_addCol(column)` is called to add it.\n     * - Iterates through all rows and assigns the specified value using `_getValidRowValue()`.\n     * - Returns the current `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The current instance after setting the column values.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }]);\n     * \n     * // Set the same value for all rows in the \"status\" column\n     * dataModel.setColumnSameValue(\"status\", \"active\");\n     * console.log(dataModel.getColumnValues(\"status\")); // Output: [\"active\", \"active\"]\n     * \n     * // If the column does not exist, it is created automatically\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"status\"]\n     * ```\n     *\n     * @param {string} column The name of the column to set the value for.\n     * @param {any} value The value to assign to all rows in the column.\n     * @returns {InterfaceDataModel} The current `DataModel` instance after updating the column.\n     * @throws {Error} If `value` is `undefined` or if the column name is invalid.\n     */\n    setColumnSameValue(column: string, value: any): InterfaceDataModel;\n    /**\n     * Applies a formatting function to all values in the specified column.\n     * The formatter function transforms each row's value in the column.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to format.\n     * - `formatter` **(`DataModelFormatter`)**: A function that takes a value and returns a formatted version of it.\n     *\n     * ## Behavior\n     * - Throws an error if `formatter` is not a valid function.\n     * - Calls `_getValidColValue(column)` to validate the column name.\n     * - Throws an error if the specified column does not exist.\n     * - Iterates through all rows and applies the `formatter` function to each value in the column.\n     * - Ensures that the formatted value is valid using `_getValidRowValue()`.\n     * - Returns the current `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The current instance after formatting the column values.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, price: 1000 },\n     *     { id: 2, price: 2000 }\n     * ]);\n     * \n     * // Format the \"price\" column by adding a currency symbol\n     * dataModel.setColumnSameFormat(\"price\", value => `$${value}`);\n     * console.log(dataModel.getColumnValues(\"price\")); // Output: [\"$1000\", \"$2000\"]\n     * \n     * // Throws an error if the column does not exist\n     * // dataModel.setColumnSameFormat(\"discount\", value => `${value}%`);\n     * ```\n     *\n     * @param {string} column The name of the column to format.\n     * @param {DataModelFormatter} formatter A function that transforms each value in the column.\n     * @returns {InterfaceDataModel} The current `DataModel` instance after formatting the column.\n     * @throws {Error} If `formatter` is not a function or if the column does not exist.\n     */\n    setColumnSameFormat(column: string, formatter: DataModelFormatter): InterfaceDataModel;\n    /**\n     * Retrieves a deep copy of the row at the specified index.\n     * Ensures that modifications to the returned row do not affect the original data.\n     *\n     * ## Parameters\n     * - `rowIndex` **(number)**: The index of the row to retrieve.\n     *\n     * ## Behavior\n     * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n     * - Uses `_deepCopy()` to return a copy of the row, preventing unintended modifications.\n     *\n     * ## Returns\n     * - **`Record<string, any>`**: A deep copy of the row data as an object.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\" }\n     *\n     * // Throws an error if the index is out of bounds\n     * // console.log(dataModel.getRow(10));\n     * ```\n     *\n     * @param {number} rowIndex The index of the row to retrieve.\n     * @returns {Record<string, any>} A deep copy of the row data.\n     * @throws {Error} If `rowIndex` is out of bounds.\n     */\n    getRow(rowIndex: number): Record<string, any>;\n    /**\n     * Retrieves the row at the specified index as a new `DataModel` instance.\n     * Converts the row object into a `DataModel` for further structured operations.\n     *\n     * ## Parameters\n     * - `rowIndex` **(number)**: The index of the row to retrieve.\n     *\n     * ## Behavior\n     * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n     * - Initializes a new `DataModel` using the retrieved row data.\n     *\n     * ## Returns\n     * - **`DataModel`**: A new `DataModel` instance containing the specified row.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * const rowDataModel = dataModel.getRowAsDataModel(0);\n     * console.log(rowDataModel.getRowCount()); // Output: 1\n     * console.log(rowDataModel.getColumns()); // Output: [\"id\", \"name\"]\n     *\n     * // Throws an error if the index is out of bounds\n     * // console.log(dataModel.getRowAsDataModel(10));\n     * ```\n     *\n     * @param {number} rowIndex The index of the row to retrieve.\n     * @returns {InterfaceDataModel} A new `DataModel` instance containing the row data.\n     * @throws {Error} If `rowIndex` is out of bounds.\n     */\n    getRowAsDataModel(rowIndex: number): InterfaceDataModel;\n    /**\n     * Adds a new row to the `DataModel` at the specified index or appends it to the end.\n     * If no parameters are provided, an empty row is added.\n     *\n     * ## Parameters\n     * - `rowIndexOrRow` **(number | Object, optional)**: The index at which to insert the row, or the row data to insert.\n     * - `row` **(Object, optional)**: The row data to insert (only required when `rowIndexOrRow` is a number).\n     *\n     * ## Behavior\n     * - If **no parameters** are provided, an empty row is appended.\n     * - If **only a number is provided**, an empty row is inserted at that index.\n     * - If **only an object is provided**, it is inserted as a new row at the end.\n     * - If **both a number and an object are provided**, the row is inserted at the specified index.\n     * - Throws an error if attempting to add a row without first defining columns.\n     *\n     * ## Returns\n     * - **`DataModel`**: The current instance after adding the new row.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n     * \n     * // Add an empty row\n     * dataModel.addRow();\n     * console.log(dataModel.getRowCount()); // Output: 1\n     * console.log(dataModel.getRow(0)); // Output: { id: null, name: null }\n     * \n     * // Add a row with data\n     * dataModel.addRow({ id: 1, name: \"Alice\" });\n     * console.log(dataModel.getRow(1)); // Output: { id: 1, name: \"Alice\" }\n     * \n     * // Insert a row at index 1\n     * dataModel.addRow(1, { id: 2, name: \"Bob\" });\n     * console.log(dataModel.getRow(1)); // Output: { id: 2, name: \"Bob\" }\n     * \n     * // Throws an error: \"Please define the column first.\"\n     * // new hison.data.DataModel().addRow();\n     * ```\n     *\n     * @param {number | Object} [rowIndexOrRow] The index at which to insert the row, or the row data.\n     * @param {Object} [row] The row data to insert (only required if `rowIndexOrRow` is a number).\n     * @returns {InterfaceDataModel} The current `DataModel` instance after adding the row.\n     * @throws {Error} If columns are not defined or parameters are invalid.\n     */\n    addRow(rowIndexOrRow?: number | Record<string, any>, row?: Record<string, any>): InterfaceDataModel;\n    /**\n     * Retrieves a deep copy of a range of rows from the `DataModel`.\n     * Ensures that modifications to the returned rows do not affect the original data.\n     *\n     * ## Parameters\n     * - `startRow` **(number, optional, default = `0`)**: The starting index of the row range.\n     * - `endRow` **(number, optional, default = `null`)**: The ending index of the row range (inclusive).\n     *\n     * ## Behavior\n     * - Calls `_getValidRowIndex(startRow)` and `_getValidRowIndex(endRow)` to validate row indices.\n     * - If `endRow` is `null`, retrieves rows from `startRow` to the last row.\n     * - Uses `_deepCopy()` to ensure the returned rows are independent copies.\n     *\n     * ## Returns\n     * - **`Record<string, any>[]`**: An array of deep-copied row objects.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" },\n     *     { id: 3, name: \"Charlie\" }\n     * ]);\n     * \n     * console.log(dataModel.getRows()); \n     * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n     * \n     * console.log(dataModel.getRows(1, 2)); \n     * // Output: [{ id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n     * \n     * // Throws an error if startRow or endRow is out of bounds\n     * // console.log(dataModel.getRows(5));\n     * ```\n     *\n     * @param {number} [startRow=0] The starting index of the row range.\n     * @param {number} [endRow=null] The ending index of the row range (inclusive).\n     * @returns {Record<string, any>[]} An array of deep-copied rows.\n     * @throws {Error} If `startRow` or `endRow` is out of bounds.\n     */\n    getRows(startRow?: number, endRow?: number): Record<string, any>[];\n    /**\n     * Retrieves a range of rows as a new `DataModel` instance.\n     * Ensures that the returned `DataModel` contains independent copies of the selected rows.\n     *\n     * ## Parameters\n     * - `startRow` **(number, optional, default = `0`)**: The starting index of the row range.\n     * - `endRow` **(number, optional, default = `null`)**: The ending index of the row range (inclusive).\n     *\n     * ## Behavior\n     * - Calls `_getValidRowIndex(startRow)` and `_getValidRowIndex(endRow)` to validate row indices.\n     * - If `startRow` is `0` and `endRow` is `null`, returns a clone of the entire `DataModel`.\n     * - Uses `_deepCopy()` to ensure the returned rows are independent.\n     * - Returns a new `DataModel` containing the selected rows.\n     *\n     * ## Returns\n     * - **`DataModel`**: A new `DataModel` instance containing the selected row range.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" },\n     *     { id: 3, name: \"Charlie\" }\n     * ]);\n     * \n     * const newModel = dataModel.getRowsAsDataModel(1, 2);\n     * console.log(newModel.getRowCount()); // Output: 2\n     * console.log(newModel.getRow(0)); // Output: { id: 2, name: \"Bob\" }\n     *\n     * // Retrieves all rows as a new DataModel\n     * const clonedModel = dataModel.getRowsAsDataModel();\n     * console.log(clonedModel.getRowCount()); // Output: 3\n     * ```\n     *\n     * @param {number} [startRow=0] The starting index of the row range.\n     * @param {number} [endRow=null] The ending index of the row range (inclusive).\n     * @returns {InterfaceDataModel} A new `DataModel` instance containing the selected rows.\n     * @throws {Error} If `startRow` or `endRow` is out of bounds.\n     */\n    getRowsAsDataModel(startRow?: number, endRow?: number): InterfaceDataModel;\n    /**\n     * Adds multiple rows to the `DataModel`.\n     * Each row is validated and inserted into the existing dataset.\n     *\n     * ## Parameters\n     * - `rows` **(`Record<string, any>[]`)**: An array of row objects to be added.\n     *\n     * ## Behavior\n     * - Calls `_put(rows)` to process and insert the provided rows.\n     * - Ensures that column structures are maintained.\n     * - Returns the current `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The current instance after adding the new rows.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n     * \n     * // Add multiple rows\n     * dataModel.addRows([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * console.log(dataModel.getRowCount()); // Output: 2\n     * console.log(dataModel.getRow(1)); // Output: { id: 2, name: \"Bob\" }\n     * ```\n     *\n     * @param {Record<string, any>[]} rows An array of row objects to add.\n     * @returns {InterfaceDataModel} The current `DataModel` instance after adding the rows.\n     * @throws {Error} If `rows` contain invalid data.\n     */\n    addRows(rows: Record<string, any>[]): InterfaceDataModel;\n    /**\n     * Converts the `DataModel` instance into a standard JavaScript object.\n     * The returned object includes column definitions, row data, and metadata.\n     *\n     * ## Behavior\n     * - Uses `_deepCopy()` to ensure that returned data is independent of the original `DataModel`.\n     * - Includes the following properties in the returned object:\n     *   - `cols`: An array of column names.\n     *   - `rows`: An array of row objects.\n     *   - `colCount`: The total number of columns.\n     *   - `rowCount`: The total number of rows.\n     *   - `isDeclare`: A boolean indicating whether columns are defined.\n     *\n     * ## Returns\n     * - **`Record<string, any>`**: A plain object representing the `DataModel` structure.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * console.log(dataModel.getObject());\n     * // Output:\n     * // {\n     * //   cols: [\"id\", \"name\"],\n     * //   rows: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }],\n     * //   colCount: 2,\n     * //   rowCount: 2,\n     * //   isDeclare: true\n     * // }\n     * ```\n     *\n     * @returns {Record<string, any>} A plain object representing the `DataModel` structure.\n     */\n    getObject(): Record<string, any>;\n    /**\n     * Retrieves the value at the specified row index and column name.\n     * Ensures that the returned value is a deep copy to prevent unintended modifications.\n     *\n     * ## Parameters\n     * - `rowIndex` **(number)**: The index of the row from which to retrieve the value.\n     * - `column` **(string)**: The name of the column containing the desired value.\n     *\n     * ## Behavior\n     * - Calls `_getValidColValue(column)` to validate the column name.\n     * - Throws an error if the specified column does not exist.\n     * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n     * - Uses `_deepCopy()` to return an independent copy of the value.\n     *\n     * ## Returns\n     * - **`any`**: A deep copy of the value stored at the specified row and column.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * console.log(dataModel.getValue(0, \"name\")); // Output: \"Alice\"\n     * \n     * // Throws an error if the column does not exist\n     * // console.log(dataModel.getValue(0, \"age\"));\n     * ```\n     *\n     * @param {number} rowIndex The index of the row to retrieve the value from.\n     * @param {string} column The column name containing the value.\n     * @returns {any} A deep copy of the value stored at the specified row and column.\n     * @throws {Error} If `rowIndex` or `column` is invalid.\n     */\n    getValue(rowIndex: number, column: string): any;\n    /**\n     * Sets a value at the specified row index and column name.\n     * Ensures that the value is valid and maintains data integrity.\n     *\n     * ## Parameters\n     * - `rowIndex` **(number)**: The index of the row where the value should be set.\n     * - `column` **(string)**: The name of the column where the value should be stored.\n     * - `value` **(any)**: The value to be assigned to the specified row and column.\n     *\n     * ## Behavior\n     * - Throws an error if `value` is `undefined`.\n     * - Calls `_getValidColValue(column)` to validate the column name.\n     * - Throws an error if the specified column does not exist.\n     * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n     * - Calls `_getValidRowValue(rowIndex, column, value)` to ensure the value is properly formatted.\n     * - Updates the value at the specified row and column.\n     * - Returns the current `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The current instance after updating the value.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * dataModel.setValue(0, \"name\", \"Charlie\");\n     * console.log(dataModel.getValue(0, \"name\")); // Output: \"Charlie\"\n     *\n     * // Throws an error if trying to set `undefined`\n     * // dataModel.setValue(1, \"name\", undefined);\n     *\n     * // Throws an error if the column does not exist\n     * // dataModel.setValue(0, \"age\", 25);\n     * ```\n     *\n     * @param {number} rowIndex The index of the row where the value should be set.\n     * @param {string} column The column name where the value should be stored.\n     * @param {any} value The value to assign.\n     * @returns {InterfaceDataModel} The current `DataModel` instance after updating the value.\n     * @throws {Error} If `value` is `undefined` or if `rowIndex` or `column` is invalid.\n     */\n    setValue(rowIndex: number, column: string, value: any): InterfaceDataModel;\n    /**\n     * Removes a column from the `DataModel`, deleting its values from all rows.\n     * Ensures that the column exists before attempting removal.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to remove.\n     *\n     * ## Behavior\n     * - Calls `_getValidColValue(column)` to validate the column name.\n     * - Throws an error if the specified column does not exist.\n     * - Iterates through all rows and removes the specified column.\n     * - Updates `_cols` to exclude the removed column.\n     * - Returns the current `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The current instance after removing the column.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 }\n     * ]);\n     * \n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n     * \n     * dataModel.removeColumn(\"age\");\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n     *\n     * // Throws an error if the column does not exist\n     * // dataModel.removeColumn(\"salary\");\n     * ```\n     *\n     * @param {string} column The name of the column to remove.\n     * @returns {InterfaceDataModel} The current `DataModel` instance after removing the column.\n     * @throws {Error} If `column` is invalid or does not exist.\n     */\n    removeColumn(column: string): InterfaceDataModel;\n    /**\n     * Removes multiple columns from the `DataModel`, deleting their values from all rows.\n     * Ensures that each specified column exists before attempting removal.\n     *\n     * ## Parameters\n     * - `columns` **(string[])**: An array of column names to remove.\n     *\n     * ## Behavior\n     * - Iterates through the `columns` array and calls `removeColumn(column)` for each entry.\n     * - If any column does not exist, `removeColumn` will throw an error.\n     * - Returns the current `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The current instance after removing the specified columns.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25, city: \"New York\" },\n     *     { id: 2, name: \"Bob\", age: 30, city: \"Los Angeles\" }\n     * ]);\n     * \n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\", \"city\"]\n     * \n     * dataModel.removeColumns([\"age\", \"city\"]);\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n     *\n     * // Throws an error if a column does not exist\n     * // dataModel.removeColumns([\"salary\", \"bonus\"]);\n     * ```\n     *\n     * @param {string[]} columns An array of column names to remove.\n     * @returns {InterfaceDataModel} The current `DataModel` instance after removing the columns.\n     * @throws {Error} If any column does not exist.\n     */\n    removeColumns(columns: string[]): InterfaceDataModel;\n    /**\n     * Removes a row from the `DataModel` at the specified index and returns the removed row.\n     * Ensures that the row index is valid before removal.\n     *\n     * ## Parameters\n     * - `rowIndex` **(number, optional, default = `0`)**: The index of the row to remove.\n     *\n     * ## Behavior\n     * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n     * - Uses `splice()` to remove the row from `_rows` and returns the removed row.\n     *\n     * ## Returns\n     * - **`Record<string, any>`**: The removed row object.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" },\n     *     { id: 3, name: \"Charlie\" }\n     * ]);\n     * \n     * console.log(dataModel.getRowCount()); // Output: 3\n     * \n     * const removedRow = dataModel.removeRow(1);\n     * console.log(removedRow); // Output: { id: 2, name: \"Bob\" }\n     * console.log(dataModel.getRowCount()); // Output: 2\n     *\n     * // Throws an error if rowIndex is out of bounds\n     * // dataModel.removeRow(10);\n     * ```\n     *\n     * @param {number} [rowIndex=0] The index of the row to remove.\n     * @returns {Record<string, any>} The removed row object.\n     * @throws {Error} If `rowIndex` is out of bounds.\n     */\n    removeRow(rowIndex?: number): Record<string, any>;\n    /**\n     * Retrieves the total number of columns in the `DataModel`.\n     *\n     * ## Behavior\n     * - Returns the length of the `_cols` array, which represents the column definitions.\n     *\n     * ## Returns\n     * - **`number`**: The total number of columns in the `DataModel`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\", \"age\"]);\n     * console.log(dataModel.getColumnCount()); // Output: 3\n     * \n     * dataModel.removeColumn(\"age\");\n     * console.log(dataModel.getColumnCount()); // Output: 2\n     * ```\n     *\n     * @returns {number} The number of columns in the `DataModel`.\n     */\n    getColumnCount(): number;\n    /**\n     * Retrieves the total number of rows in the `DataModel`.\n     *\n     * ## Behavior\n     * - Returns the length of the `_rows` array, which represents the stored data rows.\n     *\n     * ## Returns\n     * - **`number`**: The total number of rows in the `DataModel`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * console.log(dataModel.getRowCount()); // Output: 2\n     * \n     * dataModel.addRow({ id: 3, name: \"Charlie\" });\n     * console.log(dataModel.getRowCount()); // Output: 3\n     * ```\n     *\n     * @returns {number} The number of rows in the `DataModel`.\n     */\n    getRowCount(): number;\n    /**\n     * Checks whether the `DataModel` contains a specified column.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to check.\n     *\n     * ## Behavior\n     * - Calls `_hasColumn(column)` to determine if the column exists.\n     * - Returns `true` if the column is found in `_cols`, otherwise `false`.\n     *\n     * ## Returns\n     * - **`boolean`**: `true` if the column exists, otherwise `false`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n     * \n     * console.log(dataModel.hasColumn(\"name\")); // Output: true\n     * console.log(dataModel.hasColumn(\"age\")); // Output: false\n     * ```\n     *\n     * @param {string} column The column name to check.\n     * @returns {boolean} `true` if the column exists, otherwise `false`.\n     */\n    hasColumn(column: string): boolean;\n    /**\n     * Restricts the `DataModel` to only the specified columns by removing all other columns.\n     * Ensures that only the columns listed in `columns` remain in the dataset.\n     *\n     * ## Parameters\n     * - `columns` **(string[])**: An array of column names to keep in the `DataModel`.\n     *\n     * ## Behavior\n     * - Filters `_cols` to identify columns that are **not** in the provided `columns` list.\n     * - Calls `removeColumns()` to remove those columns from the dataset.\n     * - Returns the modified `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The modified `DataModel` instance with only the specified columns retained.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 }\n     * ]);\n     * \n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n     * \n     * // Keep only \"id\" and \"name\" columns\n     * dataModel.setValidColumns([\"id\", \"name\"]);\n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n     * ```\n     *\n     * @param {string[]} columns An array of column names to retain.\n     * @returns {InterfaceDataModel} The modified `DataModel` instance with only the specified columns retained.\n     */\n    setValidColumns(columns: string[]): InterfaceDataModel;\n    /**\n     * Checks whether a specified column contains only non-null values.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to check.\n     *\n     * ## Behavior\n     * - Calls `_getNullColumnFirstRowIndex(column)` to find the first occurrence of a `null` value in the column.\n     * - If no `null` values are found, returns `true`; otherwise, returns `false`.\n     *\n     * ## Returns\n     * - **`boolean`**: `true` if the column has no `null` values, otherwise `false`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: null },\n     *     { id: 3, name: \"Charlie\" }\n     * ]);\n     * \n     * console.log(dataModel.isNotNullColumn(\"id\")); // Output: true\n     * console.log(dataModel.isNotNullColumn(\"name\")); // Output: false\n     * ```\n     *\n     * @param {string} column The column name to check.\n     * @returns {boolean} `true` if the column has no `null` values, otherwise `false`.\n     * @throws {Error} If `column` does not exist.\n     */\n    isNotNullColumn(column: string): boolean;\n    /**\n     * Finds and returns the first row where the specified column contains a `null` value.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to check.\n     *\n     * ## Behavior\n     * - Calls `_getNullColumnFirstRowIndex(column)` to locate the first occurrence of a `null` value in the column.\n     * - If no `null` values are found, returns `null`.\n     * - If a `null` value is found, retrieves and returns the corresponding row using `getRow()`.\n     *\n     * ## Returns\n     * - **`Record<string, any> | null`**: The first row where the column has a `null` value, or `null` if no such row exists.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: null },\n     *     { id: 3, name: \"Charlie\" }\n     * ]);\n     * \n     * console.log(dataModel.findFirstRowNullColumn(\"name\"));\n     * // Output: { id: 2, name: null }\n     * \n     * console.log(dataModel.findFirstRowNullColumn(\"id\"));\n     * // Output: null (no null values in the \"id\" column)\n     * ```\n     *\n     * @param {string} column The column name to check for `null` values.\n     * @returns {Record<string, any> | null} The first row where the column has a `null` value, or `null` if none exist.\n     * @throws {Error} If `column` does not exist.\n     */\n    findFirstRowNullColumn(column: string): Record<string, any> | null;\n    /**\n     * Checks whether a specified column contains only unique values (i.e., no duplicate values).\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to check.\n     *\n     * ## Behavior\n     * - Calls `_getDuplColumnFirstRowIndex(column)` to find the first occurrence of a duplicate value in the column.\n     * - If no duplicates are found, returns `true`; otherwise, returns `false`.\n     *\n     * ## Returns\n     * - **`boolean`**: `true` if the column has no duplicate values, otherwise `false`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" },\n     *     { id: 3, name: \"Alice\" }\n     * ]);\n     * \n     * console.log(dataModel.isNotDuplColumn(\"id\")); // Output: true\n     * console.log(dataModel.isNotDuplColumn(\"name\")); // Output: false\n     * ```\n     *\n     * @param {string} column The column name to check for duplicate values.\n     * @returns {boolean} `true` if the column has no duplicate values, otherwise `false`.\n     * @throws {Error} If `column` does not exist.\n     */\n    isNotDuplColumn(column: string): boolean;\n    /**\n     * Finds and returns the first row where the specified column contains a duplicate value.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to check for duplicate values.\n     *\n     * ## Behavior\n     * - Calls `_getDuplColumnFirstRowIndex(column)` to locate the first occurrence of a duplicate value in the column.\n     * - If no duplicate values are found, returns `null`.\n     * - If a duplicate value is found, retrieves and returns the corresponding row using `getRow()`.\n     *\n     * ## Returns\n     * - **`Record<string, any> | null`**: The first row where the column has a duplicate value, or `null` if no duplicates exist.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" },\n     *     { id: 3, name: \"Alice\" }\n     * ]);\n     * \n     * console.log(dataModel.findFirstRowDuplColumn(\"name\"));\n     * // Output: { id: 3, name: \"Alice\" } (the second occurrence of \"Alice\")\n     * \n     * console.log(dataModel.findFirstRowDuplColumn(\"id\"));\n     * // Output: null (no duplicate values in the \"id\" column)\n     * ```\n     *\n     * @param {string} column The column name to check for duplicate values.\n     * @returns {Record<string, any> | null} The first row where the column has a duplicate value, or `null` if none exist.\n     * @throws {Error} If `column` does not exist.\n     */\n    findFirstRowDuplColumn(column: string): Record<string, any> | null;\n    /**\n     * Checks whether all values in the specified column satisfy a given validation function.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to validate.\n     * - `validator` **(`DataModelValidator`)**: A function that takes a value as input and returns `true` if the value is valid.\n     *\n     * ## Behavior\n     * - Calls `_getInValidColumnFirstRowIndex(column, validator)` to check for invalid values.\n     * - If no invalid values are found, returns `true`; otherwise, returns `false`.\n     *\n     * ## Returns\n     * - **`boolean`**: `true` if all values in the column are valid, otherwise `false`.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, age: 25 },\n     *     { id: 2, age: 30 },\n     *     { id: 3, age: \"invalid\" }\n     * ]);\n     * \n     * // Check if all values in \"age\" column are valid numbers\n     * console.log(dataModel.isValidValue(\"age\", value => typeof value === \"number\"));\n     * // Output: false\n     * \n     * console.log(dataModel.isValidValue(\"id\", value => typeof value === \"number\"));\n     * // Output: true\n     * ```\n     *\n     * @param {string} column The column name to validate.\n     * @param {DataModelValidator} validator A function that checks if a value is valid.\n     * @returns {boolean} `true` if all values in the column are valid, otherwise `false`.\n     * @throws {Error} If `column` does not exist or `validator` is not a function.\n     */\n    isValidValue(column: string, vaildator: DataModelValidator): boolean;\n    /**\n     * Finds and returns the first row where the specified column contains an invalid value based on a given validation function.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The name of the column to validate.\n     * - `validator` **(`DataModelValidator`)**: A function that takes a value as input and returns `true` if the value is valid.\n     *\n     * ## Behavior\n     * - Calls `_getInValidColumnFirstRowIndex(column, validator)` to locate the first occurrence of an invalid value in the column.\n     * - If no invalid values are found, returns `null`.\n     * - If an invalid value is found, retrieves and returns the corresponding row using `getRow()`.\n     *\n     * ## Returns\n     * - **`Record<string, any> | null`**: The first row where the column has an invalid value, or `null` if all values are valid.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, age: 25 },\n     *     { id: 2, age: \"invalid\" },\n     *     { id: 3, age: 30 }\n     * ]);\n     * \n     * // Find the first row where \"age\" contains a non-numeric value\n     * console.log(dataModel.findFirstRowInvalidValue(\"age\", value => typeof value === \"number\"));\n     * // Output: { id: 2, age: \"invalid\" }\n     * \n     * console.log(dataModel.findFirstRowInvalidValue(\"id\", value => typeof value === \"number\"));\n     * // Output: null (all values in \"id\" are valid)\n     * ```\n     *\n     * @param {string} column The column name to validate.\n     * @param {DataModelValidator} validator A function that checks if a value is valid.\n     * @returns {Record<string, any> | null} The first row with an invalid value, or `null` if all values are valid.\n     * @throws {Error} If `column` does not exist or `validator` is not a function.\n     */\n    findFirstRowInvalidValue(column: string, vaildator: DataModelValidator): Record<string, any> | null;\n    /**\n     * Searches for rows that match a given condition and returns their indexes.\n     * Allows for both positive and negative filtering based on the `isNegative` flag.\n     *\n     * ## Parameters\n     * - `condition` **(Record<string, any>)**: An object representing the key-value conditions to match.\n     * - `isNegative` **(boolean, optional, default = `false`)**: If `true`, returns indexes of rows that **do not** match the condition.\n     *\n     * ## Behavior\n     * - Calls `_checkOriginObject(condition)` to ensure the condition is a valid object.\n     * - Calls `_checkBoolean(isNegative)` to validate the boolean flag.\n     * - Iterates through `_rows`, checking if each row meets the condition.\n     * - Uses `JSON.stringify()` for deep comparison of values.\n     * - If `isNegative` is `false`, adds matching row indexes to the result.\n     * - If `isNegative` is `true`, adds **non-matching** row indexes to the result.\n     *\n     * ## Returns\n     * - **`number[]`**: An array of indexes of rows that match (or do not match) the condition.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 },\n     *     { id: 3, name: \"Charlie\", age: 25 }\n     * ]);\n     * \n     * // Search for row indexes where age is 25\n     * console.log(dataModel.searchRowIndexes({ age: 25 }));\n     * // Output: [0, 2]\n     * \n     * // Search for row indexes where age is NOT 25\n     * console.log(dataModel.searchRowIndexes({ age: 25 }, true));\n     * // Output: [1]\n     * ```\n     *\n     * @param {Record<string, any>} condition The key-value condition to match.\n     * @param {boolean} [isNegative=false] If `true`, returns indexes of rows that do **not** match the condition.\n     * @returns {number[]} An array of indexes of rows that match or do not match the condition.\n     * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n     */\n    searchRowIndexes(condition: Record<string, any>, isNegative?: boolean): number[];\n    /**\n     * Searches for rows that match a given condition and returns them as an array.\n     * Allows for both positive and negative filtering based on the `isNegative` flag.\n     *\n     * ## Parameters\n     * - `condition` **(Record<string, any>)**: An object representing the key-value conditions to match.\n     * - `isNegative` **(boolean, optional, default = `false`)**: If `true`, returns rows that **do not** match the condition.\n     *\n     * ## Behavior\n     * - Calls `_checkOriginObject(condition)` to ensure the condition is a valid object.\n     * - Calls `_checkBoolean(isNegative)` to validate the flag.\n     * - Iterates through `_rows`, checking if each row meets the condition.\n     * - Uses `JSON.stringify()` for deep comparison of values.\n     * - If `isNegative` is `false`, adds matching rows to the result.\n     * - If `isNegative` is `true`, adds **non-matching** rows to the result.\n     * - Returns a deep copy of the matched rows.\n     *\n     * ## Returns\n     * - **`Record<string, any>[]`**: An array of deep-copied rows that match (or do not match) the condition.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 },\n     *     { id: 3, name: \"Charlie\", age: 25 }\n     * ]);\n     * \n     * // Search for rows where age is 25\n     * console.log(dataModel.searchRows({ age: 25 }));\n     * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\n     * \n     * // Search for rows where age is NOT 25\n     * console.log(dataModel.searchRows({ age: 25 }, true));\n     * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\n     * ```\n     *\n     * @param {Record<string, any>} condition The key-value condition to match.\n     * @param {boolean} [isNegative=false] If `true`, returns rows that do **not** match the condition.\n     * @returns {Record<string, any>[]} An array of deep-copied rows that match or do not match the condition.\n     * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n     */\n    searchRows(condition: Record<string, any>, isNegative?: boolean): Record<string, any>[];\n    /**\n     * Searches for rows that match a given condition and returns them as a new `DataModel` instance.\n     * Allows for both positive and negative filtering based on the `isNegative` flag.\n     *\n     * ## Parameters\n     * - `condition` **(Record<string, any>)**: An object representing the key-value conditions to match.\n     * - `isNegative` **(boolean, optional, default = `false`)**: If `true`, returns rows that **do not** match the condition.\n     *\n     * ## Behavior\n     * - Calls `_checkOriginObject(condition)` to ensure the condition is a valid object.\n     * - Calls `_checkBoolean(isNegative)` to validate the boolean flag.\n     * - Iterates through `_rows`, checking if each row meets the condition.\n     * - Uses `JSON.stringify()` for deep comparison of values.\n     * - If `isNegative` is `false`, adds matching rows to the result.\n     * - If `isNegative` is `true`, adds **non-matching** rows to the result.\n     * - Returns a new `DataModel` containing the filtered rows.\n     *\n     * ## Returns\n     * - **`DataModel`**: A new `DataModel` instance containing the matched rows.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 },\n     *     { id: 3, name: \"Charlie\", age: 25 }\n     * ]);\n     * \n     * // Search for rows where age is 25 and return them as a new DataModel\n     * const filteredModel = dataModel.searchRowsAsDataModel({ age: 25 });\n     * console.log(filteredModel.getRowCount()); // Output: 2\n     * console.log(filteredModel.getRows());\n     * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\n     * \n     * // Search for rows where age is NOT 25\n     * const excludedModel = dataModel.searchRowsAsDataModel({ age: 25 }, true);\n     * console.log(excludedModel.getRows());\n     * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\n     * ```\n     *\n     * @param {Record<string, any>} condition The key-value condition to match.\n     * @param {boolean} [isNegative=false] If `true`, returns rows that do **not** match the condition.\n     * @returns {InterfaceDataModel} A new `DataModel` instance containing the matched rows.\n     * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n     */\n    searchRowsAsDataModel(condition: Record<string, any>, isNegative?: boolean): InterfaceDataModel;\n    /**\n     * Searches for rows that match a given condition and **modifies** the original `DataModel` by removing matched or unmatched rows.\n     * This method directly updates the existing dataset instead of returning a new instance.\n     *\n     * ## Parameters\n     * - `condition` **(Record<string, any>)**: An object representing the key-value conditions to match.\n     * - `isNegative` **(boolean, optional, default = `false`)**: If `true`, removes rows that **match** the condition; otherwise, removes rows that **do not** match the condition.\n     *\n     * ## Behavior\n     * - Calls `_checkOriginObject(condition)` to ensure the condition is a valid object.\n     * - Calls `_checkBoolean(isNegative)` to validate the boolean flag.\n     * - Iterates through `_rows`, checking if each row meets the condition.\n     * - Uses `JSON.stringify()` for deep comparison of values.\n     * - If `isNegative` is `false`, removes rows that **do not** match the condition.\n     * - If `isNegative` is `true`, removes rows that **do** match the condition.\n     * - Returns the modified `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The modified `DataModel` instance after removing specified rows.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 },\n     *     { id: 3, name: \"Charlie\", age: 25 }\n     * ]);\n     * \n     * // Keep only rows where age is 25\n     * dataModel.searchAndModify({ age: 25 });\n     * console.log(dataModel.getRows());\n     * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\n     * \n     * // Remove rows where age is 25\n     * dataModel.searchAndModify({ age: 25 }, true);\n     * console.log(dataModel.getRows());\n     * // Output: []\n     * ```\n     *\n     * @param {Record<string, any>} condition The key-value condition to match.\n     * @param {boolean} [isNegative=false] If `true`, removes rows that **match** the condition; otherwise, removes rows that **do not** match the condition.\n     * @returns {InterfaceDataModel} The modified `DataModel` instance after removing specified rows.\n     * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n     */\n    searchAndModify(condition: Record<string, any>, isNegative?: boolean): InterfaceDataModel;\n    /**\n     * Filters rows in the `DataModel` based on a custom filtering function and returns their indexes.\n     * Allows for efficiently identifying row positions that match a given condition.\n     *\n     * ## Parameters\n     * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\n     *\n     * ## Behavior\n     * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n     * - Iterates through `_rows`, applying the filter function to each row.\n     * - Collects the indexes of rows that satisfy the filter condition.\n     *\n     * ## Returns\n     * - **`number[]`**: An array of indexes of rows that match the filter condition.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 },\n     *     { id: 3, name: \"Charlie\", age: 22 }\n     * ]);\n     * \n     * // Get indexes of rows where age is greater than 25\n     * const rowIndexes = dataModel.filterRowIndexes(row => row.age > 25);\n     * console.log(rowIndexes); // Output: [1]\n     * ```\n     *\n     * @param {DataModelFillter} filter A function that determines whether a row should be included.\n     * @returns {number[]} An array of indexes of rows that match the filter condition.\n     * @throws {Error} If `filter` is not a valid function.\n     */\n    filterRowIndexes(filter: DataModelFillter): number[];\n    /**\n     * Filters rows in the `DataModel` based on a custom filtering function.\n     * Returns an array of rows that satisfy the provided filter condition.\n     *\n     * ## Parameters\n     * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\n     *\n     * ## Behavior\n     * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n     * - Iterates through `_rows`, applying the filter function to each row.\n     * - Uses `_deepCopy()` to ensure the returned rows are independent copies.\n     * - Returns an array of matching rows.\n     *\n     * ## Returns\n     * - **`Record<string, any>[]`**: An array of deep-copied rows that match the filter condition.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 },\n     *     { id: 3, name: \"Charlie\", age: 22 }\n     * ]);\n     * \n     * // Filter rows where age is greater than 25\n     * const filteredRows = dataModel.filterRows(row => row.age > 25);\n     * console.log(filteredRows);\n     * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\n     * ```\n     *\n     * @param {DataModelFillter} filter A function that determines whether a row should be included.\n     * @returns {Record<string, any>[]} An array of deep-copied rows that match the filter condition.\n     * @throws {Error} If `filter` is not a valid function.\n     */\n    filterRows(filter: DataModelFillter): Record<string, any>[];\n    /**\n     * Filters rows in the `DataModel` based on a custom filtering function and returns a new `DataModel` containing the matched rows.\n     * Allows for extracting a subset of the dataset while preserving the structured format.\n     *\n     * ## Parameters\n     * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\n     *\n     * ## Behavior\n     * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n     * - Iterates through `_rows`, applying the filter function to each row.\n     * - Collects rows that satisfy the filter condition.\n     * - Returns a new `DataModel` instance containing the filtered rows.\n     *\n     * ## Returns\n     * - **`DataModel`**: A new `DataModel` instance containing the filtered rows.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 },\n     *     { id: 3, name: \"Charlie\", age: 22 }\n     * ]);\n     * \n     * // Create a new DataModel containing only rows where age is greater than 25\n     * const filteredDataModel = dataModel.filterRowsAsDataModel(row => row.age > 25);\n     * console.log(filteredDataModel.getRowCount()); // Output: 1\n     * console.log(filteredDataModel.getRow(0)); // Output: { id: 2, name: \"Bob\", age: 30 }\n     * ```\n     *\n     * @param {DataModelFillter} filter A function that determines whether a row should be included.\n     * @returns {InterfaceDataModel} A new `DataModel` instance containing the filtered rows.\n     * @throws {Error} If `filter` is not a valid function.\n     */\n    filterRowsAsDataModel(filter: DataModelFillter): InterfaceDataModel;\n    /**\n     * Filters rows in the `DataModel` based on a custom filtering function and **modifies** the original `DataModel` by removing unmatched rows.\n     * This method directly updates the existing dataset instead of returning a new instance.\n     *\n     * ## Parameters\n     * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be retained.\n     *\n     * ## Behavior\n     * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n     * - Iterates through `_rows`, applying the filter function to each row.\n     * - Removes rows that do **not** satisfy the filter condition.\n     * - Returns the modified `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The modified `DataModel` instance with only the filtered rows.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\", age: 25 },\n     *     { id: 2, name: \"Bob\", age: 30 },\n     *     { id: 3, name: \"Charlie\", age: 22 }\n     * ]);\n     * \n     * // Remove all rows where age is 25 or below\n     * dataModel.filterAndModify(row => row.age > 25);\n     * \n     * console.log(dataModel.getRowCount()); // Output: 1\n     * console.log(dataModel.getRow(0)); // Output: { id: 2, name: \"Bob\", age: 30 }\n     * ```\n     *\n     * @param {DataModelFillter} filter A function that determines whether a row should be retained.\n     * @returns {InterfaceDataModel} The modified `DataModel` instance after removing unmatched rows.\n     * @throws {Error} If `filter` is not a valid function.\n     */\n    filterAndModify(filter: DataModelFillter): InterfaceDataModel;\n    /**\n     * Reorders the columns in the `DataModel` based on the specified order.\n     * Ensures that all existing columns are included, maintaining the defined structure.\n     *\n     * ## Parameters\n     * - `columns` **(string[])**: An array of column names in the desired order.\n     *\n     * ## Behavior\n     * - Calls `_checkArray(columns)` to validate the input as an array.\n     * - Iterates through `columns`, ensuring each column is valid and exists in the `DataModel`.\n     * - Creates a new column order, appending any remaining columns that were not specified.\n     * - Updates `_cols` with the new column order.\n     * - Returns the modified `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The modified `DataModel` instance with reordered columns.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\", \"age\"]);\n     * \n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n     * \n     * // Change column order\n     * dataModel.setColumnSorting([\"age\", \"name\"]);\n     * console.log(dataModel.getColumns()); // Output: [\"age\", \"name\", \"id\"]\n     * ```\n     *\n     * @param {string[]} columns An array of column names in the desired order.\n     * @returns {InterfaceDataModel} The modified `DataModel` instance with reordered columns.\n     * @throws {Error} If `columns` is not an array or contains invalid column names.\n     */\n    setColumnSorting(columns: string[]): InterfaceDataModel;\n    /**\n     * Sorts the columns of the `DataModel` in ascending (A-Z) order.\n     * The sorting is applied alphabetically based on column names.\n     *\n     * ## Behavior\n     * - Calls the native `Array.sort()` method on `_cols` to rearrange columns in ascending order.\n     * - Returns the modified `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The modified `DataModel` instance with columns sorted in ascending order.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\"name\", \"id\", \"age\"]);\n     * \n     * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\n     * \n     * dataModel.sortColumnAscending();\n     * console.log(dataModel.getColumns()); // Output: [\"age\", \"id\", \"name\"]\n     * ```\n     *\n     * @returns {InterfaceDataModel} The modified `DataModel` instance with columns sorted in ascending order.\n     */\n    sortColumnAscending(): InterfaceDataModel;\n    /**\n     * Sorts the columns of the `DataModel` in descending (Z-A) order.\n     * The sorting is applied alphabetically based on column names.\n     *\n     * ## Behavior\n     * - Calls the native `Array.sort()` method on `_cols` with a custom comparator to sort columns in descending order.\n     * - Returns the modified `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The modified `DataModel` instance with columns sorted in descending order.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\"name\", \"id\", \"age\"]);\n     * \n     * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\n     * \n     * dataModel.sortColumnDescending();\n     * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\n     * ```\n     *\n     * @returns {InterfaceDataModel} The modified `DataModel` instance with columns sorted in descending order.\n     */\n    sortColumnDescending(): InterfaceDataModel;\n    /**\n     * Reverses the order of columns in the `DataModel`.\n     * The column order is flipped without sorting alphabetically.\n     *\n     * ## Behavior\n     * - Calls the native `Array.reverse()` method on `_cols` to reverse the column order.\n     * - Returns the modified `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The modified `DataModel` instance with reversed column order.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\"id\", \"name\", \"age\"]);\n     * \n     * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n     * \n     * dataModel.sortColumnReverse();\n     * console.log(dataModel.getColumns()); // Output: [\"age\", \"name\", \"id\"]\n     * ```\n     *\n     * @returns {InterfaceDataModel} The modified `DataModel` instance with reversed column order.\n     */\n    sortColumnReverse(): InterfaceDataModel;\n    /**\n     * Sorts the rows of the `DataModel` in ascending order based on the specified column.\n     * Optionally supports integer-based sorting for numerical values.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The column name to sort by.\n     * - `isIntegerOrder` **(boolean, optional, default = `false`)**: If `true`, treats values as integers for sorting.\n     *\n     * ## Behavior\n     * - Calls `_getValidColValue(column)` to validate the column name.\n     * - Throws an error if the specified column does not exist.\n     * - Calls `_checkBoolean(isIntegerOrder)` to validate the boolean flag.\n     * - Uses the native `Array.sort()` method to arrange rows in ascending order.\n     * - Handles `null` values by placing them at the end of the sorted list.\n     * - Converts object values to JSON strings for sorting.\n     * - If `isIntegerOrder` is `true`, parses values as integers before sorting.\n     * - Throws an error if a non-numeric value is encountered during integer sorting.\n     *\n     * ## Returns\n     * - **`DataModel`**: The modified `DataModel` instance with rows sorted in ascending order.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 3, name: \"Charlie\" },\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * // Sort rows by \"id\" in ascending order\n     * dataModel.sortRowAscending(\"id\");\n     * console.log(dataModel.getRows());\n     * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n     * \n     * // Sort rows numerically by \"id\"\n     * dataModel.sortRowAscending(\"id\", true);\n     * ```\n     *\n     * @param {string} column The column name to sort by.\n     * @param {boolean} [isIntegerOrder=false] If `true`, treats values as integers for sorting.\n     * @returns {InterfaceDataModel} The modified `DataModel` instance with rows sorted in ascending order.\n     * @throws {Error} If `column` is invalid or contains non-numeric values in integer mode.\n     */\n    sortRowAscending(column: string, isIntegerOrder?: boolean): InterfaceDataModel;\n    /**\n     * Sorts the rows of the `DataModel` in descending order based on the specified column.\n     * Optionally supports integer-based sorting for numerical values.\n     *\n     * ## Parameters\n     * - `column` **(string)**: The column name to sort by.\n     * - `isIntegerOrder` **(boolean, optional, default = `false`)**: If `true`, treats values as integers for sorting.\n     *\n     * ## Behavior\n     * - Calls `_getValidColValue(column)` to validate the column name.\n     * - Throws an error if the specified column does not exist.\n     * - Calls `_checkBoolean(isIntegerOrder)` to validate the boolean flag.\n     * - Uses the native `Array.sort()` method to arrange rows in descending order.\n     * - Handles `null` values by placing them at the beginning of the sorted list.\n     * - Converts object values to JSON strings for sorting.\n     * - If `isIntegerOrder` is `true`, parses values as integers before sorting.\n     * - Throws an error if a non-numeric value is encountered during integer sorting.\n     *\n     * ## Returns\n     * - **`DataModel`**: The modified `DataModel` instance with rows sorted in descending order.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 3, name: \"Charlie\" },\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" }\n     * ]);\n     * \n     * // Sort rows by \"id\" in descending order\n     * dataModel.sortRowDescending(\"id\");\n     * console.log(dataModel.getRows());\n     * // Output: [{ id: 3, name: \"Charlie\" }, { id: 2, name: \"Bob\" }, { id: 1, name: \"Alice\" }]\n     * \n     * // Sort rows numerically by \"id\"\n     * dataModel.sortRowDescending(\"id\", true);\n     * ```\n     *\n     * @param {string} column The column name to sort by.\n     * @param {boolean} [isIntegerOrder=false] If `true`, treats values as integers for sorting.\n     * @returns {InterfaceDataModel} The modified `DataModel` instance with rows sorted in descending order.\n     * @throws {Error} If `column` is invalid or contains non-numeric values in integer mode.\n     */\n    sortRowDescending(column: string, isIntegerOrder?: boolean): InterfaceDataModel;\n    /**\n     * Reverses the order of rows in the `DataModel`.\n     * This method flips the row order without sorting by a specific column.\n     *\n     * ## Behavior\n     * - Calls the native `Array.reverse()` method on `_rows` to reverse the row order.\n     * - Returns the modified `DataModel` instance for method chaining.\n     *\n     * ## Returns\n     * - **`DataModel`**: The modified `DataModel` instance with reversed row order.\n     *\n     * ## Example Usage\n     * ```typescript\n     * const dataModel = new hison.data.DataModel([\n     *     { id: 1, name: \"Alice\" },\n     *     { id: 2, name: \"Bob\" },\n     *     { id: 3, name: \"Charlie\" }\n     * ]);\n     * \n     * console.log(dataModel.getRows());\n     * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n     * \n     * dataModel.sortRowReverse();\n     * console.log(dataModel.getRows());\n     * // Output: [{ id: 3, name: \"Charlie\" }, { id: 2, name: \"Bob\" }, { id: 1, name: \"Alice\" }]\n     * ```\n     *\n     * @returns {InterfaceDataModel} The modified `DataModel` instance with reversed row order.\n     */\n    sortRowReverse(): InterfaceDataModel;\n};\n/**\n * Defines a function signature for formatting values in a `DataModel` column.\n * \n * - This function takes a value as input and returns a transformed version of it.\n * - Used in `DataModel.setColumnSameFormat()` to apply consistent formatting across a column.\n * \n * ## Example Usage\n * ```typescript\n * const formatCurrency: DataModelFormatter = (value) => `$${value.toFixed(2)}`;\n * console.log(formatCurrency(1000)); // \"$1000.00\"\n * ```\n * \n * @callback DataModelFormatter\n * @param value The original value from the `DataModel` column.\n * @returns The formatted value.\n */\ninterface DataModelFormatter{(value: any): any;};\n/**\n * Defines a function signature for validating values in a `DataModel` column.\n * \n * - This function takes a value as input and returns a boolean indicating validity.\n * - Used in `DataModel.isValidValue()` to check if all column values meet the validation criteria.\n * \n * ## Example Usage\n * ```typescript\n * const isNumber: DataModelValidator = (value) => typeof value === \"number\";\n * console.log(isNumber(123)); // true\n * console.log(isNumber(\"text\")); // false\n * ```\n * \n * @callback DataModelValidator\n * @param value The value from the `DataModel` column to validate.\n * @returns `true` if the value is valid, otherwise `false`.\n */\ninterface DataModelValidator{(value: any): boolean;};\n/**\n * Defines a function signature for filtering rows in a `DataModel`.\n * \n * - This function takes a row (as an object) and returns `true` if it should be included.\n * - Used in `DataModel.filterRowIndexes()` to filter row indexes based on the given condition.\n * \n * ## Example Usage\n * ```typescript\n * const filterByAge: DataModelFillter = (row) => row.age > 25;\n * console.log(filterByAge({ age: 30 })); // true\n * console.log(filterByAge({ age: 22 })); // false\n * ```\n * \n * @callback DataModelFillter\n * @param row A record representing a row in the `DataModel`.\n * @returns `true` if the row matches the filter criteria, otherwise `false`.\n */\ninterface DataModelFillter{(row: Record<string, any>): boolean;};\n//====================================================================================\n//link interface, type\n//====================================================================================\n/**\n * **`CachingModule` - A module for API response caching and real-time WebSocket updates.**\n *\n * The `CachingModule` provides a caching mechanism for API responses using an **LRU (Least Recently Used) strategy** \n * while integrating **WebSocket communication** for real-time data updates.\n *\n * ## **Key Features**\n * - **LRU Cache for API Responses**: Stores API responses with a configurable limit, reducing redundant network requests.\n * - **WebSocket Support**: Maintains a persistent WebSocket connection for real-time data updates.\n * - **Cache Management Methods**: Supports cache operations (`get`, `put`, `remove`, `clear`, etc.).\n * - **Event-Driven Communication**: Allows event listeners (`onopen`, `onmessage`, `onclose`, `onerror`) for WebSocket handling.\n * - **Flexible Configuration**: Uses `CustomOption` settings for cache limits and WebSocket parameters.\n * - **Validation Methods**: Ensures proper data types for cache keys and event listeners.\n *\n * ## **How It Works**\n * - **API responses are stored in an LRUCache instance**, avoiding redundant network calls.\n * - **When a WebSocket connection is established**, data updates can be received in real-time.\n * - **Cache data can be accessed and managed using `get`, `put`, `remove`, and `clear` methods.**\n * - **WebSocket event handlers can be set up for real-time notifications.**\n *\n * ## **Example Usage**\n * ```typescript\n * // Create a CachingModule instance with a cache limit of 20\n * const cachingModule = new hison.link.CachingModule(20);\n * \n * // Store API response in the cache\n * cachingModule.put(\"users\", fetch(\"/api/users\").then(response => response.json()));\n * \n * // Retrieve cached data\n * cachingModule.get(\"users\").then(data => console.log(data));\n * \n * // Register WebSocket event handlers\n * cachingModule.onopen = () => console.log(\"WebSocket Connected\");\n * cachingModule.onmessage = event => console.log(\"New Message:\", event.data);\n * ```\n *\n * ## **Internal Structure**\n * - **Uses `LRUCache`** to manage cached responses with a defined limit.\n * - **Maintains a WebSocket connection** to receive real-time data updates.\n * - **Supports configurable options via `CustomOption`**, such as WebSocket endpoint and cache size.\n * - **Provides utility methods** for cache validation, data retrieval, and event handling.\n *\n * ## **Related Components**\n * - **`LRUCache`**: Handles the caching logic for API responses.\n * - **`WebSocket`**: Establishes a real-time connection for live data updates.\n * - **`CustomOption`**: Provides configurable options for WebSocket and cache settings.\n * - **`ApiLink`**: Uses this module to fetch and store API responses efficiently.\n *\n * ## **Return Value**\n * - This module **returns an instance of `CachingModule`**, which allows cache operations and WebSocket event management.\n *\n * ## **Typical Use Cases**\n * - **Reducing unnecessary API calls** by storing frequently accessed responses.\n * - **Receiving real-time updates** from the server without polling.\n * - **Efficiently managing API response data** in web applications.\n * - **Supporting offline or low-latency scenarios** by using cached responses.\n */\ninterface InterfaceCachingModule {\n    /**\n     * **Checks whether this instance is a valid caching module.**\n     *\n     * This method returns a boolean flag indicating whether the current instance \n     * is recognized as a `CachingModule`. This is useful for validating whether \n     * an instance supports caching functionalities.\n     *\n     * ## **Return Value**\n     * - `true` if this instance is a caching module.\n     * - `false` if caching is not enabled.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * console.log(cachingModule.getIsCachingModule()); // true\n     * ```\n     *\n     * ## **Related Properties**\n     * - **`_isCachingModule`** *(boolean)* - Stores the module's caching capability status.\n     *\n     * @returns {boolean} `true` if this instance is a caching module.\n     */\n    getIsCachingModule(): boolean;\n    /**\n     * **Checks if the cache contains a specific key.**\n     *\n     * This method verifies if the specified `key` exists in the LRU cache. It ensures \n     * that the key is a valid string and then delegates the check to the underlying \n     * `LRUCache` instance.\n     *\n     * ## **Parameters**\n     * - `key` *(string)* - The key to check in the cache.\n     *\n     * ## **Return Value**\n     * - `true` if the cache contains the specified key.\n     * - `false` if the key is not found in the cache.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n     * console.log(cachingModule.hasKey(\"user123\")); // true\n     * console.log(cachingModule.hasKey(\"user456\")); // false\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`_checkTypeString(key)`** - Ensures the key is a valid string before performing the cache check.\n     * - **`_LRUCache.hasKey(key)`** - The internal method that checks the existence of the key in the cache.\n     *\n     * @param {string} key - The key to check in the cache.\n     * @returns {boolean} `true` if the cache contains the key, otherwise `false`.\n     */\n    hasKey(key: string): boolean;\n    /**\n     * **Retrieves cached data for a given key.**\n     *\n     * This method fetches the cached API response associated with the specified `key`.\n     * Before accessing the cache, it validates that the key is a string.\n     *\n     * ## **Parameters**\n     * - `key` *(string)* - The key of the cached data.\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an object containing:\n     *   - `data` *(any)* - The cached API response data.\n     *   - `response` *(Response)* - The original HTTP response object.\n     * - If the key does not exist in the cache, `null` is returned.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Store API response in the cache\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n     * \n     * // Retrieve cached data\n     * cachingModule.get(\"user123\").then(data => console.log(data));\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`put(key, value)`** - Stores API responses in the cache.\n     * - **`hasKey(key)`** - Checks if a key exists in the cache.\n     * - **`remove(key)`** - Removes a key from the cache.\n     *\n     * @param {string} key - The key to retrieve from the cache.\n     * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the cached response data.\n     */\n    get(key: string): Promise<{ data: any; response: Response; }> | null;\n    /**\n     * **Stores API response data in the cache.**\n     *\n     * This method saves the provided `value` (API response) in the cache with the specified `key`.\n     * Before storing the data, it validates that the `key` is a string.\n     *\n     * ## **Parameters**\n     * - `key` *(string)* - The cache key under which the response will be stored.\n     * - `value` *(Promise<{ data: any; response: Response }>)*\n     *   - A promise resolving to an object containing:\n     *     - `data` *(any)* - The API response data.\n     *     - `response` *(Response)* - The original HTTP response object.\n     *\n     * ## **Behavior**\n     * - If the `key` already exists, the old value is **replaced** with the new one.\n     * - If the cache reaches its limit, the **least recently used (LRU) entry is removed**.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Store an API response in the cache\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`get(key)`** - Retrieves cached data for a given key.\n     * - **`hasKey(key)`** - Checks if a key exists in the cache.\n     * - **`remove(key)`** - Removes a specific key from the cache.\n     *\n     * @param {string} key - The cache key under which the response will be stored.\n     * @param {Promise<{ data: any; response: Response }>} value - The API response to be cached.\n     */\n    put(key: string, value: Promise<{ data: any; response: Response; }>): void;\n    /**\n     * **Removes a specific key from the cache.**\n     *\n     * This method deletes the cached API response associated with the given `key`.\n     * Before performing the removal, it ensures that the `key` is a valid string.\n     *\n     * ## **Parameters**\n     * - `key` *(string)* - The cache key to be removed.\n     *\n     * ## **Behavior**\n     * - If the specified `key` exists in the cache, it is deleted.\n     * - If the `key` does not exist, no action is taken.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Store an API response in the cache\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n     * \n     * // Remove the cached response\n     * cachingModule.remove(\"user123\");\n     * \n     * // Check if the key still exists\n     * console.log(cachingModule.hasKey(\"user123\")); // false\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`put(key, value)`** - Stores API responses in the cache.\n     * - **`get(key)`** - Retrieves cached data for a given key.\n     * - **`clear()`** - Removes all cached entries.\n     *\n     * @param {string} key - The cache key to be removed.\n     */\n    remove(key: string): void;\n    /**\n     * **Retrieves all cached data as a key-value object.**\n     *\n     * This method returns the entire cache as a record where each key corresponds to a cached API response.\n     *\n     * ## **Return Value**\n     * - A `Record<string, Promise<{ data: any; response: Response }>>` representing all cached entries.\n     * - Each entry consists of:\n     *   - `key` *(string)* - The cache key.\n     *   - `value` *(Promise<{ data: any; response: Response }>>)* - A promise resolving to:\n     *     - `data` *(any)* - The API response data.\n     *     - `response` *(Response)* - The original HTTP response object.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Store multiple API responses in the cache\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n     * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\n     * \n     * // Retrieve all cached data\n     * console.log(cachingModule.getAll());\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`put(key, value)`** - Stores API responses in the cache.\n     * - **`get(key)`** - Retrieves cached data for a given key.\n     * - **`getKeys()`** - Retrieves all cache keys.\n     * - **`clear()`** - Removes all cached entries.\n     *\n     * @returns {Record<string, Promise<{ data: any; response: Response }>>} An object containing all cached responses.\n     */\n    getAll(): Record<string, Promise<{ data: any; response: Response; }>>;\n    /**\n     * **Retrieves all cache keys.**\n     *\n     * This method returns an array of all keys currently stored in the cache.\n     *\n     * ## **Return Value**\n     * - An array of strings representing the cache keys.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Store multiple API responses in the cache\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n     * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\n     * \n     * // Retrieve all cache keys\n     * console.log(cachingModule.getKeys()); // [\"user123\", \"posts\"]\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`put(key, value)`** - Stores API responses in the cache.\n     * - **`get(key)`** - Retrieves cached data for a given key.\n     * - **`getAll()`** - Retrieves all cached data as a key-value object.\n     * - **`clear()`** - Removes all cached entries.\n     *\n     * @returns {string[]} An array of cache keys.\n     */\n    getKeys(): string[];\n    /**\n     * **Clears all cached data.**\n     *\n     * This method removes all entries from the cache, resetting it to an empty state.\n     *\n     * ## **Behavior**\n     * - All cached responses are permanently deleted.\n     * - The cache size is reset to zero.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Store multiple API responses in the cache\n     * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n     * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\n     * \n     * // Clear all cached data\n     * cachingModule.clear();\n     * \n     * // Verify that the cache is empty\n     * console.log(cachingModule.getKeys()); // []\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`put(key, value)`** - Stores API responses in the cache.\n     * - **`get(key)`** - Retrieves cached data for a given key.\n     * - **`getAll()`** - Retrieves all cached data as a key-value object.\n     * - **`getKeys()`** - Retrieves all cache keys.\n     *\n     * @returns {void}\n     */\n    clear(): void;\n    /**\n     * **Registers an event handler for the WebSocket `open` event.**\n     *\n     * This method assigns a custom event handler to be executed when the WebSocket connection is successfully opened.\n     *\n     * ## **Parameters**\n     * - `func` *(function | null)* - A callback function to handle the WebSocket `open` event.\n     *   - If `null` is provided, the event handler is cleared.\n     *\n     * ## **Behavior**\n     * - Ensures that the provided function is valid before assigning it as the event handler.\n     * - When the WebSocket connection is established, the specified function is invoked.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Register a WebSocket open event handler\n     * cachingModule.onopen = (event) => {\n     *     console.log(\"WebSocket connected:\", event);\n     * };\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\n     * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n     * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n     *\n     * @param {(this: WebSocket, ev: Event) => any | null} func - The event handler function for the WebSocket `open` event.\n     */\n    onopen(func: ((this: WebSocket, ev: Event) => any) | null): void;\n    /**\n     * **Registers an event handler for the WebSocket `message` event.**\n     *\n     * This method assigns a custom event handler to be executed whenever a message is received \n     * through the WebSocket connection.\n     *\n     * ## **Parameters**\n     * - `func` *(function | null)* - A callback function to handle incoming WebSocket messages.\n     *   - If `null` is provided, the event handler is cleared.\n     *\n     * ## **Behavior**\n     * - Ensures that the provided function is valid before assigning it as the event handler.\n     * - When a message is received, the specified function is invoked with the event data.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Register a WebSocket message event handler\n     * cachingModule.onmessage = (event) => {\n     *     console.log(\"Received WebSocket message:\", event.data);\n     * };\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n     * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n     * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n     *\n     * @param {(this: WebSocket, ev: MessageEvent) => any | null} func - The event handler function for WebSocket messages.\n     */\n    onmessage(func: ((this: WebSocket, ev: MessageEvent) => any) | null): void;\n    /**\n     * **Registers an event handler for the WebSocket `close` event.**\n     *\n     * This method assigns a custom event handler to be executed when the WebSocket connection is closed.\n     *\n     * ## **Parameters**\n     * - `func` *(function | null)* - A callback function to handle the WebSocket `close` event.\n     *   - If `null` is provided, the event handler is cleared.\n     *\n     * ## **Behavior**\n     * - Ensures that the provided function is valid before assigning it as the event handler.\n     * - When the WebSocket connection is closed, the specified function is invoked with the event data.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Register a WebSocket close event handler\n     * cachingModule.onclose = (event) => {\n     *     console.log(\"WebSocket closed:\", event);\n     * };\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n     * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\n     * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n     *\n     * @param {(this: WebSocket, ev: CloseEvent) => any | null} func - The event handler function for WebSocket disconnection.\n     */\n    onclose(func: ((this: WebSocket, ev: CloseEvent) => any) | null): void;\n    /**\n     * **Registers an event handler for the WebSocket `error` event.**\n     *\n     * This method assigns a custom event handler to be executed when a WebSocket error occurs.\n     *\n     * ## **Parameters**\n     * - `func` *(function | null)* - A callback function to handle WebSocket errors.\n     *   - If `null` is provided, the event handler is cleared.\n     *\n     * ## **Behavior**\n     * - Ensures that the provided function is valid before assigning it as the event handler.\n     * - When an error occurs in the WebSocket connection, the specified function is invoked with the event data.\n     * - **Note:** The implementation currently assigns the function to `onclose` instead of `onerror`,\n     *   which may require correction.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Register a WebSocket error event handler\n     * cachingModule.onerror = (event) => {\n     *     console.error(\"WebSocket error:\", event);\n     * };\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n     * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\n     * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n     *\n     * @param {(this: WebSocket, ev: Event) => any | null} func - The event handler function for WebSocket errors.\n     */\n    onerror(func: ((this: WebSocket, ev: Event) => any) | null): void;\n    /**\n     * **Checks the current state of the WebSocket connection.**\n     *\n     * This method returns an integer representing the current status of the WebSocket connection.\n     *\n     * ## **Return Value**\n     * - `1` → The WebSocket connection is open.\n     * - `0` → The WebSocket connection is in the process of connecting.\n     * - `-1` → The WebSocket connection is closed or unavailable.\n     *\n     * ## **Behavior**\n     * - Internally calls `_checkWebSocketConnection()` to determine the WebSocket state.\n     * - Useful for monitoring connection status and handling reconnection logic if needed.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const cachingModule = new hison.link.CachingModule();\n     * \n     * // Check WebSocket connection status\n     * const status = cachingModule.isWebSocketConnection();\n     * console.log(status); // Output: 1 (open), 0 (connecting), or -1 (closed)\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n     * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n     * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n     *\n     * @returns {number} The WebSocket connection status (`1`: open, `0`: connecting, `-1`: closed).\n     */\n    isWebSocketConnection(): number;\n};\n/**\n * **`ApiGet` - A class for handling HTTP GET requests within the `hison.link` module.**\n *\n * The `ApiGet` class is responsible for sending HTTP GET requests to a specified API resource. \n * It integrates with `ApiLink` to handle request execution, event emissions, and optional response caching.\n *\n * ## **Key Features**\n * - **Executes HTTP GET requests** using `ApiLink`.\n * - **Supports response caching** via an optional `CachingModule`.\n * - **Emits request lifecycle events** using `EventEmitter`.\n * - **Allows setting event listeners** for request completion, errors, and other key events.\n *\n * ## **How It Works**\n * - When instantiated, `ApiGet` stores the API resource path and an optional `CachingModule` instance.\n * - The `call()` method triggers a GET request to the specified resource path.\n * - If caching is enabled, previously stored responses may be returned instead of making a new request.\n * - Event listeners can be attached to monitor the request lifecycle.\n *\n * ## **Example Usage**\n * ```typescript\n * // Creating an instance of ApiGet without caching\n * const apiGet = new hison.link.ApiGet(\"/users\");\n * \n * // Sending a GET request\n * apiGet.call().then(response => {\n *     console.log(response.data); // Response data\n * });\n *\n * // Creating an instance with caching\n * const cachingModule = new hison.link.CachingModule(20);\n * const cachedApiGet = new hison.link.ApiGet(\"/users\", cachingModule);\n * \n * // Handling request events\n * cachedApiGet.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n *     console.log(\"GET request completed!\", data);\n * });\n * ```\n *\n * ## **Internal Components**\n * - **`ApiLink`**: Handles request execution and response processing.\n * - **`EventEmitter`**: Manages event-based request handling.\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n *\n * ## **Return Value**\n * - This class returns an instance of `ApiGet`, which provides methods for executing GET requests and managing request events.\n *\n * ## **Typical Use Cases**\n * - **Fetching data from a REST API** with minimal setup.\n * - **Using cached responses** to reduce redundant API calls.\n * - **Handling event-driven request monitoring** via `onEventEmit`.\n */\ninterface InterfaceApiGet {\n    /**\n     * **Executes an HTTP GET request to the specified resource path.**\n     *\n     * This method sends a GET request using `ApiLink`, optionally applying caching if a `CachingModule` is provided.\n     * It also **invokes a pre-request hook** (`hison.setBeforeGetRequst`) and **emits a request-start event** \n     * (`\"requestStarted_GET\"`) before execution.\n     *\n     * ## **Parameters**\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or query parameters.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Pre-Request Handling**\n     * - **`hison.setBeforeGetRequst((resourcePath, options) => {})`**\n     *   - A customizable hook executed **before sending the GET request**.\n     *   - If it returns `false`, the request is **prevented from execution**.\n     *   - **Use Case:** Validating request parameters or implementing conditional request logic.\n     *\n     * ## **Event Emission**\n     * - **`\"requestStarted_GET\"` Event**\n     *   - This event is emitted **before the GET request is executed**.\n     *   - Can be used for logging, request tracking, or debugging.\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an object containing:\n     *   - `data` *(any)* - The API response data.\n     *   - `response` *(Response)* - The original HTTP response object.\n     *\n     * ## **Behavior**\n     * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n     * - If the data is not cached, it makes an HTTP GET request to `_resourcePath`.\n     * - Before executing the request:\n     *   - The **before-request hook (`beforeGetRequst`)** is checked.\n     *   - The **event `\"requestStarted_GET\"`** is emitted.\n     * - Once the request is completed, the response is returned and optionally stored in the cache.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiGet = new hison.link.ApiGet(\"/users\");\n     * \n     * // Customizing the before-request hook to prevent requests conditionally\n     * hison.setBeforeGetRequst((resourcePath, options) => {\n     *     if (!options.headers.Authorization) {\n     *         console.warn(\"Missing Authorization header.\");\n     *         return false; // Prevents the request from being sent\n     *     }\n     *     return true;\n     * });\n     * \n     * // Listening to the \"requestStarted_GET\" event\n     * apiGet.onEventEmit(\"requestStarted_GET\", (resourcePath, options) => {\n     *     console.log(`GET request started for: ${resourcePath}`);\n     * });\n     * \n     * // Sending a GET request\n     * apiGet.call({ headers: { \"Authorization\": \"Bearer token\" } }).then(response => {\n     *     console.log(response.data); // Response data\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n     *\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n     */\n    call(options?: Record<string, any>): Promise<{ data: InterfaceDataWrapper; response: Response; } | null>;\n    /**\n     * **Sends an HTTP HEAD request to the specified resource path.**\n     *\n     * This method retrieves only the headers from the specified resource without downloading the response body.\n     * It is useful for checking metadata such as content type, content length, and caching information.\n     *\n     * ## **Parameters**\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n     *\n     * ## **Behavior**\n     * - The method delegates the request execution to `ApiLink.head()`.\n     * - The response body is **not** included in the result, only headers are returned.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiGet = new hison.link.ApiGet(\"/users\");\n     * \n     * // Sending a HEAD request\n     * apiGet.head().then(headers => {\n     *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n     * });\n     *\n     * // Sending a HEAD request with additional headers\n     * apiGet.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n     *     console.log(headers);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(options)`** - Sends a GET request to retrieve full response data.\n     * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n     *\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n     */\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\n    /**\n     * **Sends an HTTP OPTIONS request to the specified resource path.**\n     *\n     * This method retrieves the list of allowed HTTP methods for the specified resource \n     * without performing an actual data operation.\n     *\n     * ## **Parameters**\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n     *\n     * ## **Behavior**\n     * - The method delegates the request execution to `ApiLink.options()`.\n     * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiGet = new hison.link.ApiGet(\"/users\");\n     * \n     * // Sending an OPTIONS request\n     * apiGet.options().then(allowedMethods => {\n     *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n     * });\n     *\n     * // Sending an OPTIONS request with additional headers\n     * apiGet.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n     *     console.log(allowedMethods);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(options)`** - Sends a GET request to retrieve full response data.\n     * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n     *\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n     */\n    options(options?: Record<string, any>): Promise<string[]>;\n    /**\n     * **Registers an event listener for API request lifecycle events.**\n     *\n     * This method allows attaching a callback function to be executed when a specified event \n     * occurs during the execution of a GET request.\n     *\n     * ## **Parameters**\n     * - `eventName` *(string)* - The name of the event to listen for.\n     * - `eventFunc` *(function)* - The callback function to be executed when the event occurs.\n     *\n     * ## **Supported Events**\n     * - `\"requestStarted_GET\"` - Triggered when a GET request begins.\n     * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n     * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n     * - `\"requestError\"` - Triggered when an error occurs during the request.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiGet = new hison.link.ApiGet(\"/users\");\n     * \n     * // Register an event listener for when the request completes\n     * apiGet.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n     *     console.log(\"GET request completed!\", data);\n     * });\n     * \n     * // Register an event listener for request errors\n     * apiGet.onEventEmit(\"requestError\", (error) => {\n     *     console.error(\"GET request failed:\", error);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(options)`** - Sends a GET request, triggering events during execution.\n     *\n     * @param {string} eventName - The name of the event to listen for.\n     * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n     */\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\n};\n/**\n * **`ApiPost` - A class for handling HTTP POST requests within the `hison.link` module.**\n *\n * The `ApiPost` class is responsible for sending HTTP POST requests to a specified service command.\n * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n *\n * ## **Key Features**\n * - **Executes HTTP POST requests** using `ApiLink`.\n * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n * - **Supports response caching** via an optional `CachingModule`.\n * - **Emits request lifecycle events** using `EventEmitter`.\n * - **Allows event listeners** for monitoring request execution.\n *\n * ## **How It Works**\n * - When instantiated, `ApiPost` requires a `serviceCmd` that specifies the business logic endpoint.\n * - The `call()` method sends a POST request with the provided request data.\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n * - Event listeners can be attached to monitor the request lifecycle.\n *\n * ## **Example Usage**\n * ```typescript\n * // Creating an instance of ApiPost\n * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n *\n * // Creating request data\n * const requestData = new hison.data.DataWrapper();\n * requestData.putString(\"username\", \"Alice\");\n * \n * // Sending a POST request\n * apiPost.call(requestData).then(response => {\n *     console.log(response.data); // Response data\n * });\n *\n * // Creating an instance with caching\n * const cachingModule = new hison.link.CachingModule(20);\n * const cachedApiPost = new hison.link.ApiPost(\"UserService.createUser\", cachingModule);\n *\n * // Handling request events\n * cachedApiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n *     console.log(\"POST request completed!\", data);\n * });\n * ```\n *\n * ## **Internal Components**\n * - **`ApiLink`**: Handles request execution and response processing.\n * - **`EventEmitter`**: Manages event-driven request handling.\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n *\n * ## **Return Value**\n * - This class returns an instance of `ApiPost`, providing methods for executing POST requests and managing request events.\n *\n * ## **Typical Use Cases**\n * - **Sending data to a REST API** with structured payloads.\n * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n * - **Handling event-driven request monitoring** via `onEventEmit`.\n */\ninterface InterfaceApiPost {\n    /**\n     * **Executes an HTTP POST request to the specified service command.**\n     *\n     * This method sends a POST request using `ApiLink`, encapsulating request data in a `DataWrapper`\n     * and invoking necessary pre-request hooks and event emissions.\n     *\n     * ## **Parameters**\n     * - `requestData` *(any, required)* - The data to be sent in the request.\n     *   - If it is a `DataWrapper`, it is sent as-is.\n     *   - If it is a standard object, it is converted to a JSON payload.\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Pre-Request Handling**\n     * - **`hison.setBeforePostRequst((requestData, options) => {})`**\n     *   - A customizable hook executed **before sending the POST request**.\n     *   - If it returns `false`, the request is **prevented from execution**.\n     *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n     *\n     * ## **Event Emission**\n     * - **`\"requestStarted_POST\"` Event**\n     *   - This event is emitted **before the POST request is executed**.\n     *   - Can be used for logging, request tracking, or debugging.\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an object containing:\n     *   - `data` *(any)* - The API response data.\n     *   - `response` *(Response)* - The original HTTP response object.\n     *\n     * ## **Behavior**\n     * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n     * - If the data is not cached, it makes an HTTP POST request to `_serviceCmd`.\n     * - Before executing the request:\n     *   - The **before-request hook (`beforePostRequst`)** is checked.\n     *   - The **event `\"requestStarted_POST\"`** is emitted.\n     * - Once the request is completed, the response is returned and optionally stored in the cache.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n     * \n     * // Creating request data\n     * const requestData = new hison.data.DataWrapper();\n     * requestData.putString(\"username\", \"Alice\");\n     * \n     * // Customizing the before-request hook to modify data before sending\n     * customOption.link.beforePostRequst = (requestData, options) => {\n     *     requestData.putString(\"timestamp\", Date.now().toString());\n     *     return true;\n     * };\n     * \n     * // Listening to the \"requestStarted_POST\" event\n     * apiPost.onEventEmit(\"requestStarted_POST\", (requestData, options) => {\n     *     console.log(\"POST request started with data:\", requestData);\n     * });\n     * \n     * // Sending a POST request\n     * apiPost.call(requestData).then(response => {\n     *     console.log(response.data); // Response data\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n     *\n     * @param {any} requestData - The data to be sent in the request.\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n     */\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: InterfaceDataWrapper; response: Response; } | null>;\n    /**\n     * **Sends an HTTP HEAD request to the API controller path.**\n     *\n     * This method retrieves only the headers from the API without downloading the response body.\n     * It is useful for checking metadata such as content type, content length, and caching information.\n     *\n     * ## **Parameters**\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n     *\n     * ## **Behavior**\n     * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n     * - The response body is **not** included in the result; only headers are returned.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n     * \n     * // Sending a HEAD request\n     * apiPost.head().then(headers => {\n     *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n     * });\n     *\n     * // Sending a HEAD request with additional headers\n     * apiPost.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n     *     console.log(headers);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n     * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n     *\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n     */\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\n    /**\n     * **Sends an HTTP OPTIONS request to the API controller path.**\n     *\n     * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n     * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n     *\n     * ## **Parameters**\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n     *\n     * ## **Behavior**\n     * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n     * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n     * \n     * // Sending an OPTIONS request\n     * apiPost.options().then(allowedMethods => {\n     *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n     * });\n     *\n     * // Sending an OPTIONS request with additional headers\n     * apiPost.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n     *     console.log(allowedMethods);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n     * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n     *\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n     */\n    options(options?: Record<string, any>): Promise<string[]>;\n    /**\n     * **Registers an event listener for API request lifecycle events.**\n     *\n     * This method allows attaching a callback function to be executed when a specified event \n     * occurs during the execution of a POST request.\n     *\n     * ## **Parameters**\n     * - `eventName` *(string, required)* - The name of the event to listen for.\n     * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n     *\n     * ## **Supported Events**\n     * - `\"requestStarted_POST\"` - Triggered when a POST request begins.\n     * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n     * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n     * - `\"requestError\"` - Triggered when an error occurs during the request.\n     *\n     * ## **Behavior**\n     * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"POST\"` as the method type.\n     * - The provided `eventFunc` is executed whenever the specified event is emitted.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n     * \n     * // Register an event listener for when the request completes\n     * apiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n     *     console.log(\"POST request completed!\", data);\n     * });\n     * \n     * // Register an event listener for request errors\n     * apiPost.onEventEmit(\"requestError\", (error) => {\n     *     console.error(\"POST request failed:\", error);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(requestData, options)`** - Sends a POST request, triggering events during execution.\n     *\n     * @param {string} eventName - The name of the event to listen for.\n     * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n     */\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\n};\n/**\n * **`ApiPut` - A class for handling HTTP PUT requests within the `hison.link` module.**\n *\n * The `ApiPut` class is responsible for sending HTTP PUT requests to a specified service command.\n * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n *\n * ## **Key Features**\n * - **Executes HTTP PUT requests** using `ApiLink`.\n * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n * - **Supports response caching** via an optional `CachingModule`.\n * - **Emits request lifecycle events** using `EventEmitter`.\n * - **Allows event listeners** for monitoring request execution.\n *\n * ## **How It Works**\n * - When instantiated, `ApiPut` requires a `serviceCmd` that specifies the business logic endpoint.\n * - The `call()` method sends a PUT request with the provided request data.\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n * - Event listeners can be attached to monitor the request lifecycle.\n *\n * ## **Example Usage**\n * ```typescript\n * // Creating an instance of ApiPut\n * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n *\n * // Creating request data\n * const requestData = new hison.data.DataWrapper();\n * requestData.putString(\"username\", \"Alice\");\n * \n * // Sending a PUT request\n * apiPut.call(requestData).then(response => {\n *     console.log(response.data); // Response data\n * });\n *\n * // Creating an instance with caching\n * const cachingModule = new hison.link.CachingModule(20);\n * const cachedApiPut = new hison.link.ApiPut(\"UserService.createUser\", cachingModule);\n *\n * // Handling request events\n * cachedApiPut.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n *     console.log(\"PUT request completed!\", data);\n * });\n * ```\n *\n * ## **Internal Components**\n * - **`ApiLink`**: Handles request execution and response processing.\n * - **`EventEmitter`**: Manages event-driven request handling.\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n *\n * ## **Return Value**\n * - This class returns an instance of `ApiPut`, providing methods for executing PUT requests and managing request events.\n *\n * ## **Typical Use Cases**\n * - **Sending data to a REST API** with structured payloads.\n * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n * - **Handling event-driven request monitoring** via `onEventEmit`.\n */\ninterface InterfaceApiPut {\n    /**\n     * **Executes an HTTP PUT request to the specified service command.**\n     *\n     * This method sends a PUT request using `ApiLink`, encapsulating request data in a `DataWrapper`\n     * and invoking necessary pre-request hooks and event emissions.\n     *\n     * ## **Parameters**\n     * - `requestData` *(any, required)* - The data to be sent in the request.\n     *   - If it is a `DataWrapper`, it is sent as-is.\n     *   - If it is a standard object, it is converted to a JSON payload.\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Pre-Request Handling**\n     * - **`hison.setBeforePutRequst((requestData, options) => {})`**\n     *   - A customizable hook executed **before sending the PUT request**.\n     *   - If it returns `false`, the request is **prevented from execution**.\n     *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n     *\n     * ## **Event Emission**\n     * - **`\"requestStarted_PUT\"` Event**\n     *   - This event is emitted **before the PUT request is executed**.\n     *   - Can be used for logging, request tracking, or debugging.\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an object containing:\n     *   - `data` *(any)* - The API response data.\n     *   - `response` *(Response)* - The original HTTP response object.\n     *\n     * ## **Behavior**\n     * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n     * - If the data is not cached, it makes an HTTP PUT request to `_serviceCmd`.\n     * - Before executing the request:\n     *   - The **before-request hook (`beforePutRequst`)** is checked.\n     *   - The **event `\"requestStarted_PUT\"`** is emitted.\n     * - Once the request is completed, the response is returned and optionally stored in the cache.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n     * \n     * // Creating request data\n     * const requestData = new hison.data.DataWrapper();\n     * requestData.putString(\"username\", \"Alice\");\n     * \n     * // Customizing the before-request hook to modify data before sending\n     * customOption.link.beforePutRequst = (requestData, options) => {\n     *     requestData.putString(\"timestamp\", Date.now().toString());\n     *     return true;\n     * };\n     * \n     * // Listening to the \"requestStarted_PUT\" event\n     * apiPut.onEventEmit(\"requestStarted_PUT\", (requestData, options) => {\n     *     console.log(\"PUT request started with data:\", requestData);\n     * });\n     * \n     * // Sending a PUT request\n     * apiPut.call(requestData).then(response => {\n     *     console.log(response.data); // Response data\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n     *\n     * @param {any} requestData - The data to be sent in the request.\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n     */\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: InterfaceDataWrapper; response: Response; } | null>;\n    /**\n     * **Sends an HTTP HEAD request to the API controller path.**\n     *\n     * This method retrieves only the headers from the API without downloading the response body.\n     * It is useful for checking metadata such as content type, content length, and caching information.\n     *\n     * ## **Parameters**\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n     *\n     * ## **Behavior**\n     * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n     * - The response body is **not** included in the result; only headers are returned.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n     * \n     * // Sending a HEAD request\n     * apiPut.head().then(headers => {\n     *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n     * });\n     *\n     * // Sending a HEAD request with additional headers\n     * apiPut.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n     *     console.log(headers);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n     * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n     *\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n     */\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\n    /**\n     * **Sends an HTTP OPTIONS request to the API controller path.**\n     *\n     * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n     * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n     *\n     * ## **Parameters**\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PUT\", \"OPTIONS\"]`).\n     *\n     * ## **Behavior**\n     * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n     * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n     * \n     * // Sending an OPTIONS request\n     * apiPut.options().then(allowedMethods => {\n     *     console.log(allowedMethods); // e.g., [\"GET\", \"PUT\", \"OPTIONS\"]\n     * });\n     *\n     * // Sending an OPTIONS request with additional headers\n     * apiPut.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n     *     console.log(allowedMethods);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n     * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n     *\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n     */\n    options(options?: Record<string, any>): Promise<string[]>;\n    /**\n     * **Registers an event listener for API request lifecycle events.**\n     *\n     * This method allows attaching a callback function to be executed when a specified event \n     * occurs during the execution of a PUT request.\n     *\n     * ## **Parameters**\n     * - `eventName` *(string, required)* - The name of the event to listen for.\n     * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n     *\n     * ## **Supported Events**\n     * - `\"requestStarted_PUT\"` - Triggered when a PUT request begins.\n     * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n     * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n     * - `\"requestError\"` - Triggered when an error occurs during the request.\n     *\n     * ## **Behavior**\n     * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PUT\"` as the method type.\n     * - The provided `eventFunc` is executed whenever the specified event is emitted.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n     * \n     * // Register an event listener for when the request completes\n     * apiPut.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n     *     console.log(\"PUT request completed!\", data);\n     * });\n     * \n     * // Register an event listener for request errors\n     * apiPut.onEventEmit(\"requestError\", (error) => {\n     *     console.error(\"PUT request failed:\", error);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(requestData, options)`** - Sends a PUT request, triggering events during execution.\n     *\n     * @param {string} eventName - The name of the event to listen for.\n     * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n     */\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\n};\n/**\n * **`ApiPatch` - A class for handling HTTP PATCH requests within the `hison.link` module.**\n *\n * The `ApiPatch` class is responsible for sending HTTP PATCH requests to a specified service command.\n * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n *\n * ## **Key Features**\n * - **Executes HTTP PATCH requests** using `ApiLink`.\n * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n * - **Supports response caching** via an optional `CachingModule`.\n * - **Emits request lifecycle events** using `EventEmitter`.\n * - **Allows event listeners** for monitoring request execution.\n *\n * ## **How It Works**\n * - When instantiated, `ApiPatch` requires a `serviceCmd` that specifies the business logic endpoint.\n * - The `call()` method sends a PATCH request with the provided request data.\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n * - Event listeners can be attached to monitor the request lifecycle.\n *\n * ## **Example Usage**\n * ```typescript\n * // Creating an instance of ApiPatch\n * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n *\n * // Creating request data\n * const requestData = new hison.data.DataWrapper();\n * requestData.putString(\"username\", \"Alice\");\n * \n * // Sending a PATCH request\n * apiPatch.call(requestData).then(response => {\n *     console.log(response.data); // Response data\n * });\n *\n * // Creating an instance with caching\n * const cachingModule = new hison.link.CachingModule(20);\n * const cachedApiPatch = new hison.link.ApiPatch(\"UserService.createUser\", cachingModule);\n *\n * // Handling request events\n * cachedApiPatch.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n *     console.log(\"PATCH request completed!\", data);\n * });\n * ```\n *\n * ## **Internal Components**\n * - **`ApiLink`**: Handles request execution and response processing.\n * - **`EventEmitter`**: Manages event-driven request handling.\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n *\n * ## **Return Value**\n * - This class returns an instance of `ApiPatch`, providing methods for executing PATCH requests and managing request events.\n *\n * ## **Typical Use Cases**\n * - **Sending data to a REST API** with structured payloads.\n * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n * - **Handling event-driven request monitoring** via `onEventEmit`.\n */\ninterface InterfaceApiPatch {\n    /**\n     * **Executes an HTTP PATCH request to the specified service command.**\n     *\n     * This method sends a PATCH request using `ApiLink`, encapsulating request data in a `DataWrapper`\n     * and invoking necessary pre-request hooks and event emissions.\n     *\n     * ## **Parameters**\n     * - `requestData` *(any, required)* - The data to be sent in the request.\n     *   - If it is a `DataWrapper`, it is sent as-is.\n     *   - If it is a standard object, it is converted to a JSON payload.\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Pre-Request Handling**\n     * - **`hison.setBeforePatchRequst((requestData, options) => {})`**\n     *   - A customizable hook executed **before sending the PATCH request**.\n     *   - If it returns `false`, the request is **prevented from execution**.\n     *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n     *\n     * ## **Event Emission**\n     * - **`\"requestStarted_PATCH\"` Event**\n     *   - This event is emitted **before the PATCH request is executed**.\n     *   - Can be used for logging, request tracking, or debugging.\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an object containing:\n     *   - `data` *(any)* - The API response data.\n     *   - `response` *(Response)* - The original HTTP response object.\n     *\n     * ## **Behavior**\n     * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n     * - If the data is not cached, it makes an HTTP PATCH request to `_serviceCmd`.\n     * - Before executing the request:\n     *   - The **before-request hook (`beforePatchRequst`)** is checked.\n     *   - The **event `\"requestStarted_PATCH\"`** is emitted.\n     * - Once the request is completed, the response is returned and optionally stored in the cache.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n     * \n     * // Creating request data\n     * const requestData = new hison.data.DataWrapper();\n     * requestData.putString(\"username\", \"Alice\");\n     * \n     * // Customizing the before-request hook to modify data before sending\n     * customOption.link.beforePatchRequst = (requestData, options) => {\n     *     requestData.putString(\"timestamp\", Date.now().toString());\n     *     return true;\n     * };\n     * \n     * // Listening to the \"requestStarted_PATCH\" event\n     * apiPatch.onEventEmit(\"requestStarted_PATCH\", (requestData, options) => {\n     *     console.log(\"PATCH request started with data:\", requestData);\n     * });\n     * \n     * // Sending a PATCH request\n     * apiPatch.call(requestData).then(response => {\n     *     console.log(response.data); // Response data\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n     * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n     *\n     * @param {any} requestData - The data to be sent in the request.\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n     */\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: InterfaceDataWrapper; response: Response; } | null>;\n    /**\n     * **Sends an HTTP HEAD request to the API controller path.**\n     *\n     * This method retrieves only the headers from the API without downloading the response body.\n     * It is useful for checking metadata such as content type, content length, and caching information.\n     *\n     * ## **Parameters**\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n     *\n     * ## **Behavior**\n     * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n     * - The response body is **not** included in the result; only headers are returned.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n     * \n     * // Sending a HEAD request\n     * apiPatch.head().then(headers => {\n     *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n     * });\n     *\n     * // Sending a HEAD request with additional headers\n     * apiPatch.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n     *     console.log(headers);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n     * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n     *\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n     */\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\n    /**\n     * **Sends an HTTP OPTIONS request to the API controller path.**\n     *\n     * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n     * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n     *\n     * ## **Parameters**\n     * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n     *   - **Default:** `{}` (empty object)\n     *\n     * ## **Return Value**\n     * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PATCH\", \"OPTIONS\"]`).\n     *\n     * ## **Behavior**\n     * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n     * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n     * \n     * // Sending an OPTIONS request\n     * apiPatch.options().then(allowedMethods => {\n     *     console.log(allowedMethods); // e.g., [\"GET\", \"PATCH\", \"OPTIONS\"]\n     * });\n     *\n     * // Sending an OPTIONS request with additional headers\n     * apiPatch.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n     *     console.log(allowedMethods);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n     * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n     *\n     * @param {Record<string, any>} [options={}] - Additional request options.\n     * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n     */\n    options(options?: Record<string, any>): Promise<string[]>;\n    /**\n     * **Registers an event listener for API request lifecycle events.**\n     *\n     * This method allows attaching a callback function to be executed when a specified event \n     * occurs during the execution of a PATCH request.\n     *\n     * ## **Parameters**\n     * - `eventName` *(string, required)* - The name of the event to listen for.\n     * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n     *\n     * ## **Supported Events**\n     * - `\"requestStarted_PATCH\"` - Triggered when a PATCH request begins.\n     * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n     * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n     * - `\"requestError\"` - Triggered when an error occurs during the request.\n     *\n     * ## **Behavior**\n     * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PATCH\"` as the method type.\n     * - The provided `eventFunc` is executed whenever the specified event is emitted.\n     *\n     * ## **Example Usage**\n     * ```typescript\n     * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n     * \n     * // Register an event listener for when the request completes\n     * apiPatch.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n     *     console.log(\"PATCH request completed!\", data);\n     * });\n     * \n     * // Register an event listener for request errors\n     * apiPatch.onEventEmit(\"requestError\", (error) => {\n     *     console.error(\"PATCH request failed:\", error);\n     * });\n     * ```\n     *\n     * ## **Related Methods**\n     * - **`call(requestData, options)`** - Sends a PATCH request, triggering events during execution.\n     *\n     * @param {string} eventName - The name of the event to listen for.\n     * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n     */\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\n};\n/**\n * **`ApiDelete` - A class for handling HTTP DELETE requests within the `hison.link` module.**\n *\n * The `ApiDelete` class is responsible for sending HTTP DELETE requests to a specified service command.\n * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n *\n * ## **Key Features**\n * - **Executes HTTP DELETE requests** using `ApiLink`.\n * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n * - **Supports response caching** via an optional `CachingModule`.\n * - **Emits request lifecycle events** using `EventEmitter`.\n * - **Allows event listeners** for monitoring request execution.\n *\n * ## **How It Works**\n * - When instantiated, `ApiDelete` requires a `serviceCmd` that specifies the business logic endpoint.\n * - The `call()` method sends a DELETE request with the provided request data.\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n * - Event listeners can be attached to monitor the request lifecycle.\n *\n * ## **Example Usage**\n * ```typescript\n * // Creating an instance of ApiDelete\n * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n *\n * // Creating request data\n * const requestData = new hison.data.DataWrapper();\n * requestData.putString(\"username\", \"Alice\");\n * \n * // Sending a DELETE request\n * apiDelete.call(requestData).then(response => {\n *     console.log(response.data); // Response data\n * });\n *\n * // Creating an instance with caching\n * const cachingModule = new hison.link.CachingModule(20);\n * const cachedApiDelete = new hison.link.ApiDelete(\"UserService.createUser\", cachingModule);\n *\n * // Handling request events\n * cachedApiDelete.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n *     console.log(\"DELETE request completed!\", data);\n * });\n * ```\n *\n * ## **Internal Components**\n * - **`ApiLink`**: Handles request execution and response processing.\n * - **`EventEmitter`**: Manages event-driven request handling.\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n *\n * ## **Return Value**\n * - This class returns an instance of `ApiDelete`, providing methods for executing DELETE requests and managing request events.\n *\n * ## **Typical Use Cases**\n * - **Sending data to a REST API** with structured payloads.\n * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n * - **Handling event-driven request monitoring** via `onEventEmit`.\n */\ninterface InterfaceApiDelete {\n    /**\n    * **Executes an HTTP DELETE request to the specified service command.**\n    *\n    * This method sends a DELETE request using `ApiLink`, encapsulating request data in a `DataWrapper`\n    * and invoking necessary pre-request hooks and event emissions.\n    *\n    * ## **Parameters**\n    * - `requestData` *(any, required)* - The data to be sent in the request.\n    *   - If it is a `DataWrapper`, it is sent as-is.\n    *   - If it is a standard object, it is converted to a JSON payload.\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Pre-Request Handling**\n    * - **`hison.setBeforeDeleteRequst((requestData, options) => {})`**\n    *   - A customizable hook executed **before sending the DELETE request**.\n    *   - If it returns `false`, the request is **prevented from execution**.\n    *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n    *\n    * ## **Event Emission**\n    * - **`\"requestStarted_DELETE\"` Event**\n    *   - This event is emitted **before the DELETE request is executed**.\n    *   - Can be used for logging, request tracking, or debugging.\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing:\n    *   - `data` *(any)* - The API response data.\n    *   - `response` *(Response)* - The original HTTP response object.\n    *\n    * ## **Behavior**\n    * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n    * - If the data is not cached, it makes an HTTP DELETE request to `_serviceCmd`.\n    * - Before executing the request:\n    *   - The **before-request hook (`beforeDeleteRequst`)** is checked.\n    *   - The **event `\"requestStarted_DELETE\"`** is emitted.\n    * - Once the request is completed, the response is returned and optionally stored in the cache.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n    * \n    * // Creating request data\n    * const requestData = new hison.data.DataWrapper();\n    * requestData.putString(\"username\", \"Alice\");\n    * \n    * // Customizing the before-request hook to modify data before sending\n    * customOption.link.beforeDeleteRequst = (requestData, options) => {\n    *     requestData.putString(\"timestamp\", Date.now().toString());\n    *     return true;\n    * };\n    * \n    * // Listening to the \"requestStarted_DELETE\" event\n    * apiDelete.onEventEmit(\"requestStarted_DELETE\", (requestData, options) => {\n    *     console.log(\"DELETE request started with data:\", requestData);\n    * });\n    * \n    * // Sending a DELETE request\n    * apiDelete.call(requestData).then(response => {\n    *     console.log(response.data); // Response data\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n    * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n    *\n    * @param {any} requestData - The data to be sent in the request.\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n    */\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: InterfaceDataWrapper; response: Response; } | null>;\n    /**\n    * **Sends an HTTP HEAD request to the API controller path.**\n    *\n    * This method retrieves only the headers from the API without downloading the response body.\n    * It is useful for checking metadata such as content type, content length, and caching information.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n    *\n    * ## **Behavior**\n    * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n    * - The response body is **not** included in the result; only headers are returned.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n    * \n    * // Sending a HEAD request\n    * apiDelete.head().then(headers => {\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n    * });\n    *\n    * // Sending a HEAD request with additional headers\n    * apiDelete.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n    *     console.log(headers);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n    */\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\n    /**\n    * **Sends an HTTP OPTIONS request to the API controller path.**\n    *\n    * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n    * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"DELETE\", \"OPTIONS\"]`).\n    *\n    * ## **Behavior**\n    * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n    * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n    * \n    * // Sending an OPTIONS request\n    * apiDelete.options().then(allowedMethods => {\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"DELETE\", \"OPTIONS\"]\n    * });\n    *\n    * // Sending an OPTIONS request with additional headers\n    * apiDelete.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n    *     console.log(allowedMethods);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n    */\n    options(options?: Record<string, any>): Promise<string[]>;\n    /**\n    * **Registers an event listener for API request lifecycle events.**\n    *\n    * This method allows attaching a callback function to be executed when a specified event \n    * occurs during the execution of a DELETE request.\n    *\n    * ## **Parameters**\n    * - `eventName` *(string, required)* - The name of the event to listen for.\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n    *\n    * ## **Supported Events**\n    * - `\"requestStarted_DELETE\"` - Triggered when a DELETE request begins.\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\n    *\n    * ## **Behavior**\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"DELETE\"` as the method type.\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n    * \n    * // Register an event listener for when the request completes\n    * apiDelete.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n    *     console.log(\"DELETE request completed!\", data);\n    * });\n    * \n    * // Register an event listener for request errors\n    * apiDelete.onEventEmit(\"requestError\", (error) => {\n    *     console.error(\"DELETE request failed:\", error);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a DELETE request, triggering events during execution.\n    *\n    * @param {string} eventName - The name of the event to listen for.\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n    */\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\n};\n/**\n * **`ApiGetUrl` - A class for handling HTTP GET requests to a specified URL.**\n *\n * The `ApiGetUrl` class is responsible for sending HTTP GET requests to a provided URL.\n * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n *\n * ## **Key Features**\n * - **Executes HTTP GET requests** using `ApiLink`.\n * - **Accepts a direct URL** instead of using a predefined API resource path.\n * - **Supports response caching** via an optional `CachingModule`.\n * - **Emits request lifecycle events** using `EventEmitter`.\n * - **Allows event listeners** for monitoring request execution.\n *\n * ## **How It Works**\n * - When instantiated, `ApiGetUrl` requires a valid URL.\n * - The `call()` method triggers a GET request to the specified URL.\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n * - Event listeners can be attached to monitor the request lifecycle.\n *\n * ## **Example Usage**\n * ```typescript\n * // Creating an instance of ApiGetUrl without caching\n * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n * \n * // Sending a GET request\n * apiGetUrl.call().then(response => {\n *     console.log(response.data); // Response data\n * });\n *\n * // Creating an instance with caching\n * const cachingModule = new hison.link.CachingModule(20);\n * const cachedApiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\", cachingModule);\n * \n * // Handling request events\n * cachedApiGetUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n *     console.log(\"GET request completed!\", data);\n * });\n * ```\n *\n * ## **Internal Components**\n * - **`ApiLink`**: Handles request execution and response processing.\n * - **`EventEmitter`**: Manages event-driven request handling.\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n *\n * ## **Return Value**\n * - This class returns an instance of `ApiGetUrl`, which provides methods for executing GET requests to a specific URL.\n *\n * ## **Typical Use Cases**\n * - **Fetching data from an external API** by specifying a full URL.\n * - **Using cached responses** to reduce redundant API calls.\n * - **Handling event-driven request monitoring** via `onEventEmit`.\n */\ninterface InterfaceApiGetUrl {\n    /**\n    * **Executes an HTTP GET request to the specified URL.**\n    *\n    * This method sends a GET request using `ApiLink.getURL()`, optionally applying caching if a `CachingModule` is provided.\n    * It also **emits a request-start event** (`\"requestStarted_GET\"`) before execution.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or query parameters.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Pre-Request Handling**\n    * - **`\"requestStarted_GET\"` Event**\n    *   - This event is emitted **before the GET request is executed**.\n    *   - Can be used for logging, request tracking, or debugging.\n    *\n    * ## **Caching Mechanism**\n    * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n    * - If cached data is found, it is returned **without making a new network request**.\n    * - If no cached data exists, a new GET request is executed, and the response may be stored in the cache.\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing:\n    *   - `data` *(any)* - The API response data.\n    *   - `response` *(Response)* - The original HTTP response object.\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.getURL(this._url, options)`, which:\n    *   - Emits `\"requestStarted_GET\"` before making the request.\n    *   - Checks if the requested data is cached and returns it if available.\n    *   - If not cached, makes an HTTP GET request to `_url`.\n    *   - Returns the response and optionally stores it in the cache.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n    * \n    * // Listening to the \"requestStarted_GET\" event\n    * apiGetUrl.onEventEmit(\"requestStarted_GET\", (url, options) => {\n    *     console.log(`GET request started for: ${url}`);\n    * });\n    * \n    * // Sending a GET request\n    * apiGetUrl.call().then(response => {\n    *     console.log(response.data); // Response data\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n    * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n    */\n    call(options?: Record<string, any>): Promise<{ data: InterfaceDataWrapper; response: Response; } | null>;\n    /**\n    * **Sends an HTTP HEAD request to the specified URL.**\n    *\n    * This method retrieves only the headers from the specified URL without downloading the response body.\n    * It is useful for checking metadata such as content type, content length, and caching information.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.head(this._url, options)`, which:\n    *   - Sends an HTTP HEAD request to `_url`.\n    *   - Extracts and returns the response headers.\n    *   - Does **not** include the response body.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n    * \n    * // Sending a HEAD request\n    * apiGetUrl.head().then(headers => {\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n    * });\n    *\n    * // Sending a HEAD request with additional headers\n    * apiGetUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n    *     console.log(headers);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(options)`** - Sends a GET request to retrieve full response data.\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n    */\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\n    /**\n    * **Sends an HTTP OPTIONS request to the specified URL.**\n    *\n    * This method retrieves the list of allowed HTTP methods for the specified URL \n    * without performing an actual data operation. It is useful for checking which \n    * HTTP methods are permitted for a specific endpoint.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.options(this._url, options)`, which:\n    *   - Sends an HTTP OPTIONS request to `_url`.\n    *   - Extracts the `Allow` header from the response.\n    *   - Parses and returns the list of permitted HTTP methods.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n    * \n    * // Sending an OPTIONS request\n    * apiGetUrl.options().then(allowedMethods => {\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n    * });\n    *\n    * // Sending an OPTIONS request with additional headers\n    * apiGetUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n    *     console.log(allowedMethods);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(options)`** - Sends a GET request to retrieve full response data.\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n    */\n    options(options?: Record<string, any>): Promise<string[]>;\n    /**\n    * **Registers an event listener for API request lifecycle events.**\n    *\n    * This method allows attaching a callback function to be executed when a specified event \n    * occurs during the execution of a GET request to a specified URL.\n    *\n    * ## **Parameters**\n    * - `eventName` *(string, required)* - The name of the event to listen for.\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n    *\n    * ## **Supported Events**\n    * - `\"requestStarted_GET\"` - Triggered when a GET request begins.\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\n    *\n    * ## **Behavior**\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"GET\"` as the method type.\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n    * \n    * // Register an event listener for when the request completes\n    * apiGetUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n    *     console.log(\"GET request completed!\", data);\n    * });\n    * \n    * // Register an event listener for request errors\n    * apiGetUrl.onEventEmit(\"requestError\", (error) => {\n    *     console.error(\"GET request failed:\", error);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(options)`** - Sends a GET request, triggering events during execution.\n    *\n    * @param {string} eventName - The name of the event to listen for.\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n    */\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\n};\n/**\n * **`ApiPostUrl` - A class for handling HTTP POST requests to a specified URL.**\n *\n * The `ApiPostUrl` class is responsible for sending HTTP POST requests to a provided URL.\n * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n *\n * ## **Key Features**\n * - **Executes HTTP POST requests** using `ApiLink`.\n * - **Accepts a direct URL** instead of using a predefined service command.\n * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n * - **Supports response caching** via an optional `CachingModule`.\n * - **Emits request lifecycle events** using `EventEmitter`.\n * - **Allows event listeners** for monitoring request execution.\n *\n * ## **How It Works**\n * - When instantiated, `ApiPostUrl` requires a valid URL and an optional `serviceCmd`.\n * - The `call()` method sends a POST request with the provided request data.\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n * - Event listeners can be attached to monitor the request lifecycle.\n *\n * ## **Example Usage**\n * ```typescript\n * // Creating an instance of ApiPostUrl\n * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n *\n * // Creating request data\n * const requestData = new hison.data.DataWrapper();\n * requestData.putString(\"username\", \"Alice\");\n * \n * // Sending a POST request\n * apiPostUrl.call(requestData).then(response => {\n *     console.log(response.data); // Response data\n * });\n *\n * // Creating an instance with caching\n * const cachingModule = new hison.link.CachingModule(20);\n * const cachedApiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n *\n * // Handling request events\n * cachedApiPostUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n *     console.log(\"POST request completed!\", data);\n * });\n * ```\n *\n * ## **Internal Components**\n * - **`ApiLink`**: Handles request execution and response processing.\n * - **`EventEmitter`**: Manages event-driven request handling.\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n *\n * ## **Return Value**\n * - This class returns an instance of `ApiPostUrl`, which provides methods for executing POST requests to a specific URL.\n *\n * ## **Typical Use Cases**\n * - **Sending data to an external API** using a full URL.\n * - **Passing a `serviceCmd` for structured request routing**.\n * - **Using cached responses** to reduce redundant API calls.\n * - **Handling event-driven request monitoring** via `onEventEmit`.\n */\ninterface InterfaceApiPostUrl {\n    /**\n    * **Executes an HTTP POST request to the specified URL with an optional service command.**\n    *\n    * This method sends a POST request using `ApiLink.postURL()`, encapsulating request data in a `DataWrapper`\n    * and invoking necessary pre-request hooks and event emissions.\n    *\n    * ## **Parameters**\n    * - `requestData` *(any, required)* - The data to be sent in the request.\n    *   - If it is a `DataWrapper`, it is sent as-is.\n    *   - If it is a standard object, it is converted to a JSON payload.\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Pre-Request Handling**\n    * - **`\"requestStarted_POST\"` Event**\n    *   - This event is emitted **before the POST request is executed**.\n    *   - It includes the `serviceCmd`, request options, and request data.\n    *   - Can be used for logging, request tracking, or debugging.\n    *\n    * ## **Caching Mechanism**\n    * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n    * - If cached data is found, it is returned **without making a new network request**.\n    * - If no cached data exists, a new POST request is executed, and the response may be stored in the cache.\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing:\n    *   - `data` *(any)* - The API response data.\n    *   - `response` *(Response)* - The original HTTP response object.\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.postURL(this._url, requestData, this._serviceCmd, options)`, which:\n    *   - Emits `\"requestStarted_POST\"` before making the request.\n    *   - Checks if the requested data is cached and returns it if available.\n    *   - If not cached, makes an HTTP POST request to `_url` with the provided `serviceCmd`.\n    *   - Returns the response and optionally stores it in the cache.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Creating request data\n    * const requestData = new hison.data.DataWrapper();\n    * requestData.putString(\"username\", \"Alice\");\n    * \n    * // Listening to the \"requestStarted_POST\" event\n    * apiPostUrl.onEventEmit(\"requestStarted_POST\", (serviceCmd, options, requestData) => {\n    *     console.log(`POST request started for service: ${serviceCmd}`, requestData);\n    * });\n    * \n    * // Sending a POST request\n    * apiPostUrl.call(requestData).then(response => {\n    *     console.log(response.data); // Response data\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n    * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n    *\n    * @param {any} requestData - The data to be sent in the request.\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n    */\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: InterfaceDataWrapper; response: Response; } | null>;\n    /**\n    * **Sends an HTTP HEAD request to the specified URL.**\n    *\n    * This method retrieves only the headers from the specified URL without downloading the response body.\n    * It is useful for checking metadata such as content type, content length, and caching information.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.headURL(this._url, options)`, which:\n    *   - Sends an HTTP HEAD request to `_url`.\n    *   - Extracts and returns the response headers.\n    *   - Does **not** include the response body.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Sending a HEAD request\n    * apiPostUrl.head().then(headers => {\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n    * });\n    *\n    * // Sending a HEAD request with additional headers\n    * apiPostUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n    *     console.log(headers);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n    */\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\n    /**\n    * **Sends an HTTP OPTIONS request to the specified URL.**\n    *\n    * This method retrieves the list of allowed HTTP methods for the specified URL \n    * without performing an actual data operation. It is useful for checking which \n    * HTTP methods are permitted for a specific endpoint.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.options(this._url, options)`, which:\n    *   - Sends an HTTP OPTIONS request to `_url`.\n    *   - Extracts the `Allow` header from the response.\n    *   - Parses and returns the list of permitted HTTP methods.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Sending an OPTIONS request\n    * apiPostUrl.options().then(allowedMethods => {\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n    * });\n    *\n    * // Sending an OPTIONS request with additional headers\n    * apiPostUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n    *     console.log(allowedMethods);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n    */\n    options(options?: Record<string, any>): Promise<string[]>;\n    /**\n    * **Registers an event listener for API request lifecycle events.**\n    *\n    * This method allows attaching a callback function to be executed when a specified event \n    * occurs during the execution of a POST request to a specified URL.\n    *\n    * ## **Parameters**\n    * - `eventName` *(string, required)* - The name of the event to listen for.\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n    *\n    * ## **Supported Events**\n    * - `\"requestStarted_POST\"` - Triggered when a POST request begins.\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\n    *\n    * ## **Behavior**\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"POST\"` as the method type.\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Register an event listener for when the request completes\n    * apiPostUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n    *     console.log(\"POST request completed!\", data);\n    * });\n    * \n    * // Register an event listener for request errors\n    * apiPostUrl.onEventEmit(\"requestError\", (error) => {\n    *     console.error(\"POST request failed:\", error);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a POST request, triggering events during execution.\n    *\n    * @param {string} eventName - The name of the event to listen for.\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n    */\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\n};\n/**\n * **`ApiPutUrl` - A class for handling HTTP PUT requests to a specified URL.**\n *\n * The `ApiPutUrl` class is responsible for sending HTTP PUT requests to a provided URL.\n * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n *\n * ## **Key Features**\n * - **Executes HTTP PUT requests** using `ApiLink`.\n * - **Accepts a direct URL** instead of using a predefined service command.\n * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n * - **Supports response caching** via an optional `CachingModule`.\n * - **Emits request lifecycle events** using `EventEmitter`.\n * - **Allows event listeners** for monitoring request execution.\n *\n * ## **How It Works**\n * - When instantiated, `ApiPutUrl` requires a valid URL and an optional `serviceCmd`.\n * - The `call()` method sends a PUT request with the provided request data.\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n * - Event listeners can be attached to monitor the request lifecycle.\n *\n * ## **Example Usage**\n * ```typescript\n * // Creating an instance of ApiPutUrl\n * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n *\n * // Creating request data\n * const requestData = new hison.data.DataWrapper();\n * requestData.putString(\"username\", \"Alice\");\n * \n * // Sending a PUT request\n * apiPutUrl.call(requestData).then(response => {\n *     console.log(response.data); // Response data\n * });\n *\n * // Creating an instance with caching\n * const cachingModule = new hison.link.CachingModule(20);\n * const cachedApiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n *\n * // Handling request events\n * cachedApiPutUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n *     console.log(\"PUT request completed!\", data);\n * });\n * ```\n *\n * ## **Internal Components**\n * - **`ApiLink`**: Handles request execution and response processing.\n * - **`EventEmitter`**: Manages event-driven request handling.\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n *\n * ## **Return Value**\n * - This class returns an instance of `ApiPutUrl`, which provides methods for executing PUT requests to a specific URL.\n *\n * ## **Typical Use Cases**\n * - **Sending data to an external API** using a full URL.\n * - **Passing a `serviceCmd` for structured request routing**.\n * - **Using cached responses** to reduce redundant API calls.\n * - **Handling event-driven request monitoring** via `onEventEmit`.\n */\ninterface InterfaceApiPutUrl {\n    /**\n    * **Executes an HTTP PUT request to the specified URL with an optional service command.**\n    *\n    * This method sends a PUT request using `ApiLink.postURL()`, encapsulating request data in a `DataWrapper`\n    * and invoking necessary pre-request hooks and event emissions.\n    *\n    * ## **Parameters**\n    * - `requestData` *(any, required)* - The data to be sent in the request.\n    *   - If it is a `DataWrapper`, it is sent as-is.\n    *   - If it is a standard object, it is converted to a JSON payload.\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Pre-Request Handling**\n    * - **`\"requestStarted_PUT\"` Event**\n    *   - This event is emitted **before the PUT request is executed**.\n    *   - It includes the `serviceCmd`, request options, and request data.\n    *   - Can be used for logging, request tracking, or debugging.\n    *\n    * ## **Caching Mechanism**\n    * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n    * - If cached data is found, it is returned **without making a new network request**.\n    * - If no cached data exists, a new PUT request is executed, and the response may be stored in the cache.\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing:\n    *   - `data` *(any)* - The API response data.\n    *   - `response` *(Response)* - The original HTTP response object.\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.postURL(this._url, requestData, this._serviceCmd, options)`, which:\n    *   - Emits `\"requestStarted_PUT\"` before making the request.\n    *   - Checks if the requested data is cached and returns it if available.\n    *   - If not cached, makes an HTTP PUT request to `_url` with the provided `serviceCmd`.\n    *   - Returns the response and optionally stores it in the cache.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Creating request data\n    * const requestData = new hison.data.DataWrapper();\n    * requestData.putString(\"username\", \"Alice\");\n    * \n    * // Listening to the \"requestStarted_PUT\" event\n    * apiPutUrl.onEventEmit(\"requestStarted_PUT\", (serviceCmd, options, requestData) => {\n    *     console.log(`PUT request started for service: ${serviceCmd}`, requestData);\n    * });\n    * \n    * // Sending a PUT request\n    * apiPutUrl.call(requestData).then(response => {\n    *     console.log(response.data); // Response data\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n    * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n    *\n    * @param {any} requestData - The data to be sent in the request.\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n    */\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: InterfaceDataWrapper; response: Response; } | null>;\n    /**\n    * **Sends an HTTP HEAD request to the specified URL.**\n    *\n    * This method retrieves only the headers from the specified URL without downloading the response body.\n    * It is useful for checking metadata such as content type, content length, and caching information.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.headURL(this._url, options)`, which:\n    *   - Sends an HTTP HEAD request to `_url`.\n    *   - Extracts and returns the response headers.\n    *   - Does **not** include the response body.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Sending a HEAD request\n    * apiPutUrl.head().then(headers => {\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n    * });\n    *\n    * // Sending a HEAD request with additional headers\n    * apiPutUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n    *     console.log(headers);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n    */\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\n    /**\n    * **Sends an HTTP OPTIONS request to the specified URL.**\n    *\n    * This method retrieves the list of allowed HTTP methods for the specified URL \n    * without performing an actual data operation. It is useful for checking which \n    * HTTP methods are permitted for a specific endpoint.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PUT\", \"OPTIONS\"]`).\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.options(this._url, options)`, which:\n    *   - Sends an HTTP OPTIONS request to `_url`.\n    *   - Extracts the `Allow` header from the response.\n    *   - Parses and returns the list of permitted HTTP methods.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Sending an OPTIONS request\n    * apiPutUrl.options().then(allowedMethods => {\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"PUT\", \"OPTIONS\"]\n    * });\n    *\n    * // Sending an OPTIONS request with additional headers\n    * apiPutUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n    *     console.log(allowedMethods);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n    */\n    options(options?: Record<string, any>): Promise<string[]>;\n    /**\n    * **Registers an event listener for API request lifecycle events.**\n    *\n    * This method allows attaching a callback function to be executed when a specified event \n    * occurs during the execution of a PUT request to a specified URL.\n    *\n    * ## **Parameters**\n    * - `eventName` *(string, required)* - The name of the event to listen for.\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n    *\n    * ## **Supported Events**\n    * - `\"requestStarted_PUT\"` - Triggered when a PUT request begins.\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\n    *\n    * ## **Behavior**\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PUT\"` as the method type.\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Register an event listener for when the request completes\n    * apiPutUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n    *     console.log(\"PUT request completed!\", data);\n    * });\n    * \n    * // Register an event listener for request errors\n    * apiPutUrl.onEventEmit(\"requestError\", (error) => {\n    *     console.error(\"PUT request failed:\", error);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a PUT request, triggering events during execution.\n    *\n    * @param {string} eventName - The name of the event to listen for.\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n    */\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\n};\n/**\n * **`ApiPatchUrl` - A class for handling HTTP PATCH requests to a specified URL.**\n *\n * The `ApiPatchUrl` class is responsible for sending HTTP PATCH requests to a provided URL.\n * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n *\n * ## **Key Features**\n * - **Executes HTTP PATCH requests** using `ApiLink`.\n * - **Accepts a direct URL** instead of using a predefined service command.\n * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n * - **Supports response caching** via an optional `CachingModule`.\n * - **Emits request lifecycle events** using `EventEmitter`.\n * - **Allows event listeners** for monitoring request execution.\n *\n * ## **How It Works**\n * - When instantiated, `ApiPatchUrl` requires a valid URL and an optional `serviceCmd`.\n * - The `call()` method sends a PATCH request with the provided request data.\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n * - Event listeners can be attached to monitor the request lifecycle.\n *\n * ## **Example Usage**\n * ```typescript\n * // Creating an instance of ApiPatchUrl\n * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n *\n * // Creating request data\n * const requestData = new hison.data.DataWrapper();\n * requestData.putString(\"username\", \"Alice\");\n * \n * // Sending a PATCH request\n * apiPatchUrl.call(requestData).then(response => {\n *     console.log(response.data); // Response data\n * });\n *\n * // Creating an instance with caching\n * const cachingModule = new hison.link.CachingModule(20);\n * const cachedApiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n *\n * // Handling request events\n * cachedApiPatchUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n *     console.log(\"PATCH request completed!\", data);\n * });\n * ```\n *\n * ## **Internal Components**\n * - **`ApiLink`**: Handles request execution and response processing.\n * - **`EventEmitter`**: Manages event-driven request handling.\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n *\n * ## **Return Value**\n * - This class returns an instance of `ApiPatchUrl`, which provides methods for executing PATCH requests to a specific URL.\n *\n * ## **Typical Use Cases**\n * - **Sending data to an external API** using a full URL.\n * - **Passing a `serviceCmd` for structured request routing**.\n * - **Using cached responses** to reduce redundant API calls.\n * - **Handling event-driven request monitoring** via `onEventEmit`.\n */\ninterface InterfaceApiPatchUrl {\n    /**\n    * **Executes an HTTP PATCH request to the specified URL with an optional service command.**\n    *\n    * This method sends a PATCH request using `ApiLink.postURL()`, encapsulating request data in a `DataWrapper`\n    * and invoking necessary pre-request hooks and event emissions.\n    *\n    * ## **Parameters**\n    * - `requestData` *(any, required)* - The data to be sent in the request.\n    *   - If it is a `DataWrapper`, it is sent as-is.\n    *   - If it is a standard object, it is converted to a JSON payload.\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Pre-Request Handling**\n    * - **`\"requestStarted_PATCH\"` Event**\n    *   - This event is emitted **before the PATCH request is executed**.\n    *   - It includes the `serviceCmd`, request options, and request data.\n    *   - Can be used for logging, request tracking, or debugging.\n    *\n    * ## **Caching Mechanism**\n    * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n    * - If cached data is found, it is returned **without making a new network request**.\n    * - If no cached data exists, a new PATCH request is executed, and the response may be stored in the cache.\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing:\n    *   - `data` *(any)* - The API response data.\n    *   - `response` *(Response)* - The original HTTP response object.\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.postURL(this._url, requestData, this._serviceCmd, options)`, which:\n    *   - Emits `\"requestStarted_PATCH\"` before making the request.\n    *   - Checks if the requested data is cached and returns it if available.\n    *   - If not cached, makes an HTTP PATCH request to `_url` with the provided `serviceCmd`.\n    *   - Returns the response and optionally stores it in the cache.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Creating request data\n    * const requestData = new hison.data.DataWrapper();\n    * requestData.putString(\"username\", \"Alice\");\n    * \n    * // Listening to the \"requestStarted_PATCH\" event\n    * apiPatchUrl.onEventEmit(\"requestStarted_PATCH\", (serviceCmd, options, requestData) => {\n    *     console.log(`PATCH request started for service: ${serviceCmd}`, requestData);\n    * });\n    * \n    * // Sending a PATCH request\n    * apiPatchUrl.call(requestData).then(response => {\n    *     console.log(response.data); // Response data\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n    * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n    *\n    * @param {any} requestData - The data to be sent in the request.\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n    */\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: InterfaceDataWrapper; response: Response; } | null>;\n    /**\n    * **Sends an HTTP HEAD request to the specified URL.**\n    *\n    * This method retrieves only the headers from the specified URL without downloading the response body.\n    * It is useful for checking metadata such as content type, content length, and caching information.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.headURL(this._url, options)`, which:\n    *   - Sends an HTTP HEAD request to `_url`.\n    *   - Extracts and returns the response headers.\n    *   - Does **not** include the response body.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Sending a HEAD request\n    * apiPatchUrl.head().then(headers => {\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n    * });\n    *\n    * // Sending a HEAD request with additional headers\n    * apiPatchUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n    *     console.log(headers);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n    */\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\n    /**\n    * **Sends an HTTP OPTIONS request to the specified URL.**\n    *\n    * This method retrieves the list of allowed HTTP methods for the specified URL \n    * without performing an actual data operation. It is useful for checking which \n    * HTTP methods are permitted for a specific endpoint.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PATCH\", \"OPTIONS\"]`).\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.options(this._url, options)`, which:\n    *   - Sends an HTTP OPTIONS request to `_url`.\n    *   - Extracts the `Allow` header from the response.\n    *   - Parses and returns the list of permitted HTTP methods.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Sending an OPTIONS request\n    * apiPatchUrl.options().then(allowedMethods => {\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"PATCH\", \"OPTIONS\"]\n    * });\n    *\n    * // Sending an OPTIONS request with additional headers\n    * apiPatchUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n    *     console.log(allowedMethods);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n    */\n    options(options?: Record<string, any>): Promise<string[]>;\n    /**\n    * **Registers an event listener for API request lifecycle events.**\n    *\n    * This method allows attaching a callback function to be executed when a specified event \n    * occurs during the execution of a PATCH request to a specified URL.\n    *\n    * ## **Parameters**\n    * - `eventName` *(string, required)* - The name of the event to listen for.\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n    *\n    * ## **Supported Events**\n    * - `\"requestStarted_PATCH\"` - Triggered when a PATCH request begins.\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\n    *\n    * ## **Behavior**\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PATCH\"` as the method type.\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Register an event listener for when the request completes\n    * apiPatchUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n    *     console.log(\"PATCH request completed!\", data);\n    * });\n    * \n    * // Register an event listener for request errors\n    * apiPatchUrl.onEventEmit(\"requestError\", (error) => {\n    *     console.error(\"PATCH request failed:\", error);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a PATCH request, triggering events during execution.\n    *\n    * @param {string} eventName - The name of the event to listen for.\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n    */\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\n};\n/**\n * **`ApiDeleteUrl` - A class for handling HTTP DELETE requests to a specified URL.**\n *\n * The `ApiDeleteUrl` class is responsible for sending HTTP DELETE requests to a provided URL.\n * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n *\n * ## **Key Features**\n * - **Executes HTTP DELETE requests** using `ApiLink`.\n * - **Accepts a direct URL** instead of using a predefined service command.\n * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n * - **Supports response caching** via an optional `CachingModule`.\n * - **Emits request lifecycle events** using `EventEmitter`.\n * - **Allows event listeners** for monitoring request execution.\n *\n * ## **How It Works**\n * - When instantiated, `ApiDeleteUrl` requires a valid URL and an optional `serviceCmd`.\n * - The `call()` method sends a DELETE request with the provided request data.\n * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n * - Event listeners can be attached to monitor the request lifecycle.\n *\n * ## **Example Usage**\n * ```typescript\n * // Creating an instance of ApiDeleteUrl\n * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n *\n * // Creating request data\n * const requestData = new hison.data.DataWrapper();\n * requestData.putString(\"username\", \"Alice\");\n * \n * // Sending a DELETE request\n * apiDeleteUrl.call(requestData).then(response => {\n *     console.log(response.data); // Response data\n * });\n *\n * // Creating an instance with caching\n * const cachingModule = new hison.link.CachingModule(20);\n * const cachedApiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n *\n * // Handling request events\n * cachedApiDeleteUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n *     console.log(\"DELETE request completed!\", data);\n * });\n * ```\n *\n * ## **Internal Components**\n * - **`ApiLink`**: Handles request execution and response processing.\n * - **`EventEmitter`**: Manages event-driven request handling.\n * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n *\n * ## **Return Value**\n * - This class returns an instance of `ApiDeleteUrl`, which provides methods for executing DELETE requests to a specific URL.\n *\n * ## **Typical Use Cases**\n * - **Sending data to an external API** using a full URL.\n * - **Passing a `serviceCmd` for structured request routing**.\n * - **Using cached responses** to reduce redundant API calls.\n * - **Handling event-driven request monitoring** via `onEventEmit`.\n */\ninterface InterfaceApiDeleteUrl {\n    /**\n    * **Executes an HTTP DELETE request to the specified URL with an optional service command.**\n    *\n    * This method sends a DELETE request using `ApiLink.postURL()`, encapsulating request data in a `DataWrapper`\n    * and invoking necessary pre-request hooks and event emissions.\n    *\n    * ## **Parameters**\n    * - `requestData` *(any, required)* - The data to be sent in the request.\n    *   - If it is a `DataWrapper`, it is sent as-is.\n    *   - If it is a standard object, it is converted to a JSON payload.\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Pre-Request Handling**\n    * - **`\"requestStarted_DELETE\"` Event**\n    *   - This event is emitted **before the DELETE request is executed**.\n    *   - It includes the `serviceCmd`, request options, and request data.\n    *   - Can be used for logging, request tracking, or debugging.\n    *\n    * ## **Caching Mechanism**\n    * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n    * - If cached data is found, it is returned **without making a new network request**.\n    * - If no cached data exists, a new DELETE request is executed, and the response may be stored in the cache.\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing:\n    *   - `data` *(any)* - The API response data.\n    *   - `response` *(Response)* - The original HTTP response object.\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.postURL(this._url, requestData, this._serviceCmd, options)`, which:\n    *   - Emits `\"requestStarted_DELETE\"` before making the request.\n    *   - Checks if the requested data is cached and returns it if available.\n    *   - If not cached, makes an HTTP DELETE request to `_url` with the provided `serviceCmd`.\n    *   - Returns the response and optionally stores it in the cache.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Creating request data\n    * const requestData = new hison.data.DataWrapper();\n    * requestData.putString(\"username\", \"Alice\");\n    * \n    * // Listening to the \"requestStarted_DELETE\" event\n    * apiDeleteUrl.onEventEmit(\"requestStarted_DELETE\", (serviceCmd, options, requestData) => {\n    *     console.log(`DELETE request started for service: ${serviceCmd}`, requestData);\n    * });\n    * \n    * // Sending a DELETE request\n    * apiDeleteUrl.call(requestData).then(response => {\n    *     console.log(response.data); // Response data\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n    * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n    *\n    * @param {any} requestData - The data to be sent in the request.\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n    */\n    call(requestData: any, options?: Record<string, any>): Promise<{ data: InterfaceDataWrapper; response: Response; } | null>;\n    /**\n    * **Sends an HTTP HEAD request to the specified URL.**\n    *\n    * This method retrieves only the headers from the specified URL without downloading the response body.\n    * It is useful for checking metadata such as content type, content length, and caching information.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.headURL(this._url, options)`, which:\n    *   - Sends an HTTP HEAD request to `_url`.\n    *   - Extracts and returns the response headers.\n    *   - Does **not** include the response body.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Sending a HEAD request\n    * apiDeleteUrl.head().then(headers => {\n    *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n    * });\n    *\n    * // Sending a HEAD request with additional headers\n    * apiDeleteUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n    *     console.log(headers);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n    * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n    */\n    head(options?: Record<string, any>): Promise<Record<string, string>>;\n    /**\n    * **Sends an HTTP OPTIONS request to the specified URL.**\n    *\n    * This method retrieves the list of allowed HTTP methods for the specified URL \n    * without performing an actual data operation. It is useful for checking which \n    * HTTP methods are permitted for a specific endpoint.\n    *\n    * ## **Parameters**\n    * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n    *   - **Default:** `{}` (empty object)\n    *\n    * ## **Return Value**\n    * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"DELETE\", \"OPTIONS\"]`).\n    *\n    * ## **Behavior**\n    * - Calls `this._apiLink.options(this._url, options)`, which:\n    *   - Sends an HTTP OPTIONS request to `_url`.\n    *   - Extracts the `Allow` header from the response.\n    *   - Parses and returns the list of permitted HTTP methods.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Sending an OPTIONS request\n    * apiDeleteUrl.options().then(allowedMethods => {\n    *     console.log(allowedMethods); // e.g., [\"GET\", \"DELETE\", \"OPTIONS\"]\n    * });\n    *\n    * // Sending an OPTIONS request with additional headers\n    * apiDeleteUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n    *     console.log(allowedMethods);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n    * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n    *\n    * @param {Record<string, any>} [options={}] - Additional request options.\n    * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n    */\n    options(options?: Record<string, any>): Promise<string[]>;\n    /**\n    * **Registers an event listener for API request lifecycle events.**\n    *\n    * This method allows attaching a callback function to be executed when a specified event \n    * occurs during the execution of a DELETE request to a specified URL.\n    *\n    * ## **Parameters**\n    * - `eventName` *(string, required)* - The name of the event to listen for.\n    * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n    *\n    * ## **Supported Events**\n    * - `\"requestStarted_DELETE\"` - Triggered when a DELETE request begins.\n    * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n    * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n    * - `\"requestError\"` - Triggered when an error occurs during the request.\n    *\n    * ## **Behavior**\n    * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"DELETE\"` as the method type.\n    * - The provided `eventFunc` is executed whenever the specified event is emitted.\n    *\n    * ## **Example Usage**\n    * ```typescript\n    * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n    * \n    * // Register an event listener for when the request completes\n    * apiDeleteUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n    *     console.log(\"DELETE request completed!\", data);\n    * });\n    * \n    * // Register an event listener for request errors\n    * apiDeleteUrl.onEventEmit(\"requestError\", (error) => {\n    *     console.error(\"DELETE request failed:\", error);\n    * });\n    * ```\n    *\n    * ## **Related Methods**\n    * - **`call(requestData, options)`** - Sends a DELETE request, triggering events during execution.\n    *\n    * @param {string} eventName - The name of the event to listen for.\n    * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n    */\n    onEventEmit(eventName: string, eventFunc: (...args: any[]) => void): void;\n};\n/**\n * Defines a function type for handling API GET requests before they are sent.\n * This allows developers to modify request options or cancel the request.\n *\n * ## Parameters\n * - `resourcePath` *(optional, string)*: The API endpoint URL for the GET request.\n * - `options` *(optional, Record<string, any>)*: Additional request options, such as headers or timeout settings.\n *\n * ## Return Value\n * - Returns `false` to prevent the GET request from being executed.\n * - Returns `void` or `true` to proceed with the request.\n *\n * ## Example Usage\n * ```typescript\n * hison.setBeforeGetRequst((resourcePath, options) => {\n *     console.log(\"Preparing GET request to:\", resourcePath);\n *     options.headers = { Authorization: \"Bearer token\" };\n *     return true;\n * });\n * ```\n */\ninterface BeforeGetRequst {(resourcePath?: string, options?: Record<string, any>): boolean | void;};\n/**\n * Defines a function type for handling API POST requests before they are sent.\n * This allows modifying request data, headers, or preventing the request.\n *\n * ## Parameters\n * - `requestDw` *(optional, DataWrapper)*: The request payload wrapped in `DataWrapper`.\n * - `options` *(optional, Record<string, any>)*: Additional request options.\n *\n * ## Return Value\n * - Returns `false` to cancel the POST request.\n * - Returns `void` or `true` to proceed with the request.\n *\n * ## Example Usage\n * ```typescript\n * hison.setBeforePostRequst((requestDw, options) => {\n *     requestDw.putString(\"timestamp\", Date.now().toString());\n *     return true;\n * });\n * ```\n */\ninterface BeforePostRequst {(requestDw?: InterfaceDataWrapper, options?: Record<string, any>): boolean | void;};\n/**\n * Defines a function type for handling API PUT requests before they are sent.\n * Similar to `BeforePostRequst`, this allows modifying request payload or settings.\n *\n * ## Parameters\n * - `requestDw` *(optional, DataWrapper)*: The request payload.\n * - `options` *(optional, Record<string, any>)*: Additional request options.\n *\n * ## Return Value\n * - Returns `false` to cancel the PUT request.\n * - Returns `void` or `true` to proceed.\n *\n * ## Example Usage\n * ```typescript\n * hison.setBeforePutRequst((requestDw, options) => {\n *     requestDw.putString(\"modified\", \"true\");\n * });\n * ```\n */\ninterface BeforePutRequst {(requestDw?: InterfaceDataWrapper, options?: Record<string, any>): boolean | void;};\n/**\n * Defines a function type for handling API PATCH requests before they are sent.\n * This allows modifying partial update data before execution.\n *\n * ## Parameters\n * - `requestDw` *(optional, DataWrapper)*: The partial update payload.\n * - `options` *(optional, Record<string, any>)*: Additional request options.\n *\n * ## Return Value\n * - Returns `false` to cancel the PATCH request.\n * - Returns `void` or `true` to proceed.\n *\n * ## Example Usage\n * ```typescript\n * hison.setBeforePatchRequst((requestDw, options) => {\n *     requestDw.putString(\"lastUpdated\", new Date().toISOString());\n * });\n * ```\n */\ninterface BeforePatchRequst {(requestDw?: InterfaceDataWrapper, options?: Record<string, any>): boolean | void;};\n/**\n * Defines a function type for handling API DELETE requests before they are sent.\n * This allows validating or modifying delete operations before execution.\n *\n * ## Parameters\n * - `requestDw` *(optional, DataWrapper)*: The delete request payload.\n * - `options` *(optional, Record<string, any>)*: Additional request options.\n *\n * ## Return Value\n * - Returns `false` to cancel the DELETE request.\n * - Returns `void` or `true` to proceed.\n *\n * ## Example Usage\n * ```typescript\n * hison.setBeforeDeleteRequst((requestDw, options) => {\n *     if (!requestDw.hasKey(\"id\")) return false;\n * });\n * ```\n */\ninterface BeforeDeleteRequst {(requestDw?: InterfaceDataWrapper, options?: Record<string, any>): boolean | void;};\n/**\n * Defines a function type for intercepting API response results.\n * This allows modifying API responses before they are returned to the caller.\n *\n * ## Parameters\n * - `result` *(DataWrapper | undefined)*: The API response data wrapped in `DataWrapper`.\n * - `response` *(Response)*: The original HTTP response object.\n *\n * ## Return Value\n * - Returns `false` to prevent the response from being processed further.\n * - Returns `void` or `true` to allow normal response handling.\n *\n * ## Example Usage\n * ```typescript\n * hison.setInterceptApiResult((result, response) => {\n *     console.log(\"Received API result:\", result);\n *     return true;\n * });\n * ```\n */\ninterface InterceptApiResult {(result: InterfaceDataWrapper | undefined, response: Response): boolean | void;};\n/**\n * Defines a function type for handling API errors before they are propagated.\n * This allows logging or modifying error responses before they are thrown.\n *\n * ## Parameters\n * - `error` *(any)*: The error object thrown by the API request.\n *\n * ## Return Value\n * - Returns `false` to suppress the error.\n * - Returns `void` or `true` to propagate the error as normal.\n *\n * ## Example Usage\n * ```typescript\n * hison.setInterceptApiError((error) => {\n *     console.error(\"API error occurred:\", error);\n * });\n * ```\n */\ninterface InterceptApiError {(error: any): boolean | void;};\n\n//====================================================================================\n//createHison\n//====================================================================================\n/**\n * Creates and returns an instance of `Hison`, the core object of the `hisondev` solution.\n * \n * ## **Overview**\n * The `createHison()` function **encapsulates the creation of the `Hison` object** using a **closure pattern**.\n * This ensures that:\n * - **Internal states remain private** while exposing necessary functionalities.\n * - **Methods are encapsulated**, preventing direct manipulation of internal logic.\n * - **Security and integrity** of configuration settings are preserved.\n * \n * The returned `Hison` object serves as the **central interface** for configuration, security, utilities, \n * structured data handling, and API communication.\n * \n * ---\n * ## **Encapsulation with Closure**\n * - Internally, `createHison()` initializes a **`HisonCore` object**, which holds the actual implementations.\n * - The **returned object only exposes a selected set of methods**, ensuring safe interaction.\n * - This design provides **data encapsulation** and **prevents unintended modifications**.\n * \n * ---\n * ## **Core Functionalities of `Hison`**\n * \n * The `Hison` object provides a **modular and extensible API** with the following key components:\n * \n * ### **1. Configuration Management**\n * - **Dynamic Customization**: Modify settings via setter methods (`setDateFormat()`, `setTimeFormat()`, etc.).\n * - **Character Encoding Configuration**: Adjust byte sizes for different character encodings.\n * - **Security Settings**: Enable object freezing, access restrictions, and debugging prevention.\n *\n * Example:\n * ```typescript\n * hison.setDateFormat(\"MM/dd/yyyy\");\n * hison.setTimeFormat(\"HH:mm:ss\");\n * hison.setCharByteLess2047(3);\n * ```\n *\n * ---\n * ### **2. Security & Access Control (`hison.shield`)**\n * - **Enforce object immutability** (`setIsFreeze(true)`).\n * - **Restrict access to specific URLs/IPs** (`setShieldURL()`, `setExposeIpList()`).\n * - **Prevent developer tool access** (`setIsPossibleOpenDevTool(false)`).\n *\n * Example:\n * ```typescript\n * hison.setIsFreeze(true);\n * hison.setShieldURL(\"https://secure.example.com\");\n * hison.setExposeIpList([\"192.168.1.1\", \"10.0.0.2\"]);\n * ```\n *\n * ---\n * ### **3. Utility Functions (`hison.utils`)**\n * - **String Processing** (`isAlpha()`, `getLpad()`).\n * - **Number Formatting** (`getRound()`, `getNumberFormat()`).\n * - **Date Handling** (`getDateWithFormat()`).\n *\n * Example:\n * ```typescript\n * hison.utils.isAlpha(\"HelloWorld\"); // true\n * hison.utils.getNumberFormat(1234.5678, \"#,###.00\"); // \"1,234.57\"\n * ```\n *\n * ---\n * ### **4. Structured Data Handling (`hison.data`)**\n * The `data` module provides structured data storage and manipulation tools:\n *\n * - **`DataWrapper`**: Key-value storage for flexible data management.\n * - **`DataModel`**: Table-based structure for handling tabular data.\n *\n * Example:\n * ```typescript\n * const wrapper = new hison.data.DataWrapper({ username: \"Alice\", age: 25 });\n * console.log(wrapper.getString(\"username\")); // \"Alice\"\n * \n * const model = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n * console.log(model.getValue(0, \"name\")); // \"Alice\"\n * ```\n *\n * ---\n * ### **5. API Communication (`hison.link`)**\n * - **Simplified HTTP Requests** using promise-based networking.\n * - **Built-in caching** to optimize API performance.\n * - **WebSocket support** for real-time data updates.\n *\n * Example:\n * ```typescript\n * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n * apiPost.call(new hison.data.DataWrapper({ username: \"Alice\" })).then(response => {\n *     console.log(response.data);\n * });\n * ```\n *\n * ---\n * ## **Encapsulation Benefits**\n * - **Prevents direct access to internal states**.\n * - **Ensures safe API exposure** while protecting core logic.\n * - **Maintains clean separation between implementation and interface**.\n *\n * ---\n * ## **Summary**\n * The `createHison()` function returns an instance of `Hison`, a **comprehensive framework** for managing:\n * - Configuration settings\n * - Security controls\n * - Utility functions\n * - Structured data storage\n * - API communication\n *\n * Through **closure-based encapsulation**, `Hison` maintains **high security, modularity, and efficiency**.\n *\n * ---\n * @returns {Hison} An encapsulated `Hison` object with restricted direct access to core logic.\n */\nfunction createHison(): Hison {\n    class CustomOption {\n        utils = {\n            /**\n             * The default format for displaying dates.\n             *\n             * This format is used throughout the `hisondev` solution for parsing \n             * and formatting date values.\n             *\n             * - Default value: `'yyyy-MM-dd'`\n             * - Example output: `'2025-02-04'` (for February 4, 2025)\n             * - Can be modified using `setDateFormat(format: string)`.\n             */\n            dateFormat : 'yyyy-MM-dd',\n            /**\n             * The default format for displaying time.\n             *\n             * This format is used throughout the `hisondev` solution for parsing \n             * and formatting time values.\n             *\n             * - Default value: `'hh:mm:ss'`\n             * - Example output: `'14:30:15'` (for 2:30:15 PM)\n             * - Can be modified using `setTimeFormat(format: string)`.\n             */\n            timeFormat : 'hh:mm:ss',\n            /**\n             * The default format for displaying date and time.\n             *\n             * This format is used throughout the `hisondev` solution for parsing \n             * and formatting datetime values.\n             *\n             * - Default value: `'yyyy-MM-dd hh:mm:ss'`\n             * - Example output: `'2025-02-04 14:30:15'` (for February 4, 2025, 2:30:15 PM)\n             * - Can be modified using `setDatetimeFormat(format: string)`.\n             */\n            datetimeFormat : 'yyyy-MM-dd hh:mm:ss',\n            /**\n             * The default format for displaying the year.\n             *\n             * This format is used to represent year values in date-related operations.\n             *\n             * - Default value: `'yyyy'`\n             * - Example output: `'2025'` (for the year 2025)\n             * - Can be modified using `setYearFormat(format: string)`.\n             */\n            yearFormat : 'yyyy',\n            /**\n             * The default format for displaying the month.\n             *\n             * This format is used to represent month values in date-related operations.\n             *\n             * - Default value: `'M'`\n             * - Example output: `'2'` (for February)\n             * - Can be modified using `setMonthFormat(format: string)`.\n             */\n            monthFormat : 'M',\n            /**\n             * The default format for displaying the full month name.\n             *\n             * This format is used to represent the full name of a month in date-related operations.\n             *\n             * - Default value: `'MMMM'`\n             * - Example output: `'February'` (for the month of February)\n             * - Can be modified using `setMonthNameFormat(format: string)`.\n             */\n            monthNameFormat : 'MMMM',\n            /**\n             * The default format for displaying year and month.\n             *\n             * This format is used to represent a combination of year and month in date-related operations.\n             *\n             * - Default value: `'yyyy-MM'`\n             * - Example output: `'2025-02'` (for February 2025)\n             * - Can be modified using `setYearMonthFormat(format: string)`.\n             */\n            yearMonthFormat : 'yyyy-MM',\n            /**\n             * The default format for displaying the day of the month.\n             *\n             * This format is used to represent the day component in date-related operations.\n             *\n             * - Default value: `'d'`\n             * - Example output: `'4'` (for the 4th day of the month)\n             * - Can be modified using `setDayFormat(format: string)`.\n             */\n            dayFormat : 'd',\n            /**\n             * The default format for displaying the day of the week.\n             *\n             * This format is used to represent the day of the week in date-related operations.\n             *\n             * - Default value: `'d'`\n             * - Example output: `'3'` (where 3 could represent Wednesday depending on locale settings)\n             * - Can be modified using `setDayOfWeekFormat(format: string)`.\n             */\n            dayOfWeekFormat : 'd',\n            /**\n             * The default format for displaying the hour.\n             *\n             * This format is used to represent the hour component in time-related operations.\n             *\n             * - Default value: `'h'`\n             * - Example output: `'2'\n             * - Can be modified using `setHourFormat(format: string)`.\n             */\n            hourFormat : 'h',\n            /**\n             * The default format for displaying the hour and minute.\n             *\n             * This format is used to represent the time in hours and minutes.\n             *\n             * - Default value: `'hh:mm'`\n             * - Example output: `'14:30'` (for 2:30 PM in 24-hour format)\n             * - Can be modified using `setHourMinuteFormat(format: string)`.\n             */\n            hourMinuteFormat : 'hh:mm',\n            /**\n             * The default format for displaying the minute.\n             *\n             * This format is used to represent the minute component in time-related operations.\n             *\n             * - Default value: `'m'`\n             * - Example output: `'5'` (for the 5th minute of the hour)\n             * - Can be modified using `setMinuteFormat(format: string)`.\n             */\n            minuteFormat : 'm',\n            /**\n             * The default format for displaying the second.\n             *\n             * This format is used to represent the second component in time-related operations.\n             *\n             * - Default value: `'s'`\n             * - Example output: `'45'` (for the 45th second of the minute)\n             * - Can be modified using `setSecondFormat(format: string)`.\n             */\n            secondFormat : 's',\n            /**\n             * The default format for displaying numbers.\n             *\n             * This format is used to represent numeric values with grouping separators and decimal precision.\n             *\n             * - Default value: `\"#,##0.##\"`\n             * - Example output: `\"1,234.56\"` (for the number `1234.56`)\n             * - Can be modified using `setNumberFormat(format: string)`.\n             */\n            numberFormat : '#,##0.##',\n            /**\n             * The byte size used for characters with a char code less than or equal to `0x7FF`.\n             *\n             * This value defines the number of bytes required to encode characters in this range.\n             *\n             * - Default value: `2`\n             * - Represents characters with `charCode <= 0x7FF`\n             */\n            LESSOREQ_0X7FF_BYTE : 2,\n            /**\n             * The byte size used for characters with a char code less than or equal to `0xFFFF`.\n             *\n             * This value defines the number of bytes required to encode characters in this range.\n             *\n             * - Default value: `3`\n             * - Represents characters with `charCode <= 0xFFFF`\n             */\n            LESSOREQ_0XFFFF_BYTE : 3,\n            /**\n             * The byte size used for characters with a char code greater than `0xFFFF`.\n             *\n             * This value defines the number of bytes required to encode characters in this range.\n             *\n             * - Default value: `4`\n             * - Represents characters with `charCode > 0xFFFF`\n             */\n            GREATER_0XFFFF_BYTE : 4,\n        };\n        shield = {\n            /**\n             * The URL used to enforce access restrictions.\n             *\n             * If this value is set, the system verifies whether the current location matches \n             * the specified URL. If not, access may be blocked.\n             *\n             * - Default value: `\"\"` (empty string, meaning no restriction)\n             * - Used in `shield.excute(hison: Hison)` to validate the URL.\n             */\n            shieldURL : '',\n            /**\n             * A list of IP addresses that are allowed to bypass security restrictions.\n             *\n             * When the shield mechanism is activated, only these IPs are granted access.\n             *\n             * - Default value: `[\"0:0:0:0:0:0:0:1\"]` (allows localhost)\n             * - Used in `shield.excute(hison: Hison)` to verify access permissions.\n             */\n            exposeIpList : ['0:0:0:0:0:0:0:1'],\n            /**\n             * Determines whether the `Hison` instance should be frozen to prevent modifications.\n             *\n             * If `true`, the `Hison` object and its properties are deeply frozen using `Object.freeze()`, \n             * ensuring that no further changes can be made.\n             *\n             * - Default value: `true`\n             * - Used in `shield.excute(hison: Hison)`, where `deepFreeze(hison)` is applied.\n             */\n            isFreeze : true,\n            /**\n             * Determines whether the browser's back navigation is allowed.\n             *\n             * If `false`, a mechanism is implemented to prevent the user from navigating back.\n             *\n             * - Default value: `false`\n             * - Used in `shield.excute(hison: Hison)`, where `history.pushState()` is applied \n             *   to disable the back button.\n             */\n            isPossibleGoBack : false,\n            /**\n             * Determines whether developer tools can be opened.\n             *\n             * If `false`, an event listener is added to detect developer mode access (F12 key, \n             * browser dev tools, resizing, etc.), and alerts the user if an attempt is detected.\n             *\n             * - Default value: `false`\n             * - Used in `shield.excute(hison: Hison)`, where `shieldFuncCreateBlockDevMode()` is triggered.\n             */\n            isPossibleOpenDevTool : false,\n        };\n        data = {\n            /**\n             * A function that allows customization of how specific objects are inserted into a `DataModel`.\n             *\n             * In `hisondev`, all values inserted into a `DataModel` are **copied** to maintain data integrity.\n             * However, certain JavaScript objects, such as `Date`, require a more flexible way of handling \n             * their copying process. Instead of manually defining conversion logic for every object type, \n             * `convertValue` provides a way for developers to customize how specific objects are transformed\n             * before being inserted into a `DataModel`.\n             *\n             * - By default, this function **returns the input value as is**.\n             * - Developers can override this function to implement custom conversion logic.\n             * - Used in `DataModel._deepCopy(object)`, where it is applied to non-plain objects.\n             *\n             * ## Usage in `DataModel`\n             * When copying an object, if it is not a plain `Object` or `Array`, `convertValue` is called:\n             * ```typescript\n             * if (object.constructor !== Object && object.constructor !== Array) {\n             *     const convertValue = customOption.data.convertValue(object);\n             *     return convertValue !== undefined ? convertValue : object;\n             * }\n             * ```\n             *\n             * ## Example: Customizing `convertValue` to Handle `Date` Objects\n             * ```typescript\n             * hison.setConvertValue((value: any) => {\n             *     return value instanceof Date ? value.getTime() : value;\n             * });\n             * ```\n             *\n             * - The above example ensures that when a `Date` object is inserted into `DataModel`, \n             *   it is converted into a timestamp (`number`) instead of being copied as a reference.\n             *\n             * @param value The value to be processed before being inserted into `DataModel`.\n             * @returns The customized or original value.\n             */\n            convertValue(value: any): any {return value;},\n        };\n        link = {\n            /**\n             * The default protocol used for API communication.\n             *\n             * - Default value: `'http://'`\n             * - Used in `ApiLink` to construct request URLs.\n             */\n            protocol : 'http://',\n            /**\n             * The default domain for API requests.\n             *\n             * - Default value: `'localhost:8080'`\n             * - Used in `ApiLink` when constructing full request URLs.\n             */\n            domain : 'localhost:8080',\n            /**\n             * The default controller path for API requests.\n             *\n             * This value is appended to the `protocol` and `domain` when making API calls.\n             *\n             * - Default value: `'/hison-api-link'`\n             * - Used in `ApiLink` when constructing API request URLs.\n             */\n            controllerPath : '/hison-api-link',\n            /**\n             * The timeout duration (in milliseconds) for API requests.\n             *\n             * If the request does not complete within this time, it will be aborted.\n             *\n             * - Default value: `10000` (10 seconds)\n             * - Used in `ApiLink._getFetch()` to set request timeouts.\n             */\n            timeout : 10000,\n            /**\n             * The default protocol used for WebSocket connections.\n             *\n             * - Default value: `'ws://'`\n             * - Used in `ApiLink` when initializing WebSocket communication.\n             */\n            webSocketProtocol : 'ws://',\n            /**\n             * The default WebSocket endpoint for caching-related communication.\n             *\n             * - Default value: `'hison-websocket-endpoint'`\n             * - Used in `ApiLink` when establishing WebSocket connections.\n             */\n            webSocketEndPoint : 'hison-websocket-endpoint',\n            /**\n             * The caching limit for stored API responses.\n             *\n             * Determines the maximum number of cached API responses before old ones are removed.\n             *\n             * - Default value: `10`\n             * - Used in `ApiLink._getCachingResult()` for cache management.\n             */\n            cachingLimit : 10,\n            /**\n             * Hook function executed before making a `GET` request.\n             *\n             * This function can be used to modify request parameters or cancel the request.\n             *\n             * - If it returns `false`, the request will be canceled.\n             * - Default implementation returns `true`.\n             *\n             * @param resourcePath The API resource path being requested.\n             * @param options Additional request options.\n             * @returns `boolean | void` (Returning `false` cancels the request)\n             */\n            beforeGetRequst(resourcePath: string, options: Record<string, any>): boolean | void {return true;},\n            /**\n             * Hook function executed before making a `POST` request.\n             *\n             * This function allows modifying the request before it is sent.\n             *\n             * - If it returns `false`, the request will be canceled.\n             * - Default implementation returns `true`.\n             *\n             * @param requestDw The `DataWrapper` object containing the request data.\n             * @param options Additional request options.\n             * @returns `boolean | void` (Returning `false` cancels the request)\n             */\n            beforePostRequst(requestDw: InterfaceDataWrapper, options: Record<string, any>): boolean | void {return true;},\n            /**\n             * Hook function executed before making a `PUT` request.\n             *\n             * - If it returns `false`, the request will be canceled.\n             * - Default implementation returns `true`.\n             *\n             * @param requestDw The `DataWrapper` object containing the request data.\n             * @param options Additional request options.\n             * @returns `boolean | void` (Returning `false` cancels the request)\n             */\n            beforePutRequst(requestDw: InterfaceDataWrapper, options: Record<string, any>): boolean | void {return true;},\n            /**\n             * Hook function executed before making a `PATCH` request.\n             *\n             * - If it returns `false`, the request will be canceled.\n             * - Default implementation returns `true`.\n             *\n             * @param requestDw The `DataWrapper` object containing the request data.\n             * @param options Additional request options.\n             * @returns `boolean | void` (Returning `false` cancels the request)\n             */\n            beforePatchRequst(requestDw: InterfaceDataWrapper, options: Record<string, any>): boolean | void {return true;},\n            /**\n             * Hook function executed before making a `DELETE` request.\n             *\n             * - If it returns `false`, the request will be canceled.\n             * - Default implementation returns `true`.\n             *\n             * @param requestDw The `DataWrapper` object containing the request data.\n             * @param options Additional request options.\n             * @returns `boolean | void` (Returning `false` cancels the request)\n             */\n            beforeDeleteRequst(requestDw: InterfaceDataWrapper, options: Record<string, any>): boolean | void {return true;},\n            /**\n             * Intercepts and processes API responses before returning them to the caller.\n             *\n             * - If it returns `false`, the response is ignored.\n             * - Default implementation returns `true`.\n             *\n             * @param result The `DataWrapper` object containing the API response.\n             * @param response The raw `Response` object from the fetch request.\n             * @returns `boolean | void` (Returning `false` cancels further processing)\n             */\n            interceptApiResult(result: InterfaceDataWrapper | undefined, response: Response): boolean | void {return true;},\n            /**\n             * Intercepts and processes API errors before returning them to the caller.\n             *\n             * - If it returns `false`, the error is ignored.\n             * - Default implementation returns `true`.\n             *\n             * @param error The encountered error.\n             * @returns `boolean | void` (Returning `false` cancels further error handling)\n             */\n            interceptApiError(error: any): boolean | void {return true;},\n        };\n    }\n    class LRUCache {\n        constructor(limit: number) {\n            this._limit = limit;\n            this._cache = {};\n            this._keys = [];\n        }\n        private _limit: number;\n        private _cache: Record<string, Promise<{ data: any; response: Response; }>>;\n        private _keys: string[];\n        private _removeKey = (key: string) => {\n            const index = this._keys.indexOf(key);\n            if (index > -1) {\n                this._keys.splice(index, 1);\n            }\n        }\n        hasKey = (key: string): boolean => {\n            return this._cache.hasOwnProperty(key);\n        }\n        get = (key: string): Promise<{ data: any; response: Response; }> | null => {\n            if(!this.hasKey(key)) return null;\n            const value = hison.utils.deepCopyObject(this._cache[key]);\n            this._removeKey(key);\n            this._keys.push(key);\n            return value;\n        };\n        put = (key: string , value: Promise<{ data: any; response: Response; }>) => {\n            if (this.hasKey(key)) {\n                this.remove(key);\n            } else if (this._keys.length == this._limit) {\n                const oldestKey = this._keys.shift();\n                if(oldestKey !== undefined) delete this._cache[oldestKey];\n            }\n            this._cache[key] = hison.utils.deepCopyObject(value);\n            this._keys.push(key);\n        };\n        remove = (key: string): Promise<{ data: any; response: Response; }> | null => {\n            if(!this.hasKey(key)) return null;\n            this._removeKey(key);\n            const result = hison.utils.deepCopyObject(this._cache[key])\n            delete this._cache[key];\n            return result;\n        };\n        getAll = (): Record<string, Promise<{ data: any; response: Response; }>> => {\n            const result: Record<string, Promise<{ data: any; response: Response; }>> = {}\n            Object.keys(this._cache).forEach((key) => {\n                result[key] = hison.utils.deepCopyObject(this._cache[key]);\n            });\n            return result;\n        };\n        getKeys = (): string[] => {\n            const result: string[] = [];\n            this._keys.forEach((key) => {\n                result.push(key);\n            })\n            return result;\n        };\n        clear = () => {\n            this._cache = {};\n            this._keys = [];\n        };\n    };\n    class EventEmitter {\n        private events: { [eventName: string]: Array<(...args: any[]) => void> } = {};\n    \n        on = (eventName: string, listener: (...args: any[]) => void): void => {\n            if (!this.events[eventName]) {\n                this.events[eventName] = [];\n            }\n            this.events[eventName].push(listener);\n        };\n    \n        emit = (eventName: string, ...args: any[]): void => {\n            if (this.events[eventName]) {\n                this.events[eventName].forEach(listener => listener(...args));\n            }\n        };\n    };\n    class ApiLink {\n        constructor(eventEmitter: EventEmitter, cachingModule?: InterfaceCachingModule | null) {\n            this._eventEmitter = eventEmitter;\n            if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) {\n                this._cachingModule = cachingModule;\n            }\n        };\n        private _eventEmitter: EventEmitter;\n        private _cachingModule: InterfaceCachingModule | null = null;\n        private _getRsultDataWrapper = (resultData: any): any => {\n            let data = null;\n            if(resultData && resultData.constructor === Object && resultData.DATAWRAPPER === 'TRUE'\n            ) {\n                data = new hison.data.DataWrapper();\n                for(const key of Object.keys(resultData)) {\n                    if (resultData[key].constructor === Object || resultData[key].constructor === Array) {\n                        data.putDataModel(key, new hison.data.DataModel(resultData[key]));\n                    } else {\n                        if(key !== 'DATAWRAPPER') data.put(key, resultData[key]);\n                    }\n                }\n            } else {\n                data = resultData;\n            }\n            return data;\n        };\n        private _getCachingResult = async (resourcePath: string): Promise<{ data: any; response: Response; } | null> => {\n            if(this._cachingModule && this._cachingModule.isWebSocketConnection() === 1) {\n                const result = await this._cachingModule.get(resourcePath);\n                if(result && customOption.link.interceptApiResult(result.data, result.response) !== false) {\n                    return result;\n                };\n                return null;\n            }\n            return null;\n        };\n        private _getFetch = (methodName: string, requestPath: string, options: Record<string, any>, serviceCmd: string | null, requestData: any): Promise<any>[] => {\n            if(requestData && requestData.getIsDataWrapper && requestData.getIsDataWrapper()) {\n                if (serviceCmd) requestData.putString('cmd', serviceCmd);\n                requestData = requestData.getSerialized();\n            } else if (requestData && typeof requestData === 'object'){\n                if (serviceCmd && requestData.constructor === Object) requestData.cmd = serviceCmd;\n                requestData = JSON.parse(requestData);\n            }\n            const fetchOptions: Record<string, any> = {\n                method: methodName,\n                headers: {'Content-Type': 'application/json'},\n                body: requestData\n            }\n            if (options.constructor !== Object) {\n                throw new Error('fetchOptions must be an object which contains key and value.');\n            }\n            let timeoutPromise = null;\n            Object.keys(options).forEach(key => {\n                if(key !== 'timeout') fetchOptions[key] = options[key];\n            });\n            if(options.timeout) {\n                if (typeof options.timeout !== 'number' || options.timeout <= 0 || !Number.isInteger(options.timeout)) {\n                    throw new Error('Timeout must be a positive integer.');\n                }\n                timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error('Request timed out')), options.timeout));\n            }\n            const fecthArr: Promise<any>[] = [fetch(requestPath, fetchOptions)];\n            if(timeoutPromise) fecthArr.push(timeoutPromise);\n            return fecthArr;\n        };\n        private _request = async (fecthInfo: any[], cachingKey: string) => {\n            const result = await Promise.race(fecthInfo)\n            .then((response: Response) => {\n                this._eventEmitter.emit('requestCompleted_Response', response);\n                const contentType = response.headers.get('Content-Type');\n                if (contentType && contentType.includes('application/json')) {\n                    return response.json().then(data => ({ data: data, response: response }));\n                } else if (contentType) {\n                    return response.text().then(text => ({ data: text ? text : null, response: response }));\n                } else {\n                    return { data: null, response: response };\n                }\n            })\n            .then(rtn => {\n                const resultData = rtn.data;\n                const data = this._getRsultDataWrapper(resultData);\n                this._eventEmitter.emit('requestCompleted_Data', { data: data, response: rtn.response });\n                if(this._cachingModule && this._cachingModule.isWebSocketConnection() === 1) this._cachingModule.put(cachingKey, Promise.resolve({ data: data, response: rtn.response }));\n                if(customOption.link.interceptApiResult(data, rtn.response) === false) return null;\n                return { data: data, response: rtn.response };\n            })\n            .catch(error => {\n                this._eventEmitter.emit('requestError', error);\n                if(customOption.link.interceptApiError(error) === false) return null;\n                return error;\n            });\n        \n            return result;\n        };\n        get = (resourcePath: string, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n            if(customOption.link.beforeGetRequst(resourcePath, options) === false) return Promise.resolve(null);\n            const METHOD_NAME = 'GET';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, resourcePath, options);\n            if(this._cachingModule && this._cachingModule.hasKey(resourcePath)) return this._getCachingResult(resourcePath);\n            return this._request(this._getFetch(METHOD_NAME, customOption.link.protocol + customOption.link.domain + resourcePath, options, null, null), resourcePath);\n        };\n        post = async (requestData: any, serviceCmd: string, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n            if(customOption.link.beforePostRequst(requestData, options) === false) return Promise.resolve(null);\n            const METHOD_NAME = 'POST';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, customOption.link.protocol + customOption.link.domain + customOption.link.controllerPath, options, serviceCmd, requestData), serviceCmd);\n        };\n        put = async (requestData: any, serviceCmd: string, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n            if(customOption.link.beforePutRequst(requestData, options) === false) return Promise.resolve(null);\n            const METHOD_NAME = 'PUT';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, customOption.link.protocol + customOption.link.domain + customOption.link.controllerPath, options, serviceCmd, requestData), serviceCmd);\n        };\n        patch = async (requestData: any, serviceCmd: string, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n            if(customOption.link.beforePatchRequst(requestData, options) === false) return Promise.resolve(null);\n            const METHOD_NAME = 'PATCH';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, customOption.link.protocol + customOption.link.domain + customOption.link.controllerPath, options, serviceCmd, requestData), serviceCmd);\n        };\n        delete = async (requestData: any, serviceCmd: string, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n            if(customOption.link.beforeDeleteRequst(requestData, options) === false) return Promise.resolve(null);\n            const METHOD_NAME = 'DELETE';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, customOption.link.protocol + customOption.link.domain + customOption.link.controllerPath, options, serviceCmd, requestData), serviceCmd);\n        };\n        head = async (resourcePath: string, options: Record<string, any> = {}): Promise<Record<string, string>> => {\n            const url = customOption.link.protocol + customOption.link.domain + resourcePath;\n            return fetch(url, { method: 'HEAD', ...options })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HEAD request failed with status: ${response.status}`);\n                    }\n                    const headers: Record<string, any> = {};\n                    response.headers.forEach((value, key) => {\n                        headers[key] = value;\n                    });\n                    return headers;\n                })\n                .catch(error => {\n                    return Promise.reject(error);\n                });\n        };\n        options = async (resourcePath: string, options: Record<string, any> = {}): Promise<string[]> => {\n            const url = customOption.link.protocol + customOption.link.domain + resourcePath;\n            return fetch(url, { method: 'OPTIONS', ...options })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`OPTIONS request failed with status: ${response.status}`);\n                    }\n                    const allowHeader = response.headers.get('Allow');\n                    if (allowHeader) {\n                        return allowHeader.split(',').map(method => method.trim());\n                    }\n                    return []\n                })\n                .catch(error => {\n                    return Promise.reject(error);\n                });\n        };\n        getURL = (url: string, options: Record<string, any> ={}): Promise<{ data: any; response: Response; } | null> => {\n            const METHOD_NAME = 'GET';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, url, options);\n            if(this._cachingModule && this._cachingModule.hasKey(url)) return this._getCachingResult(url);\n            return this._request(this._getFetch(METHOD_NAME, url, options, null, null), url);\n        };\n        postURL = async (url: string, requestData: any, serviceCmd: string, options: Record<string, any> ={}): Promise<{ data: any; response: Response; } | null> => {\n            const METHOD_NAME = 'POST';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(url + serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, url, options, serviceCmd, requestData), url + serviceCmd);\n        };\n        putURL = async (url: string, requestData: any, serviceCmd: string, options: Record<string, any> ={}): Promise<{ data: any; response: Response; } | null> => {\n            const METHOD_NAME = 'PUT';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(url + serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, url, options, serviceCmd, requestData), url + serviceCmd);\n        };\n        patchURL = async (url: string, requestData: any, serviceCmd: string, options: Record<string, any> ={}): Promise<{ data: any; response: Response; } | null> => {\n            const METHOD_NAME = 'PATCH';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(url + serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, url, options, serviceCmd, requestData), url + serviceCmd);\n        };\n        deleteURL = async (url: string, requestData: any, serviceCmd: string, options: Record<string, any> ={}): Promise<{ data: any; response: Response; } | null> => {\n            const METHOD_NAME = 'DELETE';\n            this._eventEmitter.emit('requestStarted_' + METHOD_NAME, serviceCmd, options, requestData);\n            if(this._cachingModule && this._cachingModule.hasKey(serviceCmd)) return this._getCachingResult(url + serviceCmd);\n            return this._request(this._getFetch(METHOD_NAME, url, options, serviceCmd, requestData), url + serviceCmd);\n        };\n        headURL = async (url: string, options: Record<string, any> = {}): Promise<Record<string, string>> => {\n            return fetch(url, { method: 'HEAD', ...options })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HEAD request failed with status: ${response.status}`);\n                    }\n                    const headers: Record<string, any> = {};\n                    response.headers.forEach((value, key) => {\n                        headers[key] = value;\n                    });\n                    return headers;\n                })\n                .catch(error => {\n                    return Promise.reject(error);\n                });\n        };\n        optionsURL = async (url: string, options: Record<string, any> = {}): Promise<string[]> => {\n            return fetch(url, { method: 'OPTIONS', ...options })\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`OPTIONS request failed with status: ${response.status}`);\n                    }\n                    const allowHeader = response.headers.get('Allow');\n                    if (allowHeader) {\n                        return allowHeader.split(',').map(method => method.trim());\n                    }\n                    return []\n                })\n                .catch(error => {\n                    return Promise.reject(error);\n                });\n        };\n        onEventEmit = (methodName: string, eventName: string, eventFunc: (...args: any[]) => void) => {\n            if (!eventName) {\n                throw new Error('Event name is required.');\n            }\n            if (!eventFunc) {\n                throw new Error('Event function is required.');\n            }\n            if (typeof eventName !== 'string') {\n                throw new Error('Event name must be a string.');\n            }\n            const requestEventName = 'requestStarted_' + methodName;\n            if ([requestEventName,\n                 'requestCompleted_Response',\n                 'requestCompleted_Data',\n                 'requestError'].indexOf(eventName) === -1) {\n                throw new Error('Invalid event name.'\n                + '\\nInserted event name: ' + eventName\n                + '\\nValid event names are:'\n                + `\\n${requestEventName}`\n                + '\\nrequestCompleted_Response'\n                + '\\nrequestCompleted_Data'\n                + '\\nrequestError'\n                );\n            }\n            if (typeof eventFunc !== 'function') {\n                throw new Error('Event function must be a function.');\n            }\n            this._eventEmitter.on(eventName, eventFunc);\n        };\n    };\n    class HisonCore{\n        utils = {\n            /**\n             * Checks if the given string contains only alphabetic characters (A-Z, a-z).\n             *\n             * - Returns `true` if the string consists solely of alphabetic characters.\n             * - Returns `false` if the string contains numbers, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only alphabetic characters, otherwise `false`.\n             *\n             * @example\n             * isAlpha(\"Hello\"); // true\n             * isAlpha(\"Hello123\"); // false\n             * isAlpha(\"!@#\"); // false\n             */\n            isAlpha(str: string): boolean {\n                return /^[A-Za-z]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only alphabetic characters (A-Z, a-z) and numbers (0-9).\n             *\n             * - Returns `true` if the string consists solely of alphabetic characters and/or numbers.\n             * - Returns `false` if the string contains symbols or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only alphabetic characters and numbers, otherwise `false`.\n             *\n             * @example\n             * isAlphaNumber(\"Hello123\"); // true\n             * isAlphaNumber(\"Hello!\"); // false\n             * isAlphaNumber(\"123\"); // true\n             */\n            isAlphaNumber(str: string): boolean {\n                return /^[A-Za-z0-9]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only numeric characters (0-9).\n             *\n             * - Returns `true` if the string consists solely of numbers.\n             * - Returns `false` if the string contains letters, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only numeric characters, otherwise `false`.\n             *\n             * @example\n             * isNumber(\"123456\"); // true\n             * isNumber(\"123a\"); // false\n             * isNumber(\"!@#\"); // false\n             */\n            isNumber(str: string): boolean {\n                return /^[0-9]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only numeric characters (0-9) and symbols.\n             *\n             * - Returns `true` if the string consists solely of numbers and/or symbols.\n             * - Returns `false` if the string contains alphabetic characters or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only numeric characters and symbols, otherwise `false`.\n             *\n             * @example\n             * isNumberSymbols(\"123!@#\"); // true\n             * isNumberSymbols(\"123ABC\"); // false\n             * isNumberSymbols(\"!@#$%^\"); // true\n             */\n            isNumberSymbols(str: string): boolean {\n                return /^[0-9!@#$%^&*()_+\\-=\\[\\]{};':'\\\\|,.<>\\/?~]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains any symbols.\n             *\n             * - Returns `true` if the string contains at least one symbol.\n             * - Returns `false` if the string has only alphanumeric characters or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains symbols, otherwise `false`.\n             *\n             * @example\n             * isIncludeSymbols(\"Hello!\"); // true\n             * isIncludeSymbols(\"123\"); // false\n             * isIncludeSymbols(\"password@123\"); // true\n             */\n            isIncludeSymbols(str: string): boolean {\n                return /[!@#$%^&*()_+\\-=\\[\\]{};':'\\\\|,.<>\\/?~]/.test(str);\n            },\n            /**\n             * Checks if the given string contains only lowercase alphabetic characters (a-z).\n             *\n             * - Returns `true` if the string consists solely of lowercase letters.\n             * - Returns `false` if the string contains uppercase letters, numbers, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only lowercase alphabetic characters, otherwise `false`.\n             *\n             * @example\n             * isLowerAlpha(\"hello\"); // true\n             * isLowerAlpha(\"Hello\"); // false\n             * isLowerAlpha(\"hello123\"); // false\n             */\n            isLowerAlpha(str: string): boolean {\n                return /^[a-z]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only lowercase alphabetic characters (a-z) and numbers (0-9).\n             *\n             * - Returns `true` if the string consists solely of lowercase letters and/or numbers.\n             * - Returns `false` if the string contains uppercase letters, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only lowercase letters and numbers, otherwise `false`.\n             *\n             * @example\n             * isLowerAlphaAndNumber(\"hello123\"); // true\n             * isLowerAlphaAndNumber(\"Hello123\"); // false\n             * isLowerAlphaAndNumber(\"hello!\"); // false\n             */\n            isLowerAlphaAndNumber(str: string): boolean {\n                return /^[a-z0-9]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only uppercase alphabetic characters (A-Z).\n             *\n             * - Returns `true` if the string consists solely of uppercase letters.\n             * - Returns `false` if the string contains lowercase letters, numbers, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only uppercase alphabetic characters, otherwise `false`.\n             *\n             * @example\n             * isUpperAlpha(\"HELLO\"); // true\n             * isUpperAlpha(\"Hello\"); // false\n             * isUpperAlpha(\"HELLO123\"); // false\n             */\n            isUpperAlpha(str: string): boolean {\n                return /^[A-Z]+$/.test(str);\n            },\n            /**\n             * Checks if the given string contains only uppercase alphabetic characters (A-Z) and numbers (0-9).\n             *\n             * - Returns `true` if the string consists solely of uppercase letters and/or numbers.\n             * - Returns `false` if the string contains lowercase letters, symbols, or is empty.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string contains only uppercase letters and numbers, otherwise `false`.\n             *\n             * @example\n             * isUpperAlphaNumber(\"HELLO123\"); // true\n             * isUpperAlphaNumber(\"Hello123\"); // false\n             * isUpperAlphaNumber(\"HELLO!\"); // false\n             */\n            isUpperAlphaNumber(str: string): boolean {\n                return /^[A-Z0-9]+$/.test(str);\n            },\n            /**\n             * Checks if the given value is a numeric value.\n             *\n             * - Returns `true` if the value is a finite number.\n             * - Returns `false` if the value is `NaN`, `Infinity`, or not a number.\n             *\n             * @param num The value to be checked.\n             * @returns `true` if the value is numeric, otherwise `false`.\n             *\n             * @example\n             * isNumeric(123); // true\n             * isNumeric(\"123\"); // true\n             * isNumeric(\"abc\"); // false\n             * isNumeric(Infinity); // false\n             * isNumeric(NaN); // false\n             */\n            isNumeric(num: any): boolean {\n                return !isNaN(num) && isFinite(num);\n            },\n            /**\n             * Checks if the given value is an integer.\n             *\n             * - Returns `true` if the value is a finite integer.\n             * - Returns `false` if the value is a decimal, `NaN`, `Infinity`, or not a number.\n             *\n             * @param num The value to be checked.\n             * @returns `true` if the value is an integer, otherwise `false`.\n             *\n             * @example\n             * isInteger(10); // true\n             * isInteger(\"10\"); // true\n             * isInteger(10.5); // false\n             * isInteger(\"abc\"); // false\n             * isInteger(Infinity); // false\n             */\n            isInteger(num: any): boolean {\n                if (!hison.utils.isNumeric(num)) return false;\n                num = Number(num);\n                return Number.isInteger(num);\n            },\n            /**\n             * Checks if the given value is a positive integer.\n             *\n             * - Returns `true` if the value is a finite integer greater than zero.\n             * - Returns `false` if the value is zero, a negative number, a decimal, `NaN`, `Infinity`, or not a number.\n             *\n             * @param num The value to be checked.\n             * @returns `true` if the value is a positive integer, otherwise `false`.\n             *\n             * @example\n             * isPositiveInteger(10); // true\n             * isPositiveInteger(\"10\"); // true\n             * isPositiveInteger(0); // false\n             * isPositiveInteger(-5); // false\n             * isPositiveInteger(10.5); // false\n             */\n            isPositiveInteger(num: any): boolean {\n                if (!hison.utils.isNumeric(num)) return false;\n                num = Number(num);\n                return Number.isInteger(num) && num > 0;\n            },\n            /**\n             * Checks if the given value is a negative integer.\n             *\n             * - Returns `true` if the value is a finite integer less than zero.\n             * - Returns `false` if the value is zero, a positive number, a decimal, `NaN`, `Infinity`, or not a number.\n             *\n             * @param num The value to be checked.\n             * @returns `true` if the value is a negative integer, otherwise `false`.\n             *\n             * @example\n             * isNegativeInteger(-10); // true\n             * isNegativeInteger(\"-10\"); // true\n             * isNegativeInteger(0); // false\n             * isNegativeInteger(5); // false\n             * isNegativeInteger(-10.5); // false\n             */\n            isNegativeInteger(num: any): boolean {\n                if (!hison.utils.isNumeric(num)) return false;\n                num = Number(num);\n                return Number.isInteger(num) && num < 0;\n            },\n            /**\n             * Checks if the given value is an array.\n             *\n             * - Returns `true` if the value is an array.\n             * - Returns `false` if the value is `null`, `undefined`, an object, or any other data type.\n             *\n             * @param arr The value to be checked.\n             * @returns `true` if the value is an array, otherwise `false`.\n             *\n             * @example\n             * isArray([1, 2, 3]); // true\n             * isArray(\"Hello\"); // false\n             * isArray({ key: \"value\" }); // false\n             * isArray(null); // false\n             */\n            isArray(arr: any): boolean {\n                return Array.isArray(arr) && arr.constructor === Array;\n            },\n            /**\n             * Checks if the given value is a plain object.\n             *\n             * - Returns `true` if the value is a non-null object and not an array.\n             * - Returns `false` if the value is `null`, an array, or any other data type.\n             *\n             * @param obj The value to be checked.\n             * @returns `true` if the value is a plain object, otherwise `false`.\n             *\n             * @example\n             * isObject({ key: \"value\" }); // true\n             * isObject([1, 2, 3]); // false\n             * isObject(null); // false\n             * isObject(\"Hello\"); // false\n             */\n            isObject(obj: any): boolean {\n                return obj !== null && typeof obj === 'object' && !Array.isArray(obj) && obj.constructor === Object;\n            },\n            /**\n             * Checks if the given value is a valid date.\n             *\n             * - Accepts a `DateObject` or a string representation of a date.\n             * - Returns `true` if the date is valid based on its year, month, and day.\n             * - Returns `false` if the date is improperly formatted or does not exist.\n             *\n             * @param date The value to be checked (as a `DateObject` or string).\n             * @returns `true` if the value is a valid date, otherwise `false`.\n             *\n             * @example\n             * isDate(\"2024-02-29\"); // true (valid leap year date)\n             * isDate(\"2023-02-29\"); // false (February 29 does not exist in 2023)\n             * isDate({ y: 2023, M: 12, d: 31 }); // true\n             * isDate(\"invalid-date\"); // false\n             */\n            isDate(date: DateObject | string | null): boolean {\n                if(!date) return false;\n                const dateObj: DateObject = hison.utils.isObject(date) ? date as DateObject : hison.utils.getDateObject(date as string);\n        \n                let yyyy: string = hison.utils.getToString(dateObj.y);\n                let MM: string = hison.utils.getToString(dateObj.M);\n                let dd: string = hison.utils.getToString(dateObj.d);\n        \n                let result = true;\n                try {\n                    if (!hison.utils.isInteger(yyyy) || !hison.utils.isInteger(MM) || !hison.utils.isInteger(dd)) {\n                        return false;\n                    }\n        \n                    if (!yyyy) {\n                        return false;\n                    }\n                    if (!MM) {\n                        MM = '01';\n                    } else if (MM.length === 1) {\n                        MM = '0' + MM;\n                    }\n                    if (!dd) {\n                        dd = '01';\n                    } else if (dd.length === 1) {\n                        dd = '0' + dd;\n                    }\n        \n                    if (hison.utils.getToNumber(yyyy+MM+dd) < 16000101) {\n                        const date = new Date(hison.utils.getToNumber(yyyy), hison.utils.getToNumber(MM) - 1, hison.utils.getToNumber(dd));\n                        if (date.getFullYear() !== hison.utils.getToNumber(yyyy) || date.getMonth() !== hison.utils.getToNumber(MM) - 1 || date.getDate() !== hison.utils.getToNumber(dd)) {\n                            return false;\n                        }\n                        return true;\n                    }\n                    else {\n                        const dateRegex = /^(?=\\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\\x20|$))|(?:2[0-8]|1\\d|0?[1-9]))([-.\\/])(?:1[012]|0?[1-9])\\1(?:1[6-9]|[2-9]\\d)?\\d\\d(?:(?=\\x20\\d)\\x20|$))?(((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\x20[AP]M))|([01]\\d|2[0-3])(:[0-5]\\d){1,2})?$/;\n                        result = dateRegex.test(dd+'-'+MM+'-'+yyyy);\n                    }\n                    \n                } catch (err) {\n                    result = false;\n                }    \n                return result;\n            },\n            /**\n             * Checks if the given value is a valid time.\n             *\n             * - Accepts a `TimeObject` or a string representation of a time.\n             * - Returns `true` if the time consists of valid hours, minutes, and seconds.\n             * - Returns `false` if any part of the time is invalid or improperly formatted.\n             *\n             * @param time The value to be checked (as a `TimeObject` or string).\n             * @returns `true` if the value is a valid time, otherwise `false`.\n             *\n             * @example\n             * isTime(\"14:30:59\"); // true\n             * isTime({ h: 23, m: 59, s: 59 }); // true\n             * isTime(\"25:00:00\"); // false (invalid hour)\n             * isTime(\"12:60:00\"); // false (invalid minute)\n             * isTime(\"12:30:61\"); // false (invalid second)\n             */\n            isTime(time: TimeObject | string | null): boolean {\n                if(!time) return false;\n                const timeObj: TimeObject = hison.utils.isObject(time) ? time as TimeObject : hison.utils.getTimeObject(time as string);\n        \n                let hh: number | null = timeObj.h;\n                let mm: number | null = timeObj.m;\n                let ss: number | null = timeObj.s;\n        \n                if (!hison.utils.isInteger(hh) || !hison.utils.isInteger(mm) || !hison.utils.isInteger(ss)) {\n                    return false;\n                }\n                /*\n                hh = parseInt(hh, 10);\n                mm = parseInt(mm, 10);\n                ss = parseInt(ss, 10);\n                */\n        \n                function isValidTimePart(time: number | null, max: number): boolean {\n                    if(!time) return false;\n                    return !isNaN(time) && time >= 0 && time <= max;\n                }\n            \n                return isValidTimePart(hh, 23) && isValidTimePart(mm, 59) && isValidTimePart(ss, 59);\n            },\n            /**\n             * Checks if the given value is a valid datetime.\n             *\n             * - Accepts a `DateTimeObject` or a string representation of a datetime.\n             * - Returns `true` if both the date and time components are valid.\n             * - Returns `false` if either the date or time is invalid or improperly formatted.\n             *\n             * @param datetime The value to be checked (as a `DateTimeObject` or string).\n             * @returns `true` if the value is a valid datetime, otherwise `false`.\n             *\n             * @example\n             * isDatetime(\"2024-02-29 14:30:59\"); // true\n             * isDatetime({ y: 2023, M: 12, d: 31, h: 23, m: 59, s: 59 }); // true\n             * isDatetime(\"2023-02-29 12:00:00\"); // false (invalid date)\n             * isDatetime(\"2024-02-28 25:00:00\"); // false (invalid time)\n             */\n            isDatetime(datetime: DateTimeObject | string): boolean {\n                const datetimeObj: DateTimeObject | null = hison.utils.isObject(datetime) ? datetime as DateTimeObject : hison.utils.getDatetimeObject(datetime as string);\n                if (!hison.utils.isDate(datetimeObj)) return false;\n                if (!hison.utils.isTime(datetimeObj)) return false;\n                return true;\n            },\n            /**\n             * Checks if the given string is a valid email address.\n             *\n             * - Returns `true` if the string follows the standard email format.\n             * - Returns `false` if the string does not match the email pattern.\n             *\n             * @param str The string to be checked.\n             * @returns `true` if the string is a valid email address, otherwise `false`.\n             *\n             * @example\n             * isEmail(\"user@example.com\"); // true\n             * isEmail(\"user.name@domain.co\"); // true\n             * isEmail(\"user@domain\"); // false (missing top-level domain)\n             * isEmail(\"invalid-email\"); // false\n             */\n            isEmail(str: string): boolean {\n                const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]{2,}$/;\n                return emailPattern.test(str);\n            },\n            /**\n             * Checks if the given string is a valid URL.\n             *\n             * - Returns `true` if the string follows the standard URL format.\n             * - Returns `false` if the string does not match the URL pattern.\n             *\n             * @param urlStr The string to be checked.\n             * @returns `true` if the string is a valid URL, otherwise `false`.\n             *\n             * @example\n             * isURL(\"https://example.com\"); // true\n             * isURL(\"ftp://files.server.com\"); // true\n             * isURL(\"www.example.com\"); // false (missing protocol)\n             * isURL(\"invalid-url\"); // false\n             */\n            isURL(urlStr: string): boolean {\n                const urlPattern = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i;\n                return urlPattern.test(urlStr);\n            },\n            /**\n             * Checks if the given string matches the specified mask pattern.\n             *\n             * - A mask defines expected character types at each position:\n             *   - `'A'` expects an uppercase letter (A-Z).\n             *   - `'a'` expects a lowercase letter (a-z).\n             *   - `'9'` expects a numeric digit (0-9).\n             *   - Any other character in the mask must match exactly.\n             * - Returns `true` if the string fully matches the mask pattern.\n             * - Returns `false` if the string does not match the mask or has a different length.\n             *\n             * @param str The string to be validated.\n             * @param mask The mask pattern defining expected character types.\n             * @returns `true` if the string matches the mask pattern, otherwise `false`.\n             *\n             * @example\n             * isValidMask(\"ABC123\", \"AAA999\"); // true\n             * isValidMask(\"abc123\", \"AAA999\"); // false (lowercase letters don't match uppercase mask)\n             * isValidMask(\"abc-123\", \"aaa-999\"); // true\n             * isValidMask(\"abcd123\", \"aaa-999\"); // false (length mismatch)\n             */\n            isValidMask(str: string, mask: string): boolean {\n                if (str.length !== mask.length) {\n                    return false;\n                }\n            \n                for (let i = 0; i < str.length; i++) {\n                    const char = str.charAt(i);\n                    const maskChar = mask.charAt(i);\n            \n                    switch (maskChar) {\n                        case 'A':\n                            if (char < 'A' || char > 'Z') return false;\n                            break;\n                        case 'a':\n                            if (char < 'a' || char > 'z') return false;\n                            break;\n                        case '9':\n                            if (isNaN(parseInt(char))) return false;\n                            break;\n                        default:\n                            if (char !== maskChar) return false;\n                    }\n                }\n                return true;\n            },\n            /**\n             * Extracts and returns the year, month, and day from a given date.\n             *\n             * - If the input is a `Date` object, it extracts the year, month, and day.\n             * - If the input is a string, it attempts to parse it in formats:\n             *   - `\"YYYY-MM-DD\"`\n             *   - `\"YYYY/MM/DD\"`\n             *   - `\"YYYYMMDD\"`\n             * - If parsing fails, it returns an object with `null` values.\n             *\n             * @param date A `Date` object or a date string in a supported format.\n             * @returns An object containing the year (`y`), month (`M`), and day (`d`).\n             *\n             * @example\n             * getDateObject(\"2024-02-05\"); // { y: 2024, M: 2, d: 5 }\n             * getDateObject(\"20240205\"); // { y: 2024, M: 2, d: 5 }\n             * getDateObject(new Date(2024, 1, 5)); // { y: 2024, M: 2, d: 5 }\n             * getDateObject(\"invalid\"); // { y: null, M: null, d: null }\n             */\n            getDateObject(date: Date | string): DateObject {\n                const result: {\n                   y: number | null;\n                   M: number | null;\n                   d: number | null; \n                } = {y: null, M: null, d: null};\n                if (typeof date === 'string') {\n                    let year: number | null = null, month: number | null = null, day: number | null = null;\n                    date = hison.utils.getToString(date);\n                    date = date.split(' ')[0];\n                    if (date.includes('-')) {\n                        [year, month, day] = date.split('-').map(num => parseInt(num, 10));\n                    } else if (date.includes('/')) {\n                        [year, month, day] = date.split('/').map(num => parseInt(num, 10));\n                    } else if (date.length === 8) {\n                        year = parseInt(date.substring(0, 4), 10);\n                        month = parseInt(date.substring(4, 6), 10);\n                        day = parseInt(date.substring(6, 8), 10);\n                    } else {\n                        return result;\n                    }\n                    result.y = year;\n                    result.M = month;\n                    result.d = day;\n                } else if (date instanceof Date) {\n                    result.y = date.getFullYear();\n                    result.M = date.getMonth() + 1;\n                    result.d = date.getDate();\n                }\n                return result\n            },\n            /**\n             * Extracts and returns the hours, minutes, and seconds from a given time.\n             *\n             * - If the input is a `Date` object, it extracts the hour, minute, and second.\n             * - If the input is a string, it attempts to parse it in formats:\n             *   - `\"HH:MM:SS\"`\n             *   - `\"HHMMSS\"`\n             * - If the input is a datetime string (`\"YYYY-MM-DD HH:MM:SS\"`), it extracts only the time part.\n             * - If parsing fails, it returns an object with `null` values.\n             *\n             * @param time A `Date` object or a time string in a supported format.\n             * @returns An object containing the hours (`h`), minutes (`m`), and seconds (`s`).\n             *\n             * @example\n             * getTimeObject(\"14:30:45\"); // { h: 14, m: 30, s: 45 }\n             * getTimeObject(\"143045\"); // { h: 14, m: 30, s: 45 }\n             * getTimeObject(\"2024-02-05 14:30:45\"); // { h: 14, m: 30, s: 45 }\n             * getTimeObject(new Date(2024, 1, 5, 14, 30, 45)); // { h: 14, m: 30, s: 45 }\n             * getTimeObject(\"invalid\"); // { h: null, m: null, s: null }\n             */\n            getTimeObject(time: Date | string): TimeObject {\n                const result: {\n                    h: number | null;\n                    m: number | null;\n                    s: number | null;\n                } = {h: null, m: null, s: null};\n                if (typeof time === 'string') {\n                    let hours: number | null = null, minutes: number | null = null, seconds: number | null = null;\n                    time = hison.utils.getToString(time);\n                    const dateArr = time.split(' ');\n                    time = dateArr.length > 1 ? dateArr[1] : time;\n            \n                    if (time.includes(':')) {\n                        [hours, minutes, seconds] = time.split(':').map(num => parseInt(num, 10));\n                    } else if (time.length === 6) {\n                        hours = parseInt(time.substring(0, 2), 10);\n                        minutes = parseInt(time.substring(2, 4), 10);\n                        seconds = parseInt(time.substring(4, 6), 10);\n                    } else {\n                        return { h: null, m: null, s: null };\n                    }\n                    result.h = hours;\n                    result.m = minutes;\n                    result.s = seconds;\n                } else if (time instanceof Date) {\n                    result.h = time.getHours();\n                    result.m = time.getMinutes();\n                    result.s = time.getSeconds();\n                }\n                return result;\n            },\n            /**\n             * Extracts and returns the year, month, day, hours, minutes, and seconds from a given datetime.\n             *\n             * - If the input is a `Date` object, it extracts all date and time components.\n             * - If the input is a string, it attempts to parse it in formats:\n             *   - `\"YYYY-MM-DD HH:MM:SS\"`\n             *   - `\"YYYY/MM/DD HH:MM:SS\"`\n             *   - `\"YYYYMMDDHHMMSS\"`\n             * - If the input is a date-only string (`\"YYYY-MM-DD\"`), the time defaults to `00:00:00`.\n             * - If parsing fails, it returns `null`.\n             *\n             * @param datetime A `Date` object or a datetime string in a supported format.\n             * @returns An object containing the year (`y`), month (`M`), day (`d`), hours (`h`), minutes (`m`), and seconds (`s`), or `null` if parsing fails.\n             *\n             * @example\n             * getDatetimeObject(\"2024-02-05 14:30:45\"); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\n             * getDatetimeObject(\"20240205143045\"); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\n             * getDatetimeObject(\"2024-02-05\"); // { y: 2024, M: 2, d: 5, h: 0, m: 0, s: 0 }\n             * getDatetimeObject(new Date(2024, 1, 5, 14, 30, 45)); // { y: 2024, M: 2, d: 5, h: 14, m: 30, s: 45 }\n             * getDatetimeObject(\"invalid\"); // null\n             */\n            getDatetimeObject(datetime: Date | string): DateTimeObject | null {\n                if (typeof datetime === 'string') {\n                    datetime = hison.utils.getToString(datetime);\n                    const datetimeArr = datetime.split(' ');\n                    const dateObj = datetimeArr[0];\n                    const timeObj = datetimeArr.length > 1 ? datetimeArr[1] as string : '';\n                    return Object.assign({}, hison.utils.getDateObject(dateObj), hison.utils.getTimeObject(timeObj));\n                }\n                if (datetime instanceof Date) {\n                    return {\n                        y : datetime.getFullYear(),\n                        M : datetime.getMonth() + 1,\n                        d : datetime.getDate(),\n                        h : datetime.getHours(),\n                        m : datetime.getMinutes(),\n                        s : datetime.getSeconds(),\n                    }\n                }\n                return null;\n            },\n\n            /**\n             * Adds a specified amount of time to a given date or datetime.\n             *\n             * - Accepts a `DateTimeObject`, `DateObject`, or a date string.\n             * - Supports adding years (`'y'`), months (`'M'`), days (`'d'`), hours (`'h'`), minutes (`'m'`), and seconds (`'s'`).\n             * - If `addType` is omitted or invalid, it defaults to adding days.\n             * - If `format` is provided, returns a formatted string; otherwise, returns a `DateTimeObject`.\n             *\n             * @param datetime The original datetime as an object or string.\n             * @param addValue The amount to add (positive or negative).\n             * @param addType The unit of time to add (`'y'`, `'M'`, `'d'`, `'h'`, `'m'`, `'s'`).\n             * @param format Optional format string for the output. default : 'yyyy-MM-dd' or 'yyyy-MM-dd hh:mm:ss'\n             * @returns The updated datetime as an object or formatted string.\n             *\n             * @example\n             * addDate(\"2024-02-05\", 1, \"d\"); // { y: 2024, M: 2, d: 6 }\n             * addDate(\"2024-02-05\", -1, \"M\"); // { y: 2024, M: 1, d: 5 }\n             * addDate(\"2024-02-05 14:30:00\", 2, \"h\"); // { y: 2024, M: 2, d: 5, h: 16, m: 30, s: 0 }\n             * addDate(\"2024-02-05\", 1, \"d\", \"yyyy-MM-dd\"); // \"2024-02-06\"\n             */\n            addDate(datetime: DateTimeObject | DateObject | string, addValue: string | number = 0, addType: string = '', format: string = ''): DateTimeObject | string {\n                const datetimeObj: DateTimeObject = hison.utils.isObject(datetime) ? hison.utils.deepCopyObject(datetime) : hison.utils.getDatetimeObject(datetime as string);\n                if (!format) {\n                    if (datetimeObj.h === undefined || datetimeObj.h === null) {\n                        format = customOption.utils.dateFormat\n                    }\n                    else {\n                        format = customOption.utils.datetimeFormat;\n                    }\n                }\n                \n                if (!hison.utils.isInteger(addValue)) throw new Error(`ER0001 Please enter a valid value.\\n=>${JSON.stringify(addValue)}`);\n                addValue = hison.utils.getToNumber(addValue);\n\n                datetimeObj.M = datetimeObj.M === null || datetimeObj.M === undefined ? 1 : datetimeObj.M;\n                datetimeObj.d = datetimeObj.d === null || datetimeObj.d === undefined ? 1 : datetimeObj.d;\n                datetimeObj.h = datetimeObj.h === null || datetimeObj.h === undefined ? 0 : datetimeObj.h;\n                datetimeObj.m = datetimeObj.m === null || datetimeObj.m === undefined ? 0 : datetimeObj.m;\n                datetimeObj.s = datetimeObj.s === null || datetimeObj.s === undefined ? 0 : datetimeObj.s;\n        \n                if (!hison.utils.isDate(datetimeObj)) throw new Error(`ER0002 Please enter a valid date.\\n=>${JSON.stringify(datetime)}`);\n                if (!hison.utils.isTime(datetimeObj)) throw new Error(`ER0003 Please enter a valid date.\\n=>${JSON.stringify(datetime)}`);\n                if (datetimeObj.y === null || datetimeObj.M === null || datetimeObj.d === null) {\n                    throw new Error(`ER0002 Please enter a valid date.\\n=>${JSON.stringify(datetime)}`);\n                }\n\n                const d = new Date(datetimeObj.y, datetimeObj.M - 1, datetimeObj.d, datetimeObj.h, datetimeObj.m, datetimeObj.s);\n            \n                switch (addType) {\n                    case 'y':\n                        d.setFullYear(d.getFullYear() + addValue);\n                        break;\n                    case 'M':\n                        d.setMonth(d.getMonth() + addValue);\n                        break;\n                    case 'd':\n                        d.setDate(d.getDate() + addValue);\n                        break;\n                    case 'h':\n                        d.setHours(d.getHours() + addValue);\n                        break;\n                    case 'm':\n                        d.setMinutes(d.getMinutes() + addValue);\n                        break;\n                    case 's':\n                        d.setSeconds(d.getSeconds() + addValue);\n                        break;\n                    default:\n                        d.setDate(d.getDate() + addValue);\n                }\n        \n                const rtnObj = {\n                    y: d.getFullYear(),\n                    M: (d.getMonth() + 1),\n                    d: d.getDate(),\n                    h: d.getHours(),\n                    m: d.getMinutes(),\n                    s: d.getSeconds()\n                }\n        \n                return hison.utils.isObject(datetime) ? rtnObj : hison.utils.getDateWithFormat(rtnObj, format);\n            },\n            /**\n             * Calculates the difference between two dates or datetimes.\n             *\n             * - Accepts `DateTimeObject`, `DateObject`, or a string representation of a date or datetime.\n             * - If `diffType` is specified, it returns the difference in the given unit:\n             *   - `'y'`: Years\n             *   - `'M'`: Months\n             *   - `'d'`: Days\n             *   - `'h'`: Hours\n             *   - `'m'`: Minutes\n             *   - `'s'`: Seconds\n             * - If `diffType` is omitted or invalid, it defaults to calculating the difference in days.\n             *\n             * @param datetime1 The first date or datetime.\n             * @param datetime2 The second date or datetime.\n             * @param diffType The unit of difference (`'y'`, `'M'`, `'d'`, `'h'`, `'m'`, `'s'`).\n             * @returns The difference between the two dates in the specified unit.\n             *\n             * @example\n             * getDateDiff(\"2024-02-01\", \"2024-03-01\", \"M\"); // 1\n             * getDateDiff(\"2024-02-01\", \"2025-02-01\", \"y\"); // 1\n             * getDateDiff(\"2024-02-01\", \"2024-02-10\", \"d\"); // 9\n             * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 16:30:00\", \"h\"); // 2\n             * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 14:45:00\", \"m\"); // 45\n             * getDateDiff(\"2024-02-01 14:00:00\", \"2024-02-01 14:00:30\", \"s\"); // 30\n             */\n            getDateDiff(datetime1: DateTimeObject | DateObject | string, datetime2: DateTimeObject | DateObject | string, diffType: string = ''): number {\n                const datetimeObj1: DateTimeObject = hison.utils.isObject(datetime1) ? hison.utils.deepCopyObject(datetime1) : hison.utils.getDatetimeObject(datetime1 as string);\n                const datetimeObj2: DateTimeObject = hison.utils.isObject(datetime2) ? hison.utils.deepCopyObject(datetime2) : hison.utils.getDatetimeObject(datetime2 as string);\n                            \n                datetimeObj1.M = datetimeObj1.M || 1; datetimeObj2.M = datetimeObj2.M || 1;\n                datetimeObj1.d = datetimeObj1.d || 1; datetimeObj2.d = datetimeObj2.d || 1;\n                datetimeObj1.h = datetimeObj1.h || 0; datetimeObj2.h = datetimeObj2.h || 0;\n                datetimeObj1.m = datetimeObj1.m || 0; datetimeObj2.m = datetimeObj2.m || 0;\n                datetimeObj1.s = datetimeObj1.s || 0; datetimeObj2.s = datetimeObj2.s || 0;\n        \n                if (!hison.utils.isDate(datetimeObj1)) throw new Error(`ER0004 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj1)}`);\n                if (!hison.utils.isTime(datetimeObj1)) throw new Error(`ER0005 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj1)}`);\n                if (!hison.utils.isDate(datetimeObj2)) throw new Error(`ER0006 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj2)}`);\n                if (!hison.utils.isTime(datetimeObj2)) throw new Error(`ER0007 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj2)}`);\n                if (datetimeObj1.y === null) {\n                    throw new Error(`ER0004 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj1)}`);\n                }\n                if (datetimeObj2.y === null) {\n                    throw new Error(`ER0005 Please enter a valid date.\\n=>${JSON.stringify(datetimeObj2)}`);\n                }\n            \n                const d1 = new Date(datetimeObj1.y, datetimeObj1.M - 1, datetimeObj1.d, datetimeObj1.h, datetimeObj1.m, datetimeObj1.s);\n                const d2 = new Date(datetimeObj2.y, datetimeObj2.M - 1, datetimeObj2.d, datetimeObj2.h, datetimeObj2.m, datetimeObj2.s);\n            \n                switch (diffType) {\n                    case 'y':\n                        return d2.getFullYear() - d1.getFullYear();\n                    case 'M':\n                        return (d2.getFullYear() - d1.getFullYear()) * 12 + d2.getMonth() - d1.getMonth();\n                    case 'd':\n                        return Math.floor((d2.getTime() - d1.getTime()) / (24 * 60 * 60 * 1000));\n                    case 'h':\n                        return Math.floor((d2.getTime() - d1.getTime()) / (60 * 60 * 1000));\n                    case 'm':\n                        return Math.floor((d2.getTime() - d1.getTime()) / (60 * 1000));\n                    case 's':\n                        return Math.floor((d2.getTime() - d1.getTime()) / 1000);\n                    default:\n                        return Math.floor((d2.getTime() - d1.getTime()) / (24 * 60 * 60 * 1000));\n                }\n            },\n            /**\n             * Returns the full or abbreviated name of a given month.\n             *\n             * - Accepts a month number (`1-12`) or a string representation of a number.\n             * - If `isFullName` is `true`, it returns the full month name (e.g., `\"January\"`).\n             * - If `isFullName` is `false`, it returns the abbreviated month name (e.g., `\"Jan\"`).\n             * - Throws an error if the input month is outside the valid range (`1-12`).\n             *\n             * @param month The month as a number (`1-12`) or a string representing a number.\n             * @param isFullName Determines whether to return the full name (`true`) or the abbreviated name (`false`) (default: `true`).\n             * @returns The full or abbreviated month name.\n             *\n             * @throws Error if the month is not between `1` and `12`.\n             *\n             * @example\n             * getMonthName(2); // \"February\"\n             * getMonthName(\"3\", false); // \"Mar\"\n             * getMonthName(12, true); // \"December\"\n             * getMonthName(0); // Throws error: \"Month must be between 1 and 12\"\n             */\n            getMonthName(month: number | string, isFullName: boolean = true): string {\n                if (typeof month === 'string') month = parseInt(month, 10);\n        \n                if (month < 1 || month > 12) {\n                    throw new Error(`ER0008 Month must be between 1 and 12`);\n                }\n\n                if (isFullName) {\n                    return MonthFullName[month];\n                } else {\n                    return MonthShortName[month];\n                }\n            },\n            /**\n             * Formats a given date or datetime according to the specified format.\n             *\n             * - Accepts a `DateTimeObject`, `DateObject`, or a string representation of a date/datetime.\n             * - If no format is provided, it defaults to `CustomOption.dateFormat` for dates \n             *   and `CustomOption.datetimeFormat` for datetimes.\n             * - Supports various formats such as:\n             *   - `'yyyy-MM-dd'` → `\"2025-02-05\"`\n             *   - `'yyyy/MM/dd hh:mm:ss'` → `\"2025/02/05 14:30:45\"`\n             *   - `'MMMM dd, yyyy'` → `\"February 5, 2025\"`\n             * - Throws an error if the input date is invalid.\n             *\n             * @param datetime The date or datetime to format.\n             * @param format The desired output format (optional). Default: `'yyyy-MM-dd'` or `'yyyy-MM-dd hh:mm:ss'`\n             * @returns The formatted date/time as a string.\n             *\n             * @throws Error if the provided date is invalid.\n             *\n             * @example\n             * getDateWithFormat(\"2025-02-05\", \"yyyy/MM/dd\"); // \"2025/02/05\"\n             * getDateWithFormat(\"2025-02-05 14:30:45\", \"MMMM dd, yyyy\"); // \"February 5, 2025\"\n             * getDateWithFormat({ y: 2025, M: 2, d: 5 }, \"MM-dd-yyyy\"); // \"02-05-2025\"\n             */\n            getDateWithFormat(datetime: DateTimeObject | DateObject | string, format: string = ''): string {\n                const datetimeObj = hison.utils.isObject(datetime) ? hison.utils.deepCopyObject(datetime) : hison.utils.getDatetimeObject(datetime as string);\n                if (!format) {\n                    if (datetimeObj.h === undefined || datetimeObj.h === null) {\n                        format = customOption.utils.dateFormat\n                    }\n                    else {\n                        format = customOption.utils.datetimeFormat;\n                    }\n                }\n\n                const y = datetimeObj.y.toString();\n                const M = (datetimeObj.M || 1).toString().padStart(2, '0');\n                const d = (datetimeObj.d || 1).toString().padStart(2, '0');\n                const h = (datetimeObj.h || 0).toString().padStart(2, '0');\n                const m = (datetimeObj.m || 0).toString().padStart(2, '0');\n                const s = (datetimeObj.s || 0).toString().padStart(2, '0');\n\n                if (!hison.utils.isDate(y + M + d)) throw new Error(`ER0009 Please enter a valid date.\\n=>${JSON.stringify(datetime)}`);\n                if (!hison.utils.isTime(h + m + s)) throw new Error(`ER0010 Please enter a valid date.\\n=>${JSON.stringify(datetime)}`);\n\n                const MMMM = hison.utils.getMonthName(datetimeObj.M);\n                const MMM = hison.utils.getMonthName(datetimeObj.M, false);\n\n                switch (format) {\n                    case 'yyyy':\n                        return y;\n                        \n                    case 'yyyyMM':\n                        return y + M;\n                    case 'yyyy-MM':\n                        return y + '-' + M;\n                    case 'yyyy/MM':\n                        return y + '/' + M;\n                    case 'yyyy. MM':\n                        return y + '. ' + M;\n                    case 'yyyy MM':\n                        return y + ' ' + M;\n            \n                    case 'yyyyMMdd':\n                        return y + M + d;\n                    case 'yyyy-MM-dd':\n                        return y + '-' + M + '-' + d;\n                    case 'yyyy/MM/dd':\n                        return y + '/' + M + '/' + d;\n                    case 'yyyy. MM. dd':\n                        return y + '. ' + M + '. ' + d;\n                    case 'yyyy MM dd':\n                        return y + ' ' + M + ' ' + d;\n            \n                    case 'yyyyMMdd hh':\n                        return y + M + d + ' ' + h;\n                    case 'yyyyMMdd hhmm':\n                        return y + M + d + ' ' + h + m;\n                    case 'yyyyMMdd hhmmss':\n                        return y + M + d + ' ' + h + m + s;\n                    case 'yyyyMMdd hh:mm':\n                        return y + M + d + ' ' + h + ':' + m;\n                    case 'yyyyMMdd hh:mm:ss':\n                        return y + M + d + ' ' + h + ':' + m + ':' + s;\n                    case 'yyyy-MM-dd hh':\n                        return y + '-' + M + '-' + d + ' ' + h;\n                    case 'yyyy-MM-dd hhmm':\n                        return y + '-' + M + '-' + d + ' ' + h + m;\n                    case 'yyyy-MM-dd hhmmss':\n                        return y + '-' + M + '-' + d + ' ' + h + m + s;\n                    case 'yyyy-MM-dd hh:mm':\n                        return y + '-' + M + '-' + d + ' ' + h + ':' + m;\n                    case 'yyyy-MM-dd hh:mm:ss':\n                        return y + '-' + M + '-' + d + ' ' + h + ':' + m + ':' + s;\n                    case 'yyyy/MM/dd hh':\n                        return y + '/' + M + '/' + d + ' ' + h;\n                    case 'yyyy/MM/dd hhmm':\n                        return y + '/' + M + '/' + d + ' ' + h + m;\n                    case 'yyyy/MM/dd hhmmss':\n                        return y + '/' + M + '/' + d + ' ' + h + m + s;\n                    case 'yyyy/MM/dd hh:mm':\n                        return y + '/' + M + '/' + d + ' ' + h + ':' + m;\n                    case 'yyyy/MM/dd hh:mm:ss':\n                        return y + '/' + M + '/' + d + ' ' + h + ':' + m + ':' + s;\n                    case 'yyyy. MM. dd hh':\n                        return y + '. ' + M + '. ' + d + ' ' + h;\n                    case 'yyyy. MM. dd hhmm':\n                        return y + '. ' + M + '. ' + d + ' ' + h + m;\n                    case 'yyyy. MM. dd hhmmss':\n                        return y + '. ' + M + '. ' + d + ' ' + h + m + s;\n                    case 'yyyy. MM. dd hh:mm':\n                        return y + '. ' + M + '. ' + d + ' ' + h + ':' + m;\n                    case 'yyyy. MM. dd hh:mm:ss':\n                        return y + '. ' + M + '. ' + d + ' ' + h + ':' + m + ':' + s;\n                    case 'yyyy MM dd hh':\n                        return y + ' ' + M + ' ' + d + ' ' + h;\n                    case 'yyyy MM dd hhmm':\n                        return y + ' ' + M + ' ' + d + ' ' + h + m;\n                    case 'yyyy MM dd hhmmss':\n                        return y + ' ' + M + ' ' + d + ' ' + h + m + s;\n                    case 'yyyy MM dd hh:mm':\n                        return y + ' ' + M + ' ' + d + ' ' + h + ':' + m;\n                    case 'yyyy MM dd hh:mm:ss':\n                        return y + ' ' + M + ' ' + d + ' ' + h + ':' + m + ':' + s;\n            \n                    case 'MMyyyy':\n                        return M + y;\n                    case 'MM-yyyy':\n                        return M + '-' + y;\n                    case 'MM/yyyy':\n                        return M + '/' + y;\n                    case 'MM. yyyy':\n                        return M + '/' + y;\n                    case 'MM yyyy':\n                        return M + '/' + y;\n                    case 'MMMM yyyy':\n                        return MMMM + ' ' + y;\n                    case 'MMMM, yyyy':\n                        return MMMM + ', ' + y;\n                    case 'MMM yyyy':\n                        return MMM + ' ' + y;\n                    case 'MMM, yyyy':\n                        return MMM + ', ' + y;\n            \n                    case 'MMddyyyy':\n                        return M + d + y;\n                    case 'MM-dd-yyyy':\n                        return M + '-' + d + '-' + y;\n                    case 'MM/dd/yyyy':\n                        return M + '/' + d + '/' + y;\n                    case 'MM. dd. yyyy':\n                        return M + '. ' + d + '. ' + y;\n                    case 'MMMM dd yyyy':\n                        return MMMM + ' ' + d + ' ' + y;\n                    case 'MMMM dd, yyyy':\n                        return MMMM + ' ' + d + ', ' + y;\n                    case 'MMM dd yyyy':\n                        return MMM + ' ' + d + ' ' + y;\n                    case 'MMM dd, yyyy':\n                        return MMM + ' ' + d + ', ' + y;\n            \n                    case 'MMddyyyy hh':\n                        return M + d + y + ' ' + h;\n                    case 'MMddyyyy hhmm':\n                        return M + d + y + ' ' + h + m;\n                    case 'MMddyyyy hhmmss':\n                        return M + d + y + ' ' + h + m + s;\n                    case 'MMddyyyy hh:mm':\n                        return M + d + y + ' ' + h + ':' + m;\n                    case 'MMddyyyy hh:mm:ss':\n                        return M + d + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MM-dd-yyyy hh':\n                        return M + '-' + d + '-' + y + ' ' + h;\n                    case 'MM-dd-yyyy hhmm':\n                        return M + '-' + d + '-' + y + ' ' + h + m;\n                    case 'MM-dd-yyyy hhmmss':\n                        return M + '-' + d + '-' + y + ' ' + h + m + s;\n                    case 'MM-dd-yyyy hh:mm':\n                        return M + '-' + d + '-' + y + ' ' + h + ':' + m;\n                    case 'MM-dd-yyyy hh:mm:ss':\n                        return M + '-' + d + '-' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MM/dd/yyyy hh':\n                        return M + '/' + d + '/' + y + ' ' + h;\n                    case 'MM/dd/yyyy hhmm':\n                        return M + '/' + d + '/' + y + ' ' + h + m;\n                    case 'MM/dd/yyyy hhmmss':\n                        return M + '/' + d + '/' + y + ' ' + h + m + s;\n                    case 'MM/dd/yyyy hh:mm':\n                        return M + '/' + d + '/' + y + ' ' + h + ':' + m;\n                    case 'MM/dd/yyyy hh:mm:ss':\n                        return M + '/' + d + '/' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MM. dd. yyyy hh':\n                        return M + '. ' + d + '. ' + y + ' ' + h;\n                    case 'MM. dd. yyyy hhmm':\n                        return M + '. ' + d + '. ' + y + ' ' + h + m;\n                    case 'MM. dd. yyyy hhmmss':\n                        return M + '. ' + d + '. ' + y + ' ' + h + m + s;\n                    case 'MM. dd. yyyy hh:mm':\n                        return M + '. ' + d + '. ' + y + ' ' + h + ':' + m;\n                    case 'MM. dd. yyyy hh:mm:ss':\n                        return M + '. ' + d + '. ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MMMM dd yyyy hh':\n                        return MMMM + ' ' + d + ' ' + y + ' ' + h;\n                    case 'MMMM dd yyyy hhmm':\n                        return MMMM + ' ' + d + ' ' + y + ' ' + h + m;\n                    case 'MMMM dd yyyy hhmmss':\n                        return MMMM + ' ' + d + ' ' + y + ' ' + h + m + s;\n                    case 'MMMM dd yyyy hh:mm':\n                        return MMMM + ' ' + d + ' ' + y + ' ' + h + ':' + m;\n                    case 'MMMM dd yyyy hh:mm:ss':\n                        return MMMM + ' ' + d + ' ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MMMM dd, yyyy hh':\n                        return MMMM + ' ' + d + ', ' + y + ' ' + h;\n                    case 'MMMM dd, yyyy hhmm':\n                        return MMMM + ' ' + d + ', ' + y + ' ' + h + m;\n                    case 'MMMM dd, yyyy hhmmss':\n                        return MMMM + ' ' + d + ', ' + y + ' ' + h + m + s;\n                    case 'MMMM dd, yyyy hh:mm':\n                        return MMMM + ' ' + d + ', ' + y + ' ' + h + ':' + m;\n                    case 'MMMM dd, yyyy hh:mm:ss':\n                        return MMMM + ' ' + d + ', ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MMM dd yyyy hh':\n                        return MMM + ' ' + d + ' ' + y + ' ' + h;\n                    case 'MMM dd yyyy hhmm':\n                        return MMM + ' ' + d + ' ' + y + ' ' + h + m;\n                    case 'MMM dd yyyy hhmmss':\n                        return MMM + ' ' + d + ' ' + y + ' ' + h + m + s;\n                    case 'MMM dd yyyy hh:mm':\n                        return MMM + ' ' + d + ' ' + y + ' ' + h + ':' + m;\n                    case 'MMM dd yyyy hh:mm:ss':\n                        return MMM + ' ' + d + ' ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'MMM dd, yyyy hh':\n                        return MMM + ' ' + d + ', ' + y + ' ' + h;\n                    case 'MMM dd, yyyy hhmm':\n                        return MMM + ' ' + d + ', ' + y + ' ' + h + m;\n                    case 'MMM dd, yyyy hhmmss':\n                        return MMM + ' ' + d + ', ' + y + ' ' + h + m + s;\n                    case 'MMM dd, yyyy hh:mm':\n                        return MMM + ' ' + d + ', ' + y + ' ' + h + ':' + m;\n                    case 'MMM dd, yyyy hh:mm:ss':\n                        return MMM + ' ' + d + ', ' + y + ' ' + h + ':' + m + ':' + s;\n            \n                    case 'ddMMyyyy':\n                        return d + M + y;\n                    case 'dd-MM-yyyy':\n                        return d + '-' + M + '-' + y;\n                    case 'dd/MM/yyyy':\n                        return d + '/' + M + '/' + y;\n                    case 'dd. MM. yyyy':\n                        return d + '. ' + M + '. ' + y;\n                    case 'dd MMMM yyyy':\n                        return d + ' ' + MMMM + ' ' + y;\n                    case 'dd MMM yyyy':\n                        return d + ' ' + MMM + ' ' + y;\n            \n                    case 'ddMMyyyy hh':\n                        return d + M + y + ' ' + h;\n                    case 'ddMMyyyy hhmm':\n                        return d + M + y + ' ' + h + m;\n                    case 'ddMMyyyy hhmmss':\n                        return d + M + y + ' ' + h + m + s;\n                    case 'ddMMyyyy hh:mm':\n                        return d + M + y + ' ' + h + ':' + m;\n                    case 'ddMMyyyy hh:mm:ss':\n                        return d + M + y + ' ' + h + ':' + m + ':' + s;\n                    case 'dd-MM-yyyy hh':\n                        return d + '-' + M + '-' + y + ' ' + h;\n                    case 'dd-MM-yyyy hhmm':\n                        return d + '-' + M + '-' + y + ' ' + h + m;\n                    case 'dd-MM-yyyy hhmmss':\n                        return d + '-' + M + '-' + y + ' ' + h + m + s;\n                    case 'dd-MM-yyyy hh:mm':\n                        return d + '-' + M + '-' + y + ' ' + h + ':' + m;\n                    case 'dd-MM-yyyy hh:mm:ss':\n                        return d + '-' + M + '-' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'dd/MM/yyyy hh':\n                        return d + '/' + M + '/' + y + ' ' + h;\n                    case 'dd/MM/yyyy hhmm':\n                        return d + '/' + M + '/' + y + ' ' + h + m;\n                    case 'dd/MM/yyyy hhmmss':\n                        return d + '/' + M + '/' + y + ' ' + h + m + s;\n                    case 'dd/MM/yyyy hh:mm':\n                        return d + '/' + M + '/' + y + ' ' + h + ':' + m;\n                    case 'dd/MM/yyyy hh:mm:ss':\n                        return d + '/' + M + '/' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'dd. MM. yyyy hh':\n                        return d + '. ' + M + '. ' + y + ' ' + h;\n                    case 'dd. MM. yyyy hhmm':\n                        return d + '. ' + M + '. ' + y + ' ' + h + m;\n                    case 'dd. MM. yyyy hhmmss':\n                        return d + '. ' + M + '. ' + y + ' ' + h + m + s;\n                    case 'dd. MM. yyyy hh:mm':\n                        return d + '. ' + M + '. ' + y + ' ' + h + ':' + m;\n                    case 'dd. MM. yyyy hh:mm:ss':\n                        return d + '. ' + M + '. ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'dd MMMM yyyy hh':\n                        return d + ' ' + MMMM + ' ' + y + ' ' + h;\n                    case 'dd MMMM yyyy hhmm':\n                        return d + ' ' + MMMM + ' ' + y + ' ' + h + m;\n                    case 'dd MMMM yyyy hhmmss':\n                        return d + ' ' + MMMM + ' ' + y + ' ' + h + m + s;\n                    case 'dd MMMM yyyy hh:mm':\n                        return d + ' ' + MMMM + ' ' + y + ' ' + h + ':' + m;\n                    case 'dd MMMM yyyy hh:mm:ss':\n                        return d + ' ' + MMMM + ' ' + y + ' ' + h + ':' + m + ':' + s;\n                    case 'dd MMM yyyy hh':\n                        return d + ' ' + MMM + ' ' + y + ' ' + h;\n                    case 'dd MMM yyyy hhmm':\n                        return d + ' ' + MMM + ' ' + y + ' ' + h + m;\n                    case 'dd MMM yyyy hhmmss':\n                        return d + ' ' + MMM + ' ' + y + ' ' + h + m + s;\n                    case 'dd MMM yyyy hh:mm':\n                        return d + ' ' + MMM + ' ' + y + ' ' + h + ':' + m;\n                    case 'dd MMM yyyy hh:mm:ss':\n                        return d + ' ' + MMM + ' ' + y + ' ' + h + ':' + m + ':' + s;\n            \n                    default:\n                        throw new Error(`ER0010 Invalid format.\\n=>${JSON.stringify(format)}`);\n                }\n            },\n            /**\n             * Returns the day of the week for a given date.\n             *\n             * - Accepts a `DateObject` or a string representation of a date.\n             * - Uses `CustomOption.dayOfWeekFormat` as the default format.\n             * - Supports different formats for output:\n             *   - `'d'` → Numeric day of the week (`0-6`, where `0 = Sunday`).\n             *   - `'dy'` → Abbreviated English name (`\"Sun\", \"Mon\", ..., \"Sat\"`).\n             *   - `'day'` → Full English name (`\"Sunday\", \"Monday\", ..., \"Saturday\"`).\n             *   - `'kdy'` → Abbreviated Korean name (`\"일\", \"월\", ..., \"토\"`).\n             *   - `'kday'` → Full Korean name (`\"일요일\", \"월요일\", ..., \"토요일\"`).\n             * - Throws an error if the input date is invalid.\n             *\n             * @param date The date to evaluate.\n             * @param dayType The format of the output (optional). Default: `'d'`\n             * @returns The day of the week in the specified format.\n             *\n             * @throws Error if the provided date is invalid.\n             *\n             * @example\n             * getDayOfWeek(\"2025-02-05\", \"d\"); // \"3\" (Wednesday)\n             * getDayOfWeek(\"2025-02-05\", \"dy\"); // \"Wed\"\n             * getDayOfWeek(\"2025-02-05\", \"day\"); // \"Wednesday\"\n             * getDayOfWeek(\"2025-02-05\", \"kdy\"); // \"수\"\n             * getDayOfWeek(\"2025-02-05\", \"kday\"); // \"수요일\"\n             */\n            getDayOfWeek(date: DateObject | string, dayType: string = customOption.utils.dayOfWeekFormat): string {\n                const dateObj: DateObject = hison.utils.isObject(date) ? date as DateObject : hison.utils.getDateObject(date as string);\n                if (!hison.utils.isDate(dateObj)) throw new Error(`ER0011 Invalid format.\\n=>${JSON.stringify(date)}`);\n                if (dateObj.y === null || dateObj.M === null || dateObj.d === null) {\n                    throw new Error(`ER0011 Invalid format.\\n=>${JSON.stringify(date)}`);\n                }\n                const d = new Date(dateObj.y, dateObj.M - 1, dateObj.d);\n                const dayOfWeek = d.getDay();\n                switch (dayType.toLowerCase()) {\n                    case 'd':\n                        return dayOfWeek.toString();    //0 ~ 6\n                    case 'dy':\n                        return DayOfWeekShortName[dayOfWeek];\n                    case 'day':\n                        return DayOfWeekFullName[dayOfWeek];\n                    case 'kdy':\n                        return DayOfWeekShortNameKR[dayOfWeek];\n                    case 'kday':\n                        return DayOfWeekFullNameKR[dayOfWeek];\n                    default:\n                        return dayOfWeek.toString();\n                }\n            },\n            /**\n             * Returns the last day of the month for a given date.\n             *\n             * - Accepts a `DateObject` or a string representation of a date.\n             * - If the input is a `DateObject`, it uses the month and year from the object.\n             * - If the input is a string, it assumes the first day of the given month unless a full date is provided.\n             * - Determines the last day of the specified month by computing the last day of the next month minus one.\n             * - Throws an error if the input date is invalid.\n             *\n             * @param date The date or month to evaluate.\n             * @returns The last day of the month as a number.\n             *\n             * @throws Error if the provided date is invalid.\n             *\n             * @example\n             * getLastDay(\"2025-02\"); // 28 (for February 2025)\n             * getLastDay(\"2024-02\"); // 29 (leap year February)\n             * getLastDay({ y: 2025, M: 5, d: 15 }); // 31 (May has 31 days)\n             * getLastDay(\"2025-07-10\"); // 31 (July has 31 days)\n             */\n            getLastDay(date: DateObject | string): number {\n                let dateObj: DateObject;\n                if (hison.utils.isObject(date)) {\n                    dateObj = hison.utils.deepCopyObject(date);\n                    dateObj.d = 1;\n                }\n                else {\n                    if ((date as string).includes('-')) {\n                        date = date + '-01'\n                    }\n                    else if ((date as string).includes('/')) {\n                        date = date + '/01'\n                    }\n                    else {\n                        date = date + '01'\n                    }\n                    dateObj = hison.utils.getDateObject(date);\n                }\n                if (!hison.utils.isDate(dateObj)) throw new Error(`ER0012 Invalid format.\\n=>${JSON.stringify(date)}`);\n                if (dateObj.y === null || dateObj.M === null) {\n                    throw new Error(`ER0012 Invalid format.\\n=>${JSON.stringify(date)}`);\n                }\n                const nextMonthFirstDay = new Date(dateObj.y, dateObj.M, 1);\n                nextMonthFirstDay.setDate(0);\n                return nextMonthFirstDay.getDate();\n            },\n            /**\n             * Returns the current system year in the specified format.\n             *\n             * - Uses `CustomOption.yearFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'yyyy'` → Full year (`\"2025\"`)\n             *   - `'yy'` → Last two digits of the year (`\"25\"`)\n             * - If an unsupported format is provided, it defaults to `'yyyy'`.\n             *\n             * @param format The desired output format (optional). Default: `'yyyy'`\n             * @returns The current year as a string in the specified format.\n             *\n             * @example\n             * getSysYear(); // \"2025\" (default format)\n             * getSysYear(\"yyyy\"); // \"2025\"\n             * getSysYear(\"yy\"); // \"25\"\n             */\n            getSysYear(format: string = customOption.utils.yearFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'yy':\n                        return currentDate.getFullYear().toString().substring(2);\n                    default:\n                        return currentDate.getFullYear().toString();\n                }\n            },\n            /**\n             * Returns the current system month in the specified format.\n             *\n             * - Uses `CustomOption.monthFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'M'` → Numeric month without leading zero (`\"2\"` for February).\n             *   - `'MM'` → Numeric month with leading zero (`\"02\"` for February).\n             *   - `'MMMM'` → Full month name (`\"February\"`).\n             *   - `'MMM'` → Abbreviated month name (`\"Feb\"`).\n             * - If an unsupported format is provided, it defaults to `'M'`.\n             *\n             * @param format The desired output format (optional). Default: `'M'`\n             * @returns The current month as a string in the specified format.\n             *\n             * @example\n             * getSysMonth(); // \"2\" (default format for February)\n             * getSysMonth(\"MM\"); // \"02\"\n             * getSysMonth(\"MMMM\"); // \"February\"\n             * getSysMonth(\"MMM\"); // \"Feb\"\n             */\n            getSysMonth(format: string = customOption.utils.monthFormat): string {\n                const currentDate = new Date();\n                const sysMonth = currentDate.getMonth() + 1;\n                switch (format.toLowerCase()) {\n                    case 'mm':\n                        return sysMonth.toString().padStart(2, '0');\n                    case 'mmmm':\n                        return hison.utils.getMonthName(sysMonth);\n                    case 'mmm':\n                        return hison.utils.getMonthName(sysMonth, false);\n                    default:\n                        return sysMonth.toString();\n                }\n            },\n            /**\n             * Returns the current system year and month in the specified format.\n             *\n             * - Uses `CustomOption.yearMonthFormat` as the default format.\n             * - Delegates formatting to `getDateWithFormat()` using the first day of the current month.\n             * - Common formats include:\n             *   - `'yyyy-MM'` → `\"2025-02\"`\n             *   - `'yyyy/MM'` → `\"2025/02\"`\n             *   - `'MMMM yyyy'` → `\"February 2025\"`\n             *   - `'MMM yyyy'` → `\"Feb 2025\"`\n             *\n             * @param format The desired output format (optional). Default: `'yyyy-MM'`\n             * @returns The current year and month as a formatted string.\n             *\n             * @example\n             * getSysYearMonth(); // \"2025-02\" (default format for February 2025)\n             * getSysYearMonth(\"yyyy/MM\"); // \"2025/02\"\n             * getSysYearMonth(\"MMMM yyyy\"); // \"February 2025\"\n             * getSysYearMonth(\"MMM yyyy\"); // \"Feb 2025\"\n             */\n            getSysYearMonth(format: string = customOption.utils.yearMonthFormat): string {\n                const currentDate = new Date();\n                return hison.utils.getDateWithFormat( {y : currentDate.getFullYear(), M : currentDate.getMonth() + 1, d : 1 }, format);\n            },\n            /**\n             * Returns the current system day of the month in the specified format.\n             *\n             * - Uses `CustomOption.dayFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'d'` → Day without leading zero (`\"5\"` for the 5th day of the month).\n             *   - `'dd'` → Day with leading zero (`\"05\"` for the 5th day of the month).\n             * - If an unsupported format is provided, it defaults to `'d'`.\n             *\n             * @param format The desired output format (optional). Default: `'d'`\n             * @returns The current day of the month as a string in the specified format.\n             *\n             * @example\n             * getSysDay(); // \"5\" (default format for the 5th day)\n             * getSysDay(\"dd\"); // \"05\"\n             */\n            getSysDay(format: string = customOption.utils.dayFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'dd':\n                        return currentDate.getDate().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getDate().toString();\n                }\n            },\n            /**\n             * Returns the current system day of the week in the specified format.\n             *\n             * - Uses `CustomOption.dayOfWeekFormat` as the default format.\n             * - Delegates formatting to `getDayOfWeek()`, which supports:\n             *   - `'d'` → Numeric day of the week (`0-6`, where `0 = Sunday`).\n             *   - `'dy'` → Abbreviated English name (`\"Sun\", \"Mon\", ..., \"Sat\"`).\n             *   - `'day'` → Full English name (`\"Sunday\", \"Monday\", ..., \"Saturday\"`).\n             *   - `'kdy'` → Abbreviated Korean name (`\"일\", \"월\", ..., \"토\"`).\n             *   - `'kday'` → Full Korean name (`\"일요일\", \"월요일\", ..., \"토요일\"`).\n             *\n             * @param format The desired output format (optional). Default: `'d'`\n             * @returns The current day of the week in the specified format.\n             *\n             * @example\n             * getSysDayOfWeek(); // \"3\" (default format, Wednesday)\n             * getSysDayOfWeek(\"dy\"); // \"Wed\"\n             * getSysDayOfWeek(\"day\"); // \"Wednesday\"\n             * getSysDayOfWeek(\"kdy\"); // \"수\"\n             * getSysDayOfWeek(\"kday\"); // \"수요일\"\n             */\n            getSysDayOfWeek(format: string = customOption.utils.dayOfWeekFormat): string {\n                const currentDate = new Date();\n                return hison.utils.getDayOfWeek({ y : currentDate.getFullYear(), M : currentDate.getMonth() + 1, d : currentDate.getDate()}, format);\n            },\n            /**\n             * Returns the current system hour in the specified format.\n             *\n             * - Uses `CustomOption.hourFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'h'` → Hour without leading zero (`\"5\"` for 5 AM/PM).\n             *   - `'hh'` → Hour with leading zero (`\"05\"` for 5 AM/PM).\n             * - If an unsupported format is provided, it defaults to `'h'`.\n             *\n             * @param format The desired output format (optional). Default: `'h'`\n             * @returns The current hour as a string in the specified format.\n             *\n             * @example\n             * getSysHour(); // \"5\" (default format)\n             * getSysHour(\"hh\"); // \"05\"\n             */\n            getSysHour(format: string = customOption.utils.hourFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'hh':\n                        return currentDate.getHours().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getHours().toString();\n                }\n            },\n            /**\n             * Returns the current system hour and minute in the specified format.\n             *\n             * - Uses `CustomOption.hourMinuteFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'hhmm'` → Compact format without separators (`\"1430\"` for 2:30 PM).\n             *   - `'hh:mm'` → Standard format with a colon separator (`\"14:30\"` for 2:30 PM).\n             * - If an unsupported format is provided, it defaults to `'hh:mm'`.\n             *\n             * @param format The desired output format (optional). Default: `'hh:mm'`\n             * @returns The current hour and minute as a string in the specified format.\n             *\n             * @example\n             * getSysHourMinute(); // \"14:30\" (default format)\n             * getSysHourMinute(\"hhmm\"); // \"1430\"\n             */\n            getSysHourMinute(format: string = customOption.utils.hourMinuteFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'hhmm':\n                        return currentDate.getHours().toString().padStart(2, '0') + '' + currentDate.getMinutes().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getHours().toString().padStart(2, '0') + ':' + currentDate.getMinutes().toString().padStart(2, '0');\n                }\n            },\n            /**\n             * Returns the current system minute in the specified format.\n             *\n             * - Uses `CustomOption.minuteFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'m'` → Minute without leading zero (`\"5\"` for the 5th minute).\n             *   - `'mm'` → Minute with leading zero (`\"05\"` for the 5th minute).\n             * - If an unsupported format is provided, it defaults to `'m'`.\n             *\n             * @param format The desired output format (optional). Default: `'m'`\n             * @returns The current minute as a string in the specified format.\n             *\n             * @example\n             * getSysMinute(); // \"5\" (default format)\n             * getSysMinute(\"mm\"); // \"05\"\n             */\n            getSysMinute(format: string = customOption.utils.minuteFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'mm':\n                        return currentDate.getMinutes().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getMinutes().toString();\n                }\n            },\n            /**\n             * Returns the current system second in the specified format.\n             *\n             * - Uses `CustomOption.secondFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'s'` → Second without leading zero (`\"5\"` for the 5th second).\n             *   - `'ss'` → Second with leading zero (`\"05\"` for the 5th second).\n             * - If an unsupported format is provided, it defaults to `'s'`.\n             *\n             * @param format The desired output format (optional). Default: `'s'`\n             * @returns The current second as a string in the specified format.\n             *\n             * @example\n             * getSysSecond(); // \"5\" (default format)\n             * getSysSecond(\"ss\"); // \"05\"\n             */\n            getSysSecond(format: string = customOption.utils.secondFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'ss':\n                        return currentDate.getSeconds().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getSeconds().toString();\n                }\n            },\n            /**\n             * Returns the current system time in the specified format.\n             *\n             * - Uses `CustomOption.timeFormat` as the default format.\n             * - Supports the following formats:\n             *   - `'hhmmss'` → Compact format without separators (`\"143015\"` for 2:30:15 PM).\n             *   - `'hh:mm:ss'` → Standard format with colons (`\"14:30:15\"` for 2:30:15 PM).\n             * - If an unsupported format is provided, it defaults to `'hh:mm:ss'`.\n             *\n             * @param format The desired output format (optional). Default: `'hh:mm:ss'`\n             * @returns The current time as a string in the specified format.\n             *\n             * @example\n             * getSysTime(); // \"14:30:15\" (default format)\n             * getSysTime(\"hhmmss\"); // \"143015\"\n             */\n            getSysTime(format: string = customOption.utils.timeFormat): string {\n                const currentDate = new Date();\n                switch (format.toLowerCase()) {\n                    case 'hhmmss':\n                        return currentDate.getHours().toString().padStart(2, '0') + currentDate.getMinutes().toString().padStart(2, '0') + currentDate.getSeconds().toString().padStart(2, '0');\n                    default:\n                        return currentDate.getHours().toString().padStart(2, '0') + ':' + currentDate.getMinutes().toString().padStart(2, '0') + ':' + currentDate.getSeconds().toString().padStart(2, '0');\n                }\n            },\n            /**\n             * Returns the current system date and time in the specified format.\n             *\n             * - Uses `CustomOption.datetimeFormat` as the default format.\n             * - Delegates formatting to `getDateWithFormat()`, which supports various formats, including:\n             *   - `'yyyy-MM-dd hh:mm:ss'` → `\"2025-02-05 14:30:15\"`\n             *   - `'yyyy/MM/dd'` → `\"2025/02/05\"`\n             *   - `'MMMM dd, yyyy'` → `\"February 5, 2025\"`\n             * - If no format is specified, it defaults to the full datetime format.\n             *\n             * @param format The desired output format (optional). Default: `'yyyy-MM-dd hh:mm:ss'`\n             * @returns The current date and time as a formatted string.\n             *\n             * @example\n             * getSysDate(); // \"2025-02-05 14:30:15\" (default format)\n             * getSysDate(\"yyyy/MM/dd\"); // \"2025/02/05\"\n             * getSysDate(\"MMMM dd, yyyy\"); // \"February 5, 2025\"\n             */\n            getSysDate(format: string = customOption.utils.datetimeFormat): string {\n                const currentDate = new Date();\n                return hison.utils.getDateWithFormat(\n                    {\n                        y:currentDate.getFullYear(),\n                        M:currentDate.getMonth() + 1,\n                        d:currentDate.getDate(),\n                        h:currentDate.getHours(),\n                        m:currentDate.getMinutes(),\n                        s:currentDate.getSeconds(),\n                    }\n                    , format);\n            },\n            /**\n             * Rounds a number up to the nearest integer or specified decimal place.\n             *\n             * - If `precision` is `0`, it rounds up to the nearest whole number.\n             * - If `precision` is greater than `0`, it rounds up to the specified number of decimal places.\n             * - If `precision` is less than `0`, it rounds up to the nearest multiple of `10^precision`.\n             *\n             * @param num The number to be rounded up.\n             * @param precision The number of decimal places to retain (default: `0`).\n             * @returns The rounded-up number.\n             *\n             * @example\n             * getCeil(12.34); // 13\n             * getCeil(12.34, 1); // 12.4\n             * getCeil(12.34, 2); // 12.34\n             * getCeil(1250, -2); // 1300\n             */\n            getCeil(num: number, precision: number = 0): number {\n                num = hison.utils.getToNumber(num);\n                precision = Math.trunc(hison.utils.getToNumber(precision));\n                const factor = Math.pow(10, precision);\n                return Math.ceil(num * factor) / factor;\n            },\n            /**\n             * Rounds a number down to the nearest integer or specified decimal place.\n             *\n             * - If `precision` is `0`, it rounds down to the nearest whole number.\n             * - If `precision` is greater than `0`, it rounds down to the specified number of decimal places.\n             * - If `precision` is less than `0`, it rounds down to the nearest multiple of `10^precision`.\n             *\n             * @param num The number to be rounded down.\n             * @param precision The number of decimal places to retain (default: `0`).\n             * @returns The rounded-down number.\n             *\n             * @example\n             * getFloor(12.89); // 12\n             * getFloor(12.89, 1); // 12.8\n             * getFloor(12.89, 2); // 12.89\n             * getFloor(1299, -2); // 1200\n             */\n            getFloor(num: number, precision: number = 0): number {\n                num = hison.utils.getToNumber(num);\n                precision = Math.trunc(hison.utils.getToNumber(precision));\n                const factor = Math.pow(10, precision);\n                return Math.floor(num * factor) / factor;\n            },\n            /**\n             * Rounds a number to the nearest integer or specified decimal place.\n             *\n             * - If `precision` is `0`, it rounds to the nearest whole number.\n             * - If `precision` is greater than `0`, it rounds to the specified number of decimal places.\n             * - If `precision` is less than `0`, it rounds to the nearest multiple of `10^precision`.\n             *\n             * @param num The number to be rounded.\n             * @param precision The number of decimal places to retain (default: `0`).\n             * @returns The rounded number.\n             *\n             * @example\n             * getRound(12.49); // 12\n             * getRound(12.5); // 13\n             * getRound(12.345, 2); // 12.35\n             * getRound(1250, -2); // 1300\n             */\n            getRound(num: number, precision: number = 0): number {\n                num = hison.utils.getToNumber(num);\n                precision = Math.trunc(hison.utils.getToNumber(precision));\n                const factor = Math.pow(10, precision);\n                return Math.round(num * factor) / factor;\n            },\n            /**\n             * Truncates a number to the specified decimal place without rounding.\n             *\n             * - If `precision` is `0`, it removes the decimal part, keeping only the integer.\n             * - If `precision` is greater than `0`, it truncates the number at the specified decimal places.\n             * - If `precision` is less than `0`, it truncates to the nearest multiple of `10^precision`.\n             *\n             * @param num The number to be truncated.\n             * @param precision The number of decimal places to retain (default: `0`).\n             * @returns The truncated number.\n             *\n             * @example\n             * getTrunc(12.89); // 12\n             * getTrunc(12.89, 1); // 12.8\n             * getTrunc(12.89, 2); // 12.89\n             * getTrunc(1299, -2); // 1200\n             */\n            getTrunc(num: number, precision: number = 0): number {\n                num = hison.utils.getToNumber(num);\n                precision = Math.trunc(hison.utils.getToNumber(precision));\n                const factor = Math.pow(10, precision);\n                return Math.trunc(num * factor) / factor;\n            },\n            /**\n             * Calculates the byte length of a given string based on character encoding.\n             *\n             * - Uses UTF-8 encoding rules to determine the byte size of each character.\n             * - Character byte sizes are determined as follows:\n             *   - `charCode <= 0x7F` → 1 byte (ASCII characters).\n             *   - `charCode <= 0x7FF` → `CustomOption.LESSOREQ_0X7FF_BYTE` bytes. Default: 2\n             *   - `charCode <= 0xFFFF` → `CustomOption.LESSOREQ_0XFFFF_BYTE` bytes. Default: 3\n             *   - `charCode > 0xFFFF` → `CustomOption.GREATER_0XFFFF_BYTE` bytes. Default: 4\n             *\n             * @param str The input string.\n             * @returns The total byte length of the string.\n             *\n             * @example\n             * getByteLength(\"Hello\"); // 5 (each ASCII character is 1 byte)\n             * getByteLength(\"안녕하세요\"); // 15 (each Korean character is 3 bytes)\n             * getByteLength(\"𐍈\"); // 4 (UTF-16 surrogate pair)\n             */\n            getByteLength(str: string): number {\n                str = hison.utils.getToString(str);\n                let byteLength = 0;\n                for (let i = 0; i < str.length; i++) {\n                    const charCode = str.charCodeAt(i);\n                    if (charCode <= 0x7F) {\n                        byteLength += 1;\n                    } else if (charCode <= 0x7FF) {\n                        byteLength += customOption.utils.LESSOREQ_0X7FF_BYTE;\n                    } else if (charCode <= 0xFFFF) {\n                        byteLength += customOption.utils.LESSOREQ_0XFFFF_BYTE;\n                    } else {\n                        byteLength += customOption.utils.GREATER_0XFFFF_BYTE;\n                    }\n                }\n                return byteLength;\n            },\n            /**\n             * Truncates a string to fit within a specified byte length.\n             *\n             * - Uses UTF-8 encoding rules to calculate byte size.\n             * - Truncates the string at the point where the total byte length exceeds `cutByte`.\n             * - Character byte sizes are determined as follows:\n             *   - `charCode <= 0x7F` → 1 byte (ASCII characters).\n             *   - `charCode <= 0x7FF` → `CustomOption.LESSOREQ_0X7FF_BYTE` bytes.\n             *   - `charCode <= 0xFFFF` → `CustomOption.LESSOREQ_0XFFFF_BYTE` bytes.\n             *   - `charCode > 0xFFFF` → `CustomOption.GREATER_0XFFFF_BYTE` bytes.\n             *\n             * @param str The input string to be truncated.\n             * @param cutByte The maximum allowed byte length.\n             * @returns The truncated string that fits within the given byte length.\n             *\n             * @example\n             * getCutByteLength(\"Hello, World!\", 5); // \"Hello\"\n             * getCutByteLength(\"안녕하세요\", 6); // \"안녕\" (each Korean character is 3 bytes)\n             * getCutByteLength(\"𐍈𐍈𐍈\", 4); // \"𐍈\" (each surrogate pair character is 4 bytes)\n             */\n            getCutByteLength(str: string, cutByte: number): string {\n                str = hison.utils.getToString(str);\n                cutByte = hison.utils.getToNumber(cutByte);\n                let byteLength = 0;\n                let cutIndex = str.length;\n                for (let i = 0; i < str.length; i++) {\n                    const charCode = str.charCodeAt(i);\n                    if (charCode <= 0x7F) {\n                        byteLength += 1;\n                    } else if (charCode <= 0x7FF) {\n                        byteLength += customOption.utils.LESSOREQ_0X7FF_BYTE;\n                    } else if (charCode <= 0xFFFF) {\n                        byteLength += customOption.utils.LESSOREQ_0XFFFF_BYTE;\n                    } else {\n                        byteLength += customOption.utils.GREATER_0XFFFF_BYTE;\n                    }\n                    if (byteLength > cutByte) {\n                        cutIndex = i;\n                        break;\n                    }\n                }\n                return str.substring(0, cutIndex);\n            },\n            /**\n             * Adjusts a string to fit a specified length by evenly distributing spaces between characters.\n             *\n             * - If the string's length is already greater than or equal to `length`, it is returned as is.\n             * - Spaces are distributed as evenly as possible between characters to reach the desired length.\n             * - If the spacing is not evenly divisible, extra spaces are added starting from the left.\n             *\n             * @param str The input string.\n             * @param length The target total length of the formatted string.\n             * @returns A string with evenly distributed spaces to match the specified length.\n             *\n             * @example\n             * getStringLenForm(\"Hi\", 5); // \"H  i\"\n             * getStringLenForm(\"Hello\", 10); // \"H  e  l  l  o\"\n             * getStringLenForm(\"A\", 3); // \"A  \"\n             */\n            getStringLenForm(str: string, length: number): string {\n                str = hison.utils.getToString(str);\n                length = hison.utils.getToNumber(length);\n                const strLength = str.length;\n                if (strLength >= length) {\n                    return str;\n                }\n                const totalSpaces = length - strLength;\n                const gaps = strLength - 1;\n                const spacePerGap = Math.floor(totalSpaces / gaps);\n                const extraSpaces = totalSpaces % gaps;\n                let result = '';\n                for (let i = 0; i < gaps; i++) {\n                    result += str[i];\n                    result += ' '.repeat(spacePerGap + (i < extraSpaces ? 1 : 0));\n                }\n                result += str[strLength - 1];\n                return result;\n            },\n            /**\n             * Left-pads a string with a specified padding string until it reaches the desired length.\n             *\n             * - If the original string's length is already greater than or equal to `length`, it is returned as is.\n             * - The `padStr` is repeated as needed to fill the remaining space.\n             * - If `padStr` does not evenly divide into the required padding length, it may be truncated.\n             *\n             * @param str The original string.\n             * @param padStr The string used for padding.\n             * @param length The desired total length of the padded string.\n             * @returns The left-padded string.\n             *\n             * @example\n             * getLpad(\"123\", \"0\", 5); // \"00123\"\n             * getLpad(\"abc\", \"-\", 6); // \"---abc\"\n             * getLpad(\"test\", \"XY\", 10); // \"XYXYXYtest\"\n             */\n            getLpad(str: string, padStr: string, length: number): string {\n                str = hison.utils.getToString(str);\n                padStr = hison.utils.getToString(padStr);\n                length = hison.utils.getToNumber(length);\n                if (str.length >= length) return str.substring(str.length, length - 1);\n                const pad = padStr.repeat((length - str.length) / padStr.length);\n                return pad + str;\n            },\n            /**\n             * Right-pads a string with a specified padding string until it reaches the desired length.\n             *\n             * - If the original string's length is already greater than or equal to `length`, it is truncated to fit.\n             * - The `padStr` is repeated as needed to fill the remaining space.\n             * - If `padStr` does not evenly divide into the required padding length, it may be truncated.\n             *\n             * @param str The original string.\n             * @param padStr The string used for padding.\n             * @param length The desired total length of the padded string.\n             * @returns The right-padded string.\n             *\n             * @example\n             * getRpad(\"123\", \"0\", 5); // \"12300\"\n             * getRpad(\"abc\", \"-\", 6); // \"abc---\"\n             * getRpad(\"test\", \"XY\", 10); // \"testXYXYXY\"\n             */\n            getRpad(str: string, padStr: string, length: number): string {\n                str = hison.utils.getToString(str);\n                padStr = hison.utils.getToString(padStr);\n                length = hison.utils.getToNumber(length);\n                if (str.length >= length) return str.substring(0, length);\n                const pad = padStr.repeat((length - str.length) / padStr.length);\n                return str + pad;\n            },\n            /**\n             * Removes leading and trailing whitespace from a string.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Uses JavaScript's built-in `trim()` method to remove whitespace.\n             *\n             * @param str The input string.\n             * @returns The trimmed string without leading or trailing spaces.\n             *\n             * @example\n             * getTrim(\"  Hello World  \"); // \"Hello World\"\n             * getTrim(\"\\tTest String\\n\"); // \"Test String\"\n             * getTrim(\"   \"); // \"\" (empty string)\n             */\n            getTrim(str: string): string {\n                str = hison.utils.getToString(str);\n                return str.trim();\n            },\n            /**\n             * Replaces all occurrences of a target substring within a string with a specified replacement.\n             *\n             * - Converts all inputs to strings before processing.\n             * - Uses `split()` and `join()` to replace all instances of `targetStr` with `replaceStr`.\n             * - If `replaceStr` is not provided, occurrences of `targetStr` are removed.\n             *\n             * @param str The original string.\n             * @param targetStr The substring to be replaced.\n             * @param replaceStr The string to replace occurrences of `targetStr` (default: `''`).\n             * @returns A new string with all occurrences of `targetStr` replaced.\n             *\n             * @example\n             * getReplaceAll(\"hello world\", \"o\", \"O\"); // \"hellO wOrld\"\n             * getReplaceAll(\"banana\", \"a\", \"\"); // \"bnn\"\n             * getReplaceAll(\"2025-02-05\", \"-\", \"/\"); // \"2025/02/05\"\n             */\n            getReplaceAll(str: string, targetStr: string, replaceStr: string = ''): string {\n                str = hison.utils.getToString(str);\n                targetStr = hison.utils.getToString(targetStr);\n                replaceStr = hison.utils.getToString(replaceStr);\n                return str.split(targetStr).join(replaceStr);\n            },\n            /**\n             * Formats a number according to a specified format pattern.\n             *\n             * - Uses `CustomOption.numberFormat` as the default format if none is provided.\n             * - Supports various number formatting patterns, including:\n             *   - `\"#,###\"` → `\"1,234\"` (comma-separated thousands).\n             *   - `\"#,##0\"` → `\"1,234\"` (ensures at least one digit).\n             *   - `\".##\"` → `\"0.1\"` (no grouping).\n             *   - `\".00\"` → `\"0.10\"` (ensures at least one digit).\n             * - Supports decimal formatting and percentage notation (`\"%\"`).\n             * - Throws an error if the input is not a valid number or if the format is invalid.\n             *\n             * @param value The number to format.\n             * @param format The desired format pattern (optional). Default: `'#,##0.##'`\n             * @returns The formatted number as a string.\n             *\n             * @throws Error if the input value is not numeric or the format is invalid.\n             *\n             * @example\n             * getNumberFormat(1234); // \"1,234\" (default format)\n             * getNumberFormat(1234.5678, \"#,###.00\"); // \"1,234.56\"\n             * getNumberFormat(0.25, \"#,##0%\"); // \"25%\" (percentage conversion)\n             * getNumberFormat(-1234, \"#,###\"); // \"-1,234\"\n             */\n            getNumberFormat(value: number, format?: string): string {\n                value = hison.utils.getToNumber(value);\n                format = hison.utils.getToString(format);\n\n                const oriValue = value;\n                if (!hison.utils.isNumeric(value)) {\n                    throw new Error(`ER0021 Invalid number\\n=>${JSON.stringify(oriValue)}`);\n                }\n                format = format ? format : customOption.utils.numberFormat;\n                const regex = /^(.*?)([#0,.]+)(.*?)$/;\n                const matches = format.match(regex);\n        \n                if (!matches) {\n                    throw new Error(`ER0022 Invalid format\\n=>${JSON.stringify(format)}`);\n                }\n        \n                const prefix = matches[1];\n                const numberFormat = matches[2];\n                const suffix = matches[3];\n                const intergerFormat = numberFormat.split('.')[0];\n                const decimalFormat = numberFormat.split('.').length > 1 ? numberFormat.split('.')[1] : '';\n        \n                if (suffix === '%' || suffix === ' %') value = value * 100;\n        \n                let numStr = hison.utils.getToString(value);\n                const isNegative = numStr[0] === '-';\n                numStr = isNegative ? numStr.substring(1) : numStr;\n                let interger = numStr.split('.')[0];\n                let decimal = numStr.split('.').length > 1 ? numStr.split('.')[1] : '';\n                \n                let result: string;\n        \n                decimal = hison.utils.getToFloat('0.' + decimal)\n                        .toLocaleString('en',{\n                            minimumFractionDigits: decimalFormat.lastIndexOf('0') + 1,\n                            maximumFractionDigits: decimalFormat.length\n                            });\n                if (decimal === '0') decimal = '';\n                else decimal = decimal.substring(1);\n        \n                switch (intergerFormat) {\n                    case '#,###':\n                        if (hison.utils.getToNumber(interger) === 0) {\n                            result = decimal;\n                        }\n                        else {\n                            interger = hison.utils.getToFloat(interger).toLocaleString('en');\n                            result = interger + decimal;\n                        }\n                        break;\n                    case '#,##0':\n                        interger = hison.utils.getToFloat(interger).toLocaleString('en');\n                        result = interger + decimal;\n                        break;\n                    case '#':\n                        if (hison.utils.getToNumber(interger) === 0) {\n                            result = decimal;\n                        }\n                        else {\n                            result = interger + decimal;\n                        }\n                        break;\n                    case '0':\n                        result = interger + decimal;\n                        break;\n                    default:\n                        throw new Error(`ER0023 Invalid format\\n=>${JSON.stringify(format)}`);\n                }\n                result = isNegative ? '-' + result : result;\n                return prefix + result + suffix;\n            },\n            /**\n             * Removes all non-numeric characters from a string, leaving only digits.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Uses a regular expression to remove any character that is not a digit (`0-9`).\n             *\n             * @param str The input string.\n             * @returns A new string containing only numeric characters.\n             *\n             * @example\n             * getRemoveExceptNumbers(\"abc123def456\"); // \"123456\"\n             * getRemoveExceptNumbers(\"Phone: (555) 123-4567\"); // \"5551234567\"\n             * getRemoveExceptNumbers(\"No numbers here!\"); // \"\"\n             */\n            getRemoveExceptNumbers(str: string): string {\n                str = hison.utils.getToString(str);\n                return str.replace(/[^0-9]/g, '');\n            },\n            /**\n             * Removes all numeric characters from a string, leaving only non-numeric characters.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Uses a regular expression to remove any digit (`0-9`).\n             *\n             * @param str The input string.\n             * @returns A new string containing only non-numeric characters.\n             *\n             * @example\n             * getRemoveNumbers(\"abc123def456\"); // \"abcdef\"\n             * getRemoveNumbers(\"Phone: (555) 123-4567\"); // \"Phone: () -\"\n             * getRemoveNumbers(\"123456\"); // \"\" (all numbers removed)\n             */\n            getRemoveNumbers(str: string): string {\n                str = hison.utils.getToString(str);\n                return str.replace(/[0-9]/g, '');\n            },\n            /**\n             * Reverses the characters in a given string.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Splits the string into an array of characters, reverses the order, and joins them back.\n             *\n             * @param str The input string.\n             * @returns The reversed string.\n             *\n             * @example\n             * getReverse(\"hello\"); // \"olleh\"\n             * getReverse(\"12345\"); // \"54321\"\n             * getReverse(\"A B C\"); // \"C B A\"\n             */\n            getReverse(str: string): string {\n                str = hison.utils.getToString(str);\n                return str.split('').reverse().join('');\n            },\n            /**\n             * Converts the given value to a boolean.\n             *\n             * - Numeric values: `0` is `false`, any other number is `true`.\n             * - Boolean values: Returned as is.\n             * - String values: Returns `true` if the string matches predefined truthy values (`\"true\"`, `\"yes\"`, `\"checked\"`, etc.).\n             * - Other types: Returns `false`.\n             *\n             * @param value The value to be converted.\n             * @returns `true` if the value represents a truthy value, otherwise `false`.\n             *\n             * @example\n             * getToBoolean(1); // true\n             * getToBoolean(0); // false\n             * getToBoolean(\"yes\"); // true\n             * getToBoolean(\"false\"); // false\n             * getToBoolean(true); // true\n             * getToBoolean(null); // false\n             */\n            getToBoolean(value: any): boolean {\n                if (hison.utils.isNumeric(value)) {\n                    return Number(value) != 0;\n                }\n                else if (typeof value === 'boolean'){\n                    return value\n                }\n                else if (typeof value === 'string'){\n                    return ['t','true','y','yes','check','c','checked','selected','참'].indexOf(value.toLowerCase()) >= 0;\n                }\n                else {\n                    return false;\n                }\n            },\n            /**\n             * Converts the given value to a number.\n             *\n             * - If the value is numeric, it is returned as a number.\n             * - If the value is not a valid number, `impossibleValue` is returned instead.\n             *\n             * @param value The value to be converted.\n             * @param impossibleValue The fallback value if conversion fails (default: `0`).\n             * @returns The numeric representation of the value, or `impossibleValue` if conversion fails.\n             *\n             * @example\n             * getToNumber(\"123\"); // 123\n             * getToNumber(\"12.34\"); // 12.34\n             * getToNumber(\"abc\", -1); // -1 (fallback value)\n             * getToNumber(null, 100); // 100 (fallback value)\n             */\n            getToNumber(value: any, impossibleValue: number = 0): number {\n                return hison.utils.getToFloat(value, impossibleValue);\n            },\n            /**\n             * Converts the given value to a floating-point number.\n             *\n             * - If the value is numeric, it is converted to a float and returned.\n             * - If the value is not a valid number, `impossibleValue` is returned instead.\n             *\n             * @param value The value to be converted.\n             * @param impossibleValue The fallback value if conversion fails (default: `0`).\n             * @returns The floating-point representation of the value, or `impossibleValue` if conversion fails.\n             *\n             * @example\n             * getToFloat(\"123.45\"); // 123.45\n             * getToFloat(42); // 42\n             * getToFloat(\"abc\", -1); // -1 (fallback value)\n             * getToFloat(null, 100.5); // 100.5 (fallback value)\n             */\n            getToFloat(value: any, impossibleValue: number = 0): number {\n                if (!hison.utils.isNumeric(value)) {\n                    return impossibleValue;\n                }\n                return parseFloat(value);\n            },\n            /**\n             * Converts the given value to an integer.\n             *\n             * - If the value is numeric, it is converted to an integer using `Math.trunc()`.\n             * - If the value is not a valid number, `impossibleValue` is returned instead.\n             *\n             * @param value The value to be converted.\n             * @param impossibleValue The fallback value if conversion fails (default: `0`).\n             * @returns The integer representation of the value, or `impossibleValue` if conversion fails.\n             *\n             * @example\n             * getToInteger(\"123.45\"); // 123\n             * getToInteger(42.9); // 42\n             * getToInteger(\"abc\", -1); // -1 (fallback value)\n             * getToInteger(null, 100); // 100 (fallback value)\n             */\n            getToInteger(value: any, impossibleValue: number = 0): number {\n                if (!hison.utils.isNumeric(value)) {\n                    return Math.trunc(impossibleValue);\n                }\n                return Math.trunc(parseInt(value, 10));\n            },\n            /**\n             * Converts the given value to a string.\n             *\n             * - If the value is already a string, it is returned as is.\n             * - If the value is a number, boolean, or bigint, it is converted to a string.\n             * - If the value is a symbol, its description is returned.\n             * - If the value is `null`, `undefined`, or an unsupported type, `impossibleValue` is returned.\n             *\n             * @param str The value to be converted.\n             * @param impossibleValue The fallback value if conversion fails (default: `\"\"`).\n             * @returns The string representation of the value, or `impossibleValue` if conversion fails.\n             *\n             * @example\n             * getToString(123); // \"123\"\n             * getToString(true); // \"true\"\n             * getToString(Symbol(\"test\")); // \"test\"\n             * getToString(null, \"N/A\"); // \"N/A\" (fallback value)\n             */\n            getToString(str: any, impossibleValue: string = ''): string {\n                if (typeof str === 'string') {\n                } else if (typeof str === 'number' || typeof str === 'boolean' || typeof str === 'bigint') {\n                    str = String(str);\n                } else if (typeof str === 'symbol') {\n                    str = (str as Symbol).description;\n                } else {\n                    str = impossibleValue;\n                }\n                return str;\n            },\n            //etc\n            /**\n             * Returns a default value if the given value is `null` or `undefined`.\n             *\n             * - If `val` is `null` or `undefined`, `defaultValue` is returned.\n             * - Otherwise, `val` is returned as is.\n             *\n             * @param val The value to check.\n             * @param defaultValue The default value to return if `val` is `null` or `undefined`.\n             * @returns The original value if not `null` or `undefined`, otherwise the `defaultValue`.\n             *\n             * @example\n             * nvl(null, \"default\"); // \"default\"\n             * nvl(undefined, 100); // 100\n             * nvl(\"Hello\", \"default\"); // \"Hello\"\n             * nvl(0, \"fallback\"); // 0 (not null or undefined, so returned as is)\n             */\n            nvl(val: any, defaultValue: any): any {\n                return (val === null || val === undefined) ? defaultValue : val;\n            },\n            /**\n             * Extracts the file extension from a given filename or file path.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Splits the string by `.` and returns the last segment as the file extension.\n             * - If no extension is found, an empty string is returned.\n             *\n             * @param str The filename or file path.\n             * @returns The file extension as a string, or an empty string if no extension exists.\n             *\n             * @example\n             * getFileExtension(\"document.txt\"); // \"txt\"\n             * getFileExtension(\"archive.tar.gz\"); // \"gz\"\n             * getFileExtension(\"/path/to/file\"); // \"\" (no extension)\n             */\n            getFileExtension(str: string): string {\n                str = hison.utils.getToString(str);\n            \n                const extension = str.split('.').pop();\n                if (extension === str) {\n                    return '';\n                }\n                return extension ? extension : '';\n            },\n            /**\n             * Extracts the filename (without extension) from a given file path or filename.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Extracts the last part of the path after the last `/` (or full filename if no path exists).\n             * - Removes the file extension by cutting the string at the last `.` if present.\n             *\n             * @param str The full file path or filename.\n             * @returns The filename without the extension.\n             *\n             * @example\n             * getFileName(\"/path/to/document.txt\"); // \"document\"\n             * getFileName(\"archive.tar.gz\"); // \"archive.tar\"\n             * getFileName(\"file_without_extension\"); // \"file_without_extension\"\n             */\n            getFileName(str: string): string {\n                str = hison.utils.getToString(str);\n            \n                const fileName = str.split('/').pop();\n                if(!fileName) return '';\n                const lastDotIndex = fileName.lastIndexOf('.');\n            \n                if (lastDotIndex === -1) return fileName;\n                return fileName.substring(0, lastDotIndex);\n            },\n            /**\n             * Decodes a Base64-encoded string into a human-readable format.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Uses `atob()` to decode the Base64 string.\n             * - Decodes percent-encoded UTF-8 characters to properly restore special characters.\n             *\n             * @param str The Base64-encoded string.\n             * @returns The decoded string.\n             *\n             * @example\n             * getDecodeBase64(\"SGVsbG8gd29ybGQh\"); // \"Hello world!\"\n             * getDecodeBase64(\"44GT44KT44Gr44Gh44Gv\"); // \"こんにちは\" (Japanese \"Hello\")\n             */\n            getDecodeBase64(str: string): string {\n                str = hison.utils.getToString(str);\n                return decodeURIComponent(Array.prototype.map.call(atob(str), function(c) {\n                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n                }).join(''));\n            },\n            /**\n             * Encodes a string into Base64 format.\n             *\n             * - Converts the input to a string if it is not already.\n             * - Uses `encodeURIComponent()` to properly handle special characters.\n             * - Encodes the string to Base64 using `btoa()`.\n             *\n             * @param str The input string to be encoded.\n             * @returns The Base64-encoded string.\n             *\n             * @example\n             * getEncodeBase64(\"Hello world!\"); // \"SGVsbG8gd29ybGQh\"\n             * getEncodeBase64(\"こんにちは\"); // \"44GT44KT44Gr44Gh44Gv\" (Japanese \"Hello\")\n             */\n            getEncodeBase64(str: string): string {\n                str = hison.utils.getToString(str);\n                return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(_, p1:string) {\n                    return String.fromCharCode(parseInt(p1, 16));\n                }));\n            },\n            /**\n             * Creates a deep copy of an object or array, preserving nested structures.\n             *\n             * - Handles `Object` and `Array` types recursively.\n             * - Supports cloning custom objects implementing `getIsDataWrapper()` or `getIsDataModel()`.\n             * - Prevents infinite loops by tracking previously copied references.\n             * - If the object is `null` or not an object, it is returned as is.\n             *\n             * @param object The object or array to be deep copied.\n             * @param visited An optional array to track visited references and prevent circular references.\n             * @returns A deep copy of the input object or array.\n             *\n             * @example\n             * const obj = { a: 1, b: { c: 2 } };\n             * const copy = deepCopyObject(obj);\n             * copy.b.c = 3;\n             * console.log(obj.b.c); // 2 (original object remains unchanged)\n             *\n             * const arr = [1, [2, 3]];\n             * const arrCopy = deepCopyObject(arr);\n             * arrCopy[1][0] = 99;\n             * console.log(arr[1][0]); // 2 (original array remains unchanged)\n             */\n            deepCopyObject(object: any, visited?: { source: any, copy: any }[]): any {\n                if (object === null || typeof object !== 'object') {\n                    return object;\n                }\n                if (object instanceof Response) {\n                    return object.clone();\n                }\n                if (object.constructor !== Object && object.constructor !== Array) {\n                    if ((object && object.getIsDataWrapper && object.getIsDataWrapper())\n                        ||(object && object.getIsDataModel && object.getIsDataModel())\n                    ) {\n                        return object.clone();\n                    } else {\n                        return object;\n                    }\n                }\n                if (!visited) visited = [];\n                for (let i = 0; i < visited.length; i++) {\n                    if (visited[i].source === object) {\n                        return visited[i].copy;\n                    }\n                }\n                let copy: any;\n                if (Array.isArray(object)) {\n                    copy = [];\n                    visited.push({ source: object, copy: copy });\n            \n                    for (let j = 0; j < object.length; j++) {\n                        copy[j] = hison.utils.deepCopyObject(object[j], visited);\n                    }\n                } else {\n                    copy = {};\n                    visited.push({ source: object, copy: copy });\n            \n                    for (let key in object) {\n                        if (object.hasOwnProperty(key)) {\n                            copy[key] = hison.utils.deepCopyObject(object[key], visited);\n                        }\n                    }\n                }\n                return copy;\n            },\n        };\n        shield = {\n            /**\n             * Executes security mechanisms for the given `Hison` object to enforce access restrictions and prevent unauthorized modifications.\n             *\n             * This function applies multiple layers of security, including:\n             * - **Object Freezing**: Prevents modification of the `Hison` object.\n             * - **Access Control by URL and IP**: Restricts access based on predefined security settings.\n             * - **Developer Tool Restrictions**: Prevents unauthorized debugging or tampering.\n             * - **Back Navigation Prevention**: Blocks browser back navigation if enabled.\n             *\n             * @param hison The main `Hison` object to be processed and optionally frozen for immutability.\n             *\n             * @throws Error If `hison` is not provided or is not a valid `Hison` instance.\n             *\n             * @remarks\n             * This function is designed to enhance security by enforcing strict runtime protections.\n             * It utilizes configuration settings from `customOption.shield` to determine the applied security policies.\n             *\n             * ---\n             * ## Security Features & Execution Flow\n             *\n             * ### 1. **Validation of `hison` Parameter**\n             * - If `hison` is not provided, an error is thrown:  \n             *   `\"Invalid arguments. Provide an object or a key-value pair.\"`\n             * - Ensures that the input is a valid `Hison` instance before executing security functions.\n             *\n             * ### 2. **Object Freezing (`isFreeze`)**\n             * - If `customOption.shield.isFreeze` is `true`, the `Hison` object is **deeply frozen**.\n             * - Uses the `deepFreeze()` function to recursively apply `Object.freeze()`, preventing any modifications.\n             *\n             * ### 3. **Access Control by URL (`shieldURL`)**\n             * - If `customOption.shield.shieldURL` is set:\n             *   - Ensures the current URL matches `shieldURL`. \n             *   - If the URL does not match, execution stops immediately.\n             *\n             * ### 4. **IP-Based Access Control (`exposeIpList`)**\n             * - If the request is **not from `localhost`**, it performs IP verification:\n             *   - Fetches the user's IP from `/ajax/getIp`.\n             *   - Compares the retrieved IP against `customOption.shield.exposeIpList`.\n             *   - If the IP is **not** in the list, additional restrictions are applied:\n             *     - **Back Navigation is Blocked** if `isPossibleGoBack` is `false`.\n             *     - **Developer Tools are Restricted** if `isPossibleOpenDevTool` is `false`.\n             *\n             * ### 5. **Back Navigation Prevention (`isPossibleGoBack`)**\n             * - If `customOption.shield.isPossibleGoBack` is `false`:\n             *   - Overrides the browser's back button functionality using `history.pushState()`.\n             *   - Registers an event listener to **prevent back navigation**.\n             *\n             * ### 6. **Developer Tool Restrictions (`isPossibleOpenDevTool`)**\n             * - If `customOption.shield.isPossibleOpenDevTool` is `false`:\n             *   - Blocks `F12` keypress to prevent opening developer tools.\n             *   - Uses `debugger` trick and event listeners (`resize`, `mousemove`, `focus`, `blur`) to detect dev tools.\n             *   - Displays a warning message and prevents further execution if dev tools are detected.\n             *\n             * ---\n             * ## Related Methods\n             * - `hison.setShieldURL(url: string)`\n             * - `hison.setExposeIpList(ipList: string[])`\n             * - `hison.setIsFreeze(state: boolean)`\n             * - `hison.setIsPossibleGoBack(state: boolean)`\n             * - `hison.setIsPossibleOpenDevTool(state: boolean)`\n             *\n             * @example\n             * // Execute security features for the Hison instance\n             * shield.excute(hison);\n             */\n            excute(hison: Hison) {\n                if (!hison) throw new Error(\"Invalid argument: 'hison' is required.\");\n                if (!hison.shield.isHison) throw new Error(\"Invalid argument: 'hison' must be an instance of Hison.\");\n\n                const deepFreeze = function(object: any) {\n                    const propNames = Object.getOwnPropertyNames(object);\n                \n                    propNames.forEach(function(name) {\n                        const prop = object[name];\n                \n                        if (typeof prop == 'object' && prop !== null) {\n                            deepFreeze(prop);\n                        }\n                    });\n                    \n                    return Object.freeze(object);\n                };\n                const shieldFuncGetIp = function(func: Function) {\n                    const httpRequest = new XMLHttpRequest();\n                    httpRequest.onreadystatechange = () => {\n                        if (httpRequest.readyState === XMLHttpRequest.DONE) {\n                            if (httpRequest.status === 200) {\n                                const result = httpRequest.response;\n                                func(result);\n                            } else {\n                                func(null);\n                            }\n                        }\n                    };\n                    httpRequest.open('get', '/ajax/getIp');\n                    httpRequest.responseType = 'json';\n                    httpRequest.send();\n                }\n                const shieldFuncCreateBlockDevMode = function() {\n                    const msg = 'Developer mode is not available.';\n                    document.onkeydown = function(event) {\n                        if (event.key === 'F12') {\n                            alert(msg);\n                            event.preventDefault();\n                            return false;\n                        }\n                    };\n                    \n                    function detectDevTool(allow?: any) {\n                        if (isNaN(+allow)) allow = 100;\n                        const start = +new Date();\n                        debugger;\n                        const end = +new Date();\n                        if (isNaN(start) || isNaN(end) || end - start > allow) {\n                            alert(msg);\n                            document.write(msg);\n                        }\n                    }\n                    \n                    window.addEventListener('load', detectDevTool);\n                    window.addEventListener('resize', detectDevTool);\n                    window.addEventListener('mousemove', detectDevTool);\n                    window.addEventListener('focus', detectDevTool);\n                    window.addEventListener('blur', detectDevTool);\n                }\n\n                if (customOption.shield.isFreeze) {\n                    deepFreeze(hison);\n                }\n                \n                if (location.href.indexOf('localhost') < 0){\n                    if (customOption.shield.shieldURL && location.href.indexOf(customOption.shield.shieldURL) < 0 ){\n                        return;\n                    }\n    \n                    shieldFuncGetIp(function(response: any) {\n                        const ip = response && response.ip ? response.ip : '';\n                        if (ip && customOption.shield.exposeIpList.indexOf(ip) >= 0) {\n                            return;\n                        }\n    \n                        if (!customOption.shield.isPossibleGoBack) {\n                            history.pushState(null, document.title, location.href);\n                            window.addEventListener('popstate', function() {\n                                history.pushState(null, document.title, location.href);\n                            });\n                        }\n                        \n                        if (!customOption.shield.isPossibleOpenDevTool) {\n                            shieldFuncCreateBlockDevMode();\n                            return;\n                        }\n                    });\n                }\n            }\n        };\n        data = {\n            /**\n             * The `DataWrapper` class provides a flexible key-value storage container\n             * within the `hisondev` solution. It allows storing various data types,\n             * including string value and `DataModel` instances.\n             *\n             * ## Core Features:\n             * - **Key-Value Storage:**\n             *   - Supports dynamic insertion and retrieval of key-value pairs.\n             *   - Ensures that keys are always strings.\n             * - **Integration with `DataModel`:**\n             *   - Allows storing `DataModel` instances under specific keys.\n             *   - Provides methods to retrieve `DataModel` instances safely.\n             * - **Serialization & Cloning:**\n             *   - Supports deep cloning of stored data.\n             *   - Provides JSON serialization for structured data handling.\n             * - **Validation & Type Safety:**\n             *   - Ensures type safety for values stored in `DataWrapper`.\n             *   - Throws errors when attempting to insert invalid types.\n             *\n             * ## Data Integrity & Deep Copying:\n             * - Uses `hison.utils.deepCopyObject()` to ensure stored objects are immutable.\n             * - Prevents unintended modifications by returning cloned values.\n             *\n             * ## Example Usage:\n             * ```typescript\n             * // Creating a DataWrapper with key-value pairs\n             * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n             * console.log(dataWrapper.getString(\"name\")); // Output: \"Alice\"\n             *\n             * // Storing a DataModel instance\n             * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n             * dataWrapper.putDataModel(\"users\", dataModel);\n             * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n             *\n             * // Serializing the DataWrapper to JSON\n             * console.log(dataWrapper.getSerialized());\n             * ```\n             */\n            DataWrapper : class implements InterfaceDataWrapper {\n                /**\n                 * Creates an instance of `DataWrapper`, which serves as a key-value storage container.\n                 * It allows storing various data types, including primitive values and `DataModel` instances.\n                 *\n                 * ## Parameters\n                 * - `keyOrObject` **(Object | string, optional)**: This parameter can be:\n                 *   - An **object** containing multiple key-value pairs, where each key is mapped to a value.\n                 *   - A **single string key** when paired with a `value` parameter.\n                 * - `value` **(*, optional)**: The value associated with the provided key. This parameter is \n                 *   required only when `keyOrObject` is a string.\n                 *\n                 * ## Behavior\n                 * - If an **object** is provided, all key-value pairs from the object are stored in the `DataWrapper`.\n                 * - If a **string and value** are provided, a single key-value pair is stored.\n                 * - If neither of these conditions are met, an error is thrown.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * // Creating a DataWrapper with an object\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * console.log(dataWrapper.getString(\"name\")); // Output: \"Alice\"\n                 *\n                 * // Creating a DataWrapper with a single key-value pair\n                 * const dataWrapper = new hison.data.DataWrapper(\"status\", \"active\");\n                 * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\n                 * ```\n                 *\n                 * @constructor\n                 */\n                constructor(keyOrObject?: Record<string, any> | string, value?: any) {\n                    this._data = {};\n                    if (keyOrObject === undefined) return;\n                    if (typeof keyOrObject === 'object' && keyOrObject !== null) {\n                        for (let key in keyOrObject) {\n                            this._put(key, keyOrObject[key]);\n                        }\n                    } else if (typeof keyOrObject === 'string' && value !== undefined) {\n                        this._put(keyOrObject, value);\n                    } else {\n                        throw new Error('Invalid arguments. Provide an object or a key-value pair.');\n                    }\n                }\n                private _data: Record<string, InterfaceDataModel | string | null>;\n                private _isDataWrapper = true;\n                private _put = (key: string, value: any) => {\n                    if (typeof key !== 'string') {\n                        throw new Error('Keys must always be strings.');\n                    } else if (typeof value === 'string') {\n                        this._data[key] = value;\n                    } else if (typeof value === 'number' || typeof value === 'boolean' || typeof value === 'bigint') {\n                        this._data[key] = String(value);\n                    } else if (typeof value === 'symbol') {\n                        this._data[key] = value.description ? value.description : null;\n                    } else if (value === null) {\n                        this._data[key] = null;\n                    } else if (value === undefined) {\n                        throw new Error('You can not put a value of undefined type.');\n                    } else if (typeof value === 'object') {\n                        if (!value || !value.getIsDataModel || !value.getIsDataModel()) {\n                            throw new Error('Please insert only values convertible to string or of data-model type.');\n                        }\n                        this._data[key] = value.clone();\n                    } else {\n                        throw new Error('Please insert only values convertible to string or of data-model type.');\n                    }\n                };\n                /**\n                 * Checks whether the current instance is a `DataWrapper`.\n                 * This method is primarily used for type verification.\n                 *\n                 * ## Returns\n                 * - **`boolean`**: Returns `true` if the instance is a `DataWrapper`, otherwise `false`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ key: \"value\" });\n                 * console.log(dataWrapper.getIsDataWrapper()); // Output: true\n                 * ```\n                 *\n                 * @returns {boolean} `true` if the instance is a `DataWrapper`, otherwise `false`.\n                 */\n                getIsDataWrapper = (): boolean => {\n                    return this._isDataWrapper;\n                };\n                /**\n                 * Creates and returns a deep copy of the current `DataWrapper` instance.\n                 * This method ensures that all stored key-value pairs are fully cloned, \n                 * preventing unintended modifications between the original and copied instances.\n                 *\n                 * ## Implementation Details\n                 * - Uses `hison.utils.deepCopyObject()` to recursively copy nested objects and arrays.\n                 * - Supports cloning `DataModel` instances stored within the `DataWrapper`.\n                 * - Prevents circular references by tracking previously copied objects.\n                 * - Ensures that modifications in the cloned instance do not affect the original instance.\n                 *\n                 * ## Returns\n                 * - **`DataWrapper`**: A new `DataWrapper` instance containing a deep copy of the original data.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * const clonedWrapper = dataWrapper.clone();\n                 * \n                 * console.log(clonedWrapper.getString(\"name\")); // Output: \"Alice\"\n                 * console.log(clonedWrapper !== dataWrapper);   // Output: true (Cloned instance is independent)\n                 *\n                 * // Deep copy verification\n                 * const originalNested = new hison.data.DataModel([{ id: 1, value: \"Test\" }]);\n                 * const dataWrapperWithModel = new hison.data.DataWrapper({ nested: originalNested });\n                 * const clonedWrapperWithModel = dataWrapperWithModel.clone();\n                 * \n                 * console.log(clonedWrapperWithModel.getDataModel(\"nested\") !== originalNested); // Output: true\n                 * ```\n                 *\n                 * @returns {InterfaceDataWrapper} A new `DataWrapper` instance with a deep copy of the stored data.\n                 */\n                clone = (): InterfaceDataWrapper | null => {\n                    const newData: Record<string, any> = {};\n                    for (let key in this._data) {\n                        newData[key] = hison.utils.deepCopyObject(this._data[key]);\n                    }\n                    return new hison.data.DataWrapper(newData);\n                };\n                /**\n                 * Removes all stored key-value pairs in the `DataWrapper`, resetting it to an empty state.\n                 * \n                 * ## Behavior\n                 * - Clears the internal storage by setting `_data` to an empty object.\n                 * - Returns the same `DataWrapper` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataWrapper`**: The current instance after clearing all stored data.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ key1: \"value1\", key2: \"value2\" });\n                 * console.log(dataWrapper.size()); // Output: 2\n                 * \n                 * dataWrapper.clear();\n                 * console.log(dataWrapper.size()); // Output: 0\n                 * ```\n                 *\n                 * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after clearing all data.\n                 */\n                clear = (): InterfaceDataWrapper => {\n                    this._data = {};\n                    return this;\n                };\n                /**\n                 * Serializes the `DataWrapper` into a JSON string representation.\n                 * Converts stored `DataModel` instances into their row data format for proper serialization.\n                 *\n                 * ## Behavior\n                 * - Iterates through all key-value pairs in the `DataWrapper`.\n                 * - If a value is a `DataModel`, it is converted to an array of rows using `getRows()`.\n                 * - Other values are stored as-is.\n                 * - The final object is serialized into a JSON string.\n                 *\n                 * ## Returns\n                 * - **`string`**: A JSON string representation of the `DataWrapper` contents.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * const dataWrapper = new hison.data.DataWrapper({ users: dataModel, status: \"active\" });\n                 * \n                 * console.log(dataWrapper.getSerialized());\n                 * // Output: '{\"users\":[{\"id\":1,\"name\":\"Alice\"}],\"status\":\"active\"}'\n                 * ```\n                 *\n                 * @returns {string} JSON string representation of the stored data.\n                 */\n                getSerialized = (): string => {\n                    const data: Record<string, any> = {};\n                    \n                    for (let key in this._data) {\n                        if (this._data.hasOwnProperty(key)) {\n                            if (this._data[key] && (this._data[key] as InterfaceDataModel).getIsDataModel && (this._data[key] as InterfaceDataModel).getIsDataModel()) {\n                                data[key] = (this._data[key] as InterfaceDataModel).getRows();\n                            } else {\n                                data[key] = this._data[key];\n                            }\n                        }\n                    }\n                    return JSON.stringify(data);\n                };\n                /**\n                 * Retrieves the value associated with the specified key from the `DataWrapper`.\n                 * If the value exists, a deep copy is returned to prevent unintended modifications.\n                 *\n                 * ## Parameters\n                 * - `key` **(string)**: The key associated with the value to retrieve.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - If the key exists, returns a deep copy of the stored value.\n                 * - If the key does not exist, returns `null`.\n                 *\n                 * ## Returns\n                 * - **`DataModel | string | null`**: A deep copy of the stored value, or `null` if the key is not found.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ message: \"Hello\", users: new hison.data.DataModel([{ id: 1 }]) });\n                 * \n                 * console.log(dataWrapper.get(\"message\")); // Output: \"Hello\"\n                 * console.log(dataWrapper.get(\"users\"));   // Output: Deep copy of the DataModel instance\n                 * console.log(dataWrapper.get(\"nonExistentKey\")); // Output: null\n                 * ```\n                 *\n                 * @param {string} key The key to retrieve the associated value.\n                 * @returns {DataModel | string | null} A deep copy of the stored value, or `null` if the key is not found.\n                 */\n                get = (key: string): InterfaceDataModel | string | null => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    return this._data[key] ? hison.utils.deepCopyObject(this._data[key]) : null;\n                };\n                /**\n                 * Retrieves the string value associated with the specified key from the `DataWrapper`.\n                 * Ensures that the retrieved value is explicitly a string before returning it.\n                 *\n                 * ## Parameters\n                 * - `key` **(string)**: The key associated with the string value to retrieve.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Throws an error if the value associated with `key` is not a string.\n                 * - Returns the string value if it exists; otherwise, returns `null`.\n                 *\n                 * ## Returns\n                 * - **`string | null`**: The associated string value, or `null` if the key is not found.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ status: \"active\", count: 5 });\n                 * \n                 * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\n                 * console.log(dataWrapper.getString(\"nonExistentKey\")); // Output: null\n                 *\n                 * // Throws an error: \"The data does not contain the specified string value.\"\n                 * console.log(dataWrapper.getString(\"count\"));\n                 * ```\n                 *\n                 * @param {string} key The key associated with the string value.\n                 * @returns {string | null} The associated string value, or `null` if not found.\n                 * @throws {Error} If the key is not a string or if the stored value is not a string.\n                 */\n                getString = (key: string): string | null => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    if (typeof this._data[key] !== 'string') throw new Error('The data does not contain the specified string value.');\n                    return this._data[key] ? this._data[key] as string : null;\n                };\n                /**\n                 * Retrieves the `DataModel` instance associated with the specified key from the `DataWrapper`.\n                 * Ensures that the retrieved value is a valid `DataModel` before returning a cloned copy.\n                 *\n                 * ## Parameters\n                 * - `key` **(string)**: The key associated with the `DataModel` instance to retrieve.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Throws an error if the value associated with `key` is not a valid `DataModel` instance.\n                 * - Returns a deep-cloned copy of the `DataModel` to maintain data integrity.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: A cloned `DataModel` instance retrieved from the `DataWrapper`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * const dataWrapper = new hison.data.DataWrapper({ users: dataModel });\n                 * \n                 * const clonedDataModel = dataWrapper.getDataModel(\"users\");\n                 * console.log(clonedDataModel.getRowCount()); // Output: 1\n                 *\n                 * // Throws an error: \"The data does not contain the specified data-model value.\"\n                 * console.log(dataWrapper.getDataModel(\"nonExistentKey\"));\n                 * ```\n                 *\n                 * @param {string} key The key associated with the `DataModel` instance.\n                 * @returns {InterfaceDataModel} A cloned `DataModel` instance retrieved from the `DataWrapper`.\n                 * @throws {Error} If the key is not a string or if the stored value is not a valid `DataModel`.\n                 */\n                getDataModel = (key: string): InterfaceDataModel => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    if (!this._data[key] || !(this._data[key] as InterfaceDataModel).getIsDataModel || !(this._data[key] as InterfaceDataModel).getIsDataModel()) throw new Error('The data does not contain the specified data-model value.');\n                    return (this._data[key] as InterfaceDataModel).clone();\n                };\n                /**\n                 * Inserts or updates a key-value pair in the `DataWrapper`.\n                 * Allows storing primitive values, strings, and `DataModel` instances.\n                 *\n                 * ## Parameters\n                 * - `key` **(string)**: The key under which the value will be stored.\n                 * - `value` **(any)**: The value to be stored. Can be a string, number, boolean, `DataModel`, or other valid types.\n                 *\n                 * ## Behavior\n                 * - Calls the internal `_put()` method to validate and store the value.\n                 * - If the key already exists, its value is updated.\n                 * - Returns the current `DataWrapper` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataWrapper`**: The current instance after inserting/updating the value.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper();\n                 * \n                 * // Storing a string value\n                 * dataWrapper.put(\"status\", \"active\");\n                 * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\n                 * \n                 * // Storing a DataModel instance\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * dataWrapper.put(\"users\", dataModel);\n                 * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n                 * ```\n                 *\n                 * @param {string} key The key under which the value is stored.\n                 * @param {any} value The value to store.\n                 * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\n                 */\n                put = (key: string, value: any): InterfaceDataWrapper => {\n                    this._put(key, value);\n                    return this;\n                };\n                /**\n                 * Inserts or updates a key-value pair in the `DataWrapper`, ensuring that the value is a string-convertible type.\n                 * Only accepts primitive types (`string`, `number`, `boolean`, `bigint`, `symbol`) or `null`.\n                 *\n                 * ## Parameters\n                 * - `key` **(string)**: The key under which the value will be stored.\n                 * - `value` **(string | number | boolean | bigint | symbol | null)**: The value to be stored, \n                 *   restricted to types that can be converted to a string.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Throws an error if `value` is not of a valid type.\n                 * - Calls the internal `_put()` method to store the value.\n                 * - Returns the current `DataWrapper` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataWrapper`**: The current instance after inserting/updating the value.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper();\n                 * \n                 * // Storing a string value\n                 * dataWrapper.putString(\"status\", \"active\");\n                 * console.log(dataWrapper.getString(\"status\")); // Output: \"active\"\n                 *\n                 * // Storing a number (converted to string internally)\n                 * dataWrapper.putString(\"count\", 10);\n                 * console.log(dataWrapper.getString(\"count\")); // Output: \"10\"\n                 *\n                 * // Throws an error: \"Please insert only values convertible to string type.\"\n                 * dataWrapper.putString(\"invalid\", { key: \"value\" });\n                 * ```\n                 *\n                 * @param {string} key The key under which the value is stored.\n                 * @param {string | number | boolean | bigint | symbol | null} value The value to store.\n                 * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\n                 * @throws {Error} If `key` is not a string or `value` is not a valid type.\n                 */\n                putString = (key: string, value: string | number | boolean | bigint | symbol | null): InterfaceDataWrapper => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    if (typeof value !== 'string'\n                        && typeof value !== 'number'\n                        && typeof value !== 'boolean'\n                        && typeof value !== 'bigint'\n                        && typeof value !== 'symbol'\n                        && value !== null) {\n                        throw new Error('Please insert only values convertible to string type.');\n                    }\n                    this._put(key, value);\n                    return this;\n                };\n                /**\n                 * Inserts or updates a `DataModel` instance in the `DataWrapper`.\n                 * Ensures that the stored value is a valid `DataModel`.\n                 *\n                 * ## Parameters\n                 * - `key` **(string)**: The key under which the `DataModel` will be stored.\n                 * - `value` **(`DataModel`)**: The `DataModel` instance to be stored.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Throws an error if `value` is not a valid `DataModel` instance.\n                 * - Calls the internal `_put()` method to store the `DataModel`.\n                 * - Returns the current `DataWrapper` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataWrapper`**: The current instance after inserting/updating the `DataModel`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper();\n                 * \n                 * // Creating and storing a DataModel\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * dataWrapper.putDataModel(\"users\", dataModel);\n                 * \n                 * console.log(dataWrapper.getDataModel(\"users\").getRowCount()); // Output: 1\n                 *\n                 * // Throws an error: \"Please insert only values of data-model type.\"\n                 * dataWrapper.putDataModel(\"invalid\", \"not a DataModel\");\n                 * ```\n                 *\n                 * @param {string} key The key under which the `DataModel` is stored.\n                 * @param {InterfaceDataModel} value The `DataModel` instance to store.\n                 * @returns {InterfaceDataWrapper} The current `DataWrapper` instance after insertion.\n                 * @throws {Error} If `key` is not a string or `value` is not a valid `DataModel`.\n                 */\n                putDataModel = (key: string, value: InterfaceDataModel): InterfaceDataWrapper => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    if (value === null || !value.getIsDataModel || !value.getIsDataModel()) {\n                        throw new Error('Please insert only values of data-model type.');\n                    }\n                    this._put(key, value);\n                    return this;\n                };\n                /**\n                 * Converts the `DataWrapper` instance into a standard JavaScript object.\n                 * If the stored values include `DataModel` instances, they are converted into object representations.\n                 *\n                 * ## Behavior\n                 * - Iterates through all key-value pairs in the `DataWrapper`.\n                 * - If a value is a `DataModel`, it is converted using `getObject()`.\n                 * - Other values are returned as-is.\n                 * - Returns a plain JavaScript object representation of the `DataWrapper`.\n                 *\n                 * ## Returns\n                 * - **`Record<string, any>`**: A plain object containing all stored key-value pairs.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * const dataWrapper = new hison.data.DataWrapper({ users: dataModel, status: \"active\" });\n                 * \n                 * console.log(dataWrapper.getObject());\n                 * // Output: { users: { cols: [\"id\", \"name\"], rows: [{ id: 1, name: \"Alice\" }] }, status: \"active\" }\n                 * ```\n                 *\n                 * @returns {Record<string, any>} A plain object representation of the `DataWrapper` instance.\n                 */\n                getObject = (): Record<string, any> => {\n                    const result: Record<string, any> = {};\n                    for(let key in this._data) {\n                        if (this._data[key] && (this._data[key] as InterfaceDataModel).getIsDataModel && (this._data[key] as InterfaceDataModel).getIsDataModel()) {\n                            result[key] = (this._data[key] as InterfaceDataModel).getObject();\n                        } else {\n                            result[key] = this._data[key];\n                        }\n                    }\n                    return result;\n                };\n                /**\n                 * Checks whether the `DataWrapper` contains a specified key.\n                 *\n                 * ## Parameters\n                 * - `key` **(string)**: The key to check for existence in the `DataWrapper`.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Uses `hasOwnProperty()` to determine if the key exists in the stored data.\n                 *\n                 * ## Returns\n                 * - **`boolean`**: `true` if the key exists, otherwise `false`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * \n                 * console.log(dataWrapper.containsKey(\"name\")); // Output: true\n                 * console.log(dataWrapper.containsKey(\"nonExistentKey\")); // Output: false\n                 * ```\n                 *\n                 * @param {string} key The key to check for existence.\n                 * @returns {boolean} `true` if the key exists, otherwise `false`.\n                 * @throws {Error} If `key` is not a string.\n                 */\n                containsKey = (key: string): boolean => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    return this._data.hasOwnProperty(key);\n                };\n                /**\n                 * Checks whether the `DataWrapper` is empty (i.e., contains no key-value pairs).\n                 *\n                 * ## Behavior\n                 * - Determines emptiness by checking if the number of stored keys is `0`.\n                 *\n                 * ## Returns\n                 * - **`boolean`**: `true` if the `DataWrapper` contains no data, otherwise `false`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper();\n                 * console.log(dataWrapper.isEmpty()); // Output: true\n                 * \n                 * dataWrapper.put(\"status\", \"active\");\n                 * console.log(dataWrapper.isEmpty()); // Output: false\n                 * ```\n                 *\n                 * @returns {boolean} `true` if the `DataWrapper` contains no data, otherwise `false`.\n                 */\n                isEmpty = (): boolean => {\n                    return Object.keys(this._data).length === 0;\n                };\n                /**\n                 * Removes a key-value pair from the `DataWrapper` if the key exists.\n                 *\n                 * ## Parameters\n                 * - `key` **(string)**: The key to be removed from the `DataWrapper`.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `key` is not a string.\n                 * - Checks if the key exists using `hasOwnProperty()`.\n                 * - If the key exists, it is deleted from the internal data storage.\n                 * - Returns an object containing the updated `DataWrapper` and a boolean indicating success.\n                 *\n                 * ## Returns\n                 * - **`{ data: DataWrapper, result: boolean }`**:\n                 *   - `data`: The current `DataWrapper` instance after attempting removal.\n                 *   - `result`: `true` if the key was successfully removed, otherwise `false`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * \n                 * console.log(dataWrapper.containsKey(\"name\")); // Output: true\n                 * \n                 * const { data: updatedWrapper, result } = dataWrapper.remove(\"name\");\n                 * console.log(result); // Output: true\n                 * console.log(updatedWrapper.containsKey(\"name\")); // Output: false\n                 *\n                 * const { result: nonExistentResult } = dataWrapper.remove(\"nonExistentKey\");\n                 * console.log(nonExistentResult); // Output: false\n                 * ```\n                 *\n                 * @param {string} key The key to remove from the `DataWrapper`.\n                 * @returns {{ data: InterfaceDataWrapper, result: boolean }} An object containing the updated `DataWrapper` and a success flag.\n                 * @throws {Error} If `key` is not a string.\n                 */\n                remove = (key: string): { data: InterfaceDataWrapper, result: boolean } => {\n                    if (typeof key !== 'string') throw new Error('Keys must always be strings.');\n                    let result = false;\n                    if (this._data.hasOwnProperty(key)) {\n                        result = true;\n                        delete this._data[key];\n                    }\n                    return { data: this, result };\n                };\n                /**\n                 * Returns the number of key-value pairs stored in the `DataWrapper`.\n                 *\n                 * ## Behavior\n                 * - Counts the number of keys present in the internal data storage.\n                 *\n                 * ## Returns\n                 * - **`number`**: The total number of stored key-value pairs.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * console.log(dataWrapper.size()); // Output: 2\n                 * \n                 * dataWrapper.put(\"status\", \"active\");\n                 * console.log(dataWrapper.size()); // Output: 3\n                 * ```\n                 *\n                 * @returns {number} The number of stored key-value pairs in the `DataWrapper`.\n                 */\n                size = (): number => {\n                    return Object.keys(this._data).length;\n                };\n                /**\n                 * Retrieves an array of all keys stored in the `DataWrapper`.\n                 *\n                 * ## Behavior\n                 * - Returns a list of all keys currently stored in the `DataWrapper`.\n                 * - If the `DataWrapper` is empty, returns an empty array.\n                 *\n                 * ## Returns\n                 * - **`string[]`**: An array containing all stored keys.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * console.log(dataWrapper.keys()); // Output: [\"name\", \"age\"]\n                 * \n                 * dataWrapper.clear();\n                 * console.log(dataWrapper.keys()); // Output: []\n                 * ```\n                 *\n                 * @returns {string[]} An array of keys stored in the `DataWrapper`.\n                 */\n                keys = (): string[] => {\n                    return Object.keys(this._data);\n                };\n                /**\n                 * Retrieves an array of all values stored in the `DataWrapper`.\n                 * Ensures that stored values are returned as deep copies to prevent unintended modifications.\n                 *\n                 * ## Behavior\n                 * - Iterates through all key-value pairs in the `DataWrapper`.\n                 * - Uses `hison.utils.deepCopyObject()` to return deep copies of stored values.\n                 * - If the `DataWrapper` is empty, returns an empty array.\n                 *\n                 * ## Returns\n                 * - **`any[]`**: An array containing deep copies of all stored values.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataWrapper = new hison.data.DataWrapper({ name: \"Alice\", age: 25 });\n                 * console.log(dataWrapper.values()); // Output: [\"Alice\", 25]\n                 * \n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * dataWrapper.put(\"users\", dataModel);\n                 * console.log(dataWrapper.values()); // Output: [\"Alice\", 25, <cloned DataModel>]\n                 * ```\n                 *\n                 * @returns {any[]} An array of deep-copied values stored in the `DataWrapper`.\n                 */\n                values = (): any[] => {\n                    const values = [];\n                    for (let key in this._data) {\n                        if (this._data.hasOwnProperty(key)) {\n                            values.push(hison.utils.deepCopyObject(this._data[key]));\n                        }\n                    }\n                    return values;\n                };\n            },\n            /**\n             * The `DataModel` class provides a structured way to manage tabular data within the `hisondev` solution.\n             * It is designed to store, manipulate, and retrieve data efficiently while ensuring type consistency\n             * and validation. \n             * \n             * ## Core Features:\n             * - **Column and Row Management:**\n             *   - Supports dynamic addition and removal of columns and rows.\n             *   - Ensures column consistency when inserting data.\n             * - **Validation and Formatting:**\n             *   - Allows setting a `DataModelValidator` to check column values.\n             *   - Supports `DataModelFormatter` to format column values uniformly.\n             * - **Filtering and Searching:**\n             *   - Provides methods to filter rows based on conditions (`filterRows()`, `searchRows()`).\n             *   - Allows searching rows and modifying data accordingly (`searchAndModify()`).\n             * - **Sorting and Structuring:**\n             *   - Supports ascending, descending, and reverse sorting on both columns and rows.\n             * - **Serialization and Cloning:**\n             *   - Enables deep copying of the entire `DataModel`.\n             *   - Provides `getSerialized()` to retrieve a JSON string of the model.\n             * - **Integration with `DataWrapper`**\n             *   - DataWrapper is an instance for storing DataModel.\n             *\n             * ## Data Consistency and Validation:\n             * - Uses `_deepCopy()` to ensure stored objects are immutable.\n             * - Prevents invalid data types using `_getValidRowValue()`.\n             * - Ensures uniform column data types to maintain consistency.\n             *\n             * ## Example Usage:\n             * ```typescript\n             * const dataModel = new hison.data.DataModel([\n             *     { id: 1, name: \"Alice\", age: 25 },\n             *     { id: 2, name: \"Bob\", age: 30 }\n             * ]);\n             * \n             * // Add a new column\n             * dataModel.addColumn(\"gender\");\n             * \n             * // Set a default value for a column\n             * dataModel.setColumnSameValue(\"gender\", \"Unknown\");\n             * \n             * // Apply a formatting function to the age column\n             * dataModel.setColumnSameFormat(\"age\", (value) => `${value} years old`);\n             * \n             * // Get filtered rows where age is greater than 25\n             * const filtered = dataModel.filterRows(row => row.age > 25);\n             * console.log(filtered);\n             * ```\n             *\n             * ## Related Functions:\n             * - `hison.setConvertValue()`: Sets the conversion logic for special values before insertion.\n             *\n             */\n            DataModel : class implements InterfaceDataModel {\n                /**\n                 * Creates a `DataModel` instance, which manages a structured table-like data format.\n                 * The instance allows for efficient row and column management.\n                 *\n                 * ## Parameters\n                 * - `data` **(Array | Object, optional)**: The initial dataset, which can be:\n                 *   - An **array of objects**, where each object represents a row and its keys represent columns.\n                 *   - An **array of strings**, which initializes column names.\n                 *   - A **single object**, representing a single-row initialization.\n                 *\n                 * ## Behavior\n                 * - If no data is provided, an empty `DataModel` is created.\n                 * - Calls `_put(data)`, which processes the input and initializes `_cols` and `_rows` accordingly.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: A new instance containing structured tabular data.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * // Creating a DataModel with an array of objects (rows)\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 *\n                 * console.log(dataModel.getRowCount()); // Output: 2\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 *\n                 * // Creating a DataModel with column names only\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 *\n                 * // Creating a DataModel with a single object (one row)\n                 * const dataModel = new hison.data.DataModel({ id: 1, name: \"Alice\" });\n                 * console.log(dataModel.getRowCount()); // Output: 1\n                 * ```\n                 *\n                 * @constructor\n                 * @param {Array | Object} [data] The initial dataset, which can be an array of objects, an array of column names, or a single object.\n                 * @returns {InterfaceDataModel} A new instance of `DataModel`.\n                 */\n                constructor(data?: Record<string, any>[] | Record<string, any>) {\n                    if (!data) return;\n                    this._put(data);\n                }\n                private _cols: string[] = [];\n                private _rows: Record<string, any>[] = [];\n                private _isDataModel = true;\n                private _deepCopy = (object: any, visited?: { source: any, copy: any }[]): any => {\n                    if (object === null || typeof object !== 'object') {\n                        return object;\n                    }\n                    if (object.constructor !== Object && object.constructor !== Array) {\n                        const convertValue = customOption.data.convertValue(object);\n                        return convertValue !== undefined ? convertValue : object;\n                    }\n                    if (!visited) visited = [];\n                    for (let i = 0; i < visited.length; i++) {\n                        if (visited[i].source === object) {\n                            return visited[i].copy;\n                        }\n                    }\n                    let copy: any;\n                    if (Array.isArray(object)) {\n                        copy = [];\n                        visited.push({ source: object, copy: copy });\n                \n                        for (let j = 0; j < object.length; j++) {\n                            copy[j] = this._deepCopy(object[j], visited);\n                        }\n                    } else {\n                        copy = {};\n                        visited.push({ source: object, copy: copy });\n                \n                        for (let key in object) {\n                            if (object.hasOwnProperty(key)) {\n                                copy[key] = this._deepCopy(object[key], visited);\n                            }\n                        }\n                    }\n                    return copy;\n                };\n                private _isPositiveIntegerIncludingZero = (value: string | number | bigint): boolean => {\n                    if (typeof value !== 'number' && typeof value !== 'string' && typeof value !== 'bigint') {\n                        return false;\n                    }\n                    value = String(value);\n                    const intNum = parseInt(value, 10);\n                    const floatNum = parseFloat(value);\n                    if (intNum !== floatNum || isNaN(intNum) || intNum < 0) {\n                        return false;\n                    }\n                    return true;\n                };\n                private _getValidRowIndex = (rowIndex: number): number => {\n                    if (!this._isPositiveIntegerIncludingZero(rowIndex)) {\n                        throw new Error('Invalid number type. It should be a number or a string that can be converted to a number.');\n                    }\n                    const index = Number(rowIndex);\n                    if (index < 0 || index >= this._rows.length) {\n                        throw new Error(`Invalid rowIndex value. It should be within the range of the rows.\\nrange: between 0 and ${this._rows.length - 1}\\ninsert rowIndex : ${index}`);\n                    }\n                    return index;\n                }\n                private _isConvertibleString = (value: any): boolean => {\n                    if (value === undefined) throw new Error('You can not put a value of undefined type.');\n                    if (value === null) return true;\n                    if (['string','number','boolean','bigint','symbol'].indexOf(typeof value) >= 0) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                };\n                private _hasColumn = (column: string): boolean => {\n                    return this._cols.indexOf(column) >= 0\n                };\n                private _checkColumn = (column: string) => {\n                    if (!this._hasColumn(column)) {\n                        throw new Error('The column does not exist. column : ' + column);\n                    }\n                };\n                private _checkValidFunction = (func: Function) => {\n                    if (!func || typeof func !== 'function') {\n                        throw new Error('Please insert the valid function.');\n                    }\n                };\n                private _checkBoolean = (value: boolean) => {\n                    if (typeof value !== 'boolean') {\n                        throw new Error('Please pass an boolean as a parameter.');\n                    }\n                };\n                private _checkOriginObject = (value: Object) => {\n                    if (value.constructor !== Object) {\n                        throw new Error('Please pass an object with its own key-value pairs as a parameter.');\n                    }\n                };\n                private _checkArray = (value: any[]) => {\n                    if (value.constructor !== Array) {\n                        throw new Error('Please pass an array.');\n                    }\n                };\n                private _getColumnType = (rowIndex: number, col: string): string => {\n                    if (rowIndex === 0) return 'null';\n                    for(let index = rowIndex - 1; index >= 0; index--) {\n                        if (this._rows[index][col]) {\n                            if (typeof this._rows[index][col] === 'object') {\n                                return this._rows[index][col].constructor;\n                            }\n                            return typeof this._rows[index][col];\n                        }\n                    }\n                    return 'null';\n                };\n                private _makeValue = (value: any): any => {\n                    let result = value;\n                    /*if (typeof value === 'string') {\n                        result = value;\n                    } else if (typeof value === 'number' || typeof value === 'boolean' || typeof value === 'bigint') {\n                        result = String(value);\n                    } else if (typeof value === 'symbol') {\n                        result = value.description;\n                    } else if (value === null) {\n                        result = null;\n                    } else */if (typeof value === 'object') {\n                        if ((value && value.getIsDataWrapper && value.getIsDataWrapper())\n                            || (value && value.getIsDataModel && value.getIsDataModel())\n                        ) {\n                            throw new Error('You cannot insert a datawrapper or datamodel within a datamodel.');\n                        }\n                        result = this._deepCopy(value);\n                    }\n                    return result;\n                };\n                private _getValidColValue = (value: string): string => {\n                    value = this._makeValue(value);\n                    if (!this._isConvertibleString(value)) {\n                        throw new Error('Only strings can be inserted into columns.');\n                    }\n                    if (!value) {\n                        throw new Error('Column cannot be null.');\n                    }\n                    return value;\n                }\n                private _getValidRowValue = (rowIndex: number, col: string, value: any): any => {\n                    value = this._makeValue(value);\n                    const chkType = this._getColumnType(rowIndex, col);\n                    if (chkType !== 'null' && value !== null) {\n                        if (typeof value === 'object') {\n                            if (value.constructor !== chkType) {\n                                throw new Error('Data of the same type must be inserted into the same column. column : ' + col);\n                            }\n                        } else {\n                            if (typeof value !== 'object' && typeof value !== chkType) {\n                                throw new Error('Data of the same type must be inserted into the same column. column : ' + col);\n                            }\n                        }\n                    }\n                    return value;\n                }\n                private _addCol = (value: string) => {\n                    value = this._getValidColValue(value);\n                    if (this._cols.indexOf(value) === -1) {\n                        this._cols.push(value);\n                    } else {\n                        throw new Error('There are duplicate columns to add. column : ' + value);\n                    }\n                }\n                private _addRow = (rowIndex: number, row: Record<string, any>) => {\n                    if (!row) {\n                        throw new Error('Please insert vaild object');\n                    }\n                    if (row.constructor !== Object) {\n                        throw new Error('Please insert object with their own key-value pairs.');\n                    }\n                    if (Object.keys(row).length === 0) return;\n                    if (this._cols.length === 0) {\n                        for (const key in row) {\n                            this._addCol(key);\n                        }\n                    }\n                    const tempRow: Record<string, any> = {};\n                    for(const col of this._cols) {\n                        if (row.hasOwnProperty(col)) {\n                            tempRow[col] = this._getValidRowValue(rowIndex, col, row[col]);\n                        }\n                        else {\n                            tempRow[col] = null;\n                        }\n                    }\n                    this._rows.push(tempRow);\n                }\n                private _put = (data: Record<string, any>[] | Record<string, any>) => {\n                    let rowIndex = this._rows.length;\n                    if (Array.isArray(data)) {\n                        if (data.length === 0) return;\n                        if (this._isConvertibleString(data[0])) {\n                            for(const col of data) {\n                                this._addCol(col);\n                            }\n                            return;\n                        } else {\n                            for(const row of data) {\n                                this._addRow(rowIndex, row);\n                                rowIndex++;\n                            }\n                            return;\n                        }\n                    } else if (typeof data === 'object') {\n                        if (data && (data as InterfaceDataWrapper).getIsDataWrapper && (data as InterfaceDataWrapper).getIsDataWrapper()) {\n                            throw new Error('You cannot construct a datamodel with datawrapper.');\n                        } else if (data && (data as InterfaceDataModel).getIsDataModel && (data as InterfaceDataModel).getIsDataModel()){\n                            for(const row of (data as InterfaceDataModel).getRows() ) {\n                                this._addRow(rowIndex, row);\n                                rowIndex++;\n                            }\n                            return;\n                        } else if (data.constructor === Object) {\n                            this._addRow(rowIndex, data);\n                            return;\n                        }\n                    }\n                    throw new Error('Please insert array contains objects with their own key-value pairs, array contains strings or only object of key-value pairs.');\n                };\n                private _getNullColumnFirstRowIndex = (column: string): number => {\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    for(let i = 0; i < this._rows.length; i++) {\n                        if (this._rows[i][column] === null) return i;\n                    }\n                    return -1;\n                };\n                private _getDuplColumnFirstRowIndex = (column: string): number => {\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    const checkedValues: string[] = [];\n                    for(let i = 0; i < this._rows.length; i++) {\n                        if (checkedValues.includes(JSON.stringify(this._rows[i][column]))) {\n                            return i;\n                        }\n                        if (this._rows[i][column] !== null) {\n                            checkedValues.push(JSON.stringify(this._rows[i][column]));\n                        }\n                    }\n                    return -1;\n                };\n                private _getInValidColumnFirstRowIndex = (column: string, validator: DataModelValidator): number => {\n                    this._checkValidFunction(validator);\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    \n                    for(let i = 0; i < this._rows.length; i++) {\n                        if (!validator(this._rows[i][column])) {\n                            return i;\n                        }\n                    }\n                    return -1;\n                };\n                /**\n                 * Checks whether the current instance is a `DataModel`.\n                 * This method is primarily used for type verification.\n                 *\n                 * ## Returns\n                 * - **`boolean`**: Returns `true` if the instance is a `DataModel`, otherwise `false`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * console.log(dataModel.getIsDataModel()); // Output: true\n                 * ```\n                 *\n                 * @returns {boolean} `true` if the instance is a `DataModel`, otherwise `false`.\n                 */\n                getIsDataModel = (): boolean => {\n                    return this._isDataModel;\n                };\n                /**\n                 * Creates and returns a deep copy of the current `DataModel` instance.\n                 * The cloned instance contains independent copies of all stored rows, \n                 * ensuring that modifications in the cloned instance do not affect the original instance.\n                 *\n                 * ## Behavior\n                 * - Uses the internal `_rows` data to initialize a new `DataModel` instance.\n                 * - Ensures that all row data is duplicated to maintain data integrity.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: A new `DataModel` instance containing a copy of the original rows.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * const clonedModel = dataModel.clone();\n                 * \n                 * console.log(clonedModel.getRowCount()); // Output: 1\n                 * console.log(clonedModel !== dataModel); // Output: true (Cloned instance is independent)\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel} A new `DataModel` instance with a copy of the stored rows.\n                 */\n                clone = (): InterfaceDataModel => {\n                    return new hison.data.DataModel(this._rows);\n                };\n                /**\n                 * Removes all stored rows and columns from the `DataModel`, resetting it to an empty state.\n                 * \n                 * ## Behavior\n                 * - Clears the `_cols` array, removing all column definitions.\n                 * - Clears the `_rows` array, removing all stored data.\n                 * - Returns the same `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The current instance after clearing all stored data.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * console.log(dataModel.getRowCount()); // Output: 1\n                 * \n                 * dataModel.clear();\n                 * console.log(dataModel.getRowCount()); // Output: 0\n                 * console.log(dataModel.getColumns());  // Output: []\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel} The current `DataModel` instance after clearing all data.\n                 */\n                clear = (): InterfaceDataModel => {\n                    this._cols = [];\n                    this._rows = [];\n                    return this;\n                };\n                /**\n                 * Serializes the `DataModel` instance into a JSON string representation.\n                 * Converts the stored row data into a JSON format for easy storage or transmission.\n                 *\n                 * ## Behavior\n                 * - Uses `JSON.stringify()` to serialize the `_rows` array.\n                 * - Column definitions (`_cols`) are not included in the serialized output.\n                 *\n                 * ## Returns\n                 * - **`string`**: A JSON string representation of the stored row data.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getSerialized());\n                 * // Output: '[{\"id\":1,\"name\":\"Alice\"},{\"id\":2,\"name\":\"Bob\"}]'\n                 * ```\n                 *\n                 * @returns {string} JSON string representation of the stored row data.\n                 */\n                getSerialized = (): string => {\n                    return JSON.stringify(this._rows);\n                };\n                /**\n                 * Checks whether the `DataModel` has defined columns.\n                 * This method determines if the `DataModel` has been initialized with at least one column.\n                 *\n                 * ## Behavior\n                 * - Returns `true` if `_cols` contains at least one column.\n                 * - Returns `false` if no columns have been defined.\n                 *\n                 * ## Returns\n                 * - **`boolean`**: `true` if columns are defined, otherwise `false`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n                 * console.log(dataModel.isDeclare()); // Output: true\n                 * \n                 * const emptyModel = new hison.data.DataModel();\n                 * console.log(emptyModel.isDeclare()); // Output: false\n                 * ```\n                 *\n                 * @returns {boolean} `true` if columns are defined, otherwise `false`.\n                 */\n                isDeclare = (): boolean => {\n                    return this._cols.length > 0;\n                };\n                /**\n                 * Retrieves an array of all column names defined in the `DataModel`.\n                 * Returns a deep copy of the `_cols` array to prevent unintended modifications.\n                 *\n                 * ## Behavior\n                 * - Uses `_deepCopy()` to return a copy of `_cols`, ensuring data integrity.\n                 * - If no columns are defined, returns an empty array.\n                 *\n                 * ## Returns\n                 * - **`string[]`**: An array of column names.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 * \n                 * const emptyModel = new hison.data.DataModel();\n                 * console.log(emptyModel.getColumns()); // Output: []\n                 * ```\n                 *\n                 * @returns {string[]} An array containing the column names.\n                 */\n                getColumns = (): string[] => {\n                    return this._deepCopy(this._cols);\n                };\n                /**\n                 * Retrieves an array of all values in the specified column.\n                 * Ensures that returned values are deep copies to prevent unintended modifications.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The column name from which to retrieve values.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `column` is not a valid string.\n                 * - Throws an error if the specified column does not exist.\n                 * - Iterates through all rows and extracts the values of the specified column.\n                 * - Uses `_deepCopy()` to return deep copies of the values.\n                 *\n                 * ## Returns\n                 * - **`any[]`**: An array containing all values from the specified column.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getColumnValues(\"name\")); // Output: [\"Alice\", \"Bob\"]\n                 *\n                 * // Throws an error: \"The column does not exist.\"\n                 * console.log(dataModel.getColumnValues(\"age\"));\n                 * ```\n                 *\n                 * @param {string} column The column name from which to retrieve values.\n                 * @returns {any[]} An array of values from the specified column.\n                 * @throws {Error} If the column is invalid or does not exist.\n                 */\n                getColumnValues = (column: string): any[] => {\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    const result = [];\n                    for(const row of this._rows) {\n                        result.push(this._deepCopy(row[column]));\n                    }\n                    return result;\n                };\n                /**\n                 * Adds a new column to the `DataModel`.\n                 * Ensures that all existing rows include the new column with a default value of `null`.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to be added.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `column` is not a valid string.\n                 * - Calls `_addCol(column)` to validate and add the column.\n                 * - Iterates through `_rows` and ensures each row includes the new column, assigning `null` if missing.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The current instance after adding the new column.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 * \n                 * dataModel.addColumn(\"age\");\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n                 * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\", age: null }\n                 * ```\n                 *\n                 * @param {string} column The name of the column to add.\n                 * @returns {InterfaceDataModel} The current `DataModel` instance after adding the column.\n                 * @throws {Error} If the column is invalid or already exists.\n                 */\n                addColumn = (column: string): InterfaceDataModel => {\n                    this._addCol(column);\n                    for(const row of this._rows) {\n                        if (!row.hasOwnProperty(column)) {\n                            row[column] = null;\n                        }\n                    }\n                    return this;\n                };\n                /**\n                 * Adds multiple new columns to the `DataModel`.\n                 * Ensures that all existing rows include the newly added columns with a default value of `null`.\n                 *\n                 * ## Parameters\n                 * - `columns` **(string[])**: An array of column names to be added.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `columns` is not an array.\n                 * - Iterates through the provided column names and calls `_addCol(column)` to validate and add each column.\n                 * - Ensures that all existing rows include the new columns, assigning `null` if missing.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The current instance after adding the new columns.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 * \n                 * dataModel.addColumns([\"age\", \"email\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\", \"email\"]\n                 * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\", age: null, email: null }\n                 * ```\n                 *\n                 * @param {string[]} columns An array of column names to add.\n                 * @returns {InterfaceDataModel} The current `DataModel` instance after adding the columns.\n                 * @throws {Error} If `columns` is not an array or contains invalid column names.\n                 */\n                addColumns = (columns: string[]): InterfaceDataModel => {\n                    if (!Array.isArray(columns)) {\n                        throw new Error('Only array contains strings can be inserted into columns.');\n                    }\n                    for(const column of columns) {\n                        this._addCol(column);\n                        for(const row of this._rows) {\n                            if (!row.hasOwnProperty(column)) {\n                                row[column] = null;\n                            }\n                        }\n                    }\n                    return this;\n                };\n                /**\n                 * Sets the same value for all rows in the specified column.\n                 * If the column does not exist, it is created before assigning values.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to update.\n                 * - `value` **(any)**: The value to be assigned to all rows in the specified column.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `value` is `undefined`.\n                 * - Calls `_getValidColValue(column)` to validate the column name.\n                 * - If the column does not exist, `_addCol(column)` is called to add it.\n                 * - Iterates through all rows and assigns the specified value using `_getValidRowValue()`.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The current instance after setting the column values.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }]);\n                 * \n                 * // Set the same value for all rows in the \"status\" column\n                 * dataModel.setColumnSameValue(\"status\", \"active\");\n                 * console.log(dataModel.getColumnValues(\"status\")); // Output: [\"active\", \"active\"]\n                 * \n                 * // If the column does not exist, it is created automatically\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"status\"]\n                 * ```\n                 *\n                 * @param {string} column The name of the column to set the value for.\n                 * @param {any} value The value to assign to all rows in the column.\n                 * @returns {InterfaceDataModel} The current `DataModel` instance after updating the column.\n                 * @throws {Error} If `value` is `undefined` or if the column name is invalid.\n                 */\n                setColumnSameValue = (column: string, value: any): InterfaceDataModel => {\n                    if (value === undefined) throw new Error('You can not put a value of undefined type.');\n                    column = this._getValidColValue(column);\n                    if (!this._hasColumn(column)) this._addCol(column);\n                    let rowIndex = 0;\n                    for(const row of this._rows) {\n                        row[column] = this._getValidRowValue(rowIndex, column, value);\n                        rowIndex++;\n                    }\n                    return this;\n                };\n                /**\n                 * Applies a formatting function to all values in the specified column.\n                 * The formatter function transforms each row's value in the column.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to format.\n                 * - `formatter` **(`DataModelFormatter`)**: A function that takes a value and returns a formatted version of it.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `formatter` is not a valid function.\n                 * - Calls `_getValidColValue(column)` to validate the column name.\n                 * - Throws an error if the specified column does not exist.\n                 * - Iterates through all rows and applies the `formatter` function to each value in the column.\n                 * - Ensures that the formatted value is valid using `_getValidRowValue()`.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The current instance after formatting the column values.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, price: 1000 },\n                 *     { id: 2, price: 2000 }\n                 * ]);\n                 * \n                 * // Format the \"price\" column by adding a currency symbol\n                 * dataModel.setColumnSameFormat(\"price\", value => `$${value}`);\n                 * console.log(dataModel.getColumnValues(\"price\")); // Output: [\"$1000\", \"$2000\"]\n                 * \n                 * // Throws an error if the column does not exist\n                 * // dataModel.setColumnSameFormat(\"discount\", value => `${value}%`);\n                 * ```\n                 *\n                 * @param {string} column The name of the column to format.\n                 * @param {DataModelFormatter} formatter A function that transforms each value in the column.\n                 * @returns {InterfaceDataModel} The current `DataModel` instance after formatting the column.\n                 * @throws {Error} If `formatter` is not a function or if the column does not exist.\n                 */\n                setColumnSameFormat = (column: string, formatter: DataModelFormatter): InterfaceDataModel => {\n                    this._checkValidFunction(formatter);\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    let rowIndex = 0;\n                    for(const row of this._rows) {\n                        row[column] = this._getValidRowValue(rowIndex, column, formatter(row[column]));\n                        rowIndex++;\n                    }\n                    return this;\n                };\n                /**\n                 * Retrieves a deep copy of the row at the specified index.\n                 * Ensures that modifications to the returned row do not affect the original data.\n                 *\n                 * ## Parameters\n                 * - `rowIndex` **(number)**: The index of the row to retrieve.\n                 *\n                 * ## Behavior\n                 * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n                 * - Uses `_deepCopy()` to return a copy of the row, preventing unintended modifications.\n                 *\n                 * ## Returns\n                 * - **`Record<string, any>`**: A deep copy of the row data as an object.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRow(0)); // Output: { id: 1, name: \"Alice\" }\n                 *\n                 * // Throws an error if the index is out of bounds\n                 * // console.log(dataModel.getRow(10));\n                 * ```\n                 *\n                 * @param {number} rowIndex The index of the row to retrieve.\n                 * @returns {Record<string, any>} A deep copy of the row data.\n                 * @throws {Error} If `rowIndex` is out of bounds.\n                 */\n                getRow = (rowIndex: number): Record<string, any> => {\n                    return this._deepCopy(this._rows[this._getValidRowIndex(rowIndex)]);\n                };\n                /**\n                 * Retrieves the row at the specified index as a new `DataModel` instance.\n                 * Converts the row object into a `DataModel` for further structured operations.\n                 *\n                 * ## Parameters\n                 * - `rowIndex` **(number)**: The index of the row to retrieve.\n                 *\n                 * ## Behavior\n                 * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n                 * - Initializes a new `DataModel` using the retrieved row data.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: A new `DataModel` instance containing the specified row.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * const rowDataModel = dataModel.getRowAsDataModel(0);\n                 * console.log(rowDataModel.getRowCount()); // Output: 1\n                 * console.log(rowDataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 *\n                 * // Throws an error if the index is out of bounds\n                 * // console.log(dataModel.getRowAsDataModel(10));\n                 * ```\n                 *\n                 * @param {number} rowIndex The index of the row to retrieve.\n                 * @returns {InterfaceDataModel} A new `DataModel` instance containing the row data.\n                 * @throws {Error} If `rowIndex` is out of bounds.\n                 */\n                getRowAsDataModel = (rowIndex: number): InterfaceDataModel => {\n                    return new hison.data.DataModel(this._rows[this._getValidRowIndex(rowIndex)]);\n                };\n                /**\n                 * Adds a new row to the `DataModel` at the specified index or appends it to the end.\n                 * If no parameters are provided, an empty row is added.\n                 *\n                 * ## Parameters\n                 * - `rowIndexOrRow` **(number | Object, optional)**: The index at which to insert the row, or the row data to insert.\n                 * - `row` **(Object, optional)**: The row data to insert (only required when `rowIndexOrRow` is a number).\n                 *\n                 * ## Behavior\n                 * - If **no parameters** are provided, an empty row is appended.\n                 * - If **only a number is provided**, an empty row is inserted at that index.\n                 * - If **only an object is provided**, it is inserted as a new row at the end.\n                 * - If **both a number and an object are provided**, the row is inserted at the specified index.\n                 * - Throws an error if attempting to add a row without first defining columns.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The current instance after adding the new row.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n                 * \n                 * // Add an empty row\n                 * dataModel.addRow();\n                 * console.log(dataModel.getRowCount()); // Output: 1\n                 * console.log(dataModel.getRow(0)); // Output: { id: null, name: null }\n                 * \n                 * // Add a row with data\n                 * dataModel.addRow({ id: 1, name: \"Alice\" });\n                 * console.log(dataModel.getRow(1)); // Output: { id: 1, name: \"Alice\" }\n                 * \n                 * // Insert a row at index 1\n                 * dataModel.addRow(1, { id: 2, name: \"Bob\" });\n                 * console.log(dataModel.getRow(1)); // Output: { id: 2, name: \"Bob\" }\n                 * \n                 * // Throws an error: \"Please define the column first.\"\n                 * // new hison.data.DataModel().addRow();\n                 * ```\n                 *\n                 * @param {number | Object} [rowIndexOrRow] The index at which to insert the row, or the row data.\n                 * @param {Object} [row] The row data to insert (only required if `rowIndexOrRow` is a number).\n                 * @returns {InterfaceDataModel} The current `DataModel` instance after adding the row.\n                 * @throws {Error} If columns are not defined or parameters are invalid.\n                 */\n                addRow = (rowIndexOrRow?: number | Record<string, any>, row?: Record<string, any>): InterfaceDataModel => {\n                    if (rowIndexOrRow === undefined && row === undefined) {\n                        if (this._cols.length <= 0) {\n                            throw new Error('Please define the column first.');\n                        }\n                        const emptyRow: Record<string, any> = {};\n                        for (const col of this._cols) {\n                            emptyRow[col] = null;\n                        }\n                        this._rows.push(emptyRow);\n                    } else if (typeof rowIndexOrRow === 'number' && row === undefined) {\n                        if (this._cols.length <= 0) {\n                            throw new Error('Please define the column first.');\n                        }\n                        const validIndex = rowIndexOrRow >= this._rows.length ? this._rows.length : this._getValidRowIndex(rowIndexOrRow);\n                        const emptyRow: Record<string, any> = {};\n                        for (const col of this._cols) {\n                            emptyRow[col] = null;\n                        }\n                        this._rows.splice(validIndex, 0, emptyRow);\n                    } else if (typeof rowIndexOrRow === 'object' && row === undefined) {\n                        this._addRow(this._rows.length, rowIndexOrRow);\n                    } else if (typeof rowIndexOrRow === 'number' && typeof row === 'object') {\n                        const validIndex = rowIndexOrRow >= this._rows.length ? this._rows.length : this._getValidRowIndex(rowIndexOrRow);\n                        this._addRow(validIndex, row);\n                        const newRow: Record<string, any> | undefined = this._rows.pop();\n                        if(newRow) this._rows.splice(validIndex, 0, newRow);\n                    } else {\n                        throw new Error('Invalid parameters for addRow method.');\n                    }\n                    return this;\n                };\n                /**\n                 * Retrieves a deep copy of a range of rows from the `DataModel`.\n                 * Ensures that modifications to the returned rows do not affect the original data.\n                 *\n                 * ## Parameters\n                 * - `startRow` **(number, optional, default = `0`)**: The starting index of the row range.\n                 * - `endRow` **(number, optional, default = `null`)**: The ending index of the row range (inclusive).\n                 *\n                 * ## Behavior\n                 * - Calls `_getValidRowIndex(startRow)` and `_getValidRowIndex(endRow)` to validate row indices.\n                 * - If `endRow` is `null`, retrieves rows from `startRow` to the last row.\n                 * - Uses `_deepCopy()` to ensure the returned rows are independent copies.\n                 *\n                 * ## Returns\n                 * - **`Record<string, any>[]`**: An array of deep-copied row objects.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRows()); \n                 * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n                 * \n                 * console.log(dataModel.getRows(1, 2)); \n                 * // Output: [{ id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n                 * \n                 * // Throws an error if startRow or endRow is out of bounds\n                 * // console.log(dataModel.getRows(5));\n                 * ```\n                 *\n                 * @param {number} [startRow=0] The starting index of the row range.\n                 * @param {number} [endRow=null] The ending index of the row range (inclusive).\n                 * @returns {Record<string, any>[]} An array of deep-copied rows.\n                 * @throws {Error} If `startRow` or `endRow` is out of bounds.\n                 */\n                getRows = (startRow: number = 0, endRow: number | null = null): Record<string, any>[] => {\n                    const sRow = this._getValidRowIndex(startRow);\n                    if(sRow === 0 && endRow === null) return this._deepCopy(this._rows);\n                    const eRow = endRow ? this._getValidRowIndex(endRow) : this._rows.length;\n                    const result = [];\n                    for(let i = sRow; i <= eRow; i++) {\n                        if(!this._rows[i]) break;\n                        result.push(this._deepCopy(this._rows[i]));\n                    }\n                    return result;\n                };\n                /**\n                 * Retrieves a range of rows as a new `DataModel` instance.\n                 * Ensures that the returned `DataModel` contains independent copies of the selected rows.\n                 *\n                 * ## Parameters\n                 * - `startRow` **(number, optional, default = `0`)**: The starting index of the row range.\n                 * - `endRow` **(number, optional, default = `null`)**: The ending index of the row range (inclusive).\n                 *\n                 * ## Behavior\n                 * - Calls `_getValidRowIndex(startRow)` and `_getValidRowIndex(endRow)` to validate row indices.\n                 * - If `startRow` is `0` and `endRow` is `null`, returns a clone of the entire `DataModel`.\n                 * - Uses `_deepCopy()` to ensure the returned rows are independent.\n                 * - Returns a new `DataModel` containing the selected rows.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: A new `DataModel` instance containing the selected row range.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * const newModel = dataModel.getRowsAsDataModel(1, 2);\n                 * console.log(newModel.getRowCount()); // Output: 2\n                 * console.log(newModel.getRow(0)); // Output: { id: 2, name: \"Bob\" }\n                 *\n                 * // Retrieves all rows as a new DataModel\n                 * const clonedModel = dataModel.getRowsAsDataModel();\n                 * console.log(clonedModel.getRowCount()); // Output: 3\n                 * ```\n                 *\n                 * @param {number} [startRow=0] The starting index of the row range.\n                 * @param {number} [endRow=null] The ending index of the row range (inclusive).\n                 * @returns {InterfaceDataModel} A new `DataModel` instance containing the selected rows.\n                 * @throws {Error} If `startRow` or `endRow` is out of bounds.\n                 */\n                getRowsAsDataModel = (startRow: number = 0, endRow: number | null = null): InterfaceDataModel => {\n                    const sRow = this._getValidRowIndex(startRow);\n                    if(sRow === 0 && endRow === null) return this.clone();\n                    const eRow = endRow ? this._getValidRowIndex(endRow) : this._rows.length;\n                    const result = [];\n                    for(let i = sRow; i <= eRow; i++) {\n                        if(!this._rows[i]) break;\n                        result.push(this._deepCopy(this._rows[i]));\n                    }\n                    return new hison.data.DataModel(result);\n                };\n                /**\n                 * Adds multiple rows to the `DataModel`.\n                 * Each row is validated and inserted into the existing dataset.\n                 *\n                 * ## Parameters\n                 * - `rows` **(`Record<string, any>[]`)**: An array of row objects to be added.\n                 *\n                 * ## Behavior\n                 * - Calls `_put(rows)` to process and insert the provided rows.\n                 * - Ensures that column structures are maintained.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The current instance after adding the new rows.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n                 * \n                 * // Add multiple rows\n                 * dataModel.addRows([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRowCount()); // Output: 2\n                 * console.log(dataModel.getRow(1)); // Output: { id: 2, name: \"Bob\" }\n                 * ```\n                 *\n                 * @param {Record<string, any>[]} rows An array of row objects to add.\n                 * @returns {InterfaceDataModel} The current `DataModel` instance after adding the rows.\n                 * @throws {Error} If `rows` contain invalid data.\n                 */\n                addRows = (rows: Record<string, any>[]): InterfaceDataModel => {\n                    this._put(rows);\n                    return this;\n                };\n                /**\n                 * Converts the `DataModel` instance into a standard JavaScript object.\n                 * The returned object includes column definitions, row data, and metadata.\n                 *\n                 * ## Behavior\n                 * - Uses `_deepCopy()` to ensure that returned data is independent of the original `DataModel`.\n                 * - Includes the following properties in the returned object:\n                 *   - `cols`: An array of column names.\n                 *   - `rows`: An array of row objects.\n                 *   - `colCount`: The total number of columns.\n                 *   - `rowCount`: The total number of rows.\n                 *   - `isDeclare`: A boolean indicating whether columns are defined.\n                 *\n                 * ## Returns\n                 * - **`Record<string, any>`**: A plain object representing the `DataModel` structure.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getObject());\n                 * // Output:\n                 * // {\n                 * //   cols: [\"id\", \"name\"],\n                 * //   rows: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }],\n                 * //   colCount: 2,\n                 * //   rowCount: 2,\n                 * //   isDeclare: true\n                 * // }\n                 * ```\n                 *\n                 * @returns {Record<string, any>} A plain object representing the `DataModel` structure.\n                 */\n                getObject = (): Record<string, any> => {\n                    const result: Record<string, any> = {};\n                    const copyCol = this._deepCopy(this._cols);\n                    const copyRow = this._deepCopy(this._rows);\n        \n                    result['cols'] = copyCol;\n                    result['rows'] = copyRow;\n                    result['colCount'] = copyCol.length;\n                    result['rowCount'] = copyRow.length;\n                    result['isDeclare'] = this.isDeclare();\n                    return result;\n                };\n                /**\n                 * Retrieves the value at the specified row index and column name.\n                 * Ensures that the returned value is a deep copy to prevent unintended modifications.\n                 *\n                 * ## Parameters\n                 * - `rowIndex` **(number)**: The index of the row from which to retrieve the value.\n                 * - `column` **(string)**: The name of the column containing the desired value.\n                 *\n                 * ## Behavior\n                 * - Calls `_getValidColValue(column)` to validate the column name.\n                 * - Throws an error if the specified column does not exist.\n                 * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n                 * - Uses `_deepCopy()` to return an independent copy of the value.\n                 *\n                 * ## Returns\n                 * - **`any`**: A deep copy of the value stored at the specified row and column.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getValue(0, \"name\")); // Output: \"Alice\"\n                 * \n                 * // Throws an error if the column does not exist\n                 * // console.log(dataModel.getValue(0, \"age\"));\n                 * ```\n                 *\n                 * @param {number} rowIndex The index of the row to retrieve the value from.\n                 * @param {string} column The column name containing the value.\n                 * @returns {any} A deep copy of the value stored at the specified row and column.\n                 * @throws {Error} If `rowIndex` or `column` is invalid.\n                 */\n                getValue = (rowIndex: number, column: string): any => {\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    return this._deepCopy(this._rows[this._getValidRowIndex(rowIndex)][column]);\n                };\n                /**\n                 * Sets a value at the specified row index and column name.\n                 * Ensures that the value is valid and maintains data integrity.\n                 *\n                 * ## Parameters\n                 * - `rowIndex` **(number)**: The index of the row where the value should be set.\n                 * - `column` **(string)**: The name of the column where the value should be stored.\n                 * - `value` **(any)**: The value to be assigned to the specified row and column.\n                 *\n                 * ## Behavior\n                 * - Throws an error if `value` is `undefined`.\n                 * - Calls `_getValidColValue(column)` to validate the column name.\n                 * - Throws an error if the specified column does not exist.\n                 * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n                 * - Calls `_getValidRowValue(rowIndex, column, value)` to ensure the value is properly formatted.\n                 * - Updates the value at the specified row and column.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The current instance after updating the value.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * dataModel.setValue(0, \"name\", \"Charlie\");\n                 * console.log(dataModel.getValue(0, \"name\")); // Output: \"Charlie\"\n                 *\n                 * // Throws an error if trying to set `undefined`\n                 * // dataModel.setValue(1, \"name\", undefined);\n                 *\n                 * // Throws an error if the column does not exist\n                 * // dataModel.setValue(0, \"age\", 25);\n                 * ```\n                 *\n                 * @param {number} rowIndex The index of the row where the value should be set.\n                 * @param {string} column The column name where the value should be stored.\n                 * @param {any} value The value to assign.\n                 * @returns {InterfaceDataModel} The current `DataModel` instance after updating the value.\n                 * @throws {Error} If `value` is `undefined` or if `rowIndex` or `column` is invalid.\n                 */\n                setValue = (rowIndex: number, column: string, value: any): InterfaceDataModel => {\n                    if (value === undefined) throw new Error('You can not put a value of undefined type.');\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    this._rows[this._getValidRowIndex(rowIndex)][column] = this._getValidRowValue(rowIndex, column, value);\n                    return this;\n                };\n                /**\n                 * Removes a column from the `DataModel`, deleting its values from all rows.\n                 * Ensures that the column exists before attempting removal.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to remove.\n                 *\n                 * ## Behavior\n                 * - Calls `_getValidColValue(column)` to validate the column name.\n                 * - Throws an error if the specified column does not exist.\n                 * - Iterates through all rows and removes the specified column.\n                 * - Updates `_cols` to exclude the removed column.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The current instance after removing the column.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 }\n                 * ]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n                 * \n                 * dataModel.removeColumn(\"age\");\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 *\n                 * // Throws an error if the column does not exist\n                 * // dataModel.removeColumn(\"salary\");\n                 * ```\n                 *\n                 * @param {string} column The name of the column to remove.\n                 * @returns {InterfaceDataModel} The current `DataModel` instance after removing the column.\n                 * @throws {Error} If `column` is invalid or does not exist.\n                 */\n                removeColumn = (column: string): InterfaceDataModel => {\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    for(const row of this._rows) {\n                        delete row[column]\n                    }\n                    this._cols = this._cols.filter(oriColumn => oriColumn !== column);\n                    return this;\n                };\n                /**\n                 * Removes multiple columns from the `DataModel`, deleting their values from all rows.\n                 * Ensures that each specified column exists before attempting removal.\n                 *\n                 * ## Parameters\n                 * - `columns` **(string[])**: An array of column names to remove.\n                 *\n                 * ## Behavior\n                 * - Iterates through the `columns` array and calls `removeColumn(column)` for each entry.\n                 * - If any column does not exist, `removeColumn` will throw an error.\n                 * - Returns the current `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The current instance after removing the specified columns.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25, city: \"New York\" },\n                 *     { id: 2, name: \"Bob\", age: 30, city: \"Los Angeles\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\", \"city\"]\n                 * \n                 * dataModel.removeColumns([\"age\", \"city\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 *\n                 * // Throws an error if a column does not exist\n                 * // dataModel.removeColumns([\"salary\", \"bonus\"]);\n                 * ```\n                 *\n                 * @param {string[]} columns An array of column names to remove.\n                 * @returns {InterfaceDataModel} The current `DataModel` instance after removing the columns.\n                 * @throws {Error} If any column does not exist.\n                 */\n                removeColumns = (columns: string[]): InterfaceDataModel => {\n                    for(const column of columns) {\n                        this.removeColumn(column);\n                    }\n                    return this;\n                };\n                /**\n                 * Removes a row from the `DataModel` at the specified index and returns the removed row.\n                 * Ensures that the row index is valid before removal.\n                 *\n                 * ## Parameters\n                 * - `rowIndex` **(number, optional, default = `0`)**: The index of the row to remove.\n                 *\n                 * ## Behavior\n                 * - Calls `_getValidRowIndex(rowIndex)` to validate the row index.\n                 * - Uses `splice()` to remove the row from `_rows` and returns the removed row.\n                 *\n                 * ## Returns\n                 * - **`Record<string, any>`**: The removed row object.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRowCount()); // Output: 3\n                 * \n                 * const removedRow = dataModel.removeRow(1);\n                 * console.log(removedRow); // Output: { id: 2, name: \"Bob\" }\n                 * console.log(dataModel.getRowCount()); // Output: 2\n                 *\n                 * // Throws an error if rowIndex is out of bounds\n                 * // dataModel.removeRow(10);\n                 * ```\n                 *\n                 * @param {number} [rowIndex=0] The index of the row to remove.\n                 * @returns {Record<string, any>} The removed row object.\n                 * @throws {Error} If `rowIndex` is out of bounds.\n                 */\n                removeRow = (rowIndex: number = 0): Record<string, any> => {\n                    return this._rows.splice(this._getValidRowIndex(rowIndex), 1)[0];\n                };\n                /**\n                 * Retrieves the total number of columns in the `DataModel`.\n                 *\n                 * ## Behavior\n                 * - Returns the length of the `_cols` array, which represents the column definitions.\n                 *\n                 * ## Returns\n                 * - **`number`**: The total number of columns in the `DataModel`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\", \"age\"]);\n                 * console.log(dataModel.getColumnCount()); // Output: 3\n                 * \n                 * dataModel.removeColumn(\"age\");\n                 * console.log(dataModel.getColumnCount()); // Output: 2\n                 * ```\n                 *\n                 * @returns {number} The number of columns in the `DataModel`.\n                 */\n                getColumnCount = (): number => {\n                    return this._cols.length;\n                };\n                /**\n                 * Retrieves the total number of rows in the `DataModel`.\n                 *\n                 * ## Behavior\n                 * - Returns the length of the `_rows` array, which represents the stored data rows.\n                 *\n                 * ## Returns\n                 * - **`number`**: The total number of rows in the `DataModel`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRowCount()); // Output: 2\n                 * \n                 * dataModel.addRow({ id: 3, name: \"Charlie\" });\n                 * console.log(dataModel.getRowCount()); // Output: 3\n                 * ```\n                 *\n                 * @returns {number} The number of rows in the `DataModel`.\n                 */\n                getRowCount = (): number => {\n                    return this._rows.length;\n                };\n                /**\n                 * Checks whether the `DataModel` contains a specified column.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to check.\n                 *\n                 * ## Behavior\n                 * - Calls `_hasColumn(column)` to determine if the column exists.\n                 * - Returns `true` if the column is found in `_cols`, otherwise `false`.\n                 *\n                 * ## Returns\n                 * - **`boolean`**: `true` if the column exists, otherwise `false`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\"]);\n                 * \n                 * console.log(dataModel.hasColumn(\"name\")); // Output: true\n                 * console.log(dataModel.hasColumn(\"age\")); // Output: false\n                 * ```\n                 *\n                 * @param {string} column The column name to check.\n                 * @returns {boolean} `true` if the column exists, otherwise `false`.\n                 */\n                hasColumn = (column: string): boolean => {\n                    return this._hasColumn(column);\n                };\n                /**\n                 * Restricts the `DataModel` to only the specified columns by removing all other columns.\n                 * Ensures that only the columns listed in `columns` remain in the dataset.\n                 *\n                 * ## Parameters\n                 * - `columns` **(string[])**: An array of column names to keep in the `DataModel`.\n                 *\n                 * ## Behavior\n                 * - Filters `_cols` to identify columns that are **not** in the provided `columns` list.\n                 * - Calls `removeColumns()` to remove those columns from the dataset.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with only the specified columns retained.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 }\n                 * ]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n                 * \n                 * // Keep only \"id\" and \"name\" columns\n                 * dataModel.setValidColumns([\"id\", \"name\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\"]\n                 * ```\n                 *\n                 * @param {string[]} columns An array of column names to retain.\n                 * @returns {InterfaceDataModel} The modified `DataModel` instance with only the specified columns retained.\n                 */\n                setValidColumns = (columns: string[]): InterfaceDataModel => {\n                    columns = this._cols.filter(oriColumn => !columns.includes(oriColumn));\n                    this.removeColumns(columns);\n                    return this;\n                };\n                /**\n                 * Checks whether a specified column contains only non-null values.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to check.\n                 *\n                 * ## Behavior\n                 * - Calls `_getNullColumnFirstRowIndex(column)` to find the first occurrence of a `null` value in the column.\n                 * - If no `null` values are found, returns `true`; otherwise, returns `false`.\n                 *\n                 * ## Returns\n                 * - **`boolean`**: `true` if the column has no `null` values, otherwise `false`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: null },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.isNotNullColumn(\"id\")); // Output: true\n                 * console.log(dataModel.isNotNullColumn(\"name\")); // Output: false\n                 * ```\n                 *\n                 * @param {string} column The column name to check.\n                 * @returns {boolean} `true` if the column has no `null` values, otherwise `false`.\n                 * @throws {Error} If `column` does not exist.\n                 */\n                isNotNullColumn = (column: string): boolean => {\n                    return this._getNullColumnFirstRowIndex(column) === -1;\n                };\n                /**\n                 * Finds and returns the first row where the specified column contains a `null` value.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to check.\n                 *\n                 * ## Behavior\n                 * - Calls `_getNullColumnFirstRowIndex(column)` to locate the first occurrence of a `null` value in the column.\n                 * - If no `null` values are found, returns `null`.\n                 * - If a `null` value is found, retrieves and returns the corresponding row using `getRow()`.\n                 *\n                 * ## Returns\n                 * - **`Record<string, any> | null`**: The first row where the column has a `null` value, or `null` if no such row exists.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: null },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.findFirstRowNullColumn(\"name\"));\n                 * // Output: { id: 2, name: null }\n                 * \n                 * console.log(dataModel.findFirstRowNullColumn(\"id\"));\n                 * // Output: null (no null values in the \"id\" column)\n                 * ```\n                 *\n                 * @param {string} column The column name to check for `null` values.\n                 * @returns {Record<string, any> | null} The first row where the column has a `null` value, or `null` if none exist.\n                 * @throws {Error} If `column` does not exist.\n                 */\n                findFirstRowNullColumn = (column: string): Record<string, any> | null => {\n                    const nullColumnFirstRowIndex = this._getNullColumnFirstRowIndex(column);\n                    if (nullColumnFirstRowIndex === -1) {\n                        return null\n                    } else {\n                        return this.getRow(nullColumnFirstRowIndex);\n                    }\n                };\n                /**\n                 * Checks whether a specified column contains only unique values (i.e., no duplicate values).\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to check.\n                 *\n                 * ## Behavior\n                 * - Calls `_getDuplColumnFirstRowIndex(column)` to find the first occurrence of a duplicate value in the column.\n                 * - If no duplicates are found, returns `true`; otherwise, returns `false`.\n                 *\n                 * ## Returns\n                 * - **`boolean`**: `true` if the column has no duplicate values, otherwise `false`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Alice\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.isNotDuplColumn(\"id\")); // Output: true\n                 * console.log(dataModel.isNotDuplColumn(\"name\")); // Output: false\n                 * ```\n                 *\n                 * @param {string} column The column name to check for duplicate values.\n                 * @returns {boolean} `true` if the column has no duplicate values, otherwise `false`.\n                 * @throws {Error} If `column` does not exist.\n                 */\n                isNotDuplColumn = (column: string): boolean => {\n                    return this._getDuplColumnFirstRowIndex(column) === -1;\n                };\n                /**\n                 * Finds and returns the first row where the specified column contains a duplicate value.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to check for duplicate values.\n                 *\n                 * ## Behavior\n                 * - Calls `_getDuplColumnFirstRowIndex(column)` to locate the first occurrence of a duplicate value in the column.\n                 * - If no duplicate values are found, returns `null`.\n                 * - If a duplicate value is found, retrieves and returns the corresponding row using `getRow()`.\n                 *\n                 * ## Returns\n                 * - **`Record<string, any> | null`**: The first row where the column has a duplicate value, or `null` if no duplicates exist.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Alice\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.findFirstRowDuplColumn(\"name\"));\n                 * // Output: { id: 3, name: \"Alice\" } (the second occurrence of \"Alice\")\n                 * \n                 * console.log(dataModel.findFirstRowDuplColumn(\"id\"));\n                 * // Output: null (no duplicate values in the \"id\" column)\n                 * ```\n                 *\n                 * @param {string} column The column name to check for duplicate values.\n                 * @returns {Record<string, any> | null} The first row where the column has a duplicate value, or `null` if none exist.\n                 * @throws {Error} If `column` does not exist.\n                 */\n                findFirstRowDuplColumn = (column: string): Record<string, any> | null => {\n                    const duplColumnFirstRowIndex = this._getDuplColumnFirstRowIndex(column);\n                    if (duplColumnFirstRowIndex === -1) {\n                        return null\n                    } else {\n                        return this.getRow(duplColumnFirstRowIndex);\n                    }\n                };\n                /**\n                 * Checks whether all values in the specified column satisfy a given validation function.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to validate.\n                 * - `validator` **(`DataModelValidator`)**: A function that takes a value as input and returns `true` if the value is valid.\n                 *\n                 * ## Behavior\n                 * - Calls `_getInValidColumnFirstRowIndex(column, validator)` to check for invalid values.\n                 * - If no invalid values are found, returns `true`; otherwise, returns `false`.\n                 *\n                 * ## Returns\n                 * - **`boolean`**: `true` if all values in the column are valid, otherwise `false`.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, age: 25 },\n                 *     { id: 2, age: 30 },\n                 *     { id: 3, age: \"invalid\" }\n                 * ]);\n                 * \n                 * // Check if all values in \"age\" column are valid numbers\n                 * console.log(dataModel.isValidValue(\"age\", value => typeof value === \"number\"));\n                 * // Output: false\n                 * \n                 * console.log(dataModel.isValidValue(\"id\", value => typeof value === \"number\"));\n                 * // Output: true\n                 * ```\n                 *\n                 * @param {string} column The column name to validate.\n                 * @param {DataModelValidator} validator A function that checks if a value is valid.\n                 * @returns {boolean} `true` if all values in the column are valid, otherwise `false`.\n                 * @throws {Error} If `column` does not exist or `validator` is not a function.\n                 */\n                isValidValue = (column: string, vaildator: DataModelValidator): boolean => {\n                    return this._getInValidColumnFirstRowIndex(column, vaildator) === -1;\n                };\n                /**\n                 * Finds and returns the first row where the specified column contains an invalid value based on a given validation function.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The name of the column to validate.\n                 * - `validator` **(`DataModelValidator`)**: A function that takes a value as input and returns `true` if the value is valid.\n                 *\n                 * ## Behavior\n                 * - Calls `_getInValidColumnFirstRowIndex(column, validator)` to locate the first occurrence of an invalid value in the column.\n                 * - If no invalid values are found, returns `null`.\n                 * - If an invalid value is found, retrieves and returns the corresponding row using `getRow()`.\n                 *\n                 * ## Returns\n                 * - **`Record<string, any> | null`**: The first row where the column has an invalid value, or `null` if all values are valid.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, age: 25 },\n                 *     { id: 2, age: \"invalid\" },\n                 *     { id: 3, age: 30 }\n                 * ]);\n                 * \n                 * // Find the first row where \"age\" contains a non-numeric value\n                 * console.log(dataModel.findFirstRowInvalidValue(\"age\", value => typeof value === \"number\"));\n                 * // Output: { id: 2, age: \"invalid\" }\n                 * \n                 * console.log(dataModel.findFirstRowInvalidValue(\"id\", value => typeof value === \"number\"));\n                 * // Output: null (all values in \"id\" are valid)\n                 * ```\n                 *\n                 * @param {string} column The column name to validate.\n                 * @param {DataModelValidator} validator A function that checks if a value is valid.\n                 * @returns {Record<string, any> | null} The first row with an invalid value, or `null` if all values are valid.\n                 * @throws {Error} If `column` does not exist or `validator` is not a function.\n                 */\n                findFirstRowInvalidValue = (column: string, vaildator: DataModelValidator): Record<string, any> | null => {\n                    const inValidColumnFirstRowIndex = this._getInValidColumnFirstRowIndex(column, vaildator);\n                    if (inValidColumnFirstRowIndex === -1) {\n                        return null\n                    } else {\n                        return this.getRow(inValidColumnFirstRowIndex);\n                    }\n                };\n                /**\n                 * Searches for rows that match a given condition and returns their indexes.\n                 * Allows for both positive and negative filtering based on the `isNegative` flag.\n                 *\n                 * ## Parameters\n                 * - `condition` **(Record<string, any>)**: An object representing the key-value conditions to match.\n                 * - `isNegative` **(boolean, optional, default = `false`)**: If `true`, returns indexes of rows that **do not** match the condition.\n                 *\n                 * ## Behavior\n                 * - Calls `_checkOriginObject(condition)` to ensure the condition is a valid object.\n                 * - Calls `_checkBoolean(isNegative)` to validate the boolean flag.\n                 * - Iterates through `_rows`, checking if each row meets the condition.\n                 * - Uses `JSON.stringify()` for deep comparison of values.\n                 * - If `isNegative` is `false`, adds matching row indexes to the result.\n                 * - If `isNegative` is `true`, adds **non-matching** row indexes to the result.\n                 *\n                 * ## Returns\n                 * - **`number[]`**: An array of indexes of rows that match (or do not match) the condition.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 25 }\n                 * ]);\n                 * \n                 * // Search for row indexes where age is 25\n                 * console.log(dataModel.searchRowIndexes({ age: 25 }));\n                 * // Output: [0, 2]\n                 * \n                 * // Search for row indexes where age is NOT 25\n                 * console.log(dataModel.searchRowIndexes({ age: 25 }, true));\n                 * // Output: [1]\n                 * ```\n                 *\n                 * @param {Record<string, any>} condition The key-value condition to match.\n                 * @param {boolean} [isNegative=false] If `true`, returns indexes of rows that do **not** match the condition.\n                 * @returns {number[]} An array of indexes of rows that match or do not match the condition.\n                 * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n                 */\n                searchRowIndexes = (condition: Record<string, any>, isNegative: boolean = false): number[] => {\n                    const _this = this;\n                    _this._checkOriginObject(condition);\n                    _this._checkBoolean(isNegative);\n                    const matched: number[] = [];\n                    _this._rows.forEach(function(row, index) {\n                        let matchesCondition = true;\n                        for (const key in condition) {\n                            _this._checkColumn(key);\n                            if ((JSON.stringify(row[key]) !== JSON.stringify(condition[key]))) {\n                                matchesCondition = false;\n                                break;\n                            }\n                        }\n                        if (isNegative) {\n                            if (!matchesCondition) matched.push(index);\n                        } else {\n                            if (matchesCondition) matched.push(index);\n                        }\n                    });\n                    return matched;\n                };\n                /**\n                 * Searches for rows that match a given condition and returns them as an array.\n                 * Allows for both positive and negative filtering based on the `isNegative` flag.\n                 *\n                 * ## Parameters\n                 * - `condition` **(Record<string, any>)**: An object representing the key-value conditions to match.\n                 * - `isNegative` **(boolean, optional, default = `false`)**: If `true`, returns rows that **do not** match the condition.\n                 *\n                 * ## Behavior\n                 * - Calls `_checkOriginObject(condition)` to ensure the condition is a valid object.\n                 * - Calls `_checkBoolean(isNegative)` to validate the flag.\n                 * - Iterates through `_rows`, checking if each row meets the condition.\n                 * - Uses `JSON.stringify()` for deep comparison of values.\n                 * - If `isNegative` is `false`, adds matching rows to the result.\n                 * - If `isNegative` is `true`, adds **non-matching** rows to the result.\n                 * - Returns a deep copy of the matched rows.\n                 *\n                 * ## Returns\n                 * - **`Record<string, any>[]`**: An array of deep-copied rows that match (or do not match) the condition.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 25 }\n                 * ]);\n                 * \n                 * // Search for rows where age is 25\n                 * console.log(dataModel.searchRows({ age: 25 }));\n                 * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\n                 * \n                 * // Search for rows where age is NOT 25\n                 * console.log(dataModel.searchRows({ age: 25 }, true));\n                 * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\n                 * ```\n                 *\n                 * @param {Record<string, any>} condition The key-value condition to match.\n                 * @param {boolean} [isNegative=false] If `true`, returns rows that do **not** match the condition.\n                 * @returns {Record<string, any>[]} An array of deep-copied rows that match or do not match the condition.\n                 * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n                 */\n                searchRows = (condition: Record<string, any>, isNegative: boolean = false): Record<string, any>[] => {\n                    const _this = this;\n                    _this._checkOriginObject(condition);\n                    _this._checkBoolean(isNegative);\n                    const matched: Record<string, any>[] = [];\n                    _this._rows.forEach(function(row) {\n                        let matchesCondition = true;\n                        for (const key in condition) {\n                            _this._checkColumn(key);\n                            if ((JSON.stringify(row[key]) !== JSON.stringify(condition[key]))) {\n                                matchesCondition = false;\n                                break;\n                            }\n                        }\n                        if (isNegative) {\n                            if (!matchesCondition) matched.push(_this._deepCopy(row));\n                        } else {\n                            if (matchesCondition) matched.push(_this._deepCopy(row));\n                        }\n                    });\n                    return matched;\n                };\n                /**\n                 * Searches for rows that match a given condition and returns them as a new `DataModel` instance.\n                 * Allows for both positive and negative filtering based on the `isNegative` flag.\n                 *\n                 * ## Parameters\n                 * - `condition` **(Record<string, any>)**: An object representing the key-value conditions to match.\n                 * - `isNegative` **(boolean, optional, default = `false`)**: If `true`, returns rows that **do not** match the condition.\n                 *\n                 * ## Behavior\n                 * - Calls `_checkOriginObject(condition)` to ensure the condition is a valid object.\n                 * - Calls `_checkBoolean(isNegative)` to validate the boolean flag.\n                 * - Iterates through `_rows`, checking if each row meets the condition.\n                 * - Uses `JSON.stringify()` for deep comparison of values.\n                 * - If `isNegative` is `false`, adds matching rows to the result.\n                 * - If `isNegative` is `true`, adds **non-matching** rows to the result.\n                 * - Returns a new `DataModel` containing the filtered rows.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: A new `DataModel` instance containing the matched rows.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 25 }\n                 * ]);\n                 * \n                 * // Search for rows where age is 25 and return them as a new DataModel\n                 * const filteredModel = dataModel.searchRowsAsDataModel({ age: 25 });\n                 * console.log(filteredModel.getRowCount()); // Output: 2\n                 * console.log(filteredModel.getRows());\n                 * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\n                 * \n                 * // Search for rows where age is NOT 25\n                 * const excludedModel = dataModel.searchRowsAsDataModel({ age: 25 }, true);\n                 * console.log(excludedModel.getRows());\n                 * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\n                 * ```\n                 *\n                 * @param {Record<string, any>} condition The key-value condition to match.\n                 * @param {boolean} [isNegative=false] If `true`, returns rows that do **not** match the condition.\n                 * @returns {InterfaceDataModel} A new `DataModel` instance containing the matched rows.\n                 * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n                 */\n                searchRowsAsDataModel = (condition: Record<string, any>, isNegative: boolean = false): InterfaceDataModel => {\n                    const _this = this;\n                    _this._checkOriginObject(condition);\n                    _this._checkBoolean(isNegative);\n                    const matched: Record<string, any>[] = [];\n                    _this._rows.forEach(function(row) {\n                        let matchesCondition = true;\n                        for (const key in condition) {\n                            _this._checkColumn(key);\n                            if ((JSON.stringify(row[key]) !== JSON.stringify(condition[key]))) {\n                                matchesCondition = false;\n                                break;\n                            }\n                        }\n                        if (isNegative) {\n                            if (!matchesCondition) matched.push(row);\n                        } else {\n                            if (matchesCondition) matched.push(row);\n                        }\n                    });\n                    return new hison.data.DataModel(matched);\n                };\n                /**\n                 * Searches for rows that match a given condition and **modifies** the original `DataModel` by removing matched or unmatched rows.\n                 * This method directly updates the existing dataset instead of returning a new instance.\n                 *\n                 * ## Parameters\n                 * - `condition` **(Record<string, any>)**: An object representing the key-value conditions to match.\n                 * - `isNegative` **(boolean, optional, default = `false`)**: If `true`, removes rows that **match** the condition; otherwise, removes rows that **do not** match the condition.\n                 *\n                 * ## Behavior\n                 * - Calls `_checkOriginObject(condition)` to ensure the condition is a valid object.\n                 * - Calls `_checkBoolean(isNegative)` to validate the boolean flag.\n                 * - Iterates through `_rows`, checking if each row meets the condition.\n                 * - Uses `JSON.stringify()` for deep comparison of values.\n                 * - If `isNegative` is `false`, removes rows that **do not** match the condition.\n                 * - If `isNegative` is `true`, removes rows that **do** match the condition.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The modified `DataModel` instance after removing specified rows.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 25 }\n                 * ]);\n                 * \n                 * // Keep only rows where age is 25\n                 * dataModel.searchAndModify({ age: 25 });\n                 * console.log(dataModel.getRows());\n                 * // Output: [{ id: 1, name: \"Alice\", age: 25 }, { id: 3, name: \"Charlie\", age: 25 }]\n                 * \n                 * // Remove rows where age is 25\n                 * dataModel.searchAndModify({ age: 25 }, true);\n                 * console.log(dataModel.getRows());\n                 * // Output: []\n                 * ```\n                 *\n                 * @param {Record<string, any>} condition The key-value condition to match.\n                 * @param {boolean} [isNegative=false] If `true`, removes rows that **match** the condition; otherwise, removes rows that **do not** match the condition.\n                 * @returns {InterfaceDataModel} The modified `DataModel` instance after removing specified rows.\n                 * @throws {Error} If `condition` is not a valid object or `isNegative` is not a boolean.\n                 */\n                searchAndModify = (condition: Record<string, any>, isNegative: boolean = false): InterfaceDataModel => {\n                    const _this = this;\n                    _this._checkOriginObject(condition);\n                    _this._checkBoolean(isNegative);\n                    for (let i = 0; i < _this._rows.length; i++ ){\n                        let matchesCondition = true;\n                        for (const key in condition) {\n                            _this._checkColumn(key);\n                            if ((JSON.stringify(_this._rows[i][key]) !== JSON.stringify(condition[key]))) {\n                                matchesCondition = false;\n                                break;\n                            }\n                        }\n                        if (isNegative) {\n                            if (matchesCondition) {\n                                _this._rows.splice(i, 1);\n                                i--;\n                            }\n                        } else {\n                            if (!matchesCondition) {\n                                _this._rows.splice(i, 1);\n                                i--;\n                            }\n                        }\n                    }\n                    return _this;\n                };\n                /**\n                 * Filters rows in the `DataModel` based on a custom filtering function and returns their indexes.\n                 * Allows for efficiently identifying row positions that match a given condition.\n                 *\n                 * ## Parameters\n                 * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\n                 *\n                 * ## Behavior\n                 * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n                 * - Iterates through `_rows`, applying the filter function to each row.\n                 * - Collects the indexes of rows that satisfy the filter condition.\n                 *\n                 * ## Returns\n                 * - **`number[]`**: An array of indexes of rows that match the filter condition.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 22 }\n                 * ]);\n                 * \n                 * // Get indexes of rows where age is greater than 25\n                 * const rowIndexes = dataModel.filterRowIndexes(row => row.age > 25);\n                 * console.log(rowIndexes); // Output: [1]\n                 * ```\n                 *\n                 * @param {DataModelFillter} filter A function that determines whether a row should be included.\n                 * @returns {number[]} An array of indexes of rows that match the filter condition.\n                 * @throws {Error} If `filter` is not a valid function.\n                 */\n                filterRowIndexes = (filter: DataModelFillter): number[] => {\n                    const _this = this;\n                    _this._checkValidFunction(filter);\n                    const matched: number[] = [];\n                    _this._rows.forEach(function(row: Record<string, any>, index) {\n                        if (filter(row)) {\n                            matched.push(index);\n                        }\n                    });\n                    return matched;\n                };\n                /**\n                 * Filters rows in the `DataModel` based on a custom filtering function.\n                 * Returns an array of rows that satisfy the provided filter condition.\n                 *\n                 * ## Parameters\n                 * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\n                 *\n                 * ## Behavior\n                 * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n                 * - Iterates through `_rows`, applying the filter function to each row.\n                 * - Uses `_deepCopy()` to ensure the returned rows are independent copies.\n                 * - Returns an array of matching rows.\n                 *\n                 * ## Returns\n                 * - **`Record<string, any>[]`**: An array of deep-copied rows that match the filter condition.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 22 }\n                 * ]);\n                 * \n                 * // Filter rows where age is greater than 25\n                 * const filteredRows = dataModel.filterRows(row => row.age > 25);\n                 * console.log(filteredRows);\n                 * // Output: [{ id: 2, name: \"Bob\", age: 30 }]\n                 * ```\n                 *\n                 * @param {DataModelFillter} filter A function that determines whether a row should be included.\n                 * @returns {Record<string, any>[]} An array of deep-copied rows that match the filter condition.\n                 * @throws {Error} If `filter` is not a valid function.\n                 */\n                filterRows = (filter: DataModelFillter): Record<string, any>[] => {\n                    const _this = this;\n                    _this._checkValidFunction(filter);\n                    const matched: Record<string, any>[] = [];\n                    _this._rows.forEach(function(row) {\n                        if (filter(row)) {\n                            matched.push(_this._deepCopy(row));\n                        }\n                    });\n                    return matched;\n                };\n                /**\n                 * Filters rows in the `DataModel` based on a custom filtering function and returns a new `DataModel` containing the matched rows.\n                 * Allows for extracting a subset of the dataset while preserving the structured format.\n                 *\n                 * ## Parameters\n                 * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be included.\n                 *\n                 * ## Behavior\n                 * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n                 * - Iterates through `_rows`, applying the filter function to each row.\n                 * - Collects rows that satisfy the filter condition.\n                 * - Returns a new `DataModel` instance containing the filtered rows.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: A new `DataModel` instance containing the filtered rows.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 22 }\n                 * ]);\n                 * \n                 * // Create a new DataModel containing only rows where age is greater than 25\n                 * const filteredDataModel = dataModel.filterRowsAsDataModel(row => row.age > 25);\n                 * console.log(filteredDataModel.getRowCount()); // Output: 1\n                 * console.log(filteredDataModel.getRow(0)); // Output: { id: 2, name: \"Bob\", age: 30 }\n                 * ```\n                 *\n                 * @param {DataModelFillter} filter A function that determines whether a row should be included.\n                 * @returns {InterfaceDataModel} A new `DataModel` instance containing the filtered rows.\n                 * @throws {Error} If `filter` is not a valid function.\n                 */\n                filterRowsAsDataModel = (filter: DataModelFillter): InterfaceDataModel => {\n                    const _this = this;\n                    _this._checkValidFunction(filter);\n                    const matched: Record<string, any>[] = [];\n                    _this._rows.forEach(function(row) {\n                        if (filter(row)) {\n                            matched.push(row);\n                        }\n                    });\n                    return new hison.data.DataModel(matched);\n                };\n                /**\n                 * Filters rows in the `DataModel` based on a custom filtering function and **modifies** the original `DataModel` by removing unmatched rows.\n                 * This method directly updates the existing dataset instead of returning a new instance.\n                 *\n                 * ## Parameters\n                 * - `filter` **(`DataModelFillter`)**: A function that takes a row as input and returns `true` if the row should be retained.\n                 *\n                 * ## Behavior\n                 * - Calls `_checkValidFunction(filter)` to ensure `filter` is a valid function.\n                 * - Iterates through `_rows`, applying the filter function to each row.\n                 * - Removes rows that do **not** satisfy the filter condition.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with only the filtered rows.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\", age: 25 },\n                 *     { id: 2, name: \"Bob\", age: 30 },\n                 *     { id: 3, name: \"Charlie\", age: 22 }\n                 * ]);\n                 * \n                 * // Remove all rows where age is 25 or below\n                 * dataModel.filterAndModify(row => row.age > 25);\n                 * \n                 * console.log(dataModel.getRowCount()); // Output: 1\n                 * console.log(dataModel.getRow(0)); // Output: { id: 2, name: \"Bob\", age: 30 }\n                 * ```\n                 *\n                 * @param {DataModelFillter} filter A function that determines whether a row should be retained.\n                 * @returns {InterfaceDataModel} The modified `DataModel` instance after removing unmatched rows.\n                 * @throws {Error} If `filter` is not a valid function.\n                 */\n                filterAndModify = (filter: DataModelFillter): InterfaceDataModel => {\n                    const _this = this;\n                    _this._checkValidFunction(filter);\n                    for (let i = 0; i < _this._rows.length; i++ ){\n                        if (!filter(_this._rows[i])) {\n                            _this._rows.splice(i, 1);\n                            i--;\n                        }\n                    }\n                    return _this;\n                };\n                /**\n                 * Reorders the columns in the `DataModel` based on the specified order.\n                 * Ensures that all existing columns are included, maintaining the defined structure.\n                 *\n                 * ## Parameters\n                 * - `columns` **(string[])**: An array of column names in the desired order.\n                 *\n                 * ## Behavior\n                 * - Calls `_checkArray(columns)` to validate the input as an array.\n                 * - Iterates through `columns`, ensuring each column is valid and exists in the `DataModel`.\n                 * - Creates a new column order, appending any remaining columns that were not specified.\n                 * - Updates `_cols` with the new column order.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with reordered columns.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\", \"age\"]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n                 * \n                 * // Change column order\n                 * dataModel.setColumnSorting([\"age\", \"name\"]);\n                 * console.log(dataModel.getColumns()); // Output: [\"age\", \"name\", \"id\"]\n                 * ```\n                 *\n                 * @param {string[]} columns An array of column names in the desired order.\n                 * @returns {InterfaceDataModel} The modified `DataModel` instance with reordered columns.\n                 * @throws {Error} If `columns` is not an array or contains invalid column names.\n                 */\n                setColumnSorting = (columns: string[]): InterfaceDataModel => {\n                    this._checkArray(columns);\n                    const newColumns = [];\n                    for(let column of columns) {\n                        column = this._getValidColValue(column);\n                        this._checkColumn(column);\n                        newColumns.push(column);\n                    }\n                    for(const column of this._cols) {\n                        if (!newColumns.includes(column)) {\n                            newColumns.push(column)\n                        }\n                    }\n                    this._cols = newColumns;\n                    return this;\n                };\n                /**\n                 * Sorts the columns of the `DataModel` in ascending (A-Z) order.\n                 * The sorting is applied alphabetically based on column names.\n                 *\n                 * ## Behavior\n                 * - Calls the native `Array.sort()` method on `_cols` to rearrange columns in ascending order.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with columns sorted in ascending order.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"name\", \"id\", \"age\"]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\n                 * \n                 * dataModel.sortColumnAscending();\n                 * console.log(dataModel.getColumns()); // Output: [\"age\", \"id\", \"name\"]\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel} The modified `DataModel` instance with columns sorted in ascending order.\n                 */\n                sortColumnAscending = (): InterfaceDataModel => {\n                    this._cols.sort();\n                    return this;\n                };\n                /**\n                 * Sorts the columns of the `DataModel` in descending (Z-A) order.\n                 * The sorting is applied alphabetically based on column names.\n                 *\n                 * ## Behavior\n                 * - Calls the native `Array.sort()` method on `_cols` with a custom comparator to sort columns in descending order.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with columns sorted in descending order.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"name\", \"id\", \"age\"]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\n                 * \n                 * dataModel.sortColumnDescending();\n                 * console.log(dataModel.getColumns()); // Output: [\"name\", \"id\", \"age\"]\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel} The modified `DataModel` instance with columns sorted in descending order.\n                 */\n                sortColumnDescending = (): InterfaceDataModel => {\n                    this._cols.sort(function(a, b) {\n                        if (a > b) {\n                            return -1;\n                        }\n                        if (a < b) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n                    return this;\n                };\n                /**\n                 * Reverses the order of columns in the `DataModel`.\n                 * The column order is flipped without sorting alphabetically.\n                 *\n                 * ## Behavior\n                 * - Calls the native `Array.reverse()` method on `_cols` to reverse the column order.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with reversed column order.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\"id\", \"name\", \"age\"]);\n                 * \n                 * console.log(dataModel.getColumns()); // Output: [\"id\", \"name\", \"age\"]\n                 * \n                 * dataModel.sortColumnReverse();\n                 * console.log(dataModel.getColumns()); // Output: [\"age\", \"name\", \"id\"]\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel} The modified `DataModel` instance with reversed column order.\n                 */\n                sortColumnReverse = (): InterfaceDataModel => {\n                    this._cols.reverse();\n                    return this;\n                };\n                /**\n                 * Sorts the rows of the `DataModel` in ascending order based on the specified column.\n                 * Optionally supports integer-based sorting for numerical values.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The column name to sort by.\n                 * - `isIntegerOrder` **(boolean, optional, default = `false`)**: If `true`, treats values as integers for sorting.\n                 *\n                 * ## Behavior\n                 * - Calls `_getValidColValue(column)` to validate the column name.\n                 * - Throws an error if the specified column does not exist.\n                 * - Calls `_checkBoolean(isIntegerOrder)` to validate the boolean flag.\n                 * - Uses the native `Array.sort()` method to arrange rows in ascending order.\n                 * - Handles `null` values by placing them at the end of the sorted list.\n                 * - Converts object values to JSON strings for sorting.\n                 * - If `isIntegerOrder` is `true`, parses values as integers before sorting.\n                 * - Throws an error if a non-numeric value is encountered during integer sorting.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with rows sorted in ascending order.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 3, name: \"Charlie\" },\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * // Sort rows by \"id\" in ascending order\n                 * dataModel.sortRowAscending(\"id\");\n                 * console.log(dataModel.getRows());\n                 * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n                 * \n                 * // Sort rows numerically by \"id\"\n                 * dataModel.sortRowAscending(\"id\", true);\n                 * ```\n                 *\n                 * @param {string} column The column name to sort by.\n                 * @param {boolean} [isIntegerOrder=false] If `true`, treats values as integers for sorting.\n                 * @returns {InterfaceDataModel} The modified `DataModel` instance with rows sorted in ascending order.\n                 * @throws {Error} If `column` is invalid or contains non-numeric values in integer mode.\n                 */\n                sortRowAscending = (column: string, isIntegerOrder: boolean = false): InterfaceDataModel => {\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    this._checkBoolean(isIntegerOrder);\n                    this._rows.sort(function(a, b) {\n                        let valueA = a[column];\n                        let valueB = b[column];\n                        if (valueA === null || valueB === null) {\n                            return valueA === null ? 1 : -1;\n                        }\n                        if (typeof valueA === 'object' || typeof valueB === 'object') {\n                            valueA = JSON.stringify(valueA);\n                            valueB = JSON.stringify(valueB);\n                        }\n                        if (isIntegerOrder) {\n                            valueA = parseInt(valueA, 10);\n                            valueB = parseInt(valueB, 10);\n                            if (isNaN(valueA) || isNaN(valueB)) {\n                                throw new Error('Cannot sort rows: non-integer value encountered.');\n                            }\n                        }\n                        if (valueA < valueB) {\n                            return -1;\n                        }\n                        if (valueA > valueB) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n                    return this;\n                };\n                /**\n                 * Sorts the rows of the `DataModel` in descending order based on the specified column.\n                 * Optionally supports integer-based sorting for numerical values.\n                 *\n                 * ## Parameters\n                 * - `column` **(string)**: The column name to sort by.\n                 * - `isIntegerOrder` **(boolean, optional, default = `false`)**: If `true`, treats values as integers for sorting.\n                 *\n                 * ## Behavior\n                 * - Calls `_getValidColValue(column)` to validate the column name.\n                 * - Throws an error if the specified column does not exist.\n                 * - Calls `_checkBoolean(isIntegerOrder)` to validate the boolean flag.\n                 * - Uses the native `Array.sort()` method to arrange rows in descending order.\n                 * - Handles `null` values by placing them at the beginning of the sorted list.\n                 * - Converts object values to JSON strings for sorting.\n                 * - If `isIntegerOrder` is `true`, parses values as integers before sorting.\n                 * - Throws an error if a non-numeric value is encountered during integer sorting.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with rows sorted in descending order.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 3, name: \"Charlie\" },\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" }\n                 * ]);\n                 * \n                 * // Sort rows by \"id\" in descending order\n                 * dataModel.sortRowDescending(\"id\");\n                 * console.log(dataModel.getRows());\n                 * // Output: [{ id: 3, name: \"Charlie\" }, { id: 2, name: \"Bob\" }, { id: 1, name: \"Alice\" }]\n                 * \n                 * // Sort rows numerically by \"id\"\n                 * dataModel.sortRowDescending(\"id\", true);\n                 * ```\n                 *\n                 * @param {string} column The column name to sort by.\n                 * @param {boolean} [isIntegerOrder=false] If `true`, treats values as integers for sorting.\n                 * @returns {InterfaceDataModel} The modified `DataModel` instance with rows sorted in descending order.\n                 * @throws {Error} If `column` is invalid or contains non-numeric values in integer mode.\n                 */\n                sortRowDescending = (column: string, isIntegerOrder: boolean = false): InterfaceDataModel => {\n                    column = this._getValidColValue(column);\n                    this._checkColumn(column);\n                    this._checkBoolean(isIntegerOrder);\n                    this._rows.sort(function(a, b) {\n                        let valueA = a[column];\n                        let valueB = b[column];\n                        if (valueA === null || valueB === null) {\n                            return valueA === null ? -1 : 1;\n                        }\n                        if (typeof valueA === 'object' || typeof valueB === 'object') {\n                            valueA = JSON.stringify(valueA);\n                            valueB = JSON.stringify(valueB);\n                        }\n                        if (isIntegerOrder) {\n                            valueA = parseInt(valueA, 10);\n                            valueB = parseInt(valueB, 10);\n                            if (isNaN(valueA) || isNaN(valueB)) {\n                                throw new Error('Cannot sort rows: non-integer value encountered.');\n                            }\n                        }\n                        if (valueA < valueB) {\n                            return 1;\n                        }\n                        if (valueA > valueB) {\n                            return -1;\n                        }\n                        return 0;\n                    });\n                    return this;\n                };\n                /**\n                 * Reverses the order of rows in the `DataModel`.\n                 * This method flips the row order without sorting by a specific column.\n                 *\n                 * ## Behavior\n                 * - Calls the native `Array.reverse()` method on `_rows` to reverse the row order.\n                 * - Returns the modified `DataModel` instance for method chaining.\n                 *\n                 * ## Returns\n                 * - **`DataModel`**: The modified `DataModel` instance with reversed row order.\n                 *\n                 * ## Example Usage\n                 * ```typescript\n                 * const dataModel = new hison.data.DataModel([\n                 *     { id: 1, name: \"Alice\" },\n                 *     { id: 2, name: \"Bob\" },\n                 *     { id: 3, name: \"Charlie\" }\n                 * ]);\n                 * \n                 * console.log(dataModel.getRows());\n                 * // Output: [{ id: 1, name: \"Alice\" }, { id: 2, name: \"Bob\" }, { id: 3, name: \"Charlie\" }]\n                 * \n                 * dataModel.sortRowReverse();\n                 * console.log(dataModel.getRows());\n                 * // Output: [{ id: 3, name: \"Charlie\" }, { id: 2, name: \"Bob\" }, { id: 1, name: \"Alice\" }]\n                 * ```\n                 *\n                 * @returns {InterfaceDataModel} The modified `DataModel` instance with reversed row order.\n                 */\n                sortRowReverse = (): InterfaceDataModel => {\n                    this._rows.reverse();\n                    return this;\n                };\n            },\n        };\n        link = {\n            /**\n             * **`CachingModule` - A module for API response caching and real-time WebSocket updates.**\n             *\n             * The `CachingModule` provides a caching mechanism for API responses using an **LRU (Least Recently Used) strategy** \n             * while integrating **WebSocket communication** for real-time data updates.\n             *\n             * ## **Key Features**\n             * - **LRU Cache for API Responses**: Stores API responses with a configurable limit, reducing redundant network requests.\n             * - **WebSocket Support**: Maintains a persistent WebSocket connection for real-time data updates.\n             * - **Cache Management Methods**: Supports cache operations (`get`, `put`, `remove`, `clear`, etc.).\n             * - **Event-Driven Communication**: Allows event listeners (`onopen`, `onmessage`, `onclose`, `onerror`) for WebSocket handling.\n             * - **Flexible Configuration**: Uses `CustomOption` settings for cache limits and WebSocket parameters.\n             * - **Validation Methods**: Ensures proper data types for cache keys and event listeners.\n             *\n             * ## **How It Works**\n             * - **API responses are stored in an LRUCache instance**, avoiding redundant network calls.\n             * - **When a WebSocket connection is established**, data updates can be received in real-time.\n             * - **Cache data can be accessed and managed using `get`, `put`, `remove`, and `clear` methods.**\n             * - **WebSocket event handlers can be set up for real-time notifications.**\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Create a CachingModule instance with a cache limit of 20\n             * const cachingModule = new hison.link.CachingModule(20);\n             * \n             * // Store API response in the cache\n             * cachingModule.put(\"users\", fetch(\"/api/users\").then(response => response.json()));\n             * \n             * // Retrieve cached data\n             * cachingModule.get(\"users\").then(data => console.log(data));\n             * \n             * // Register WebSocket event handlers\n             * cachingModule.onopen = () => console.log(\"WebSocket Connected\");\n             * cachingModule.onmessage = event => console.log(\"New Message:\", event.data);\n             * ```\n             *\n             * ## **Internal Structure**\n             * - **Uses `LRUCache`** to manage cached responses with a defined limit.\n             * - **Maintains a WebSocket connection** to receive real-time data updates.\n             * - **Supports configurable options via `CustomOption`**, such as WebSocket endpoint and cache size.\n             * - **Provides utility methods** for cache validation, data retrieval, and event handling.\n             *\n             * ## **Related Components**\n             * - **`LRUCache`**: Handles the caching logic for API responses.\n             * - **`WebSocket`**: Establishes a real-time connection for live data updates.\n             * - **`CustomOption`**: Provides configurable options for WebSocket and cache settings.\n             * - **`ApiLink`**: Uses this module to fetch and store API responses efficiently.\n             *\n             * ## **Return Value**\n             * - This module **returns an instance of `CachingModule`**, which allows cache operations and WebSocket event management.\n             *\n             * ## **Typical Use Cases**\n             * - **Reducing unnecessary API calls** by storing frequently accessed responses.\n             * - **Receiving real-time updates** from the server without polling.\n             * - **Efficiently managing API response data** in web applications.\n             * - **Supporting offline or low-latency scenarios** by using cached responses.\n             */\n            CachingModule: class implements InterfaceCachingModule {\n                /**\n                 * **Creates an instance of `CachingModule`, initializing an LRU cache and a WebSocket connection.**\n                 *\n                 * The constructor sets up the **WebSocket connection** for real-time updates and \n                 * **instantiates an `LRUCache`** to manage API response caching.\n                 *\n                 * ## **Parameters**\n                 * - `cachingLimit` *(optional, number)* - The maximum number of items the cache can store.  \n                 *   - **Default:** `customOption.cachingLimit`\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Establishes a WebSocket connection** using the protocol, domain, and endpoint specified in `CustomOption`.\n                 * 2. **Configures WebSocket event handlers** (`onopen`, `onmessage`, `onclose`, `onerror`).\n                 * 3. **Creates an LRUCache instance** with the specified caching limit.\n                 * 4. **Marks this instance as a valid caching module** using `_isCachingModule = true`.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating a caching module with a default caching limit\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Creating a caching module with a custom limit of 50 entries\n                 * const customCachingModule = new hison.link.CachingModule(50);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_webSocket`** *(WebSocket)* - The WebSocket connection instance.\n                 * - **`_LRUCache`** *(LRUCache)* - The LRU-based cache for storing API responses.\n                 * - **`_isCachingModule`** *(boolean)* - A flag indicating whether this instance is a caching module.\n                 *\n                 * @param {number} [cachingLimit=customOption.link.cachingLimit] - The maximum number of cached responses.\n                 */\n                constructor(cachingLimit: number = customOption.link.cachingLimit) {\n                    this._webSocket = new WebSocket(customOption.link.webSocketProtocol + customOption.link.domain + customOption.link.webSocketEndPoint);\n                    this._webSocket.onopen = function() {};\n                    this._webSocket.onmessage = function() {};\n                    this._webSocket.onclose = function() {};\n                    this._webSocket.onerror = function() {};\n                    this._LRUCache = new LRUCache(cachingLimit);\n                    this._isCachingModule = true;\n                };\n                private _webSocket: WebSocket;\n                private _LRUCache: LRUCache;\n                private _isCachingModule: boolean;\n                private _checkTypeString = (str: string) => {\n                    if(typeof str !== 'string') {\n                        throw new Error('key is only a string.');\n                    }\n                }\n                private _checkTypeFunction = (func: Function | null) => {\n                    if (func && typeof func !== 'function') {\n                        throw new Error('Please enter only the function.');\n                    }\n                }\n                private _checkWebSocketConnection = (): number => {\n                    if (this._webSocket.readyState === WebSocket.OPEN) {\n                        return 1;\n                    } else if (this._webSocket.readyState === WebSocket.CONNECTING) {\n                        return 0;\n                    } else {\n                        return -1;\n                    }\n                };\n                /**\n                 * **Checks whether this instance is a valid caching module.**\n                 *\n                 * This method returns a boolean flag indicating whether the current instance \n                 * is recognized as a `CachingModule`. This is useful for validating whether \n                 * an instance supports caching functionalities.\n                 *\n                 * ## **Return Value**\n                 * - `true` if this instance is a caching module.\n                 * - `false` if caching is not enabled.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * console.log(cachingModule.getIsCachingModule()); // true\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_isCachingModule`** *(boolean)* - Stores the module's caching capability status.\n                 *\n                 * @returns {boolean} `true` if this instance is a caching module.\n                 */\n                getIsCachingModule = (): boolean => {\n                    return this._isCachingModule;\n                };\n                /**\n                 * **Checks if the cache contains a specific key.**\n                 *\n                 * This method verifies if the specified `key` exists in the LRU cache. It ensures \n                 * that the key is a valid string and then delegates the check to the underlying \n                 * `LRUCache` instance.\n                 *\n                 * ## **Parameters**\n                 * - `key` *(string)* - The key to check in the cache.\n                 *\n                 * ## **Return Value**\n                 * - `true` if the cache contains the specified key.\n                 * - `false` if the key is not found in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * console.log(cachingModule.hasKey(\"user123\")); // true\n                 * console.log(cachingModule.hasKey(\"user456\")); // false\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`_checkTypeString(key)`** - Ensures the key is a valid string before performing the cache check.\n                 * - **`_LRUCache.hasKey(key)`** - The internal method that checks the existence of the key in the cache.\n                 *\n                 * @param {string} key - The key to check in the cache.\n                 * @returns {boolean} `true` if the cache contains the key, otherwise `false`.\n                 */\n                hasKey = (key: string): boolean => {\n                    this._checkTypeString(key);\n                    return this._LRUCache.hasKey(key);\n                };\n                /**\n                 * **Retrieves cached data for a given key.**\n                 *\n                 * This method fetches the cached API response associated with the specified `key`.\n                 * Before accessing the cache, it validates that the key is a string.\n                 *\n                 * ## **Parameters**\n                 * - `key` *(string)* - The key of the cached data.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The cached API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 * - If the key does not exist in the cache, `null` is returned.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store API response in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * \n                 * // Retrieve cached data\n                 * cachingModule.get(\"user123\").then(data => console.log(data));\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`put(key, value)`** - Stores API responses in the cache.\n                 * - **`hasKey(key)`** - Checks if a key exists in the cache.\n                 * - **`remove(key)`** - Removes a key from the cache.\n                 *\n                 * @param {string} key - The key to retrieve from the cache.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the cached response data.\n                 */\n                get = (key: string): Promise<{ data: any; response: Response; }> | null => {\n                    this._checkTypeString(key);\n                    return this._LRUCache.get(key);\n                };\n                /**\n                 * **Stores API response data in the cache.**\n                 *\n                 * This method saves the provided `value` (API response) in the cache with the specified `key`.\n                 * Before storing the data, it validates that the `key` is a string.\n                 *\n                 * ## **Parameters**\n                 * - `key` *(string)* - The cache key under which the response will be stored.\n                 * - `value` *(Promise<{ data: any; response: Response }>)*\n                 *   - A promise resolving to an object containing:\n                 *     - `data` *(any)* - The API response data.\n                 *     - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - If the `key` already exists, the old value is **replaced** with the new one.\n                 * - If the cache reaches its limit, the **least recently used (LRU) entry is removed**.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store an API response in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`get(key)`** - Retrieves cached data for a given key.\n                 * - **`hasKey(key)`** - Checks if a key exists in the cache.\n                 * - **`remove(key)`** - Removes a specific key from the cache.\n                 *\n                 * @param {string} key - The cache key under which the response will be stored.\n                 * @param {Promise<{ data: any; response: Response }>} value - The API response to be cached.\n                 */\n                put = (key: string, value: Promise<{ data: any; response: Response; }>) => {\n                    this._checkTypeString(key);\n                    this._LRUCache.put(key, value);\n                };\n                /**\n                 * **Removes a specific key from the cache.**\n                 *\n                 * This method deletes the cached API response associated with the given `key`.\n                 * Before performing the removal, it ensures that the `key` is a valid string.\n                 *\n                 * ## **Parameters**\n                 * - `key` *(string)* - The cache key to be removed.\n                 *\n                 * ## **Behavior**\n                 * - If the specified `key` exists in the cache, it is deleted.\n                 * - If the `key` does not exist, no action is taken.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store an API response in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * \n                 * // Remove the cached response\n                 * cachingModule.remove(\"user123\");\n                 * \n                 * // Check if the key still exists\n                 * console.log(cachingModule.hasKey(\"user123\")); // false\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`put(key, value)`** - Stores API responses in the cache.\n                 * - **`get(key)`** - Retrieves cached data for a given key.\n                 * - **`clear()`** - Removes all cached entries.\n                 *\n                 * @param {string} key - The cache key to be removed.\n                 */\n                remove = (key: string) => {\n                    this._checkTypeString(key);\n                    this._LRUCache.remove(key);\n                };\n                /**\n                 * **Retrieves all cached data as a key-value object.**\n                 *\n                 * This method returns the entire cache as a record where each key corresponds to a cached API response.\n                 *\n                 * ## **Return Value**\n                 * - A `Record<string, Promise<{ data: any; response: Response }>>` representing all cached entries.\n                 * - Each entry consists of:\n                 *   - `key` *(string)* - The cache key.\n                 *   - `value` *(Promise<{ data: any; response: Response }>>)* - A promise resolving to:\n                 *     - `data` *(any)* - The API response data.\n                 *     - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store multiple API responses in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\n                 * \n                 * // Retrieve all cached data\n                 * console.log(cachingModule.getAll());\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`put(key, value)`** - Stores API responses in the cache.\n                 * - **`get(key)`** - Retrieves cached data for a given key.\n                 * - **`getKeys()`** - Retrieves all cache keys.\n                 * - **`clear()`** - Removes all cached entries.\n                 *\n                 * @returns {Record<string, Promise<{ data: any; response: Response }>>} An object containing all cached responses.\n                 */\n                getAll = (): Record<string, Promise<{ data: any; response: Response; }>>  => {\n                    return this._LRUCache.getAll();\n                };\n                /**\n                 * **Retrieves all cache keys.**\n                 *\n                 * This method returns an array of all keys currently stored in the cache.\n                 *\n                 * ## **Return Value**\n                 * - An array of strings representing the cache keys.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store multiple API responses in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\n                 * \n                 * // Retrieve all cache keys\n                 * console.log(cachingModule.getKeys()); // [\"user123\", \"posts\"]\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`put(key, value)`** - Stores API responses in the cache.\n                 * - **`get(key)`** - Retrieves cached data for a given key.\n                 * - **`getAll()`** - Retrieves all cached data as a key-value object.\n                 * - **`clear()`** - Removes all cached entries.\n                 *\n                 * @returns {string[]} An array of cache keys.\n                 */\n                getKeys = (): string[] => {\n                    return this._LRUCache.getKeys();\n                };\n                /**\n                 * **Clears all cached data.**\n                 *\n                 * This method removes all entries from the cache, resetting it to an empty state.\n                 *\n                 * ## **Behavior**\n                 * - All cached responses are permanently deleted.\n                 * - The cache size is reset to zero.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Store multiple API responses in the cache\n                 * cachingModule.put(\"user123\", fetch(\"/api/user/123\").then(response => response.json()));\n                 * cachingModule.put(\"posts\", fetch(\"/api/posts\").then(response => response.json()));\n                 * \n                 * // Clear all cached data\n                 * cachingModule.clear();\n                 * \n                 * // Verify that the cache is empty\n                 * console.log(cachingModule.getKeys()); // []\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`put(key, value)`** - Stores API responses in the cache.\n                 * - **`get(key)`** - Retrieves cached data for a given key.\n                 * - **`getAll()`** - Retrieves all cached data as a key-value object.\n                 * - **`getKeys()`** - Retrieves all cache keys.\n                 *\n                 * @returns {void}\n                 */\n                clear = () => {\n                    this._LRUCache.clear();\n                };\n                /**\n                 * **Registers an event handler for the WebSocket `open` event.**\n                 *\n                 * This method assigns a custom event handler to be executed when the WebSocket connection is successfully opened.\n                 *\n                 * ## **Parameters**\n                 * - `func` *(function | null)* - A callback function to handle the WebSocket `open` event.\n                 *   - If `null` is provided, the event handler is cleared.\n                 *\n                 * ## **Behavior**\n                 * - Ensures that the provided function is valid before assigning it as the event handler.\n                 * - When the WebSocket connection is established, the specified function is invoked.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Register a WebSocket open event handler\n                 * cachingModule.onopen = (event) => {\n                 *     console.log(\"WebSocket connected:\", event);\n                 * };\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\n                 * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n                 * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n                 *\n                 * @param {(this: WebSocket, ev: Event) => any | null} func - The event handler function for the WebSocket `open` event.\n                 */\n                onopen = (func: ((this: WebSocket, ev: Event) => any) | null) => {\n                    this._checkTypeFunction(func);\n                    this._webSocket.onopen = func;\n                };\n                /**\n                 * **Registers an event handler for the WebSocket `message` event.**\n                 *\n                 * This method assigns a custom event handler to be executed whenever a message is received \n                 * through the WebSocket connection.\n                 *\n                 * ## **Parameters**\n                 * - `func` *(function | null)* - A callback function to handle incoming WebSocket messages.\n                 *   - If `null` is provided, the event handler is cleared.\n                 *\n                 * ## **Behavior**\n                 * - Ensures that the provided function is valid before assigning it as the event handler.\n                 * - When a message is received, the specified function is invoked with the event data.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Register a WebSocket message event handler\n                 * cachingModule.onmessage = (event) => {\n                 *     console.log(\"Received WebSocket message:\", event.data);\n                 * };\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n                 * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n                 * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n                 *\n                 * @param {(this: WebSocket, ev: MessageEvent) => any | null} func - The event handler function for WebSocket messages.\n                 */\n                onmessage = (func: ((this: WebSocket, ev: MessageEvent) => any) | null) => {\n                    this._checkTypeFunction(func);\n                    this._webSocket.onmessage = func;\n                };\n                /**\n                 * **Registers an event handler for the WebSocket `close` event.**\n                 *\n                 * This method assigns a custom event handler to be executed when the WebSocket connection is closed.\n                 *\n                 * ## **Parameters**\n                 * - `func` *(function | null)* - A callback function to handle the WebSocket `close` event.\n                 *   - If `null` is provided, the event handler is cleared.\n                 *\n                 * ## **Behavior**\n                 * - Ensures that the provided function is valid before assigning it as the event handler.\n                 * - When the WebSocket connection is closed, the specified function is invoked with the event data.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Register a WebSocket close event handler\n                 * cachingModule.onclose = (event) => {\n                 *     console.log(\"WebSocket closed:\", event);\n                 * };\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n                 * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\n                 * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n                 *\n                 * @param {(this: WebSocket, ev: CloseEvent) => any | null} func - The event handler function for WebSocket disconnection.\n                 */\n                onclose = (func: ((this: WebSocket, ev: CloseEvent) => any) | null) => {\n                    this._checkTypeFunction(func);\n                    this._webSocket.onclose = func;\n                };\n                /**\n                 * **Registers an event handler for the WebSocket `error` event.**\n                 *\n                 * This method assigns a custom event handler to be executed when a WebSocket error occurs.\n                 *\n                 * ## **Parameters**\n                 * - `func` *(function | null)* - A callback function to handle WebSocket errors.\n                 *   - If `null` is provided, the event handler is cleared.\n                 *\n                 * ## **Behavior**\n                 * - Ensures that the provided function is valid before assigning it as the event handler.\n                 * - When an error occurs in the WebSocket connection, the specified function is invoked with the event data.\n                 * - **Note:** The implementation currently assigns the function to `onclose` instead of `onerror`,\n                 *   which may require correction.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Register a WebSocket error event handler\n                 * cachingModule.onerror = (event) => {\n                 *     console.error(\"WebSocket error:\", event);\n                 * };\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n                 * - **`onmessage(func)`** - Registers a handler for incoming WebSocket messages.\n                 * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n                 *\n                 * @param {(this: WebSocket, ev: Event) => any | null} func - The event handler function for WebSocket errors.\n                 */\n                onerror = (func: ((this: WebSocket, ev: Event) => any) | null) => {\n                    this._checkTypeFunction(func);\n                    this._webSocket.onclose = func;\n                };\n                /**\n                 * **Checks the current state of the WebSocket connection.**\n                 *\n                 * This method returns an integer representing the current status of the WebSocket connection.\n                 *\n                 * ## **Return Value**\n                 * - `1` → The WebSocket connection is open.\n                 * - `0` → The WebSocket connection is in the process of connecting.\n                 * - `-1` → The WebSocket connection is closed or unavailable.\n                 *\n                 * ## **Behavior**\n                 * - Internally calls `_checkWebSocketConnection()` to determine the WebSocket state.\n                 * - Useful for monitoring connection status and handling reconnection logic if needed.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const cachingModule = new hison.link.CachingModule();\n                 * \n                 * // Check WebSocket connection status\n                 * const status = cachingModule.isWebSocketConnection();\n                 * console.log(status); // Output: 1 (open), 0 (connecting), or -1 (closed)\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`onopen(func)`** - Registers a handler for WebSocket connection open events.\n                 * - **`onclose(func)`** - Registers a handler for WebSocket disconnection events.\n                 * - **`onerror(func)`** - Registers a handler for WebSocket error events.\n                 *\n                 * @returns {number} The WebSocket connection status (`1`: open, `0`: connecting, `-1`: closed).\n                 */\n                isWebSocketConnection = (): number => {\n                    return this._checkWebSocketConnection();\n                };\n            },\n            /**\n             * **`ApiGet` - A class for handling HTTP GET requests within the `hison.link` module.**\n             *\n             * The `ApiGet` class is responsible for sending HTTP GET requests to a specified API resource. \n             * It integrates with `ApiLink` to handle request execution, event emissions, and optional response caching.\n             *\n             * ## **Key Features**\n             * - **Executes HTTP GET requests** using `ApiLink`.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows setting event listeners** for request completion, errors, and other key events.\n             *\n             * ## **How It Works**\n             * - When instantiated, `ApiGet` stores the API resource path and an optional `CachingModule` instance.\n             * - The `call()` method triggers a GET request to the specified resource path.\n             * - If caching is enabled, previously stored responses may be returned instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiGet without caching\n             * const apiGet = new hison.link.ApiGet(\"/users\");\n             * \n             * // Sending a GET request\n             * apiGet.call().then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiGet = new hison.link.ApiGet(\"/users\", cachingModule);\n             * \n             * // Handling request events\n             * cachedApiGet.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"GET request completed!\", data);\n             * });\n             * ```\n             *\n             * ## **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-based request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ## **Return Value**\n             * - This class returns an instance of `ApiGet`, which provides methods for executing GET requests and managing request events.\n             *\n             * ## **Typical Use Cases**\n             * - **Fetching data from a REST API** with minimal setup.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiGet: class implements InterfaceApiGet {\n                /**\n                 * **Creates an instance of `ApiGet`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making GET requests to a specified resource path.\n                 *\n                 * ## **Parameters**\n                 * - `resourcePath` *(optional, string)* - The API resource path for the GET request.\n                 *   - **Default:** `''` (empty string)\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 2. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 3. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 4. **Stores the API resource path.**\n                 *    - Defines the endpoint for the GET request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiGet instance without caching\n                 * const apiGet = new hison.link.ApiGet(\"/users\");\n                 * \n                 * // Creating an ApiGet instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiGet = new hison.link.ApiGet(\"/users\", cachingModule);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_resourcePath`** *(string)* - Stores the API resource path.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} [resourcePath=''] - The API resource path.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 */\n                constructor(resourcePath: string = '', cachingModule: InterfaceCachingModule | null = null) {\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._resourcePath = resourcePath;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _resourcePath: string;\n                /**\n                 * **Executes an HTTP GET request to the specified resource path.**\n                 *\n                 * This method sends a GET request using `ApiLink`, optionally applying caching if a `CachingModule` is provided.\n                 * It also **invokes a pre-request hook** (`hison.setBeforeGetRequst`) and **emits a request-start event** \n                 * (`\"requestStarted_GET\"`) before execution.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or query parameters.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Pre-Request Handling**\n                 * - **`hison.setBeforeGetRequst((resourcePath, options) => {})`**\n                 *   - A customizable hook executed **before sending the GET request**.\n                 *   - If it returns `false`, the request is **prevented from execution**.\n                 *   - **Use Case:** Validating request parameters or implementing conditional request logic.\n                 *\n                 * ## **Event Emission**\n                 * - **`\"requestStarted_GET\"` Event**\n                 *   - This event is emitted **before the GET request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If the data is not cached, it makes an HTTP GET request to `_resourcePath`.\n                 * - Before executing the request:\n                 *   - The **before-request hook (`beforeGetRequst`)** is checked.\n                 *   - The **event `\"requestStarted_GET\"`** is emitted.\n                 * - Once the request is completed, the response is returned and optionally stored in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiGet = new hison.link.ApiGet(\"/users\");\n                 * \n                 * // Customizing the before-request hook to prevent requests conditionally\n                 * hison.setBeforeGetRequst((resourcePath, options) => {\n                 *     if (!options.headers.Authorization) {\n                 *         console.warn(\"Missing Authorization header.\");\n                 *         return false; // Prevents the request from being sent\n                 *     }\n                 *     return true;\n                 * });\n                 * \n                 * // Listening to the \"requestStarted_GET\" event\n                 * apiGet.onEventEmit(\"requestStarted_GET\", (resourcePath, options) => {\n                 *     console.log(`GET request started for: ${resourcePath}`);\n                 * });\n                 * \n                 * // Sending a GET request\n                 * apiGet.call({ headers: { \"Authorization\": \"Bearer token\" } }).then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (options: Record<string, any> = {}): Promise<{ data: InterfaceDataWrapper; response: Response; } | null> => {\n                    return this._apiLink.get(this._resourcePath, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified resource path.**\n                 *\n                 * This method retrieves only the headers from the specified resource without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ## **Behavior**\n                 * - The method delegates the request execution to `ApiLink.head()`.\n                 * - The response body is **not** included in the result, only headers are returned.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiGet = new hison.link.ApiGet(\"/users\");\n                 * \n                 * // Sending a HEAD request\n                 * apiGet.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiGet.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(options)`** - Sends a GET request to retrieve full response data.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(this._resourcePath, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified resource path.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified resource \n                 * without performing an actual data operation.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n                 *\n                 * ## **Behavior**\n                 * - The method delegates the request execution to `ApiLink.options()`.\n                 * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiGet = new hison.link.ApiGet(\"/users\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiGet.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiGet.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(options)`** - Sends a GET request to retrieve full response data.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._resourcePath, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a GET request.\n                 *\n                 * ## **Parameters**\n                 * - `eventName` *(string)* - The name of the event to listen for.\n                 * - `eventFunc` *(function)* - The callback function to be executed when the event occurs.\n                 *\n                 * ## **Supported Events**\n                 * - `\"requestStarted_GET\"` - Triggered when a GET request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiGet = new hison.link.ApiGet(\"/users\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiGet.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"GET request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiGet.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"GET request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(options)`** - Sends a GET request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('GET', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPost` - A class for handling HTTP POST requests within the `hison.link` module.**\n             *\n             * The `ApiPost` class is responsible for sending HTTP POST requests to a specified service command.\n             * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n             *\n             * ## **Key Features**\n             * - **Executes HTTP POST requests** using `ApiLink`.\n             * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             *\n             * ## **How It Works**\n             * - When instantiated, `ApiPost` requires a `serviceCmd` that specifies the business logic endpoint.\n             * - The `call()` method sends a POST request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiPost\n             * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a POST request\n             * apiPost.call(requestData).then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPost = new hison.link.ApiPost(\"UserService.createUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"POST request completed!\", data);\n             * });\n             * ```\n             *\n             * ## **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ## **Return Value**\n             * - This class returns an instance of `ApiPost`, providing methods for executing POST requests and managing request events.\n             *\n             * ## **Typical Use Cases**\n             * - **Sending data to a REST API** with structured payloads.\n             * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiPost: class implements InterfaceApiPost {\n                /**\n                 * **Creates an instance of `ApiPost`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making POST requests to a specified service command.\n                 *\n                 * ## **Parameters**\n                 * - `serviceCmd` *(string, required)* - The **service command** that determines the target business logic on the server.\n                 *   - **Example:** `\"UserService.createUser\"`\n                 *   - If no `serviceCmd` is provided, an error is thrown.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Validates the `serviceCmd`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the exact service command.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `serviceCmd`.**\n                 *    - Defines the service endpoint for the POST request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPost instance without caching\n                 * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n                 *\n                 * // Creating an ApiPost instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPost = new hison.link.ApiPost(\"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_serviceCmd`** *(string)* - Stores the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} serviceCmd - The service command defining the target API action.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `serviceCmd` is not provided.\n                 */\n                constructor(serviceCmd: string, cachingModule: InterfaceCachingModule | null = null) {\n                    if (!serviceCmd) throw new Error('Please enter the exact service command.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                /**\n                 * **Executes an HTTP POST request to the specified service command.**\n                 *\n                 * This method sends a POST request using `ApiLink`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ## **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Pre-Request Handling**\n                 * - **`hison.setBeforePostRequst((requestData, options) => {})`**\n                 *   - A customizable hook executed **before sending the POST request**.\n                 *   - If it returns `false`, the request is **prevented from execution**.\n                 *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n                 *\n                 * ## **Event Emission**\n                 * - **`\"requestStarted_POST\"` Event**\n                 *   - This event is emitted **before the POST request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If the data is not cached, it makes an HTTP POST request to `_serviceCmd`.\n                 * - Before executing the request:\n                 *   - The **before-request hook (`beforePostRequst`)** is checked.\n                 *   - The **event `\"requestStarted_POST\"`** is emitted.\n                 * - Once the request is completed, the response is returned and optionally stored in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Customizing the before-request hook to modify data before sending\n                 * customOption.link.beforePostRequst = (requestData, options) => {\n                 *     requestData.putString(\"timestamp\", Date.now().toString());\n                 *     return true;\n                 * };\n                 * \n                 * // Listening to the \"requestStarted_POST\" event\n                 * apiPost.onEventEmit(\"requestStarted_POST\", (requestData, options) => {\n                 *     console.log(\"POST request started with data:\", requestData);\n                 * });\n                 * \n                 * // Sending a POST request\n                 * apiPost.call(requestData).then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: InterfaceDataWrapper; response: Response; } | null> => {\n                    return this._apiLink.post(requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the API controller path.**\n                 *\n                 * This method retrieves only the headers from the API without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n                 * - The response body is **not** included in the result; only headers are returned.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPost.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPost.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the API controller path.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n                 * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n                 *\n                 * ## **Behavior**\n                 * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n                 * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPost.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPost.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a POST request.\n                 *\n                 * ## **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ## **Supported Events**\n                 * - `\"requestStarted_POST\"` - Triggered when a POST request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"POST\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPost = new hison.link.ApiPost(\"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPost.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"POST request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPost.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"POST request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('POST', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPut` - A class for handling HTTP PUT requests within the `hison.link` module.**\n             *\n             * The `ApiPut` class is responsible for sending HTTP PUT requests to a specified service command.\n             * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n             *\n             * ## **Key Features**\n             * - **Executes HTTP PUT requests** using `ApiLink`.\n             * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             *\n             * ## **How It Works**\n             * - When instantiated, `ApiPut` requires a `serviceCmd` that specifies the business logic endpoint.\n             * - The `call()` method sends a PUT request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiPut\n             * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a PUT request\n             * apiPut.call(requestData).then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPut = new hison.link.ApiPut(\"UserService.createUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPut.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"PUT request completed!\", data);\n             * });\n             * ```\n             *\n             * ## **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ## **Return Value**\n             * - This class returns an instance of `ApiPut`, providing methods for executing PUT requests and managing request events.\n             *\n             * ## **Typical Use Cases**\n             * - **Sending data to a REST API** with structured payloads.\n             * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiPut: class implements InterfaceApiPut {\n                /**\n                 * **Creates an instance of `ApiPut`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making PUT requests to a specified service command.\n                 *\n                 * ## **Parameters**\n                 * - `serviceCmd` *(string, required)* - The **service command** that determines the target business logic on the server.\n                 *   - **Example:** `\"UserService.createUser\"`\n                 *   - If no `serviceCmd` is provided, an error is thrown.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Validates the `serviceCmd`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the exact service command.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `serviceCmd`.**\n                 *    - Defines the service endpoint for the PUT request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPut instance without caching\n                 * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n                 *\n                 * // Creating an ApiPut instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPut = new hison.link.ApiPut(\"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_serviceCmd`** *(string)* - Stores the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} serviceCmd - The service command defining the target API action.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `serviceCmd` is not provided.\n                 */\n                constructor(serviceCmd: string, cachingModule: InterfaceCachingModule | null = null) {\n                    if (!serviceCmd) throw new Error('Please enter the exact service command.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                /**\n                 * **Executes an HTTP PUT request to the specified service command.**\n                 *\n                 * This method sends a PUT request using `ApiLink`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ## **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Pre-Request Handling**\n                 * - **`hison.setBeforePutRequst((requestData, options) => {})`**\n                 *   - A customizable hook executed **before sending the PUT request**.\n                 *   - If it returns `false`, the request is **prevented from execution**.\n                 *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n                 *\n                 * ## **Event Emission**\n                 * - **`\"requestStarted_PUT\"` Event**\n                 *   - This event is emitted **before the PUT request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If the data is not cached, it makes an HTTP PUT request to `_serviceCmd`.\n                 * - Before executing the request:\n                 *   - The **before-request hook (`beforePutRequst`)** is checked.\n                 *   - The **event `\"requestStarted_PUT\"`** is emitted.\n                 * - Once the request is completed, the response is returned and optionally stored in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Customizing the before-request hook to modify data before sending\n                 * customOption.link.beforePutRequst = (requestData, options) => {\n                 *     requestData.putString(\"timestamp\", Date.now().toString());\n                 *     return true;\n                 * };\n                 * \n                 * // Listening to the \"requestStarted_PUT\" event\n                 * apiPut.onEventEmit(\"requestStarted_PUT\", (requestData, options) => {\n                 *     console.log(\"PUT request started with data:\", requestData);\n                 * });\n                 * \n                 * // Sending a PUT request\n                 * apiPut.call(requestData).then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: InterfaceDataWrapper; response: Response; } | null> => {\n                    return this._apiLink.put(requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the API controller path.**\n                 *\n                 * This method retrieves only the headers from the API without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n                 * - The response body is **not** included in the result; only headers are returned.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPut.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPut.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the API controller path.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n                 * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PUT\", \"OPTIONS\"]`).\n                 *\n                 * ## **Behavior**\n                 * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n                 * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPut.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"PUT\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPut.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a PUT request.\n                 *\n                 * ## **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ## **Supported Events**\n                 * - `\"requestStarted_PUT\"` - Triggered when a PUT request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PUT\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPut = new hison.link.ApiPut(\"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPut.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"PUT request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPut.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"PUT request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('PUT', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPatch` - A class for handling HTTP PATCH requests within the `hison.link` module.**\n             *\n             * The `ApiPatch` class is responsible for sending HTTP PATCH requests to a specified service command.\n             * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n             *\n             * ## **Key Features**\n             * - **Executes HTTP PATCH requests** using `ApiLink`.\n             * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             *\n             * ## **How It Works**\n             * - When instantiated, `ApiPatch` requires a `serviceCmd` that specifies the business logic endpoint.\n             * - The `call()` method sends a PATCH request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiPatch\n             * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a PATCH request\n             * apiPatch.call(requestData).then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPatch = new hison.link.ApiPatch(\"UserService.createUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPatch.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"PATCH request completed!\", data);\n             * });\n             * ```\n             *\n             * ## **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ## **Return Value**\n             * - This class returns an instance of `ApiPatch`, providing methods for executing PATCH requests and managing request events.\n             *\n             * ## **Typical Use Cases**\n             * - **Sending data to a REST API** with structured payloads.\n             * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiPatch: class implements InterfaceApiPatch {\n                /**\n                 * **Creates an instance of `ApiPatch`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making PATCH requests to a specified service command.\n                 *\n                 * ## **Parameters**\n                 * - `serviceCmd` *(string, required)* - The **service command** that determines the target business logic on the server.\n                 *   - **Example:** `\"UserService.createUser\"`\n                 *   - If no `serviceCmd` is provided, an error is thrown.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Validates the `serviceCmd`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the exact service command.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `serviceCmd`.**\n                 *    - Defines the service endpoint for the PATCH request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPatch instance without caching\n                 * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n                 *\n                 * // Creating an ApiPatch instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPatch = new hison.link.ApiPatch(\"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_serviceCmd`** *(string)* - Stores the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} serviceCmd - The service command defining the target API action.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `serviceCmd` is not provided.\n                 */\n                constructor(serviceCmd: string, cachingModule: InterfaceCachingModule | null = null) {\n                    if (!serviceCmd) throw new Error('Please enter the exact service command.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                /**\n                 * **Executes an HTTP PATCH request to the specified service command.**\n                 *\n                 * This method sends a PATCH request using `ApiLink`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ## **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Pre-Request Handling**\n                 * - **`hison.setBeforePatchRequst((requestData, options) => {})`**\n                 *   - A customizable hook executed **before sending the PATCH request**.\n                 *   - If it returns `false`, the request is **prevented from execution**.\n                 *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n                 *\n                 * ## **Event Emission**\n                 * - **`\"requestStarted_PATCH\"` Event**\n                 *   - This event is emitted **before the PATCH request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If the data is not cached, it makes an HTTP PATCH request to `_serviceCmd`.\n                 * - Before executing the request:\n                 *   - The **before-request hook (`beforePatchRequst`)** is checked.\n                 *   - The **event `\"requestStarted_PATCH\"`** is emitted.\n                 * - Once the request is completed, the response is returned and optionally stored in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Customizing the before-request hook to modify data before sending\n                 * customOption.link.beforePatchRequst = (requestData, options) => {\n                 *     requestData.putString(\"timestamp\", Date.now().toString());\n                 *     return true;\n                 * };\n                 * \n                 * // Listening to the \"requestStarted_PATCH\" event\n                 * apiPatch.onEventEmit(\"requestStarted_PATCH\", (requestData, options) => {\n                 *     console.log(\"PATCH request started with data:\", requestData);\n                 * });\n                 * \n                 * // Sending a PATCH request\n                 * apiPatch.call(requestData).then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: InterfaceDataWrapper; response: Response; } | null> => {\n                    return this._apiLink.patch(requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the API controller path.**\n                 *\n                 * This method retrieves only the headers from the API without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n                 * - The response body is **not** included in the result; only headers are returned.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPatch.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPatch.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the API controller path.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n                 * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PATCH\", \"OPTIONS\"]`).\n                 *\n                 * ## **Behavior**\n                 * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n                 * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPatch.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"PATCH\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPatch.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a PATCH request.\n                 *\n                 * ## **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ## **Supported Events**\n                 * - `\"requestStarted_PATCH\"` - Triggered when a PATCH request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PATCH\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPatch = new hison.link.ApiPatch(\"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPatch.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"PATCH request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPatch.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"PATCH request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('PATCH', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiDelete` - A class for handling HTTP DELETE requests within the `hison.link` module.**\n             *\n             * The `ApiDelete` class is responsible for sending HTTP DELETE requests to a specified service command.\n             * It integrates with `ApiLink` to execute requests, emit events, and optionally utilize caching.\n             *\n             * ## **Key Features**\n             * - **Executes HTTP DELETE requests** using `ApiLink`.\n             * - **Encapsulates request data in `DataWrapper`** with a `cmd` field that directs the request to the appropriate service.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             *\n             * ## **How It Works**\n             * - When instantiated, `ApiDelete` requires a `serviceCmd` that specifies the business logic endpoint.\n             * - The `call()` method sends a DELETE request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiDelete\n             * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a DELETE request\n             * apiDelete.call(requestData).then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiDelete = new hison.link.ApiDelete(\"UserService.createUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiDelete.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"DELETE request completed!\", data);\n             * });\n             * ```\n             *\n             * ## **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ## **Return Value**\n             * - This class returns an instance of `ApiDelete`, providing methods for executing DELETE requests and managing request events.\n             *\n             * ## **Typical Use Cases**\n             * - **Sending data to a REST API** with structured payloads.\n             * - **Using `DataWrapper` to encapsulate request parameters** for standardized processing.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiDelete: class implements InterfaceApiDelete {\n                /**\n                 * **Creates an instance of `ApiDelete`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making DELETE requests to a specified service command.\n                 *\n                 * ## **Parameters**\n                 * - `serviceCmd` *(string, required)* - The **service command** that determines the target business logic on the server.\n                 *   - **Example:** `\"UserService.createUser\"`\n                 *   - If no `serviceCmd` is provided, an error is thrown.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Validates the `serviceCmd`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the exact service command.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `serviceCmd`.**\n                 *    - Defines the service endpoint for the DELETE request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiDelete instance without caching\n                 * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n                 *\n                 * // Creating an ApiDelete instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiDelete = new hison.link.ApiDelete(\"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_serviceCmd`** *(string)* - Stores the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} serviceCmd - The service command defining the target API action.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `serviceCmd` is not provided.\n                 */\n                constructor(serviceCmd: string, cachingModule: InterfaceCachingModule | null = null) {\n                    if (!serviceCmd) throw new Error('Please enter the exact service command.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                /**\n                 * **Executes an HTTP DELETE request to the specified service command.**\n                 *\n                 * This method sends a DELETE request using `ApiLink`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ## **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Pre-Request Handling**\n                 * - **`hison.setBeforeDeleteRequst((requestData, options) => {})`**\n                 *   - A customizable hook executed **before sending the DELETE request**.\n                 *   - If it returns `false`, the request is **prevented from execution**.\n                 *   - **Use Case:** Validating request parameters, modifying request data dynamically.\n                 *\n                 * ## **Event Emission**\n                 * - **`\"requestStarted_DELETE\"` Event**\n                 *   - This event is emitted **before the DELETE request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - If a `CachingModule` is used, it first checks if the requested data is available in the cache.\n                 * - If the data is not cached, it makes an HTTP DELETE request to `_serviceCmd`.\n                 * - Before executing the request:\n                 *   - The **before-request hook (`beforeDeleteRequst`)** is checked.\n                 *   - The **event `\"requestStarted_DELETE\"`** is emitted.\n                 * - Once the request is completed, the response is returned and optionally stored in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Customizing the before-request hook to modify data before sending\n                 * customOption.link.beforeDeleteRequst = (requestData, options) => {\n                 *     requestData.putString(\"timestamp\", Date.now().toString());\n                 *     return true;\n                 * };\n                 * \n                 * // Listening to the \"requestStarted_DELETE\" event\n                 * apiDelete.onEventEmit(\"requestStarted_DELETE\", (requestData, options) => {\n                 *     console.log(\"DELETE request started with data:\", requestData);\n                 * });\n                 * \n                 * // Sending a DELETE request\n                 * apiDelete.call(requestData).then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: InterfaceDataWrapper; response: Response; } | null> => {\n                    return this._apiLink.delete(requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the API controller path.**\n                 *\n                 * This method retrieves only the headers from the API without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the request execution to `ApiLink.head()`, targeting `customOption.controllerPath`.\n                 * - The response body is **not** included in the result; only headers are returned.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiDelete.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiDelete.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the API controller path.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the API without performing an actual data operation.\n                 * It is useful for checking which HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"DELETE\", \"OPTIONS\"]`).\n                 *\n                 * ## **Behavior**\n                 * - Delegates the request execution to `ApiLink.options()`, targeting `customOption.controllerPath`.\n                 * - The response includes the `Allow` header, which specifies the permitted HTTP methods.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiDelete.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"DELETE\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiDelete.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(customOption.link.controllerPath, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a DELETE request.\n                 *\n                 * ## **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ## **Supported Events**\n                 * - `\"requestStarted_DELETE\"` - Triggered when a DELETE request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"DELETE\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiDelete = new hison.link.ApiDelete(\"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiDelete.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"DELETE request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiDelete.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"DELETE request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('DELETE', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiGetUrl` - A class for handling HTTP GET requests to a specified URL.**\n             *\n             * The `ApiGetUrl` class is responsible for sending HTTP GET requests to a provided URL.\n             * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n             *\n             * ## **Key Features**\n             * - **Executes HTTP GET requests** using `ApiLink`.\n             * - **Accepts a direct URL** instead of using a predefined API resource path.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             *\n             * ## **How It Works**\n             * - When instantiated, `ApiGetUrl` requires a valid URL.\n             * - The `call()` method triggers a GET request to the specified URL.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiGetUrl without caching\n             * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n             * \n             * // Sending a GET request\n             * apiGetUrl.call().then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\", cachingModule);\n             * \n             * // Handling request events\n             * cachedApiGetUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"GET request completed!\", data);\n             * });\n             * ```\n             *\n             * ## **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ## **Return Value**\n             * - This class returns an instance of `ApiGetUrl`, which provides methods for executing GET requests to a specific URL.\n             *\n             * ## **Typical Use Cases**\n             * - **Fetching data from an external API** by specifying a full URL.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiGetUrl: class implements InterfaceApiGetUrl {\n                /**\n                 * **Creates an instance of `ApiGetUrl`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making GET requests to a specified URL.\n                 *\n                 * ## **Parameters**\n                 * - `url` *(string, required)* - The full URL to which the GET request will be sent.\n                 *   - If no `url` is provided, an error is thrown (`\"Please enter the request URL.\"`).\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Validates the `url`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the request URL.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `url`.**\n                 *    - Defines the endpoint for the GET request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiGetUrl instance without caching\n                 * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n                 * \n                 * // Creating an ApiGetUrl instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\", cachingModule);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_url`** *(string)* - Stores the URL for the request.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} url - The full URL for the GET request.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `url` is not provided.\n                 */\n                constructor(url: string, cachingModule: InterfaceCachingModule | null = null) {\n                    if (!url) throw new Error('Please enter the request URL.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._url = url;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _url: string;\n                /**\n                 * **Executes an HTTP GET request to the specified URL.**\n                 *\n                 * This method sends a GET request using `ApiLink.getURL()`, optionally applying caching if a `CachingModule` is provided.\n                 * It also **emits a request-start event** (`\"requestStarted_GET\"`) before execution.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or query parameters.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Pre-Request Handling**\n                 * - **`\"requestStarted_GET\"` Event**\n                 *   - This event is emitted **before the GET request is executed**.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ## **Caching Mechanism**\n                 * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n                 * - If cached data is found, it is returned **without making a new network request**.\n                 * - If no cached data exists, a new GET request is executed, and the response may be stored in the cache.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.getURL(this._url, options)`, which:\n                 *   - Emits `\"requestStarted_GET\"` before making the request.\n                 *   - Checks if the requested data is cached and returns it if available.\n                 *   - If not cached, makes an HTTP GET request to `_url`.\n                 *   - Returns the response and optionally stores it in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n                 * \n                 * // Listening to the \"requestStarted_GET\" event\n                 * apiGetUrl.onEventEmit(\"requestStarted_GET\", (url, options) => {\n                 *     console.log(`GET request started for: ${url}`);\n                 * });\n                 * \n                 * // Sending a GET request\n                 * apiGetUrl.call().then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n                    return this._apiLink.getURL(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified URL.**\n                 *\n                 * This method retrieves only the headers from the specified URL without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.head(this._url, options)`, which:\n                 *   - Sends an HTTP HEAD request to `_url`.\n                 *   - Extracts and returns the response headers.\n                 *   - Does **not** include the response body.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n                 * \n                 * // Sending a HEAD request\n                 * apiGetUrl.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiGetUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(options)`** - Sends a GET request to retrieve full response data.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.head(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified URL.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified URL \n                 * without performing an actual data operation. It is useful for checking which \n                 * HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.options(this._url, options)`, which:\n                 *   - Sends an HTTP OPTIONS request to `_url`.\n                 *   - Extracts the `Allow` header from the response.\n                 *   - Parses and returns the list of permitted HTTP methods.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiGetUrl.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiGetUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(options)`** - Sends a GET request to retrieve full response data.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._url, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a GET request to a specified URL.\n                 *\n                 * ## **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ## **Supported Events**\n                 * - `\"requestStarted_GET\"` - Triggered when a GET request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"GET\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiGetUrl = new hison.link.ApiGetUrl(\"https://api.example.com/users\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiGetUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"GET request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiGetUrl.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"GET request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(options)`** - Sends a GET request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('GET', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPostUrl` - A class for handling HTTP POST requests to a specified URL.**\n             *\n             * The `ApiPostUrl` class is responsible for sending HTTP POST requests to a provided URL.\n             * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n             *\n             * ## **Key Features**\n             * - **Executes HTTP POST requests** using `ApiLink`.\n             * - **Accepts a direct URL** instead of using a predefined service command.\n             * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             *\n             * ## **How It Works**\n             * - When instantiated, `ApiPostUrl` requires a valid URL and an optional `serviceCmd`.\n             * - The `call()` method sends a POST request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiPostUrl\n             * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a POST request\n             * apiPostUrl.call(requestData).then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPostUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"POST request completed!\", data);\n             * });\n             * ```\n             *\n             * ## **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ## **Return Value**\n             * - This class returns an instance of `ApiPostUrl`, which provides methods for executing POST requests to a specific URL.\n             *\n             * ## **Typical Use Cases**\n             * - **Sending data to an external API** using a full URL.\n             * - **Passing a `serviceCmd` for structured request routing**.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiPostUrl: class implements InterfaceApiPostUrl {\n                /**\n                 * **Creates an instance of `ApiPostUrl`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making POST requests to a specified URL.\n                 *\n                 * ## **Parameters**\n                 * - `url` *(string, required)* - The full URL to which the POST request will be sent.\n                 *   - If no `url` is provided, an error is thrown (`\"Please enter the request URL.\"`).\n                 * - `serviceCmd` *(optional, string)* - A **service command** that can be used to specify \n                 *   business logic on the server.\n                 *   - **Default:** `''` (empty string)\n                 *   - If provided, this is included in the request payload for structured routing.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Validates the `url`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the request URL.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `url` and `serviceCmd`.**\n                 *    - Defines the endpoint and optional service command for the POST request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPostUrl instance without caching\n                 * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 *\n                 * // Creating an ApiPostUrl instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_url`** *(string)* - Stores the URL for the request.\n                 * - **`_serviceCmd`** *(string)* - Specifies the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} url - The full URL for the POST request.\n                 * @param {string} [serviceCmd=''] - An optional service command for structured request routing.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `url` is not provided.\n                 */\n                constructor(url: string, serviceCmd: string = '', cachingModule: InterfaceCachingModule | null = null) {\n                    if (!url) throw new Error('Please enter the request URL.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._url = url;\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                private _url: string;\n                /**\n                 * **Executes an HTTP POST request to the specified URL with an optional service command.**\n                 *\n                 * This method sends a POST request using `ApiLink.postURL()`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ## **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Pre-Request Handling**\n                 * - **`\"requestStarted_POST\"` Event**\n                 *   - This event is emitted **before the POST request is executed**.\n                 *   - It includes the `serviceCmd`, request options, and request data.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ## **Caching Mechanism**\n                 * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n                 * - If cached data is found, it is returned **without making a new network request**.\n                 * - If no cached data exists, a new POST request is executed, and the response may be stored in the cache.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.postURL(this._url, requestData, this._serviceCmd, options)`, which:\n                 *   - Emits `\"requestStarted_POST\"` before making the request.\n                 *   - Checks if the requested data is cached and returns it if available.\n                 *   - If not cached, makes an HTTP POST request to `_url` with the provided `serviceCmd`.\n                 *   - Returns the response and optionally stores it in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Listening to the \"requestStarted_POST\" event\n                 * apiPostUrl.onEventEmit(\"requestStarted_POST\", (serviceCmd, options, requestData) => {\n                 *     console.log(`POST request started for service: ${serviceCmd}`, requestData);\n                 * });\n                 * \n                 * // Sending a POST request\n                 * apiPostUrl.call(requestData).then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n                    return this._apiLink.postURL(this._url, requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified URL.**\n                 *\n                 * This method retrieves only the headers from the specified URL without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.headURL(this._url, options)`, which:\n                 *   - Sends an HTTP HEAD request to `_url`.\n                 *   - Extracts and returns the response headers.\n                 *   - Does **not** include the response body.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPostUrl.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPostUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.headURL(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified URL.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified URL \n                 * without performing an actual data operation. It is useful for checking which \n                 * HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"POST\", \"OPTIONS\"]`).\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.options(this._url, options)`, which:\n                 *   - Sends an HTTP OPTIONS request to `_url`.\n                 *   - Extracts the `Allow` header from the response.\n                 *   - Parses and returns the list of permitted HTTP methods.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPostUrl.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"POST\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPostUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._url, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a POST request to a specified URL.\n                 *\n                 * ## **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ## **Supported Events**\n                 * - `\"requestStarted_POST\"` - Triggered when a POST request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"POST\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPostUrl = new hison.link.ApiPostUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPostUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"POST request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPostUrl.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"POST request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a POST request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('POST', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPutUrl` - A class for handling HTTP PUT requests to a specified URL.**\n             *\n             * The `ApiPutUrl` class is responsible for sending HTTP PUT requests to a provided URL.\n             * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n             *\n             * ## **Key Features**\n             * - **Executes HTTP PUT requests** using `ApiLink`.\n             * - **Accepts a direct URL** instead of using a predefined service command.\n             * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             *\n             * ## **How It Works**\n             * - When instantiated, `ApiPutUrl` requires a valid URL and an optional `serviceCmd`.\n             * - The `call()` method sends a PUT request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiPutUrl\n             * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a PUT request\n             * apiPutUrl.call(requestData).then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPutUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"PUT request completed!\", data);\n             * });\n             * ```\n             *\n             * ## **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ## **Return Value**\n             * - This class returns an instance of `ApiPutUrl`, which provides methods for executing PUT requests to a specific URL.\n             *\n             * ## **Typical Use Cases**\n             * - **Sending data to an external API** using a full URL.\n             * - **Passing a `serviceCmd` for structured request routing**.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiPutUrl: class implements InterfaceApiPutUrl {\n                /**\n                 * **Creates an instance of `ApiPutUrl`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making PUT requests to a specified URL.\n                 *\n                 * ## **Parameters**\n                 * - `url` *(string, required)* - The full URL to which the PUT request will be sent.\n                 *   - If no `url` is provided, an error is thrown (`\"Please enter the request URL.\"`).\n                 * - `serviceCmd` *(optional, string)* - A **service command** that can be used to specify \n                 *   business logic on the server.\n                 *   - **Default:** `''` (empty string)\n                 *   - If provided, this is included in the request payload for structured routing.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Validates the `url`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the request URL.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `url` and `serviceCmd`.**\n                 *    - Defines the endpoint and optional service command for the PUT request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPutUrl instance without caching\n                 * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 *\n                 * // Creating an ApiPutUrl instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_url`** *(string)* - Stores the URL for the request.\n                 * - **`_serviceCmd`** *(string)* - Specifies the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} url - The full URL for the PUT request.\n                 * @param {string} [serviceCmd=''] - An optional service command for structured request routing.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `url` is not provided.\n                 */\n                constructor(url: string, serviceCmd: string = '', cachingModule: InterfaceCachingModule | null = null) {\n                    if (!url) throw new Error('Please enter the request URL.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._url = url;\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                private _url: string;\n                /**\n                 * **Executes an HTTP PUT request to the specified URL with an optional service command.**\n                 *\n                 * This method sends a PUT request using `ApiLink.postURL()`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ## **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Pre-Request Handling**\n                 * - **`\"requestStarted_PUT\"` Event**\n                 *   - This event is emitted **before the PUT request is executed**.\n                 *   - It includes the `serviceCmd`, request options, and request data.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ## **Caching Mechanism**\n                 * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n                 * - If cached data is found, it is returned **without making a new network request**.\n                 * - If no cached data exists, a new PUT request is executed, and the response may be stored in the cache.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.postURL(this._url, requestData, this._serviceCmd, options)`, which:\n                 *   - Emits `\"requestStarted_PUT\"` before making the request.\n                 *   - Checks if the requested data is cached and returns it if available.\n                 *   - If not cached, makes an HTTP PUT request to `_url` with the provided `serviceCmd`.\n                 *   - Returns the response and optionally stores it in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Listening to the \"requestStarted_PUT\" event\n                 * apiPutUrl.onEventEmit(\"requestStarted_PUT\", (serviceCmd, options, requestData) => {\n                 *     console.log(`PUT request started for service: ${serviceCmd}`, requestData);\n                 * });\n                 * \n                 * // Sending a PUT request\n                 * apiPutUrl.call(requestData).then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n                    return this._apiLink.putURL(this._url, requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified URL.**\n                 *\n                 * This method retrieves only the headers from the specified URL without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.headURL(this._url, options)`, which:\n                 *   - Sends an HTTP HEAD request to `_url`.\n                 *   - Extracts and returns the response headers.\n                 *   - Does **not** include the response body.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPutUrl.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPutUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.headURL(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified URL.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified URL \n                 * without performing an actual data operation. It is useful for checking which \n                 * HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PUT\", \"OPTIONS\"]`).\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.options(this._url, options)`, which:\n                 *   - Sends an HTTP OPTIONS request to `_url`.\n                 *   - Extracts the `Allow` header from the response.\n                 *   - Parses and returns the list of permitted HTTP methods.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPutUrl.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"PUT\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPutUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._url, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a PUT request to a specified URL.\n                 *\n                 * ## **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ## **Supported Events**\n                 * - `\"requestStarted_PUT\"` - Triggered when a PUT request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PUT\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPutUrl = new hison.link.ApiPutUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPutUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"PUT request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPutUrl.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"PUT request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PUT request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('PUT', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiPatchUrl` - A class for handling HTTP PATCH requests to a specified URL.**\n             *\n             * The `ApiPatchUrl` class is responsible for sending HTTP PATCH requests to a provided URL.\n             * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n             *\n             * ## **Key Features**\n             * - **Executes HTTP PATCH requests** using `ApiLink`.\n             * - **Accepts a direct URL** instead of using a predefined service command.\n             * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             *\n             * ## **How It Works**\n             * - When instantiated, `ApiPatchUrl` requires a valid URL and an optional `serviceCmd`.\n             * - The `call()` method sends a PATCH request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiPatchUrl\n             * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a PATCH request\n             * apiPatchUrl.call(requestData).then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiPatchUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"PATCH request completed!\", data);\n             * });\n             * ```\n             *\n             * ## **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ## **Return Value**\n             * - This class returns an instance of `ApiPatchUrl`, which provides methods for executing PATCH requests to a specific URL.\n             *\n             * ## **Typical Use Cases**\n             * - **Sending data to an external API** using a full URL.\n             * - **Passing a `serviceCmd` for structured request routing**.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiPatchUrl: class implements InterfaceApiPatchUrl {\n                /**\n                 * **Creates an instance of `ApiPatchUrl`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making PATCH requests to a specified URL.\n                 *\n                 * ## **Parameters**\n                 * - `url` *(string, required)* - The full URL to which the PATCH request will be sent.\n                 *   - If no `url` is provided, an error is thrown (`\"Please enter the request URL.\"`).\n                 * - `serviceCmd` *(optional, string)* - A **service command** that can be used to specify \n                 *   business logic on the server.\n                 *   - **Default:** `''` (empty string)\n                 *   - If provided, this is included in the request payload for structured routing.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Validates the `url`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the request URL.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `url` and `serviceCmd`.**\n                 *    - Defines the endpoint and optional service command for the PATCH request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiPatchUrl instance without caching\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 *\n                 * // Creating an ApiPatchUrl instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_url`** *(string)* - Stores the URL for the request.\n                 * - **`_serviceCmd`** *(string)* - Specifies the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} url - The full URL for the PATCH request.\n                 * @param {string} [serviceCmd=''] - An optional service command for structured request routing.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `url` is not provided.\n                 */\n                constructor(url: string, serviceCmd: string = '', cachingModule: InterfaceCachingModule | null = null) {\n                    if (!url) throw new Error('Please enter the request URL.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._url = url;\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                private _url: string;\n                /**\n                 * **Executes an HTTP PATCH request to the specified URL with an optional service command.**\n                 *\n                 * This method sends a PATCH request using `ApiLink.postURL()`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ## **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Pre-Request Handling**\n                 * - **`\"requestStarted_PATCH\"` Event**\n                 *   - This event is emitted **before the PATCH request is executed**.\n                 *   - It includes the `serviceCmd`, request options, and request data.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ## **Caching Mechanism**\n                 * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n                 * - If cached data is found, it is returned **without making a new network request**.\n                 * - If no cached data exists, a new PATCH request is executed, and the response may be stored in the cache.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.postURL(this._url, requestData, this._serviceCmd, options)`, which:\n                 *   - Emits `\"requestStarted_PATCH\"` before making the request.\n                 *   - Checks if the requested data is cached and returns it if available.\n                 *   - If not cached, makes an HTTP PATCH request to `_url` with the provided `serviceCmd`.\n                 *   - Returns the response and optionally stores it in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Listening to the \"requestStarted_PATCH\" event\n                 * apiPatchUrl.onEventEmit(\"requestStarted_PATCH\", (serviceCmd, options, requestData) => {\n                 *     console.log(`PATCH request started for service: ${serviceCmd}`, requestData);\n                 * });\n                 * \n                 * // Sending a PATCH request\n                 * apiPatchUrl.call(requestData).then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n                    return this._apiLink.patchURL(this._url, requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified URL.**\n                 *\n                 * This method retrieves only the headers from the specified URL without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.headURL(this._url, options)`, which:\n                 *   - Sends an HTTP HEAD request to `_url`.\n                 *   - Extracts and returns the response headers.\n                 *   - Does **not** include the response body.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiPatchUrl.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiPatchUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.headURL(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified URL.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified URL \n                 * without performing an actual data operation. It is useful for checking which \n                 * HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"PATCH\", \"OPTIONS\"]`).\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.options(this._url, options)`, which:\n                 *   - Sends an HTTP OPTIONS request to `_url`.\n                 *   - Extracts the `Allow` header from the response.\n                 *   - Parses and returns the list of permitted HTTP methods.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiPatchUrl.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"PATCH\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiPatchUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._url, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a PATCH request to a specified URL.\n                 *\n                 * ## **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ## **Supported Events**\n                 * - `\"requestStarted_PATCH\"` - Triggered when a PATCH request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"PATCH\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiPatchUrl = new hison.link.ApiPatchUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiPatchUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"PATCH request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiPatchUrl.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"PATCH request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a PATCH request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('PATCH', eventName, eventFunc);\n                };\n            },\n            /**\n             * **`ApiDeleteUrl` - A class for handling HTTP DELETE requests to a specified URL.**\n             *\n             * The `ApiDeleteUrl` class is responsible for sending HTTP DELETE requests to a provided URL.\n             * It integrates with `ApiLink` to execute the request, handle events, and optionally cache responses.\n             *\n             * ## **Key Features**\n             * - **Executes HTTP DELETE requests** using `ApiLink`.\n             * - **Accepts a direct URL** instead of using a predefined service command.\n             * - **Supports passing a `serviceCmd` parameter**, which can be used to specify business logic on the server.\n             * - **Supports response caching** via an optional `CachingModule`.\n             * - **Emits request lifecycle events** using `EventEmitter`.\n             * - **Allows event listeners** for monitoring request execution.\n             *\n             * ## **How It Works**\n             * - When instantiated, `ApiDeleteUrl` requires a valid URL and an optional `serviceCmd`.\n             * - The `call()` method sends a DELETE request with the provided request data.\n             * - If caching is enabled, responses may be retrieved from the cache instead of making a new request.\n             * - Event listeners can be attached to monitor the request lifecycle.\n             *\n             * ## **Example Usage**\n             * ```typescript\n             * // Creating an instance of ApiDeleteUrl\n             * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n             *\n             * // Creating request data\n             * const requestData = new hison.data.DataWrapper();\n             * requestData.putString(\"username\", \"Alice\");\n             * \n             * // Sending a DELETE request\n             * apiDeleteUrl.call(requestData).then(response => {\n             *     console.log(response.data); // Response data\n             * });\n             *\n             * // Creating an instance with caching\n             * const cachingModule = new hison.link.CachingModule(20);\n             * const cachedApiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n             *\n             * // Handling request events\n             * cachedApiDeleteUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n             *     console.log(\"DELETE request completed!\", data);\n             * });\n             * ```\n             *\n             * ## **Internal Components**\n             * - **`ApiLink`**: Handles request execution and response processing.\n             * - **`EventEmitter`**: Manages event-driven request handling.\n             * - **`CachingModule` (optional)**: Stores and retrieves cached API responses.\n             *\n             * ## **Return Value**\n             * - This class returns an instance of `ApiDeleteUrl`, which provides methods for executing DELETE requests to a specific URL.\n             *\n             * ## **Typical Use Cases**\n             * - **Sending data to an external API** using a full URL.\n             * - **Passing a `serviceCmd` for structured request routing**.\n             * - **Using cached responses** to reduce redundant API calls.\n             * - **Handling event-driven request monitoring** via `onEventEmit`.\n             */\n            ApiDeleteUrl: class implements InterfaceApiDeleteUrl {\n                /**\n                 * **Creates an instance of `ApiDeleteUrl`, initializing API request handling with optional caching.**\n                 *\n                 * The constructor sets up the **API request configuration** and **event handling mechanisms** \n                 * required for making DELETE requests to a specified URL.\n                 *\n                 * ## **Parameters**\n                 * - `url` *(string, required)* - The full URL to which the DELETE request will be sent.\n                 *   - If no `url` is provided, an error is thrown (`\"Please enter the request URL.\"`).\n                 * - `serviceCmd` *(optional, string)* - A **service command** that can be used to specify \n                 *   business logic on the server.\n                 *   - **Default:** `''` (empty string)\n                 *   - If provided, this is included in the request payload for structured routing.\n                 * - `cachingModule` *(optional, CachingModule)* - A caching module to store and retrieve API responses.\n                 *   - If provided, responses may be retrieved from the cache instead of making a new request.\n                 *\n                 * ## **Initialization Process**\n                 * 1. **Validates the `url`.**\n                 *    - If it is missing, an error is thrown (`\"Please enter the request URL.\"`).\n                 * 2. **Checks if a valid `CachingModule` is provided.**\n                 *    - If caching is enabled, `_cachingModule` is assigned.\n                 * 3. **Creates an `EventEmitter` instance.**\n                 *    - This allows event-driven request monitoring (e.g., request completed, error occurred).\n                 * 4. **Instantiates an `ApiLink` instance.**\n                 *    - Handles actual request execution and response processing.\n                 * 5. **Stores the `url` and `serviceCmd`.**\n                 *    - Defines the endpoint and optional service command for the DELETE request.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * // Creating an ApiDeleteUrl instance without caching\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 *\n                 * // Creating an ApiDeleteUrl instance with caching\n                 * const cachingModule = new hison.link.CachingModule(20);\n                 * const cachedApiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\", cachingModule);\n                 * ```\n                 *\n                 * ## **Related Properties**\n                 * - **`_url`** *(string)* - Stores the URL for the request.\n                 * - **`_serviceCmd`** *(string)* - Specifies the service command for request routing.\n                 * - **`_cachingModule`** *(CachingModule | null)* - Manages response caching.\n                 * - **`_eventEmitter`** *(EventEmitter)* - Handles event-based request monitoring.\n                 * - **`_apiLink`** *(ApiLink)* - Executes and processes the API request.\n                 *\n                 * @param {string} url - The full URL for the DELETE request.\n                 * @param {string} [serviceCmd=''] - An optional service command for structured request routing.\n                 * @param {CachingModule} [cachingModule=null] - An optional caching module.\n                 * @throws {Error} If `url` is not provided.\n                 */\n                constructor(url: string, serviceCmd: string = '', cachingModule: InterfaceCachingModule | null = null) {\n                    if (!url) throw new Error('Please enter the request URL.');\n                    if (cachingModule && cachingModule.getIsCachingModule && cachingModule.getIsCachingModule()) this._cachingModule = cachingModule;\n                    this._eventEmitter = new EventEmitter();\n                    this._apiLink = new ApiLink(this._eventEmitter, this._cachingModule);\n                    this._url = url;\n                    this._serviceCmd = serviceCmd;\n                };\n                private _cachingModule: InterfaceCachingModule | null = null;\n                private _eventEmitter: EventEmitter;\n                private _apiLink: ApiLink;\n                private _serviceCmd: string;\n                private _url: string;\n                /**\n                 * **Executes an HTTP DELETE request to the specified URL with an optional service command.**\n                 *\n                 * This method sends a DELETE request using `ApiLink.postURL()`, encapsulating request data in a `DataWrapper`\n                 * and invoking necessary pre-request hooks and event emissions.\n                 *\n                 * ## **Parameters**\n                 * - `requestData` *(any, required)* - The data to be sent in the request.\n                 *   - If it is a `DataWrapper`, it is sent as-is.\n                 *   - If it is a standard object, it is converted to a JSON payload.\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers or timeout settings.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Pre-Request Handling**\n                 * - **`\"requestStarted_DELETE\"` Event**\n                 *   - This event is emitted **before the DELETE request is executed**.\n                 *   - It includes the `serviceCmd`, request options, and request data.\n                 *   - Can be used for logging, request tracking, or debugging.\n                 *\n                 * ## **Caching Mechanism**\n                 * - If a `CachingModule` is used, the method first checks if the requested data is available in the cache.\n                 * - If cached data is found, it is returned **without making a new network request**.\n                 * - If no cached data exists, a new DELETE request is executed, and the response may be stored in the cache.\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing:\n                 *   - `data` *(any)* - The API response data.\n                 *   - `response` *(Response)* - The original HTTP response object.\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.postURL(this._url, requestData, this._serviceCmd, options)`, which:\n                 *   - Emits `\"requestStarted_DELETE\"` before making the request.\n                 *   - Checks if the requested data is cached and returns it if available.\n                 *   - If not cached, makes an HTTP DELETE request to `_url` with the provided `serviceCmd`.\n                 *   - Returns the response and optionally stores it in the cache.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Creating request data\n                 * const requestData = new hison.data.DataWrapper();\n                 * requestData.putString(\"username\", \"Alice\");\n                 * \n                 * // Listening to the \"requestStarted_DELETE\" event\n                 * apiDeleteUrl.onEventEmit(\"requestStarted_DELETE\", (serviceCmd, options, requestData) => {\n                 *     console.log(`DELETE request started for service: ${serviceCmd}`, requestData);\n                 * });\n                 * \n                 * // Sending a DELETE request\n                 * apiDeleteUrl.call(requestData).then(response => {\n                 *     console.log(response.data); // Response data\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`head(options)`** - Sends an HTTP HEAD request for metadata retrieval.\n                 * - **`options(options)`** - Sends an HTTP OPTIONS request to retrieve allowed methods.\n                 *\n                 * @param {any} requestData - The data to be sent in the request.\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<{ data: any; response: Response }>} A promise resolving to the API response.\n                 */\n                call = (requestData: any, options: Record<string, any> = {}): Promise<{ data: any; response: Response; } | null> => {\n                    return this._apiLink.deleteURL(this._url, requestData, this._serviceCmd, options);\n                };\n                /**\n                 * **Sends an HTTP HEAD request to the specified URL.**\n                 *\n                 * This method retrieves only the headers from the specified URL without downloading the response body.\n                 * It is useful for checking metadata such as content type, content length, and caching information.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an object containing HTTP headers as key-value pairs.\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.headURL(this._url, options)`, which:\n                 *   - Sends an HTTP HEAD request to `_url`.\n                 *   - Extracts and returns the response headers.\n                 *   - Does **not** include the response body.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending a HEAD request\n                 * apiDeleteUrl.head().then(headers => {\n                 *     console.log(headers[\"content-type\"]); // e.g., \"application/json\"\n                 * });\n                 *\n                 * // Sending a HEAD request with additional headers\n                 * apiDeleteUrl.head({ headers: { \"Authorization\": \"Bearer token\" } }).then(headers => {\n                 *     console.log(headers);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n                 * - **`options(options)`** - Sends an OPTIONS request to check allowed HTTP methods.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<Record<string, string>>} A promise resolving to an object containing response headers.\n                 */\n                head = (options: Record<string, any> = {}): Promise<Record<string, string>> => {\n                    return this._apiLink.headURL(this._url, options);\n                };\n                /**\n                 * **Sends an HTTP OPTIONS request to the specified URL.**\n                 *\n                 * This method retrieves the list of allowed HTTP methods for the specified URL \n                 * without performing an actual data operation. It is useful for checking which \n                 * HTTP methods are permitted for a specific endpoint.\n                 *\n                 * ## **Parameters**\n                 * - `options` *(optional, Record<string, any>)* - Additional request options such as headers.\n                 *   - **Default:** `{}` (empty object)\n                 *\n                 * ## **Return Value**\n                 * - A `Promise` resolving to an array of allowed HTTP methods (e.g., `[\"GET\", \"DELETE\", \"OPTIONS\"]`).\n                 *\n                 * ## **Behavior**\n                 * - Calls `this._apiLink.options(this._url, options)`, which:\n                 *   - Sends an HTTP OPTIONS request to `_url`.\n                 *   - Extracts the `Allow` header from the response.\n                 *   - Parses and returns the list of permitted HTTP methods.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Sending an OPTIONS request\n                 * apiDeleteUrl.options().then(allowedMethods => {\n                 *     console.log(allowedMethods); // e.g., [\"GET\", \"DELETE\", \"OPTIONS\"]\n                 * });\n                 *\n                 * // Sending an OPTIONS request with additional headers\n                 * apiDeleteUrl.options({ headers: { \"Authorization\": \"Bearer token\" } }).then(allowedMethods => {\n                 *     console.log(allowedMethods);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request to execute an API operation.\n                 * - **`head(options)`** - Sends a HEAD request to retrieve response headers.\n                 *\n                 * @param {Record<string, any>} [options={}] - Additional request options.\n                 * @returns {Promise<string[]>} A promise resolving to an array of allowed HTTP methods.\n                 */\n                options = (options: Record<string, any> = {}): Promise<string[]> => {\n                    return this._apiLink.options(this._url, options);\n                };\n                /**\n                 * **Registers an event listener for API request lifecycle events.**\n                 *\n                 * This method allows attaching a callback function to be executed when a specified event \n                 * occurs during the execution of a DELETE request to a specified URL.\n                 *\n                 * ## **Parameters**\n                 * - `eventName` *(string, required)* - The name of the event to listen for.\n                 * - `eventFunc` *(function, required)* - The callback function to be executed when the event occurs.\n                 *\n                 * ## **Supported Events**\n                 * - `\"requestStarted_DELETE\"` - Triggered when a DELETE request begins.\n                 * - `\"requestCompleted_Response\"` - Triggered when the API response is received.\n                 * - `\"requestCompleted_Data\"` - Triggered when response data is successfully processed.\n                 * - `\"requestError\"` - Triggered when an error occurs during the request.\n                 *\n                 * ## **Behavior**\n                 * - Delegates the event registration to `ApiLink.onEventEmit()`, specifying `\"DELETE\"` as the method type.\n                 * - The provided `eventFunc` is executed whenever the specified event is emitted.\n                 *\n                 * ## **Example Usage**\n                 * ```typescript\n                 * const apiDeleteUrl = new hison.link.ApiDeleteUrl(\"https://api.example.com/users\", \"UserService.createUser\");\n                 * \n                 * // Register an event listener for when the request completes\n                 * apiDeleteUrl.onEventEmit(\"requestCompleted_Data\", (data, response) => {\n                 *     console.log(\"DELETE request completed!\", data);\n                 * });\n                 * \n                 * // Register an event listener for request errors\n                 * apiDeleteUrl.onEventEmit(\"requestError\", (error) => {\n                 *     console.error(\"DELETE request failed:\", error);\n                 * });\n                 * ```\n                 *\n                 * ## **Related Methods**\n                 * - **`call(requestData, options)`** - Sends a DELETE request, triggering events during execution.\n                 *\n                 * @param {string} eventName - The name of the event to listen for.\n                 * @param {(...args: any[]) => void} eventFunc - The callback function to be executed when the event occurs.\n                 */\n                onEventEmit = (eventName: string, eventFunc: (...args: any[]) => void) => {\n                    this._apiLink.onEventEmit('DELETE', eventName, eventFunc);\n                };\n            },\n        };\n    };\n    \n    const customOption = new CustomOption();\n    const hison = new HisonCore();\n    return {\n        setDateFormat(str: string) {customOption.utils.dateFormat = str;},\n        setTimeFormat(str: string) {customOption.utils.timeFormat = str;},\n        setDatetimeFormat(str: string) {customOption.utils.datetimeFormat = str;},\n        setYearFormat(str: string) {customOption.utils.yearFormat = str;},\n        setMonthFormat(str: string) {customOption.utils.monthFormat = str;},\n        setMonthNameFormat(str: string) {customOption.utils.monthNameFormat = str;},\n        setYearMonthFormat(str: string) {customOption.utils.yearMonthFormat = str;},\n        setDayFormat(str: string) {customOption.utils.dayFormat = str;},\n        setDayOfWeekFormat(str: string) {customOption.utils.dayOfWeekFormat = str;},\n        setHourFormat(str: string) {customOption.utils.hourFormat = str;},\n        setHourMinuteFormat(str: string) {customOption.utils.hourMinuteFormat = str;},\n        setMinuteFormat(str: string) {customOption.utils.minuteFormat = str;},\n        setSecondFormat(str: string) {customOption.utils.secondFormat = str;},\n        setNumberFormat(str: string) {customOption.utils.numberFormat = str;},\n        setCharByteLess2047(num: number) {customOption.utils.LESSOREQ_0X7FF_BYTE = num;},\n        setCharByteLess65535(num: number) {customOption.utils.LESSOREQ_0XFFFF_BYTE = num;},\n        setCharByteGreater65535(num: number) {customOption.utils.GREATER_0XFFFF_BYTE = num;},\n        getDateFormat(): string {return customOption.utils.dateFormat;},\n        getTimeFormat(): string {return customOption.utils.timeFormat;},\n        getDatetimeFormat(): string {return customOption.utils.datetimeFormat;},\n        getYearFormat(): string {return customOption.utils.yearFormat;},\n        getMonthFormat(): string {return customOption.utils.monthFormat;},\n        getMonthNameFormat(): string {return customOption.utils.monthNameFormat;},\n        getYearMonthFormat(): string {return customOption.utils.yearMonthFormat;},\n        getDayFormat(): string {return customOption.utils.dayFormat;},\n        getDayOfWeekFormat(): string {return customOption.utils.dayOfWeekFormat;},\n        getHourFormat(): string {return customOption.utils.hourFormat;},\n        getHourMinuteFormat(): string {return customOption.utils.hourMinuteFormat;},\n        getMinuteFormat(): string {return customOption.utils.minuteFormat;},\n        getSecondFormat(): string {return customOption.utils.secondFormat;},\n        getNumberFormat(): string {return customOption.utils.numberFormat;},\n        getCharByteLess2047(): number {return customOption.utils.LESSOREQ_0X7FF_BYTE;},\n        getCharByteLess65535(): number {return customOption.utils.LESSOREQ_0XFFFF_BYTE;},\n        getCharByteGreater65535(): number {return customOption.utils.GREATER_0XFFFF_BYTE;},\n        setShieldURL(str: string) {customOption.shield.shieldURL = str;},\n        setExposeIpList(arr: string[]) {customOption.shield.exposeIpList = arr;},\n        setIsFreeze(bool: boolean) {customOption.shield.isFreeze = bool;},\n        setIsPossibleGoBack(bool: boolean) {customOption.shield.isPossibleGoBack = bool;},\n        setIsPossibleOpenDevTool(bool: boolean) {customOption.shield.isPossibleOpenDevTool = bool;},\n        getShieldURL(): string {return customOption.shield.shieldURL;},\n        getExposeIpList(): string[] {return customOption.shield.exposeIpList;},\n        getIsFreeze(): boolean {return customOption.shield.isFreeze;},\n        getIsPossibleGoBack(): boolean {return customOption.shield.isPossibleGoBack;},\n        getIsPossibleOpenDevTool(): boolean {return customOption.shield.isPossibleOpenDevTool;},\n        setConvertValue(func: ConvertValue) {customOption.data.convertValue = func;},\n        setProtocol(str: string) {customOption.link.protocol = str;},\n        setDomain(str: string) {customOption.link.domain = str;},\n        setControllerPath(str: string) {customOption.link.controllerPath = str;},\n        setTimeout(num: number) {customOption.link.timeout = num;},\n        setWebSocketProtocol(str: string) {customOption.link.webSocketProtocol = str;},\n        setWebSocketEndPoint(str: string) {customOption.link.webSocketEndPoint = str;},\n        setCachingLimit(num: number) {customOption.link.cachingLimit = num;},\n        getProtocol(): string {return customOption.link.protocol;},\n        getDomain(): string {return customOption.link.domain;},\n        getControllerPath(): string {return customOption.link.controllerPath;},\n        getTimeout(): number {return customOption.link.timeout;},\n        getWebSocketProtocol(): string {return customOption.link.webSocketProtocol;},\n        getWebSocketEndPoint(): string {return customOption.link.webSocketEndPoint;},\n        getCachingLimit(): number {return customOption.link.cachingLimit;},\n        setBeforeGetRequst(func: BeforeGetRequst) {customOption.link.beforeGetRequst = func;},\n        setBeforePostRequst(func: BeforePostRequst) {customOption.link.beforePostRequst = func},\n        setBeforePutRequst(func: BeforePutRequst) {customOption.link.beforePutRequst = func},\n        setBeforePatchRequst(func: BeforePatchRequst) {customOption.link.beforePatchRequst = func},\n        setBeforeDeleteRequst(func: BeforeDeleteRequst) {customOption.link.beforeDeleteRequst = func},\n        setInterceptApiResult(func: InterceptApiResult) {customOption.link.interceptApiResult = func},\n        setInterceptApiError(func: InterceptApiError) {customOption.link.interceptApiError = func},\n        utils : {\n            isAlpha(str: string): boolean { return hison.utils.isAlpha(str) },\n            isAlphaNumber(str: string): boolean { return hison.utils.isAlphaNumber(str) },\n            isNumber(str: string): boolean { return hison.utils.isNumber(str) },\n            isNumberSymbols(str: string): boolean { return hison.utils.isNumberSymbols(str) },\n            isIncludeSymbols(str: string): boolean { return hison.utils.isIncludeSymbols(str) },\n            isLowerAlpha(str: string): boolean { return hison.utils.isLowerAlpha(str) },\n            isLowerAlphaAndNumber(str: string): boolean { return hison.utils.isLowerAlphaAndNumber(str) },\n            isUpperAlpha(str: string): boolean { return hison.utils.isUpperAlpha(str) },\n            isUpperAlphaNumber(str: string): boolean { return hison.utils.isUpperAlphaNumber(str) },\n            isNumeric(num: any): boolean { return hison.utils.isNumeric(num) },\n            isInteger(num: any): boolean { return hison.utils.isInteger(num) },\n            isPositiveInteger(num: any): boolean { return hison.utils.isPositiveInteger(num) },\n            isNegativeInteger(num: any): boolean { return hison.utils.isNegativeInteger(num) },\n            isArray(arr: any): boolean { return hison.utils.isArray(arr) },\n            isObject(obj: any): boolean { return hison.utils.isObject(obj) },\n            isDate(date: DateObject | string): boolean { return hison.utils.isDate(date) },\n            isTime(time: TimeObject | string): boolean { return hison.utils.isTime(time) },\n            isDatetime(datetime: DateTimeObject | string): boolean { return hison.utils.isDatetime(datetime) },\n            isEmail(str: string): boolean { return hison.utils.isEmail(str) },\n            isURL(str: string): boolean { return hison.utils.isURL(str) },\n            isValidMask(str: string, mask: string): boolean { return hison.utils.isValidMask(str, mask) },\n            getDateObject(date: Date | string): DateObject { return hison.utils.getDateObject(date) },\n            getTimeObject(time: Date | string): TimeObject { return hison.utils.getTimeObject(time) },\n            getDatetimeObject(datetime: Date | string): DateTimeObject | null { return hison.utils.getDatetimeObject(datetime) },\n            addDate(datetime: DateTimeObject | DateObject | string, addValue?: string | number, addType?: string, format?: string): DateTimeObject | string { return hison.utils.addDate(datetime, addValue, addType, format) },\n            getDateDiff(datetime1: DateTimeObject | DateObject | string, datetime2: DateTimeObject | DateObject | string, diffType?: string): number { return hison.utils.getDateDiff(datetime1, datetime2, diffType) },\n            getMonthName(month: number | string, isFullName?: boolean): string { return hison.utils.getMonthName(month, isFullName) },\n            getDateWithFormat(datetime: DateTimeObject | DateObject | string, format?: string): string { return hison.utils.getDateWithFormat(datetime, format) },\n            getDayOfWeek(date: DateObject | string, dayType?: string): string { return hison.utils.getDayOfWeek(date, dayType) },\n            getLastDay(date: DateObject | string): number { return hison.utils.getLastDay(date) },\n            getSysYear(format?: string): string { return hison.utils.getSysYear(format) },\n            getSysMonth(format?: string): string { return hison.utils.getSysMonth(format) },\n            getSysYearMonth(format?: string): string { return hison.utils.getSysYearMonth(format) },\n            getSysDay(format?: string): string { return hison.utils.getSysDay(format) },\n            getSysDayOfWeek(format?: string): string { return hison.utils.getSysDayOfWeek(format) },\n            getSysHour(format?: string): string { return hison.utils.getSysHour(format) },\n            getSysHourMinute(format?: string): string { return hison.utils.getSysHourMinute(format) },\n            getSysMinute(format?: string): string { return hison.utils.getSysMinute(format) },\n            getSysSecond(format?: string): string { return hison.utils.getSysSecond(format) },\n            getSysTime(format?: string): string { return hison.utils.getSysTime(format) },\n            getSysDate(format?: string): string { return hison.utils.getSysDate(format) },\n            getCeil(num: number, precision?: number): number { return hison.utils.getCeil(num, precision) },\n            getFloor(num: number, precision?: number): number { return hison.utils.getFloor(num, precision) },\n            getRound(num: number, precision?: number): number { return hison.utils.getRound(num, precision) },\n            getTrunc(num: number, precision?: number): number { return hison.utils.getTrunc(num, precision) },\n            getByteLength(str: string): number { return hison.utils.getByteLength(str) },\n            getCutByteLength(str: string, cutByte: number): string { return hison.utils.getCutByteLength(str, cutByte) },\n            getStringLenForm(str: string, length: number): string { return hison.utils.getStringLenForm(str, length) },\n            getLpad(str: string, padStr: string, length: number): string { return hison.utils.getLpad(str, padStr, length) },\n            getRpad(str: string, padStr: string, length: number): string { return hison.utils.getRpad(str, padStr, length) },\n            getTrim(str: string): string { return hison.utils.getTrim(str, ) },\n            getReplaceAll(str: string, targetStr: string, replaceStr?: string): string { return hison.utils.getReplaceAll(str, targetStr, replaceStr) },\n            getNumberFormat(value: number, format?: string): string { return hison.utils.getNumberFormat(value, format) },\n            getRemoveExceptNumbers(str: string): string { return hison.utils.getRemoveExceptNumbers(str) },\n            getRemoveNumbers(str: string): string { return hison.utils.getRemoveNumbers(str) },\n            getReverse(str: string): string { return hison.utils.getReverse(str) },\n            getToBoolean(value: any): boolean { return hison.utils.getToBoolean(value) },\n            getToNumber(value: any, impossibleValue?: number): number { return hison.utils.getToNumber(value, impossibleValue) },\n            getToFloat(value: any, impossibleValue?: number): number { return hison.utils.getToFloat(value, impossibleValue) },\n            getToInteger(value: any, impossibleValue?: number): number { return hison.utils.getToInteger(value, impossibleValue) },\n            getToString(str: any, impossibleValue?: string): string { return hison.utils.getToString(str, impossibleValue) },\n            nvl(val: any, defaultValue: any): any { return hison.utils.nvl(val, defaultValue) },\n            getFileExtension(str: string): string { return hison.utils.getFileExtension(str) },\n            getFileName(str: string): string { return hison.utils.getFileName(str) },\n            getDecodeBase64(str: string): string { return hison.utils.getDecodeBase64(str) },\n            getEncodeBase64(str: string): string { return hison.utils.getEncodeBase64(str) },\n            deepCopyObject(object: any, visited?: { source: any, copy: any }[]): any { return hison.utils.deepCopyObject(object, visited) },\n        },\n        shield : {\n            isHison: true,\n            excute(hison: Hison) { hison.shield.excute(hison) },\n        },\n        data: hison.data,\n        link: hison.link,\n    }\n}\n\nexport default createHison();\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","MonthFullName","MonthShortName","DayOfWeekFullName","DayOfWeekShortName","DayOfWeekFullNameKR","DayOfWeekShortNameKR","limit","_removeKey","index","_keys","indexOf","splice","hasKey","_cache","value","hison","utils","deepCopyObject","push","put","remove","length","_limit","oldestKey","shift","undefined","result","getAll","keys","forEach","getKeys","clear","events","on","eventName","listener","emit","args","eventEmitter","cachingModule","_cachingModule","_getRsultDataWrapper","resultData","data","constructor","DATAWRAPPER","DataWrapper","Array","putDataModel","DataModel","_getCachingResult","resourcePath","isWebSocketConnection","customOption","link","interceptApiResult","response","_getFetch","methodName","requestPath","options","serviceCmd","requestData","getIsDataWrapper","putString","getSerialized","cmd","JSON","parse","fetchOptions","method","headers","body","Error","timeoutPromise","timeout","Number","isInteger","Promise","_","reject","setTimeout","fecthArr","fetch","_request","fecthInfo","cachingKey","race","then","_eventEmitter","contentType","includes","json","text","rtn","resolve","catch","error","interceptApiError","beforeGetRequst","protocol","domain","post","beforePostRequst","METHOD_NAME","controllerPath","beforePutRequst","patch","beforePatchRequst","delete","beforeDeleteRequst","head","url","ok","status","allowHeader","split","map","trim","getURL","postURL","putURL","patchURL","deleteURL","headURL","optionsURL","onEventEmit","eventFunc","requestEventName","getIsCachingModule","isAlpha","str","test","isAlphaNumber","isNumber","isNumberSymbols","isIncludeSymbols","isLowerAlpha","isLowerAlphaAndNumber","isUpperAlpha","isUpperAlphaNumber","isNumeric","num","isNaN","isFinite","isPositiveInteger","isNegativeInteger","isArray","arr","isObject","isDate","date","dateObj","getDateObject","yyyy","getToString","y","MM","M","dd","d","getToNumber","Date","getFullYear","getMonth","getDate","err","isTime","time","timeObj","getTimeObject","hh","h","mm","m","ss","s","isValidTimePart","max","isDatetime","datetime","datetimeObj","getDatetimeObject","isEmail","isURL","urlStr","isValidMask","mask","i","char","charAt","maskChar","parseInt","year","month","day","substring","hours","minutes","seconds","dateArr","getHours","getMinutes","getSeconds","datetimeArr","assign","addDate","addValue","addType","format","dateFormat","datetimeFormat","stringify","setFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","rtnObj","getDateWithFormat","getDateDiff","datetime1","datetime2","diffType","datetimeObj1","datetimeObj2","d1","d2","Math","floor","getTime","getMonthName","isFullName","toString","padStart","MMMM","MMM","getDayOfWeek","dayType","dayOfWeekFormat","dayOfWeek","getDay","toLowerCase","getLastDay","nextMonthFirstDay","getSysYear","yearFormat","currentDate","getSysMonth","monthFormat","sysMonth","getSysYearMonth","yearMonthFormat","getSysDay","dayFormat","getSysDayOfWeek","getSysHour","hourFormat","getSysHourMinute","hourMinuteFormat","getSysMinute","minuteFormat","getSysSecond","secondFormat","getSysTime","timeFormat","getSysDate","getCeil","precision","trunc","factor","pow","ceil","getFloor","getRound","round","getTrunc","getByteLength","byteLength","charCode","charCodeAt","LESSOREQ_0X7FF_BYTE","LESSOREQ_0XFFFF_BYTE","GREATER_0XFFFF_BYTE","getCutByteLength","cutByte","cutIndex","getStringLenForm","strLength","totalSpaces","gaps","spacePerGap","extraSpaces","repeat","getLpad","padStr","getRpad","getTrim","getReplaceAll","targetStr","replaceStr","join","getNumberFormat","oriValue","matches","numberFormat","match","prefix","suffix","intergerFormat","decimalFormat","numStr","isNegative","interger","decimal","getToFloat","toLocaleString","minimumFractionDigits","lastIndexOf","maximumFractionDigits","getRemoveExceptNumbers","replace","getRemoveNumbers","getReverse","reverse","getToBoolean","impossibleValue","parseFloat","getToInteger","String","description","nvl","val","defaultValue","getFileExtension","extension","pop","getFileName","fileName","lastDotIndex","getDecodeBase64","decodeURIComponent","atob","c","slice","getEncodeBase64","btoa","encodeURIComponent","p1","fromCharCode","object","visited","Response","clone","getIsDataModel","source","copy","j","shield","excute","isHison","func","httpRequest","deepFreeze","getOwnPropertyNames","name","freeze","isFreeze","location","href","shieldURL","ip","exposeIpList","isPossibleGoBack","history","pushState","document","title","window","addEventListener","isPossibleOpenDevTool","msg","detectDevTool","allow","start","end","alert","write","onkeydown","event","preventDefault","shieldFuncCreateBlockDevMode","XMLHttpRequest","onreadystatechange","readyState","DONE","open","responseType","send","keyOrObject","_isDataWrapper","_put","_data","newData","getRows","getString","getDataModel","getObject","containsKey","isEmpty","size","values","_cols","_rows","_isDataModel","_deepCopy","convertValue","_isPositiveIntegerIncludingZero","intNum","_getValidRowIndex","rowIndex","_isConvertibleString","_hasColumn","column","_checkColumn","_checkValidFunction","_checkBoolean","_checkOriginObject","_checkArray","_getColumnType","col","_makeValue","_getValidColValue","_getValidRowValue","chkType","_addCol","_addRow","row","tempRow","_getNullColumnFirstRowIndex","_getDuplColumnFirstRowIndex","checkedValues","_getInValidColumnFirstRowIndex","validator","isDeclare","getColumns","getColumnValues","addColumn","addColumns","columns","setColumnSameValue","setColumnSameFormat","formatter","getRow","getRowAsDataModel","addRow","rowIndexOrRow","emptyRow","validIndex","newRow","startRow","endRow","sRow","eRow","getRowsAsDataModel","addRows","rows","copyCol","copyRow","getValue","setValue","removeColumn","filter","oriColumn","removeColumns","removeRow","getColumnCount","getRowCount","hasColumn","setValidColumns","isNotNullColumn","findFirstRowNullColumn","nullColumnFirstRowIndex","isNotDuplColumn","findFirstRowDuplColumn","duplColumnFirstRowIndex","isValidValue","vaildator","findFirstRowInvalidValue","inValidColumnFirstRowIndex","searchRowIndexes","condition","_this","matched","matchesCondition","searchRows","searchRowsAsDataModel","searchAndModify","filterRowIndexes","filterRows","filterRowsAsDataModel","filterAndModify","setColumnSorting","newColumns","sortColumnAscending","sort","sortColumnDescending","a","b","sortColumnReverse","sortRowAscending","isIntegerOrder","valueA","valueB","sortRowDescending","sortRowReverse","CachingModule","cachingLimit","_checkTypeString","_checkTypeFunction","_checkWebSocketConnection","_webSocket","WebSocket","OPEN","CONNECTING","_isCachingModule","_LRUCache","onopen","onmessage","onclose","onerror","webSocketProtocol","webSocketEndPoint","LRUCache","ApiGet","_apiLink","_resourcePath","EventEmitter","ApiLink","ApiPost","_serviceCmd","ApiPut","ApiPatch","ApiDelete","ApiGetUrl","_url","ApiPostUrl","ApiPutUrl","ApiPatchUrl","ApiDeleteUrl","monthNameFormat","requestDw","setDateFormat","setTimeFormat","setDatetimeFormat","setYearFormat","setMonthFormat","setMonthNameFormat","setYearMonthFormat","setDayFormat","setDayOfWeekFormat","setHourFormat","setHourMinuteFormat","setMinuteFormat","setSecondFormat","setNumberFormat","setCharByteLess2047","setCharByteLess65535","setCharByteGreater65535","getDateFormat","getTimeFormat","getDatetimeFormat","getYearFormat","getMonthFormat","getMonthNameFormat","getYearMonthFormat","getDayFormat","getDayOfWeekFormat","getHourFormat","getHourMinuteFormat","getMinuteFormat","getSecondFormat","getCharByteLess2047","getCharByteLess65535","getCharByteGreater65535","setShieldURL","setExposeIpList","setIsFreeze","bool","setIsPossibleGoBack","setIsPossibleOpenDevTool","getShieldURL","getExposeIpList","getIsFreeze","getIsPossibleGoBack","getIsPossibleOpenDevTool","setConvertValue","setProtocol","setDomain","setControllerPath","setWebSocketProtocol","setWebSocketEndPoint","setCachingLimit","getProtocol","getDomain","getControllerPath","getTimeout","getWebSocketProtocol","getWebSocketEndPoint","getCachingLimit","setBeforeGetRequst","setBeforePostRequst","setBeforePutRequst","setBeforePatchRequst","setBeforeDeleteRequst","setInterceptApiResult","setInterceptApiError","HisonCore"],"sourceRoot":""}